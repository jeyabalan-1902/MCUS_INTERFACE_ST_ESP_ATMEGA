
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c78  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a30  08010e48  08010e48  00009e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011878  08011878  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011878  08011878  0000a878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011880  08011880  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011880  08011880  0000a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011884  08011884  0000a884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08011888  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001317c  20000074  080118fc  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200131f0  080118fc  0000b1f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cf9  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003deb  00000000  00000000  00023d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00027b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c4  00000000  00000000  00029278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259db  00000000  00000000  0002a43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd37  00000000  00000000  0004fe17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de5c7  00000000  00000000  0006bb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068dc  00000000  00000000  0014a158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00150a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000074 	.word	0x20000074
 80081ec:	00000000 	.word	0x00000000
 80081f0:	08010e30 	.word	0x08010e30

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	20000078 	.word	0x20000078
 800820c:	08010e30 	.word	0x08010e30

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr
	...

08008230 <memchr>:
 8008230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008234:	2a10      	cmp	r2, #16
 8008236:	db2b      	blt.n	8008290 <memchr+0x60>
 8008238:	f010 0f07 	tst.w	r0, #7
 800823c:	d008      	beq.n	8008250 <memchr+0x20>
 800823e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008242:	3a01      	subs	r2, #1
 8008244:	428b      	cmp	r3, r1
 8008246:	d02d      	beq.n	80082a4 <memchr+0x74>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	b342      	cbz	r2, 80082a0 <memchr+0x70>
 800824e:	d1f6      	bne.n	800823e <memchr+0xe>
 8008250:	b4f0      	push	{r4, r5, r6, r7}
 8008252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800825a:	f022 0407 	bic.w	r4, r2, #7
 800825e:	f07f 0700 	mvns.w	r7, #0
 8008262:	2300      	movs	r3, #0
 8008264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008268:	3c08      	subs	r4, #8
 800826a:	ea85 0501 	eor.w	r5, r5, r1
 800826e:	ea86 0601 	eor.w	r6, r6, r1
 8008272:	fa85 f547 	uadd8	r5, r5, r7
 8008276:	faa3 f587 	sel	r5, r3, r7
 800827a:	fa86 f647 	uadd8	r6, r6, r7
 800827e:	faa5 f687 	sel	r6, r5, r7
 8008282:	b98e      	cbnz	r6, 80082a8 <memchr+0x78>
 8008284:	d1ee      	bne.n	8008264 <memchr+0x34>
 8008286:	bcf0      	pop	{r4, r5, r6, r7}
 8008288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800828c:	f002 0207 	and.w	r2, r2, #7
 8008290:	b132      	cbz	r2, 80082a0 <memchr+0x70>
 8008292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008296:	3a01      	subs	r2, #1
 8008298:	ea83 0301 	eor.w	r3, r3, r1
 800829c:	b113      	cbz	r3, 80082a4 <memchr+0x74>
 800829e:	d1f8      	bne.n	8008292 <memchr+0x62>
 80082a0:	2000      	movs	r0, #0
 80082a2:	4770      	bx	lr
 80082a4:	3801      	subs	r0, #1
 80082a6:	4770      	bx	lr
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	bf06      	itte	eq
 80082ac:	4635      	moveq	r5, r6
 80082ae:	3803      	subeq	r0, #3
 80082b0:	3807      	subne	r0, #7
 80082b2:	f015 0f01 	tst.w	r5, #1
 80082b6:	d107      	bne.n	80082c8 <memchr+0x98>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082be:	bf02      	ittt	eq
 80082c0:	3001      	addeq	r0, #1
 80082c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082c6:	3001      	addeq	r0, #1
 80082c8:	bcf0      	pop	{r4, r5, r6, r7}
 80082ca:	3801      	subs	r0, #1
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <__aeabi_uldivmod>:
 80082d0:	b953      	cbnz	r3, 80082e8 <__aeabi_uldivmod+0x18>
 80082d2:	b94a      	cbnz	r2, 80082e8 <__aeabi_uldivmod+0x18>
 80082d4:	2900      	cmp	r1, #0
 80082d6:	bf08      	it	eq
 80082d8:	2800      	cmpeq	r0, #0
 80082da:	bf1c      	itt	ne
 80082dc:	f04f 31ff 	movne.w	r1, #4294967295
 80082e0:	f04f 30ff 	movne.w	r0, #4294967295
 80082e4:	f000 b988 	b.w	80085f8 <__aeabi_idiv0>
 80082e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082f0:	f000 f806 	bl	8008300 <__udivmoddi4>
 80082f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082fc:	b004      	add	sp, #16
 80082fe:	4770      	bx	lr

08008300 <__udivmoddi4>:
 8008300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	9d08      	ldr	r5, [sp, #32]
 8008306:	468e      	mov	lr, r1
 8008308:	4604      	mov	r4, r0
 800830a:	4688      	mov	r8, r1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d14a      	bne.n	80083a6 <__udivmoddi4+0xa6>
 8008310:	428a      	cmp	r2, r1
 8008312:	4617      	mov	r7, r2
 8008314:	d962      	bls.n	80083dc <__udivmoddi4+0xdc>
 8008316:	fab2 f682 	clz	r6, r2
 800831a:	b14e      	cbz	r6, 8008330 <__udivmoddi4+0x30>
 800831c:	f1c6 0320 	rsb	r3, r6, #32
 8008320:	fa01 f806 	lsl.w	r8, r1, r6
 8008324:	fa20 f303 	lsr.w	r3, r0, r3
 8008328:	40b7      	lsls	r7, r6
 800832a:	ea43 0808 	orr.w	r8, r3, r8
 800832e:	40b4      	lsls	r4, r6
 8008330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008334:	fa1f fc87 	uxth.w	ip, r7
 8008338:	fbb8 f1fe 	udiv	r1, r8, lr
 800833c:	0c23      	lsrs	r3, r4, #16
 800833e:	fb0e 8811 	mls	r8, lr, r1, r8
 8008342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008346:	fb01 f20c 	mul.w	r2, r1, ip
 800834a:	429a      	cmp	r2, r3
 800834c:	d909      	bls.n	8008362 <__udivmoddi4+0x62>
 800834e:	18fb      	adds	r3, r7, r3
 8008350:	f101 30ff 	add.w	r0, r1, #4294967295
 8008354:	f080 80ea 	bcs.w	800852c <__udivmoddi4+0x22c>
 8008358:	429a      	cmp	r2, r3
 800835a:	f240 80e7 	bls.w	800852c <__udivmoddi4+0x22c>
 800835e:	3902      	subs	r1, #2
 8008360:	443b      	add	r3, r7
 8008362:	1a9a      	subs	r2, r3, r2
 8008364:	b2a3      	uxth	r3, r4
 8008366:	fbb2 f0fe 	udiv	r0, r2, lr
 800836a:	fb0e 2210 	mls	r2, lr, r0, r2
 800836e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008372:	fb00 fc0c 	mul.w	ip, r0, ip
 8008376:	459c      	cmp	ip, r3
 8008378:	d909      	bls.n	800838e <__udivmoddi4+0x8e>
 800837a:	18fb      	adds	r3, r7, r3
 800837c:	f100 32ff 	add.w	r2, r0, #4294967295
 8008380:	f080 80d6 	bcs.w	8008530 <__udivmoddi4+0x230>
 8008384:	459c      	cmp	ip, r3
 8008386:	f240 80d3 	bls.w	8008530 <__udivmoddi4+0x230>
 800838a:	443b      	add	r3, r7
 800838c:	3802      	subs	r0, #2
 800838e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008392:	eba3 030c 	sub.w	r3, r3, ip
 8008396:	2100      	movs	r1, #0
 8008398:	b11d      	cbz	r5, 80083a2 <__udivmoddi4+0xa2>
 800839a:	40f3      	lsrs	r3, r6
 800839c:	2200      	movs	r2, #0
 800839e:	e9c5 3200 	strd	r3, r2, [r5]
 80083a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a6:	428b      	cmp	r3, r1
 80083a8:	d905      	bls.n	80083b6 <__udivmoddi4+0xb6>
 80083aa:	b10d      	cbz	r5, 80083b0 <__udivmoddi4+0xb0>
 80083ac:	e9c5 0100 	strd	r0, r1, [r5]
 80083b0:	2100      	movs	r1, #0
 80083b2:	4608      	mov	r0, r1
 80083b4:	e7f5      	b.n	80083a2 <__udivmoddi4+0xa2>
 80083b6:	fab3 f183 	clz	r1, r3
 80083ba:	2900      	cmp	r1, #0
 80083bc:	d146      	bne.n	800844c <__udivmoddi4+0x14c>
 80083be:	4573      	cmp	r3, lr
 80083c0:	d302      	bcc.n	80083c8 <__udivmoddi4+0xc8>
 80083c2:	4282      	cmp	r2, r0
 80083c4:	f200 8105 	bhi.w	80085d2 <__udivmoddi4+0x2d2>
 80083c8:	1a84      	subs	r4, r0, r2
 80083ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80083ce:	2001      	movs	r0, #1
 80083d0:	4690      	mov	r8, r2
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	d0e5      	beq.n	80083a2 <__udivmoddi4+0xa2>
 80083d6:	e9c5 4800 	strd	r4, r8, [r5]
 80083da:	e7e2      	b.n	80083a2 <__udivmoddi4+0xa2>
 80083dc:	2a00      	cmp	r2, #0
 80083de:	f000 8090 	beq.w	8008502 <__udivmoddi4+0x202>
 80083e2:	fab2 f682 	clz	r6, r2
 80083e6:	2e00      	cmp	r6, #0
 80083e8:	f040 80a4 	bne.w	8008534 <__udivmoddi4+0x234>
 80083ec:	1a8a      	subs	r2, r1, r2
 80083ee:	0c03      	lsrs	r3, r0, #16
 80083f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80083f4:	b280      	uxth	r0, r0
 80083f6:	b2bc      	uxth	r4, r7
 80083f8:	2101      	movs	r1, #1
 80083fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80083fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8008402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008406:	fb04 f20c 	mul.w	r2, r4, ip
 800840a:	429a      	cmp	r2, r3
 800840c:	d907      	bls.n	800841e <__udivmoddi4+0x11e>
 800840e:	18fb      	adds	r3, r7, r3
 8008410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008414:	d202      	bcs.n	800841c <__udivmoddi4+0x11c>
 8008416:	429a      	cmp	r2, r3
 8008418:	f200 80e0 	bhi.w	80085dc <__udivmoddi4+0x2dc>
 800841c:	46c4      	mov	ip, r8
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	fbb3 f2fe 	udiv	r2, r3, lr
 8008424:	fb0e 3312 	mls	r3, lr, r2, r3
 8008428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800842c:	fb02 f404 	mul.w	r4, r2, r4
 8008430:	429c      	cmp	r4, r3
 8008432:	d907      	bls.n	8008444 <__udivmoddi4+0x144>
 8008434:	18fb      	adds	r3, r7, r3
 8008436:	f102 30ff 	add.w	r0, r2, #4294967295
 800843a:	d202      	bcs.n	8008442 <__udivmoddi4+0x142>
 800843c:	429c      	cmp	r4, r3
 800843e:	f200 80ca 	bhi.w	80085d6 <__udivmoddi4+0x2d6>
 8008442:	4602      	mov	r2, r0
 8008444:	1b1b      	subs	r3, r3, r4
 8008446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800844a:	e7a5      	b.n	8008398 <__udivmoddi4+0x98>
 800844c:	f1c1 0620 	rsb	r6, r1, #32
 8008450:	408b      	lsls	r3, r1
 8008452:	fa22 f706 	lsr.w	r7, r2, r6
 8008456:	431f      	orrs	r7, r3
 8008458:	fa0e f401 	lsl.w	r4, lr, r1
 800845c:	fa20 f306 	lsr.w	r3, r0, r6
 8008460:	fa2e fe06 	lsr.w	lr, lr, r6
 8008464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008468:	4323      	orrs	r3, r4
 800846a:	fa00 f801 	lsl.w	r8, r0, r1
 800846e:	fa1f fc87 	uxth.w	ip, r7
 8008472:	fbbe f0f9 	udiv	r0, lr, r9
 8008476:	0c1c      	lsrs	r4, r3, #16
 8008478:	fb09 ee10 	mls	lr, r9, r0, lr
 800847c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008480:	fb00 fe0c 	mul.w	lr, r0, ip
 8008484:	45a6      	cmp	lr, r4
 8008486:	fa02 f201 	lsl.w	r2, r2, r1
 800848a:	d909      	bls.n	80084a0 <__udivmoddi4+0x1a0>
 800848c:	193c      	adds	r4, r7, r4
 800848e:	f100 3aff 	add.w	sl, r0, #4294967295
 8008492:	f080 809c 	bcs.w	80085ce <__udivmoddi4+0x2ce>
 8008496:	45a6      	cmp	lr, r4
 8008498:	f240 8099 	bls.w	80085ce <__udivmoddi4+0x2ce>
 800849c:	3802      	subs	r0, #2
 800849e:	443c      	add	r4, r7
 80084a0:	eba4 040e 	sub.w	r4, r4, lr
 80084a4:	fa1f fe83 	uxth.w	lr, r3
 80084a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80084ac:	fb09 4413 	mls	r4, r9, r3, r4
 80084b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80084b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80084b8:	45a4      	cmp	ip, r4
 80084ba:	d908      	bls.n	80084ce <__udivmoddi4+0x1ce>
 80084bc:	193c      	adds	r4, r7, r4
 80084be:	f103 3eff 	add.w	lr, r3, #4294967295
 80084c2:	f080 8082 	bcs.w	80085ca <__udivmoddi4+0x2ca>
 80084c6:	45a4      	cmp	ip, r4
 80084c8:	d97f      	bls.n	80085ca <__udivmoddi4+0x2ca>
 80084ca:	3b02      	subs	r3, #2
 80084cc:	443c      	add	r4, r7
 80084ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80084d2:	eba4 040c 	sub.w	r4, r4, ip
 80084d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80084da:	4564      	cmp	r4, ip
 80084dc:	4673      	mov	r3, lr
 80084de:	46e1      	mov	r9, ip
 80084e0:	d362      	bcc.n	80085a8 <__udivmoddi4+0x2a8>
 80084e2:	d05f      	beq.n	80085a4 <__udivmoddi4+0x2a4>
 80084e4:	b15d      	cbz	r5, 80084fe <__udivmoddi4+0x1fe>
 80084e6:	ebb8 0203 	subs.w	r2, r8, r3
 80084ea:	eb64 0409 	sbc.w	r4, r4, r9
 80084ee:	fa04 f606 	lsl.w	r6, r4, r6
 80084f2:	fa22 f301 	lsr.w	r3, r2, r1
 80084f6:	431e      	orrs	r6, r3
 80084f8:	40cc      	lsrs	r4, r1
 80084fa:	e9c5 6400 	strd	r6, r4, [r5]
 80084fe:	2100      	movs	r1, #0
 8008500:	e74f      	b.n	80083a2 <__udivmoddi4+0xa2>
 8008502:	fbb1 fcf2 	udiv	ip, r1, r2
 8008506:	0c01      	lsrs	r1, r0, #16
 8008508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800850c:	b280      	uxth	r0, r0
 800850e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008512:	463b      	mov	r3, r7
 8008514:	4638      	mov	r0, r7
 8008516:	463c      	mov	r4, r7
 8008518:	46b8      	mov	r8, r7
 800851a:	46be      	mov	lr, r7
 800851c:	2620      	movs	r6, #32
 800851e:	fbb1 f1f7 	udiv	r1, r1, r7
 8008522:	eba2 0208 	sub.w	r2, r2, r8
 8008526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800852a:	e766      	b.n	80083fa <__udivmoddi4+0xfa>
 800852c:	4601      	mov	r1, r0
 800852e:	e718      	b.n	8008362 <__udivmoddi4+0x62>
 8008530:	4610      	mov	r0, r2
 8008532:	e72c      	b.n	800838e <__udivmoddi4+0x8e>
 8008534:	f1c6 0220 	rsb	r2, r6, #32
 8008538:	fa2e f302 	lsr.w	r3, lr, r2
 800853c:	40b7      	lsls	r7, r6
 800853e:	40b1      	lsls	r1, r6
 8008540:	fa20 f202 	lsr.w	r2, r0, r2
 8008544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008548:	430a      	orrs	r2, r1
 800854a:	fbb3 f8fe 	udiv	r8, r3, lr
 800854e:	b2bc      	uxth	r4, r7
 8008550:	fb0e 3318 	mls	r3, lr, r8, r3
 8008554:	0c11      	lsrs	r1, r2, #16
 8008556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800855a:	fb08 f904 	mul.w	r9, r8, r4
 800855e:	40b0      	lsls	r0, r6
 8008560:	4589      	cmp	r9, r1
 8008562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008566:	b280      	uxth	r0, r0
 8008568:	d93e      	bls.n	80085e8 <__udivmoddi4+0x2e8>
 800856a:	1879      	adds	r1, r7, r1
 800856c:	f108 3cff 	add.w	ip, r8, #4294967295
 8008570:	d201      	bcs.n	8008576 <__udivmoddi4+0x276>
 8008572:	4589      	cmp	r9, r1
 8008574:	d81f      	bhi.n	80085b6 <__udivmoddi4+0x2b6>
 8008576:	eba1 0109 	sub.w	r1, r1, r9
 800857a:	fbb1 f9fe 	udiv	r9, r1, lr
 800857e:	fb09 f804 	mul.w	r8, r9, r4
 8008582:	fb0e 1119 	mls	r1, lr, r9, r1
 8008586:	b292      	uxth	r2, r2
 8008588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800858c:	4542      	cmp	r2, r8
 800858e:	d229      	bcs.n	80085e4 <__udivmoddi4+0x2e4>
 8008590:	18ba      	adds	r2, r7, r2
 8008592:	f109 31ff 	add.w	r1, r9, #4294967295
 8008596:	d2c4      	bcs.n	8008522 <__udivmoddi4+0x222>
 8008598:	4542      	cmp	r2, r8
 800859a:	d2c2      	bcs.n	8008522 <__udivmoddi4+0x222>
 800859c:	f1a9 0102 	sub.w	r1, r9, #2
 80085a0:	443a      	add	r2, r7
 80085a2:	e7be      	b.n	8008522 <__udivmoddi4+0x222>
 80085a4:	45f0      	cmp	r8, lr
 80085a6:	d29d      	bcs.n	80084e4 <__udivmoddi4+0x1e4>
 80085a8:	ebbe 0302 	subs.w	r3, lr, r2
 80085ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80085b0:	3801      	subs	r0, #1
 80085b2:	46e1      	mov	r9, ip
 80085b4:	e796      	b.n	80084e4 <__udivmoddi4+0x1e4>
 80085b6:	eba7 0909 	sub.w	r9, r7, r9
 80085ba:	4449      	add	r1, r9
 80085bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80085c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80085c4:	fb09 f804 	mul.w	r8, r9, r4
 80085c8:	e7db      	b.n	8008582 <__udivmoddi4+0x282>
 80085ca:	4673      	mov	r3, lr
 80085cc:	e77f      	b.n	80084ce <__udivmoddi4+0x1ce>
 80085ce:	4650      	mov	r0, sl
 80085d0:	e766      	b.n	80084a0 <__udivmoddi4+0x1a0>
 80085d2:	4608      	mov	r0, r1
 80085d4:	e6fd      	b.n	80083d2 <__udivmoddi4+0xd2>
 80085d6:	443b      	add	r3, r7
 80085d8:	3a02      	subs	r2, #2
 80085da:	e733      	b.n	8008444 <__udivmoddi4+0x144>
 80085dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80085e0:	443b      	add	r3, r7
 80085e2:	e71c      	b.n	800841e <__udivmoddi4+0x11e>
 80085e4:	4649      	mov	r1, r9
 80085e6:	e79c      	b.n	8008522 <__udivmoddi4+0x222>
 80085e8:	eba1 0109 	sub.w	r1, r1, r9
 80085ec:	46c4      	mov	ip, r8
 80085ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80085f2:	fb09 f804 	mul.w	r8, r9, r4
 80085f6:	e7c4      	b.n	8008582 <__udivmoddi4+0x282>

080085f8 <__aeabi_idiv0>:
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop

080085fc <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80085fc:	b590      	push	{r4, r7, lr}
 80085fe:	b085      	sub	sp, #20
 8008600:	af02      	add	r7, sp, #8
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	4611      	mov	r1, r2
 8008608:	461a      	mov	r2, r3
 800860a:	4623      	mov	r3, r4
 800860c:	80fb      	strh	r3, [r7, #6]
 800860e:	4603      	mov	r3, r0
 8008610:	80bb      	strh	r3, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	807b      	strh	r3, [r7, #2]
 8008616:	4613      	mov	r3, r2
 8008618:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800861a:	88f8      	ldrh	r0, [r7, #6]
 800861c:	88b9      	ldrh	r1, [r7, #4]
 800861e:	887a      	ldrh	r2, [r7, #2]
 8008620:	883c      	ldrh	r4, [r7, #0]
 8008622:	8b3b      	ldrh	r3, [r7, #24]
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	4623      	mov	r3, r4
 8008628:	f000 fa88 	bl	8008b3c <ST7735_FillRectangle>
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	bd90      	pop	{r4, r7, pc}

08008634 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af02      	add	r7, sp, #8
 800863a:	4603      	mov	r3, r0
 800863c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800863e:	4b08      	ldr	r3, [pc, #32]	@ (8008660 <fillScreen+0x2c>)
 8008640:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008644:	4b07      	ldr	r3, [pc, #28]	@ (8008664 <fillScreen+0x30>)
 8008646:	f9b3 1000 	ldrsh.w	r1, [r3]
 800864a:	88fb      	ldrh	r3, [r7, #6]
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	460b      	mov	r3, r1
 8008650:	2100      	movs	r1, #0
 8008652:	2000      	movs	r0, #0
 8008654:	f7ff ffd2 	bl	80085fc <fillRect>
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000090 	.word	0x20000090
 8008664:	20000092 	.word	0x20000092

08008668 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800866c:	2200      	movs	r2, #0
 800866e:	2102      	movs	r1, #2
 8008670:	4802      	ldr	r0, [pc, #8]	@ (800867c <ST7735_Select+0x14>)
 8008672:	f001 fe79 	bl	800a368 <HAL_GPIO_WritePin>
}
 8008676:	bf00      	nop
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	40020000 	.word	0x40020000

08008680 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8008684:	2201      	movs	r2, #1
 8008686:	2102      	movs	r1, #2
 8008688:	4802      	ldr	r0, [pc, #8]	@ (8008694 <ST7735_Unselect+0x14>)
 800868a:	f001 fe6d 	bl	800a368 <HAL_GPIO_WritePin>
}
 800868e:	bf00      	nop
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	40020000 	.word	0x40020000

08008698 <ST7735_Reset>:

void ST7735_Reset()
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800869c:	2200      	movs	r2, #0
 800869e:	2110      	movs	r1, #16
 80086a0:	4806      	ldr	r0, [pc, #24]	@ (80086bc <ST7735_Reset+0x24>)
 80086a2:	f001 fe61 	bl	800a368 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80086a6:	2005      	movs	r0, #5
 80086a8:	f001 fb32 	bl	8009d10 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80086ac:	2201      	movs	r2, #1
 80086ae:	2110      	movs	r1, #16
 80086b0:	4802      	ldr	r0, [pc, #8]	@ (80086bc <ST7735_Reset+0x24>)
 80086b2:	f001 fe59 	bl	800a368 <HAL_GPIO_WritePin>
}
 80086b6:	bf00      	nop
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	40020000 	.word	0x40020000

080086c0 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80086ca:	2200      	movs	r2, #0
 80086cc:	2110      	movs	r1, #16
 80086ce:	4807      	ldr	r0, [pc, #28]	@ (80086ec <ST7735_WriteCommand+0x2c>)
 80086d0:	f001 fe4a 	bl	800a368 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80086d4:	1df9      	adds	r1, r7, #7
 80086d6:	f04f 33ff 	mov.w	r3, #4294967295
 80086da:	2201      	movs	r2, #1
 80086dc:	4804      	ldr	r0, [pc, #16]	@ (80086f0 <ST7735_WriteCommand+0x30>)
 80086de:	f002 fce4 	bl	800b0aa <HAL_SPI_Transmit>
}
 80086e2:	bf00      	nop
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	40020800 	.word	0x40020800
 80086f0:	20000154 	.word	0x20000154

080086f4 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80086fe:	2201      	movs	r2, #1
 8008700:	2110      	movs	r1, #16
 8008702:	4807      	ldr	r0, [pc, #28]	@ (8008720 <ST7735_WriteData+0x2c>)
 8008704:	f001 fe30 	bl	800a368 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	b29a      	uxth	r2, r3
 800870c:	f04f 33ff 	mov.w	r3, #4294967295
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	4804      	ldr	r0, [pc, #16]	@ (8008724 <ST7735_WriteData+0x30>)
 8008714:	f002 fcc9 	bl	800b0aa <HAL_SPI_Transmit>
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40020800 	.word	0x40020800
 8008724:	20000154 	.word	0x20000154

08008728 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800873a:	e034      	b.n	80087a6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8008746:	7afb      	ldrb	r3, [r7, #11]
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff ffb9 	bl	80086c0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8008758:	7abb      	ldrb	r3, [r7, #10]
 800875a:	b29b      	uxth	r3, r3
 800875c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008760:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8008762:	7abb      	ldrb	r3, [r7, #10]
 8008764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008768:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800876a:	7abb      	ldrb	r3, [r7, #10]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d008      	beq.n	8008782 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8008770:	7abb      	ldrb	r3, [r7, #10]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff ffbd 	bl	80086f4 <ST7735_WriteData>
            addr += numArgs;
 800877a:	7abb      	ldrb	r3, [r7, #10]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	4413      	add	r3, r2
 8008780:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8008782:	89bb      	ldrh	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00e      	beq.n	80087a6 <DisplayInit+0x7e>
            ms = *addr++;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	607a      	str	r2, [r7, #4]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8008792:	89bb      	ldrh	r3, [r7, #12]
 8008794:	2bff      	cmp	r3, #255	@ 0xff
 8008796:	d102      	bne.n	800879e <DisplayInit+0x76>
 8008798:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800879c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800879e:	89bb      	ldrh	r3, [r7, #12]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 fab5 	bl	8009d10 <HAL_Delay>
    while(numCommands--) {
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	1e5a      	subs	r2, r3, #1
 80087aa:	73fa      	strb	r2, [r7, #15]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1c5      	bne.n	800873c <DisplayInit+0x14>
        }
    }
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80087bc:	b590      	push	{r4, r7, lr}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	4611      	mov	r1, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	4623      	mov	r3, r4
 80087cc:	71fb      	strb	r3, [r7, #7]
 80087ce:	4603      	mov	r3, r0
 80087d0:	71bb      	strb	r3, [r7, #6]
 80087d2:	460b      	mov	r3, r1
 80087d4:	717b      	strb	r3, [r7, #5]
 80087d6:	4613      	mov	r3, r2
 80087d8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80087da:	202a      	movs	r0, #42	@ 0x2a
 80087dc:	f7ff ff70 	bl	80086c0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80087e0:	2300      	movs	r3, #0
 80087e2:	733b      	strb	r3, [r7, #12]
 80087e4:	4b17      	ldr	r3, [pc, #92]	@ (8008844 <ST7735_SetAddressWindow+0x88>)
 80087e6:	781a      	ldrb	r2, [r3, #0]
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	4413      	add	r3, r2
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	737b      	strb	r3, [r7, #13]
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]
 80087f4:	4b13      	ldr	r3, [pc, #76]	@ (8008844 <ST7735_SetAddressWindow+0x88>)
 80087f6:	781a      	ldrb	r2, [r3, #0]
 80087f8:	797b      	ldrb	r3, [r7, #5]
 80087fa:	4413      	add	r3, r2
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8008800:	f107 030c 	add.w	r3, r7, #12
 8008804:	2104      	movs	r1, #4
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff ff74 	bl	80086f4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800880c:	202b      	movs	r0, #43	@ 0x2b
 800880e:	f7ff ff57 	bl	80086c0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8008812:	4b0d      	ldr	r3, [pc, #52]	@ (8008848 <ST7735_SetAddressWindow+0x8c>)
 8008814:	781a      	ldrb	r2, [r3, #0]
 8008816:	79bb      	ldrb	r3, [r7, #6]
 8008818:	4413      	add	r3, r2
 800881a:	b2db      	uxtb	r3, r3
 800881c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800881e:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <ST7735_SetAddressWindow+0x8c>)
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	793b      	ldrb	r3, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	b2db      	uxtb	r3, r3
 8008828:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800882a:	f107 030c 	add.w	r3, r7, #12
 800882e:	2104      	movs	r1, #4
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff ff5f 	bl	80086f4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8008836:	202c      	movs	r0, #44	@ 0x2c
 8008838:	f7ff ff42 	bl	80086c0 <ST7735_WriteCommand>
}
 800883c:	bf00      	nop
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	bd90      	pop	{r4, r7, pc}
 8008844:	20000097 	.word	0x20000097
 8008848:	20000098 	.word	0x20000098

0800884c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8008856:	f7ff ff07 	bl	8008668 <ST7735_Select>
    ST7735_Reset();
 800885a:	f7ff ff1d 	bl	8008698 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800885e:	480c      	ldr	r0, [pc, #48]	@ (8008890 <ST7735_Init+0x44>)
 8008860:	f7ff ff62 	bl	8008728 <DisplayInit>
    DisplayInit(init_cmds2);
 8008864:	480b      	ldr	r0, [pc, #44]	@ (8008894 <ST7735_Init+0x48>)
 8008866:	f7ff ff5f 	bl	8008728 <DisplayInit>
    DisplayInit(init_cmds3);
 800886a:	480b      	ldr	r0, [pc, #44]	@ (8008898 <ST7735_Init+0x4c>)
 800886c:	f7ff ff5c 	bl	8008728 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8008870:	4b0a      	ldr	r3, [pc, #40]	@ (800889c <ST7735_Init+0x50>)
 8008872:	2200      	movs	r2, #0
 8008874:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8008876:	4b0a      	ldr	r3, [pc, #40]	@ (80088a0 <ST7735_Init+0x54>)
 8008878:	2200      	movs	r2, #0
 800887a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 f810 	bl	80088a4 <ST7735_SetRotation>
    ST7735_Unselect();
 8008884:	f7ff fefc 	bl	8008680 <ST7735_Unselect>

}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	08011048 	.word	0x08011048
 8008894:	08011080 	.word	0x08011080
 8008898:	08011090 	.word	0x08011090
 800889c:	20000095 	.word	0x20000095
 80088a0:	20000096 	.word	0x20000096

080088a4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	f003 0303 	and.w	r3, r3, #3
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	4b33      	ldr	r3, [pc, #204]	@ (8008988 <ST7735_SetRotation+0xe4>)
 80088bc:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80088be:	4b32      	ldr	r3, [pc, #200]	@ (8008988 <ST7735_SetRotation+0xe4>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d84e      	bhi.n	8008964 <ST7735_SetRotation+0xc0>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <ST7735_SetRotation+0x28>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088dd 	.word	0x080088dd
 80088d0:	080088ff 	.word	0x080088ff
 80088d4:	08008921 	.word	0x08008921
 80088d8:	08008943 	.word	0x08008943
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80088dc:	23c0      	movs	r3, #192	@ 0xc0
 80088de:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80088e0:	4b2a      	ldr	r3, [pc, #168]	@ (800898c <ST7735_SetRotation+0xe8>)
 80088e2:	22a0      	movs	r2, #160	@ 0xa0
 80088e4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80088e6:	4b2a      	ldr	r3, [pc, #168]	@ (8008990 <ST7735_SetRotation+0xec>)
 80088e8:	2280      	movs	r2, #128	@ 0x80
 80088ea:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80088ec:	4b29      	ldr	r3, [pc, #164]	@ (8008994 <ST7735_SetRotation+0xf0>)
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	4b29      	ldr	r3, [pc, #164]	@ (8008998 <ST7735_SetRotation+0xf4>)
 80088f2:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80088f4:	4b29      	ldr	r3, [pc, #164]	@ (800899c <ST7735_SetRotation+0xf8>)
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	4b29      	ldr	r3, [pc, #164]	@ (80089a0 <ST7735_SetRotation+0xfc>)
 80088fa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80088fc:	e032      	b.n	8008964 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80088fe:	23a0      	movs	r3, #160	@ 0xa0
 8008900:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8008902:	4b23      	ldr	r3, [pc, #140]	@ (8008990 <ST7735_SetRotation+0xec>)
 8008904:	22a0      	movs	r2, #160	@ 0xa0
 8008906:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8008908:	4b20      	ldr	r3, [pc, #128]	@ (800898c <ST7735_SetRotation+0xe8>)
 800890a:	2280      	movs	r2, #128	@ 0x80
 800890c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800890e:	4b21      	ldr	r3, [pc, #132]	@ (8008994 <ST7735_SetRotation+0xf0>)
 8008910:	781a      	ldrb	r2, [r3, #0]
 8008912:	4b23      	ldr	r3, [pc, #140]	@ (80089a0 <ST7735_SetRotation+0xfc>)
 8008914:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8008916:	4b21      	ldr	r3, [pc, #132]	@ (800899c <ST7735_SetRotation+0xf8>)
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	4b1f      	ldr	r3, [pc, #124]	@ (8008998 <ST7735_SetRotation+0xf4>)
 800891c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800891e:	e021      	b.n	8008964 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8008924:	4b19      	ldr	r3, [pc, #100]	@ (800898c <ST7735_SetRotation+0xe8>)
 8008926:	22a0      	movs	r2, #160	@ 0xa0
 8008928:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800892a:	4b19      	ldr	r3, [pc, #100]	@ (8008990 <ST7735_SetRotation+0xec>)
 800892c:	2280      	movs	r2, #128	@ 0x80
 800892e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8008930:	4b18      	ldr	r3, [pc, #96]	@ (8008994 <ST7735_SetRotation+0xf0>)
 8008932:	781a      	ldrb	r2, [r3, #0]
 8008934:	4b18      	ldr	r3, [pc, #96]	@ (8008998 <ST7735_SetRotation+0xf4>)
 8008936:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8008938:	4b18      	ldr	r3, [pc, #96]	@ (800899c <ST7735_SetRotation+0xf8>)
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	4b18      	ldr	r3, [pc, #96]	@ (80089a0 <ST7735_SetRotation+0xfc>)
 800893e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8008940:	e010      	b.n	8008964 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8008942:	2360      	movs	r3, #96	@ 0x60
 8008944:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8008946:	4b12      	ldr	r3, [pc, #72]	@ (8008990 <ST7735_SetRotation+0xec>)
 8008948:	22a0      	movs	r2, #160	@ 0xa0
 800894a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800894c:	4b0f      	ldr	r3, [pc, #60]	@ (800898c <ST7735_SetRotation+0xe8>)
 800894e:	2280      	movs	r2, #128	@ 0x80
 8008950:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8008952:	4b10      	ldr	r3, [pc, #64]	@ (8008994 <ST7735_SetRotation+0xf0>)
 8008954:	781a      	ldrb	r2, [r3, #0]
 8008956:	4b12      	ldr	r3, [pc, #72]	@ (80089a0 <ST7735_SetRotation+0xfc>)
 8008958:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800895a:	4b10      	ldr	r3, [pc, #64]	@ (800899c <ST7735_SetRotation+0xf8>)
 800895c:	781a      	ldrb	r2, [r3, #0]
 800895e:	4b0e      	ldr	r3, [pc, #56]	@ (8008998 <ST7735_SetRotation+0xf4>)
 8008960:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8008962:	bf00      	nop
  }
  ST7735_Select();
 8008964:	f7ff fe80 	bl	8008668 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8008968:	2036      	movs	r0, #54	@ 0x36
 800896a:	f7ff fea9 	bl	80086c0 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800896e:	f107 030f 	add.w	r3, r7, #15
 8008972:	2101      	movs	r1, #1
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff febd 	bl	80086f4 <ST7735_WriteData>
  ST7735_Unselect();
 800897a:	f7ff fe81 	bl	8008680 <ST7735_Unselect>
}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000094 	.word	0x20000094
 800898c:	20000092 	.word	0x20000092
 8008990:	20000090 	.word	0x20000090
 8008994:	20000095 	.word	0x20000095
 8008998:	20000097 	.word	0x20000097
 800899c:	20000096 	.word	0x20000096
 80089a0:	20000098 	.word	0x20000098

080089a4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80089a4:	b082      	sub	sp, #8
 80089a6:	b590      	push	{r4, r7, lr}
 80089a8:	b089      	sub	sp, #36	@ 0x24
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ae:	4603      	mov	r3, r0
 80089b0:	80fb      	strh	r3, [r7, #6]
 80089b2:	460b      	mov	r3, r1
 80089b4:	80bb      	strh	r3, [r7, #4]
 80089b6:	4613      	mov	r3, r2
 80089b8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80089ba:	88fb      	ldrh	r3, [r7, #6]
 80089bc:	b2d8      	uxtb	r0, r3
 80089be:	88bb      	ldrh	r3, [r7, #4]
 80089c0:	b2d9      	uxtb	r1, r3
 80089c2:	88fb      	ldrh	r3, [r7, #6]
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80089ca:	4413      	add	r3, r2
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b2dc      	uxtb	r4, r3
 80089d2:	88bb      	ldrh	r3, [r7, #4]
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80089da:	4413      	add	r3, r2
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	4622      	mov	r2, r4
 80089e4:	f7ff feea 	bl	80087bc <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80089e8:	2300      	movs	r3, #0
 80089ea:	61fb      	str	r3, [r7, #28]
 80089ec:	e043      	b.n	8008a76 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80089ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	3b20      	subs	r3, #32
 80089f4:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80089f8:	fb01 f303 	mul.w	r3, r1, r3
 80089fc:	4619      	mov	r1, r3
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	440b      	add	r3, r1
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	4413      	add	r3, r2
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61bb      	str	r3, [r7, #24]
 8008a0e:	e029      	b.n	8008a64 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	fa02 f303 	lsl.w	r3, r2, r3
 8008a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00e      	beq.n	8008a3e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8008a20:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	743b      	strb	r3, [r7, #16]
 8008a2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8008a30:	f107 0310 	add.w	r3, r7, #16
 8008a34:	2102      	movs	r1, #2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff fe5c 	bl	80086f4 <ST7735_WriteData>
 8008a3c:	e00f      	b.n	8008a5e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8008a3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008a42:	0a1b      	lsrs	r3, r3, #8
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	733b      	strb	r3, [r7, #12]
 8008a4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8008a52:	f107 030c 	add.w	r3, r7, #12
 8008a56:	2102      	movs	r1, #2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff fe4b 	bl	80086f4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	3301      	adds	r3, #1
 8008a62:	61bb      	str	r3, [r7, #24]
 8008a64:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008a68:	461a      	mov	r2, r3
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d3cf      	bcc.n	8008a10 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	3301      	adds	r3, #1
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d3b5      	bcc.n	80089ee <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	3724      	adds	r7, #36	@ 0x24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008a8e:	b002      	add	sp, #8
 8008a90:	4770      	bx	lr
	...

08008a94 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8008a94:	b082      	sub	sp, #8
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b086      	sub	sp, #24
 8008a9a:	af04      	add	r7, sp, #16
 8008a9c:	603a      	str	r2, [r7, #0]
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	80fb      	strh	r3, [r7, #6]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8008aa8:	f7ff fdde 	bl	8008668 <ST7735_Select>

    while(*str) {
 8008aac:	e033      	b.n	8008b16 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	7d3a      	ldrb	r2, [r7, #20]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8008b34 <ST7735_WriteString+0xa0>)
 8008ab6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008aba:	4293      	cmp	r3, r2
 8008abc:	db16      	blt.n	8008aec <ST7735_WriteString+0x58>
            x = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8008ac2:	7d7b      	ldrb	r3, [r7, #21]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	88bb      	ldrh	r3, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8008acc:	88bb      	ldrh	r3, [r7, #4]
 8008ace:	7d7a      	ldrb	r2, [r7, #21]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	4a19      	ldr	r2, [pc, #100]	@ (8008b38 <ST7735_WriteString+0xa4>)
 8008ad4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	da21      	bge.n	8008b20 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d103      	bne.n	8008aec <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	603b      	str	r3, [r7, #0]
                continue;
 8008aea:	e014      	b.n	8008b16 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781a      	ldrb	r2, [r3, #0]
 8008af0:	88b9      	ldrh	r1, [r7, #4]
 8008af2:	88f8      	ldrh	r0, [r7, #6]
 8008af4:	8c3b      	ldrh	r3, [r7, #32]
 8008af6:	9302      	str	r3, [sp, #8]
 8008af8:	8bbb      	ldrh	r3, [r7, #28]
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f7ff ff4f 	bl	80089a4 <ST7735_WriteChar>
        x += font.width;
 8008b06:	7d3b      	ldrb	r3, [r7, #20]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	80fb      	strh	r3, [r7, #6]
        str++;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	603b      	str	r3, [r7, #0]
    while(*str) {
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1c7      	bne.n	8008aae <ST7735_WriteString+0x1a>
 8008b1e:	e000      	b.n	8008b22 <ST7735_WriteString+0x8e>
                break;
 8008b20:	bf00      	nop
    }

    ST7735_Unselect();
 8008b22:	f7ff fdad 	bl	8008680 <ST7735_Unselect>
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b30:	b002      	add	sp, #8
 8008b32:	4770      	bx	lr
 8008b34:	20000090 	.word	0x20000090
 8008b38:	20000092 	.word	0x20000092

08008b3c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8008b3c:	b590      	push	{r4, r7, lr}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4623      	mov	r3, r4
 8008b4c:	80fb      	strh	r3, [r7, #6]
 8008b4e:	4603      	mov	r3, r0
 8008b50:	80bb      	strh	r3, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	807b      	strh	r3, [r7, #2]
 8008b56:	4613      	mov	r3, r2
 8008b58:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8008b5a:	88fb      	ldrh	r3, [r7, #6]
 8008b5c:	4a37      	ldr	r2, [pc, #220]	@ (8008c3c <ST7735_FillRectangle+0x100>)
 8008b5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008b62:	4293      	cmp	r3, r2
 8008b64:	da66      	bge.n	8008c34 <ST7735_FillRectangle+0xf8>
 8008b66:	88bb      	ldrh	r3, [r7, #4]
 8008b68:	4a35      	ldr	r2, [pc, #212]	@ (8008c40 <ST7735_FillRectangle+0x104>)
 8008b6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	da60      	bge.n	8008c34 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8008b72:	88fa      	ldrh	r2, [r7, #6]
 8008b74:	887b      	ldrh	r3, [r7, #2]
 8008b76:	4413      	add	r3, r2
 8008b78:	4a30      	ldr	r2, [pc, #192]	@ (8008c3c <ST7735_FillRectangle+0x100>)
 8008b7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	dd06      	ble.n	8008b90 <ST7735_FillRectangle+0x54>
 8008b82:	4b2e      	ldr	r3, [pc, #184]	@ (8008c3c <ST7735_FillRectangle+0x100>)
 8008b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8008b90:	88ba      	ldrh	r2, [r7, #4]
 8008b92:	883b      	ldrh	r3, [r7, #0]
 8008b94:	4413      	add	r3, r2
 8008b96:	4a2a      	ldr	r2, [pc, #168]	@ (8008c40 <ST7735_FillRectangle+0x104>)
 8008b98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	dd06      	ble.n	8008bae <ST7735_FillRectangle+0x72>
 8008ba0:	4b27      	ldr	r3, [pc, #156]	@ (8008c40 <ST7735_FillRectangle+0x104>)
 8008ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	88bb      	ldrh	r3, [r7, #4]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8008bae:	f7ff fd5b 	bl	8008668 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	b2d8      	uxtb	r0, r3
 8008bb6:	88bb      	ldrh	r3, [r7, #4]
 8008bb8:	b2d9      	uxtb	r1, r3
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	887b      	ldrh	r3, [r7, #2]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	4413      	add	r3, r2
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	b2dc      	uxtb	r4, r3
 8008bca:	88bb      	ldrh	r3, [r7, #4]
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	883b      	ldrh	r3, [r7, #0]
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	4413      	add	r3, r2
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	4622      	mov	r2, r4
 8008bdc:	f7ff fdee 	bl	80087bc <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8008be0:	8c3b      	ldrh	r3, [r7, #32]
 8008be2:	0a1b      	lsrs	r3, r3, #8
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	733b      	strb	r3, [r7, #12]
 8008bea:	8c3b      	ldrh	r3, [r7, #32]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	2110      	movs	r1, #16
 8008bf4:	4813      	ldr	r0, [pc, #76]	@ (8008c44 <ST7735_FillRectangle+0x108>)
 8008bf6:	f001 fbb7 	bl	800a368 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8008bfa:	883b      	ldrh	r3, [r7, #0]
 8008bfc:	80bb      	strh	r3, [r7, #4]
 8008bfe:	e013      	b.n	8008c28 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8008c00:	887b      	ldrh	r3, [r7, #2]
 8008c02:	80fb      	strh	r3, [r7, #6]
 8008c04:	e00a      	b.n	8008c1c <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8008c06:	f107 010c 	add.w	r1, r7, #12
 8008c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0e:	2202      	movs	r2, #2
 8008c10:	480d      	ldr	r0, [pc, #52]	@ (8008c48 <ST7735_FillRectangle+0x10c>)
 8008c12:	f002 fa4a 	bl	800b0aa <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	80fb      	strh	r3, [r7, #6]
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f1      	bne.n	8008c06 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8008c22:	88bb      	ldrh	r3, [r7, #4]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	80bb      	strh	r3, [r7, #4]
 8008c28:	88bb      	ldrh	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e8      	bne.n	8008c00 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8008c2e:	f7ff fd27 	bl	8008680 <ST7735_Unselect>
 8008c32:	e000      	b.n	8008c36 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8008c34:	bf00      	nop
}
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd90      	pop	{r4, r7, pc}
 8008c3c:	20000090 	.word	0x20000090
 8008c40:	20000092 	.word	0x20000092
 8008c44:	40020800 	.word	0x40020800
 8008c48:	20000154 	.word	0x20000154

08008c4c <InitializeDisplay>:

uint8_t current_line = 0;
char display_buffer[MAX_DISPLAY_LINES][23];

void InitializeDisplay(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af04      	add	r7, sp, #16
	printf("Application started\n");
 8008c52:	4825      	ldr	r0, [pc, #148]	@ (8008ce8 <InitializeDisplay+0x9c>)
 8008c54:	f007 f898 	bl	800fd88 <puts>
	printf("Touch application running\n");
 8008c58:	4824      	ldr	r0, [pc, #144]	@ (8008cec <InitializeDisplay+0xa0>)
 8008c5a:	f007 f895 	bl	800fd88 <puts>
    ST7735_Init(0);
 8008c5e:	2000      	movs	r0, #0
 8008c60:	f7ff fdf4 	bl	800884c <ST7735_Init>
    fillScreen(BLACK);
 8008c64:	2000      	movs	r0, #0
 8008c66:	f7ff fce5 	bl	8008634 <fillScreen>
    ST7735_SetRotation(1);
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	f7ff fe1a 	bl	80088a4 <ST7735_SetRotation>
    // Clear display buffer
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 8008c70:	2300      	movs	r3, #0
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	e00f      	b.n	8008c96 <InitializeDisplay+0x4a>
        memset(display_buffer[i], 0, 23);
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	4413      	add	r3, r2
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	4a1b      	ldr	r2, [pc, #108]	@ (8008cf0 <InitializeDisplay+0xa4>)
 8008c84:	4413      	add	r3, r2
 8008c86:	2217      	movs	r2, #23
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f007 f97c 	bl	800ff88 <memset>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3301      	adds	r3, #1
 8008c94:	607b      	str	r3, [r7, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b07      	cmp	r3, #7
 8008c9a:	ddec      	ble.n	8008c76 <InitializeDisplay+0x2a>
    }
    current_line = 0;
 8008c9c:	4b15      	ldr	r3, [pc, #84]	@ (8008cf4 <InitializeDisplay+0xa8>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]

    // Display header
    ST7735_WriteString(5, 5, "Application v3.0", Font_7x10, GREEN, BLACK);
 8008ca2:	4b15      	ldr	r3, [pc, #84]	@ (8008cf8 <InitializeDisplay+0xac>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	9202      	str	r2, [sp, #8]
 8008ca8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8008cac:	9201      	str	r2, [sp, #4]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	9200      	str	r2, [sp, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a11      	ldr	r2, [pc, #68]	@ (8008cfc <InitializeDisplay+0xb0>)
 8008cb6:	2105      	movs	r1, #5
 8008cb8:	2005      	movs	r0, #5
 8008cba:	f7ff feeb 	bl	8008a94 <ST7735_WriteString>
    ST7735_WriteString(5, 18, "----TOUCH APP----", Font_7x10, YELLOW, BLACK);
 8008cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8008cf8 <InitializeDisplay+0xac>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	9202      	str	r2, [sp, #8]
 8008cc4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8008cc8:	9201      	str	r2, [sp, #4]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	9200      	str	r2, [sp, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8008d00 <InitializeDisplay+0xb4>)
 8008cd2:	2112      	movs	r1, #18
 8008cd4:	2005      	movs	r0, #5
 8008cd6:	f7ff fedd 	bl	8008a94 <ST7735_WriteString>
    printf("Touch application running\n");
 8008cda:	4804      	ldr	r0, [pc, #16]	@ (8008cec <InitializeDisplay+0xa0>)
 8008cdc:	f007 f854 	bl	800fd88 <puts>
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	08010e48 	.word	0x08010e48
 8008cec:	08010e5c 	.word	0x08010e5c
 8008cf0:	2000009c 	.word	0x2000009c
 8008cf4:	20000099 	.word	0x20000099
 8008cf8:	20000000 	.word	0x20000000
 8008cfc:	08010e78 	.word	0x08010e78
 8008d00:	08010e8c 	.word	0x08010e8c

08008d04 <ClearDisplay>:


void ClearDisplay(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af04      	add	r7, sp, #16
    fillScreen(BLACK);
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f7ff fc92 	bl	8008634 <fillScreen>
    current_line = 0;
 8008d10:	4b1c      	ldr	r3, [pc, #112]	@ (8008d84 <ClearDisplay+0x80>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]

    // Redraw header
    ST7735_WriteString(5, 5, "Application v3.0", Font_7x10, GREEN, BLACK);
 8008d16:	4b1c      	ldr	r3, [pc, #112]	@ (8008d88 <ClearDisplay+0x84>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	9202      	str	r2, [sp, #8]
 8008d1c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8008d20:	9201      	str	r2, [sp, #4]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	9200      	str	r2, [sp, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a18      	ldr	r2, [pc, #96]	@ (8008d8c <ClearDisplay+0x88>)
 8008d2a:	2105      	movs	r1, #5
 8008d2c:	2005      	movs	r0, #5
 8008d2e:	f7ff feb1 	bl	8008a94 <ST7735_WriteString>
    ST7735_WriteString(5, 18, "----TOUCH APP----", Font_7x10, YELLOW, BLACK);
 8008d32:	4b15      	ldr	r3, [pc, #84]	@ (8008d88 <ClearDisplay+0x84>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	9202      	str	r2, [sp, #8]
 8008d38:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8008d3c:	9201      	str	r2, [sp, #4]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	9200      	str	r2, [sp, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a12      	ldr	r2, [pc, #72]	@ (8008d90 <ClearDisplay+0x8c>)
 8008d46:	2112      	movs	r1, #18
 8008d48:	2005      	movs	r0, #5
 8008d4a:	f7ff fea3 	bl	8008a94 <ST7735_WriteString>

    // Clear display buffer
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 8008d4e:	2300      	movs	r3, #0
 8008d50:	607b      	str	r3, [r7, #4]
 8008d52:	e00f      	b.n	8008d74 <ClearDisplay+0x70>
        memset(display_buffer[i], 0, 23);
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	4613      	mov	r3, r2
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	4413      	add	r3, r2
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	1a9b      	subs	r3, r3, r2
 8008d60:	4a0c      	ldr	r2, [pc, #48]	@ (8008d94 <ClearDisplay+0x90>)
 8008d62:	4413      	add	r3, r2
 8008d64:	2217      	movs	r2, #23
 8008d66:	2100      	movs	r1, #0
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f007 f90d 	bl	800ff88 <memset>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3301      	adds	r3, #1
 8008d72:	607b      	str	r3, [r7, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b07      	cmp	r3, #7
 8008d78:	ddec      	ble.n	8008d54 <ClearDisplay+0x50>
    }
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	20000099 	.word	0x20000099
 8008d88:	20000000 	.word	0x20000000
 8008d8c:	08010e78 	.word	0x08010e78
 8008d90:	08010e8c 	.word	0x08010e8c
 8008d94:	2000009c 	.word	0x2000009c

08008d98 <DisplayMessage>:
    }
}


void DisplayMessage(const char* message)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af04      	add	r7, sp, #16
 8008d9e:	6078      	str	r0, [r7, #4]
    if(!message) return;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d04b      	beq.n	8008e3e <DisplayMessage+0xa6>

    // If we've reached the bottom, scroll up
    if(current_line >= MAX_DISPLAY_LINES) {
 8008da6:	4b28      	ldr	r3, [pc, #160]	@ (8008e48 <DisplayMessage+0xb0>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b07      	cmp	r3, #7
 8008dac:	d904      	bls.n	8008db8 <DisplayMessage+0x20>
        ClearDisplay();
 8008dae:	f7ff ffa9 	bl	8008d04 <ClearDisplay>
        //current_line = MAX_DISPLAY_LINES - 1;
        current_line = 0;
 8008db2:	4b25      	ldr	r3, [pc, #148]	@ (8008e48 <DisplayMessage+0xb0>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
    }

    strncpy(display_buffer[current_line], message, 22);
 8008db8:	4b23      	ldr	r3, [pc, #140]	@ (8008e48 <DisplayMessage+0xb0>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	4413      	add	r3, r2
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	1a9b      	subs	r3, r3, r2
 8008dc8:	4a20      	ldr	r2, [pc, #128]	@ (8008e4c <DisplayMessage+0xb4>)
 8008dca:	4413      	add	r3, r2
 8008dcc:	2216      	movs	r2, #22
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f007 f8e1 	bl	800ff98 <strncpy>
    display_buffer[current_line][22] = '\0';
 8008dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8008e48 <DisplayMessage+0xb0>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	491b      	ldr	r1, [pc, #108]	@ (8008e4c <DisplayMessage+0xb4>)
 8008dde:	4613      	mov	r3, r2
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	4413      	add	r3, r2
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	1a9b      	subs	r3, r3, r2
 8008de8:	440b      	add	r3, r1
 8008dea:	3316      	adds	r3, #22
 8008dec:	2200      	movs	r2, #0
 8008dee:	701a      	strb	r2, [r3, #0]

    // Display the message
    ST7735_WriteString(5, 30 + (current_line * LINE_HEIGHT), display_buffer[current_line], Font_7x10, WHITE, BLACK);
 8008df0:	4b15      	ldr	r3, [pc, #84]	@ (8008e48 <DisplayMessage+0xb0>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	0052      	lsls	r2, r2, #1
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	331e      	adds	r3, #30
 8008e00:	b299      	uxth	r1, r3
 8008e02:	4b11      	ldr	r3, [pc, #68]	@ (8008e48 <DisplayMessage+0xb0>)
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	4613      	mov	r3, r2
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	4413      	add	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	1a9b      	subs	r3, r3, r2
 8008e12:	4a0e      	ldr	r2, [pc, #56]	@ (8008e4c <DisplayMessage+0xb4>)
 8008e14:	1898      	adds	r0, r3, r2
 8008e16:	4b0e      	ldr	r3, [pc, #56]	@ (8008e50 <DisplayMessage+0xb8>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	9202      	str	r2, [sp, #8]
 8008e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e20:	9201      	str	r2, [sp, #4]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	9200      	str	r2, [sp, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4602      	mov	r2, r0
 8008e2a:	2005      	movs	r0, #5
 8008e2c:	f7ff fe32 	bl	8008a94 <ST7735_WriteString>

    current_line++;
 8008e30:	4b05      	ldr	r3, [pc, #20]	@ (8008e48 <DisplayMessage+0xb0>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	4b03      	ldr	r3, [pc, #12]	@ (8008e48 <DisplayMessage+0xb0>)
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	e000      	b.n	8008e40 <DisplayMessage+0xa8>
    if(!message) return;
 8008e3e:	bf00      	nop
}
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20000099 	.word	0x20000099
 8008e4c:	2000009c 	.word	0x2000009c
 8008e50:	20000000 	.word	0x20000000

08008e54 <print_To_display>:

void print_To_display(char *format,...)
{
 8008e54:	b40f      	push	{r0, r1, r2, r3}
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b096      	sub	sp, #88	@ 0x58
 8008e5a:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8008e5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008e60:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8008e62:	f107 0308 	add.w	r3, r7, #8
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f006 ffee 	bl	800fe4c <vsiprintf>
	// Also display on screen
	DisplayMessage(str);
 8008e70:	f107 0308 	add.w	r3, r7, #8
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff ff8f 	bl	8008d98 <DisplayMessage>
    va_start(args, format);
    vsprintf(str, format, args);
    DisplayMessage(str);
    va_end(args);
#endif
}
 8008e7a:	bf00      	nop
 8008e7c:	3758      	adds	r7, #88	@ 0x58
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e84:	b004      	add	sp, #16
 8008e86:	4770      	bx	lr

08008e88 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8008e90:	1d39      	adds	r1, r7, #4
 8008e92:	f04f 33ff 	mov.w	r3, #4294967295
 8008e96:	2201      	movs	r2, #1
 8008e98:	4803      	ldr	r0, [pc, #12]	@ (8008ea8 <__io_putchar+0x20>)
 8008e9a:	f003 fa83 	bl	800c3a4 <HAL_UART_Transmit>
	return ch;
 8008e9e:	687b      	ldr	r3, [r7, #4]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20000204 	.word	0x20000204

08008eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008eb0:	f000 feec 	bl	8009c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008eb4:	f000 f810 	bl	8008ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008eb8:	f000 f940 	bl	800913c <MX_GPIO_Init>
  MX_SPI1_Init();
 8008ebc:	f000 f87e 	bl	8008fbc <MX_SPI1_Init>
  MX_SPI2_Init();
 8008ec0:	f000 f8b4 	bl	800902c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8008ec4:	f000 f8e6 	bl	8009094 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8008ec8:	f000 f90e 	bl	80090e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  InitializeDisplay();
 8008ecc:	f7ff febe 	bl	8008c4c <InitializeDisplay>
  setup_freeRTOS();
 8008ed0:	f000 fc90 	bl	80097f4 <setup_freeRTOS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008ed4:	bf00      	nop
 8008ed6:	e7fd      	b.n	8008ed4 <main+0x28>

08008ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b094      	sub	sp, #80	@ 0x50
 8008edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ede:	f107 031c 	add.w	r3, r7, #28
 8008ee2:	2234      	movs	r2, #52	@ 0x34
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f007 f84e 	bl	800ff88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008eec:	f107 0308 	add.w	r3, r7, #8
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	605a      	str	r2, [r3, #4]
 8008ef6:	609a      	str	r2, [r3, #8]
 8008ef8:	60da      	str	r2, [r3, #12]
 8008efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008efc:	2300      	movs	r3, #0
 8008efe:	607b      	str	r3, [r7, #4]
 8008f00:	4b2c      	ldr	r3, [pc, #176]	@ (8008fb4 <SystemClock_Config+0xdc>)
 8008f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f04:	4a2b      	ldr	r2, [pc, #172]	@ (8008fb4 <SystemClock_Config+0xdc>)
 8008f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f0c:	4b29      	ldr	r3, [pc, #164]	@ (8008fb4 <SystemClock_Config+0xdc>)
 8008f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f18:	2300      	movs	r3, #0
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	4b26      	ldr	r3, [pc, #152]	@ (8008fb8 <SystemClock_Config+0xe0>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a25      	ldr	r2, [pc, #148]	@ (8008fb8 <SystemClock_Config+0xe0>)
 8008f22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	4b23      	ldr	r3, [pc, #140]	@ (8008fb8 <SystemClock_Config+0xe0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008f30:	603b      	str	r3, [r7, #0]
 8008f32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008f34:	2302      	movs	r3, #2
 8008f36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f40:	2302      	movs	r3, #2
 8008f42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008f48:	2308      	movs	r3, #8
 8008f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8008f4c:	23b4      	movs	r3, #180	@ 0xb4
 8008f4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008f50:	2302      	movs	r3, #2
 8008f52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008f54:	2302      	movs	r3, #2
 8008f56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008f58:	2302      	movs	r3, #2
 8008f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f5c:	f107 031c 	add.w	r3, r7, #28
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 fd7b 	bl	800aa5c <HAL_RCC_OscConfig>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008f6c:	f000 f980 	bl	8009270 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008f70:	f001 fa2e 	bl	800a3d0 <HAL_PWREx_EnableOverDrive>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8008f7a:	f000 f979 	bl	8009270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f7e:	230f      	movs	r3, #15
 8008f80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f82:	2302      	movs	r3, #2
 8008f84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f86:	2300      	movs	r3, #0
 8008f88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008f8a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f94:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008f96:	f107 0308 	add.w	r3, r7, #8
 8008f9a:	2105      	movs	r1, #5
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 fa67 	bl	800a470 <HAL_RCC_ClockConfig>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8008fa8:	f000 f962 	bl	8009270 <Error_Handler>
  }
}
 8008fac:	bf00      	nop
 8008fae:	3750      	adds	r7, #80	@ 0x50
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	40023800 	.word	0x40023800
 8008fb8:	40007000 	.word	0x40007000

08008fbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008fc0:	4b18      	ldr	r3, [pc, #96]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008fc2:	4a19      	ldr	r2, [pc, #100]	@ (8009028 <MX_SPI1_Init+0x6c>)
 8008fc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008fc6:	4b17      	ldr	r3, [pc, #92]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008fc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008fcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8008fce:	4b15      	ldr	r3, [pc, #84]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008fd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008fd4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008fd6:	4b13      	ldr	r3, [pc, #76]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fdc:	4b11      	ldr	r3, [pc, #68]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008fe2:	4b10      	ldr	r3, [pc, #64]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008ffc:	4b09      	ldr	r3, [pc, #36]	@ (8009024 <MX_SPI1_Init+0x68>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009002:	4b08      	ldr	r3, [pc, #32]	@ (8009024 <MX_SPI1_Init+0x68>)
 8009004:	2200      	movs	r2, #0
 8009006:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009008:	4b06      	ldr	r3, [pc, #24]	@ (8009024 <MX_SPI1_Init+0x68>)
 800900a:	220a      	movs	r2, #10
 800900c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800900e:	4805      	ldr	r0, [pc, #20]	@ (8009024 <MX_SPI1_Init+0x68>)
 8009010:	f001 ffc2 	bl	800af98 <HAL_SPI_Init>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800901a:	f000 f929 	bl	8009270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800901e:	bf00      	nop
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000154 	.word	0x20000154
 8009028:	40013000 	.word	0x40013000

0800902c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009030:	4b16      	ldr	r3, [pc, #88]	@ (800908c <MX_SPI2_Init+0x60>)
 8009032:	4a17      	ldr	r2, [pc, #92]	@ (8009090 <MX_SPI2_Init+0x64>)
 8009034:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8009036:	4b15      	ldr	r3, [pc, #84]	@ (800908c <MX_SPI2_Init+0x60>)
 8009038:	2200      	movs	r2, #0
 800903a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800903c:	4b13      	ldr	r3, [pc, #76]	@ (800908c <MX_SPI2_Init+0x60>)
 800903e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009042:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009044:	4b11      	ldr	r3, [pc, #68]	@ (800908c <MX_SPI2_Init+0x60>)
 8009046:	2200      	movs	r2, #0
 8009048:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800904a:	4b10      	ldr	r3, [pc, #64]	@ (800908c <MX_SPI2_Init+0x60>)
 800904c:	2200      	movs	r2, #0
 800904e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009050:	4b0e      	ldr	r3, [pc, #56]	@ (800908c <MX_SPI2_Init+0x60>)
 8009052:	2200      	movs	r2, #0
 8009054:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009056:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <MX_SPI2_Init+0x60>)
 8009058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800905c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800905e:	4b0b      	ldr	r3, [pc, #44]	@ (800908c <MX_SPI2_Init+0x60>)
 8009060:	2200      	movs	r2, #0
 8009062:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009064:	4b09      	ldr	r3, [pc, #36]	@ (800908c <MX_SPI2_Init+0x60>)
 8009066:	2200      	movs	r2, #0
 8009068:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800906a:	4b08      	ldr	r3, [pc, #32]	@ (800908c <MX_SPI2_Init+0x60>)
 800906c:	2200      	movs	r2, #0
 800906e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8009070:	4b06      	ldr	r3, [pc, #24]	@ (800908c <MX_SPI2_Init+0x60>)
 8009072:	220a      	movs	r2, #10
 8009074:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009076:	4805      	ldr	r0, [pc, #20]	@ (800908c <MX_SPI2_Init+0x60>)
 8009078:	f001 ff8e 	bl	800af98 <HAL_SPI_Init>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8009082:	f000 f8f5 	bl	8009270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009086:	bf00      	nop
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	200001ac 	.word	0x200001ac
 8009090:	40003800 	.word	0x40003800

08009094 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009098:	4b11      	ldr	r3, [pc, #68]	@ (80090e0 <MX_USART2_UART_Init+0x4c>)
 800909a:	4a12      	ldr	r2, [pc, #72]	@ (80090e4 <MX_USART2_UART_Init+0x50>)
 800909c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800909e:	4b10      	ldr	r3, [pc, #64]	@ (80090e0 <MX_USART2_UART_Init+0x4c>)
 80090a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80090a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80090a6:	4b0e      	ldr	r3, [pc, #56]	@ (80090e0 <MX_USART2_UART_Init+0x4c>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80090ac:	4b0c      	ldr	r3, [pc, #48]	@ (80090e0 <MX_USART2_UART_Init+0x4c>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80090b2:	4b0b      	ldr	r3, [pc, #44]	@ (80090e0 <MX_USART2_UART_Init+0x4c>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80090b8:	4b09      	ldr	r3, [pc, #36]	@ (80090e0 <MX_USART2_UART_Init+0x4c>)
 80090ba:	220c      	movs	r2, #12
 80090bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80090be:	4b08      	ldr	r3, [pc, #32]	@ (80090e0 <MX_USART2_UART_Init+0x4c>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80090c4:	4b06      	ldr	r3, [pc, #24]	@ (80090e0 <MX_USART2_UART_Init+0x4c>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80090ca:	4805      	ldr	r0, [pc, #20]	@ (80090e0 <MX_USART2_UART_Init+0x4c>)
 80090cc:	f003 f91a 	bl	800c304 <HAL_UART_Init>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80090d6:	f000 f8cb 	bl	8009270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80090da:	bf00      	nop
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000204 	.word	0x20000204
 80090e4:	40004400 	.word	0x40004400

080090e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80090ec:	4b11      	ldr	r3, [pc, #68]	@ (8009134 <MX_USART3_UART_Init+0x4c>)
 80090ee:	4a12      	ldr	r2, [pc, #72]	@ (8009138 <MX_USART3_UART_Init+0x50>)
 80090f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80090f2:	4b10      	ldr	r3, [pc, #64]	@ (8009134 <MX_USART3_UART_Init+0x4c>)
 80090f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80090f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80090fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009134 <MX_USART3_UART_Init+0x4c>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009100:	4b0c      	ldr	r3, [pc, #48]	@ (8009134 <MX_USART3_UART_Init+0x4c>)
 8009102:	2200      	movs	r2, #0
 8009104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009106:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <MX_USART3_UART_Init+0x4c>)
 8009108:	2200      	movs	r2, #0
 800910a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800910c:	4b09      	ldr	r3, [pc, #36]	@ (8009134 <MX_USART3_UART_Init+0x4c>)
 800910e:	220c      	movs	r2, #12
 8009110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009112:	4b08      	ldr	r3, [pc, #32]	@ (8009134 <MX_USART3_UART_Init+0x4c>)
 8009114:	2200      	movs	r2, #0
 8009116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009118:	4b06      	ldr	r3, [pc, #24]	@ (8009134 <MX_USART3_UART_Init+0x4c>)
 800911a:	2200      	movs	r2, #0
 800911c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800911e:	4805      	ldr	r0, [pc, #20]	@ (8009134 <MX_USART3_UART_Init+0x4c>)
 8009120:	f003 f8f0 	bl	800c304 <HAL_UART_Init>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800912a:	f000 f8a1 	bl	8009270 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800912e:	bf00      	nop
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	2000024c 	.word	0x2000024c
 8009138:	40004800 	.word	0x40004800

0800913c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	@ 0x28
 8009140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009142:	f107 0314 	add.w	r3, r7, #20
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	605a      	str	r2, [r3, #4]
 800914c:	609a      	str	r2, [r3, #8]
 800914e:	60da      	str	r2, [r3, #12]
 8009150:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009152:	2300      	movs	r3, #0
 8009154:	613b      	str	r3, [r7, #16]
 8009156:	4b39      	ldr	r3, [pc, #228]	@ (800923c <MX_GPIO_Init+0x100>)
 8009158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915a:	4a38      	ldr	r2, [pc, #224]	@ (800923c <MX_GPIO_Init+0x100>)
 800915c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009160:	6313      	str	r3, [r2, #48]	@ 0x30
 8009162:	4b36      	ldr	r3, [pc, #216]	@ (800923c <MX_GPIO_Init+0x100>)
 8009164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800916a:	613b      	str	r3, [r7, #16]
 800916c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800916e:	2300      	movs	r3, #0
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	4b32      	ldr	r3, [pc, #200]	@ (800923c <MX_GPIO_Init+0x100>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009176:	4a31      	ldr	r2, [pc, #196]	@ (800923c <MX_GPIO_Init+0x100>)
 8009178:	f043 0304 	orr.w	r3, r3, #4
 800917c:	6313      	str	r3, [r2, #48]	@ 0x30
 800917e:	4b2f      	ldr	r3, [pc, #188]	@ (800923c <MX_GPIO_Init+0x100>)
 8009180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009182:	f003 0304 	and.w	r3, r3, #4
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800918a:	2300      	movs	r3, #0
 800918c:	60bb      	str	r3, [r7, #8]
 800918e:	4b2b      	ldr	r3, [pc, #172]	@ (800923c <MX_GPIO_Init+0x100>)
 8009190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009192:	4a2a      	ldr	r2, [pc, #168]	@ (800923c <MX_GPIO_Init+0x100>)
 8009194:	f043 0301 	orr.w	r3, r3, #1
 8009198:	6313      	str	r3, [r2, #48]	@ 0x30
 800919a:	4b28      	ldr	r3, [pc, #160]	@ (800923c <MX_GPIO_Init+0x100>)
 800919c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	60bb      	str	r3, [r7, #8]
 80091a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80091a6:	2300      	movs	r3, #0
 80091a8:	607b      	str	r3, [r7, #4]
 80091aa:	4b24      	ldr	r3, [pc, #144]	@ (800923c <MX_GPIO_Init+0x100>)
 80091ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ae:	4a23      	ldr	r2, [pc, #140]	@ (800923c <MX_GPIO_Init+0x100>)
 80091b0:	f043 0302 	orr.w	r3, r3, #2
 80091b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80091b6:	4b21      	ldr	r3, [pc, #132]	@ (800923c <MX_GPIO_Init+0x100>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ba:	f003 0302 	and.w	r3, r3, #2
 80091be:	607b      	str	r3, [r7, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 80091c2:	2200      	movs	r2, #0
 80091c4:	2102      	movs	r1, #2
 80091c6:	481e      	ldr	r0, [pc, #120]	@ (8009240 <MX_GPIO_Init+0x104>)
 80091c8:	f001 f8ce 	bl	800a368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED4_Pin|TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80091cc:	2200      	movs	r2, #0
 80091ce:	211d      	movs	r1, #29
 80091d0:	481c      	ldr	r0, [pc, #112]	@ (8009244 <MX_GPIO_Init+0x108>)
 80091d2:	f001 f8c9 	bl	800a368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80091d6:	2200      	movs	r2, #0
 80091d8:	2112      	movs	r1, #18
 80091da:	481b      	ldr	r0, [pc, #108]	@ (8009248 <MX_GPIO_Init+0x10c>)
 80091dc:	f001 f8c4 	bl	800a368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 80091e0:	2302      	movs	r3, #2
 80091e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091e4:	2301      	movs	r3, #1
 80091e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e8:	2300      	movs	r3, #0
 80091ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091ec:	2300      	movs	r3, #0
 80091ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 80091f0:	f107 0314 	add.w	r3, r7, #20
 80091f4:	4619      	mov	r1, r3
 80091f6:	4812      	ldr	r0, [pc, #72]	@ (8009240 <MX_GPIO_Init+0x104>)
 80091f8:	f000 ff22 	bl	800a040 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED4_Pin TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 */
  GPIO_InitStruct.Pin = TOUCH_LED4_Pin|TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4;
 80091fc:	231d      	movs	r3, #29
 80091fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009200:	2301      	movs	r3, #1
 8009202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009208:	2300      	movs	r3, #0
 800920a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800920c:	f107 0314 	add.w	r3, r7, #20
 8009210:	4619      	mov	r1, r3
 8009212:	480c      	ldr	r0, [pc, #48]	@ (8009244 <MX_GPIO_Init+0x108>)
 8009214:	f000 ff14 	bl	800a040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8009218:	2312      	movs	r3, #18
 800921a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800921c:	2301      	movs	r3, #1
 800921e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009224:	2300      	movs	r3, #0
 8009226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009228:	f107 0314 	add.w	r3, r7, #20
 800922c:	4619      	mov	r1, r3
 800922e:	4806      	ldr	r0, [pc, #24]	@ (8009248 <MX_GPIO_Init+0x10c>)
 8009230:	f000 ff06 	bl	800a040 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8009234:	bf00      	nop
 8009236:	3728      	adds	r7, #40	@ 0x28
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	40023800 	.word	0x40023800
 8009240:	40021c00 	.word	0x40021c00
 8009244:	40020800 	.word	0x40020800
 8009248:	40020000 	.word	0x40020000

0800924c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a04      	ldr	r2, [pc, #16]	@ (800926c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d101      	bne.n	8009262 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800925e:	f000 fd37 	bl	8009cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	40010000 	.word	0x40010000

08009270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009274:	b672      	cpsid	i
}
 8009276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <Error_Handler+0x8>

0800927c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009282:	2300      	movs	r3, #0
 8009284:	607b      	str	r3, [r7, #4]
 8009286:	4b10      	ldr	r3, [pc, #64]	@ (80092c8 <HAL_MspInit+0x4c>)
 8009288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800928a:	4a0f      	ldr	r2, [pc, #60]	@ (80092c8 <HAL_MspInit+0x4c>)
 800928c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009290:	6453      	str	r3, [r2, #68]	@ 0x44
 8009292:	4b0d      	ldr	r3, [pc, #52]	@ (80092c8 <HAL_MspInit+0x4c>)
 8009294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800929a:	607b      	str	r3, [r7, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800929e:	2300      	movs	r3, #0
 80092a0:	603b      	str	r3, [r7, #0]
 80092a2:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <HAL_MspInit+0x4c>)
 80092a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a6:	4a08      	ldr	r2, [pc, #32]	@ (80092c8 <HAL_MspInit+0x4c>)
 80092a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80092ae:	4b06      	ldr	r3, [pc, #24]	@ (80092c8 <HAL_MspInit+0x4c>)
 80092b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	40023800 	.word	0x40023800

080092cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08c      	sub	sp, #48	@ 0x30
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092d4:	f107 031c 	add.w	r3, r7, #28
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	605a      	str	r2, [r3, #4]
 80092de:	609a      	str	r2, [r3, #8]
 80092e0:	60da      	str	r2, [r3, #12]
 80092e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a45      	ldr	r2, [pc, #276]	@ (8009400 <HAL_SPI_MspInit+0x134>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d12c      	bne.n	8009348 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80092ee:	2300      	movs	r3, #0
 80092f0:	61bb      	str	r3, [r7, #24]
 80092f2:	4b44      	ldr	r3, [pc, #272]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 80092f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092f6:	4a43      	ldr	r2, [pc, #268]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 80092f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80092fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80092fe:	4b41      	ldr	r3, [pc, #260]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800930a:	2300      	movs	r3, #0
 800930c:	617b      	str	r3, [r7, #20]
 800930e:	4b3d      	ldr	r3, [pc, #244]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009312:	4a3c      	ldr	r2, [pc, #240]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009314:	f043 0301 	orr.w	r3, r3, #1
 8009318:	6313      	str	r3, [r2, #48]	@ 0x30
 800931a:	4b3a      	ldr	r3, [pc, #232]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 800931c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8009326:	23a0      	movs	r3, #160	@ 0xa0
 8009328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800932a:	2302      	movs	r3, #2
 800932c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800932e:	2300      	movs	r3, #0
 8009330:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009332:	2303      	movs	r3, #3
 8009334:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009336:	2305      	movs	r3, #5
 8009338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800933a:	f107 031c 	add.w	r3, r7, #28
 800933e:	4619      	mov	r1, r3
 8009340:	4831      	ldr	r0, [pc, #196]	@ (8009408 <HAL_SPI_MspInit+0x13c>)
 8009342:	f000 fe7d 	bl	800a040 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009346:	e057      	b.n	80093f8 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a2f      	ldr	r2, [pc, #188]	@ (800940c <HAL_SPI_MspInit+0x140>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d152      	bne.n	80093f8 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009352:	2300      	movs	r3, #0
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	4b2b      	ldr	r3, [pc, #172]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800935a:	4a2a      	ldr	r2, [pc, #168]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 800935c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009360:	6413      	str	r3, [r2, #64]	@ 0x40
 8009362:	4b28      	ldr	r3, [pc, #160]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	4b24      	ldr	r3, [pc, #144]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009376:	4a23      	ldr	r2, [pc, #140]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009378:	f043 0304 	orr.w	r3, r3, #4
 800937c:	6313      	str	r3, [r2, #48]	@ 0x30
 800937e:	4b21      	ldr	r3, [pc, #132]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009382:	f003 0304 	and.w	r3, r3, #4
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800938a:	2300      	movs	r3, #0
 800938c:	60bb      	str	r3, [r7, #8]
 800938e:	4b1d      	ldr	r3, [pc, #116]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009392:	4a1c      	ldr	r2, [pc, #112]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 8009394:	f043 0302 	orr.w	r3, r3, #2
 8009398:	6313      	str	r3, [r2, #48]	@ 0x30
 800939a:	4b1a      	ldr	r3, [pc, #104]	@ (8009404 <HAL_SPI_MspInit+0x138>)
 800939c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	60bb      	str	r3, [r7, #8]
 80093a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80093a6:	2302      	movs	r3, #2
 80093a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093aa:	2302      	movs	r3, #2
 80093ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093b2:	2303      	movs	r3, #3
 80093b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80093b6:	2307      	movs	r3, #7
 80093b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093ba:	f107 031c 	add.w	r3, r7, #28
 80093be:	4619      	mov	r1, r3
 80093c0:	4813      	ldr	r0, [pc, #76]	@ (8009410 <HAL_SPI_MspInit+0x144>)
 80093c2:	f000 fe3d 	bl	800a040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80093c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80093ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093cc:	2302      	movs	r3, #2
 80093ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093d4:	2303      	movs	r3, #3
 80093d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80093d8:	2305      	movs	r3, #5
 80093da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093dc:	f107 031c 	add.w	r3, r7, #28
 80093e0:	4619      	mov	r1, r3
 80093e2:	480c      	ldr	r0, [pc, #48]	@ (8009414 <HAL_SPI_MspInit+0x148>)
 80093e4:	f000 fe2c 	bl	800a040 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80093e8:	2200      	movs	r2, #0
 80093ea:	2105      	movs	r1, #5
 80093ec:	2024      	movs	r0, #36	@ 0x24
 80093ee:	f000 fd6b 	bl	8009ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80093f2:	2024      	movs	r0, #36	@ 0x24
 80093f4:	f000 fd84 	bl	8009f00 <HAL_NVIC_EnableIRQ>
}
 80093f8:	bf00      	nop
 80093fa:	3730      	adds	r7, #48	@ 0x30
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	40013000 	.word	0x40013000
 8009404:	40023800 	.word	0x40023800
 8009408:	40020000 	.word	0x40020000
 800940c:	40003800 	.word	0x40003800
 8009410:	40020800 	.word	0x40020800
 8009414:	40020400 	.word	0x40020400

08009418 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08c      	sub	sp, #48	@ 0x30
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009420:	f107 031c 	add.w	r3, r7, #28
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	605a      	str	r2, [r3, #4]
 800942a:	609a      	str	r2, [r3, #8]
 800942c:	60da      	str	r2, [r3, #12]
 800942e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a45      	ldr	r2, [pc, #276]	@ (800954c <HAL_UART_MspInit+0x134>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d12c      	bne.n	8009494 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800943a:	2300      	movs	r3, #0
 800943c:	61bb      	str	r3, [r7, #24]
 800943e:	4b44      	ldr	r3, [pc, #272]	@ (8009550 <HAL_UART_MspInit+0x138>)
 8009440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009442:	4a43      	ldr	r2, [pc, #268]	@ (8009550 <HAL_UART_MspInit+0x138>)
 8009444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009448:	6413      	str	r3, [r2, #64]	@ 0x40
 800944a:	4b41      	ldr	r3, [pc, #260]	@ (8009550 <HAL_UART_MspInit+0x138>)
 800944c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009452:	61bb      	str	r3, [r7, #24]
 8009454:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
 800945a:	4b3d      	ldr	r3, [pc, #244]	@ (8009550 <HAL_UART_MspInit+0x138>)
 800945c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945e:	4a3c      	ldr	r2, [pc, #240]	@ (8009550 <HAL_UART_MspInit+0x138>)
 8009460:	f043 0301 	orr.w	r3, r3, #1
 8009464:	6313      	str	r3, [r2, #48]	@ 0x30
 8009466:	4b3a      	ldr	r3, [pc, #232]	@ (8009550 <HAL_UART_MspInit+0x138>)
 8009468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009472:	230c      	movs	r3, #12
 8009474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009476:	2302      	movs	r3, #2
 8009478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800947a:	2300      	movs	r3, #0
 800947c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800947e:	2303      	movs	r3, #3
 8009480:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009482:	2307      	movs	r3, #7
 8009484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009486:	f107 031c 	add.w	r3, r7, #28
 800948a:	4619      	mov	r1, r3
 800948c:	4831      	ldr	r0, [pc, #196]	@ (8009554 <HAL_UART_MspInit+0x13c>)
 800948e:	f000 fdd7 	bl	800a040 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8009492:	e057      	b.n	8009544 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a2f      	ldr	r2, [pc, #188]	@ (8009558 <HAL_UART_MspInit+0x140>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d152      	bne.n	8009544 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800949e:	2300      	movs	r3, #0
 80094a0:	613b      	str	r3, [r7, #16]
 80094a2:	4b2b      	ldr	r3, [pc, #172]	@ (8009550 <HAL_UART_MspInit+0x138>)
 80094a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009550 <HAL_UART_MspInit+0x138>)
 80094a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80094ae:	4b28      	ldr	r3, [pc, #160]	@ (8009550 <HAL_UART_MspInit+0x138>)
 80094b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80094b6:	613b      	str	r3, [r7, #16]
 80094b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	4b24      	ldr	r3, [pc, #144]	@ (8009550 <HAL_UART_MspInit+0x138>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c2:	4a23      	ldr	r2, [pc, #140]	@ (8009550 <HAL_UART_MspInit+0x138>)
 80094c4:	f043 0304 	orr.w	r3, r3, #4
 80094c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80094ca:	4b21      	ldr	r3, [pc, #132]	@ (8009550 <HAL_UART_MspInit+0x138>)
 80094cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094d6:	2300      	movs	r3, #0
 80094d8:	60bb      	str	r3, [r7, #8]
 80094da:	4b1d      	ldr	r3, [pc, #116]	@ (8009550 <HAL_UART_MspInit+0x138>)
 80094dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094de:	4a1c      	ldr	r2, [pc, #112]	@ (8009550 <HAL_UART_MspInit+0x138>)
 80094e0:	f043 0302 	orr.w	r3, r3, #2
 80094e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80094e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009550 <HAL_UART_MspInit+0x138>)
 80094e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	60bb      	str	r3, [r7, #8]
 80094f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80094f2:	2320      	movs	r3, #32
 80094f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094f6:	2302      	movs	r3, #2
 80094f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094fe:	2303      	movs	r3, #3
 8009500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009502:	2307      	movs	r3, #7
 8009504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009506:	f107 031c 	add.w	r3, r7, #28
 800950a:	4619      	mov	r1, r3
 800950c:	4813      	ldr	r0, [pc, #76]	@ (800955c <HAL_UART_MspInit+0x144>)
 800950e:	f000 fd97 	bl	800a040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009518:	2302      	movs	r3, #2
 800951a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800951c:	2300      	movs	r3, #0
 800951e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009520:	2303      	movs	r3, #3
 8009522:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009524:	2307      	movs	r3, #7
 8009526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009528:	f107 031c 	add.w	r3, r7, #28
 800952c:	4619      	mov	r1, r3
 800952e:	480c      	ldr	r0, [pc, #48]	@ (8009560 <HAL_UART_MspInit+0x148>)
 8009530:	f000 fd86 	bl	800a040 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 8009534:	2200      	movs	r2, #0
 8009536:	2106      	movs	r1, #6
 8009538:	2027      	movs	r0, #39	@ 0x27
 800953a:	f000 fcc5 	bl	8009ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800953e:	2027      	movs	r0, #39	@ 0x27
 8009540:	f000 fcde 	bl	8009f00 <HAL_NVIC_EnableIRQ>
}
 8009544:	bf00      	nop
 8009546:	3730      	adds	r7, #48	@ 0x30
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	40004400 	.word	0x40004400
 8009550:	40023800 	.word	0x40023800
 8009554:	40020000 	.word	0x40020000
 8009558:	40004800 	.word	0x40004800
 800955c:	40020800 	.word	0x40020800
 8009560:	40020400 	.word	0x40020400

08009564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08c      	sub	sp, #48	@ 0x30
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8009570:	2300      	movs	r3, #0
 8009572:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009574:	2300      	movs	r3, #0
 8009576:	60bb      	str	r3, [r7, #8]
 8009578:	4b2f      	ldr	r3, [pc, #188]	@ (8009638 <HAL_InitTick+0xd4>)
 800957a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957c:	4a2e      	ldr	r2, [pc, #184]	@ (8009638 <HAL_InitTick+0xd4>)
 800957e:	f043 0301 	orr.w	r3, r3, #1
 8009582:	6453      	str	r3, [r2, #68]	@ 0x44
 8009584:	4b2c      	ldr	r3, [pc, #176]	@ (8009638 <HAL_InitTick+0xd4>)
 8009586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	60bb      	str	r3, [r7, #8]
 800958e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009590:	f107 020c 	add.w	r2, r7, #12
 8009594:	f107 0310 	add.w	r3, r7, #16
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f001 f882 	bl	800a6a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80095a0:	f001 f86c 	bl	800a67c <HAL_RCC_GetPCLK2Freq>
 80095a4:	4603      	mov	r3, r0
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80095aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ac:	4a23      	ldr	r2, [pc, #140]	@ (800963c <HAL_InitTick+0xd8>)
 80095ae:	fba2 2303 	umull	r2, r3, r2, r3
 80095b2:	0c9b      	lsrs	r3, r3, #18
 80095b4:	3b01      	subs	r3, #1
 80095b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80095b8:	4b21      	ldr	r3, [pc, #132]	@ (8009640 <HAL_InitTick+0xdc>)
 80095ba:	4a22      	ldr	r2, [pc, #136]	@ (8009644 <HAL_InitTick+0xe0>)
 80095bc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80095be:	4b20      	ldr	r3, [pc, #128]	@ (8009640 <HAL_InitTick+0xdc>)
 80095c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80095c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80095c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009640 <HAL_InitTick+0xdc>)
 80095c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80095cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009640 <HAL_InitTick+0xdc>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009640 <HAL_InitTick+0xdc>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095d8:	4b19      	ldr	r3, [pc, #100]	@ (8009640 <HAL_InitTick+0xdc>)
 80095da:	2200      	movs	r2, #0
 80095dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80095de:	4818      	ldr	r0, [pc, #96]	@ (8009640 <HAL_InitTick+0xdc>)
 80095e0:	f002 fbf5 	bl	800bdce <HAL_TIM_Base_Init>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80095ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d11b      	bne.n	800962a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80095f2:	4813      	ldr	r0, [pc, #76]	@ (8009640 <HAL_InitTick+0xdc>)
 80095f4:	f002 fc44 	bl	800be80 <HAL_TIM_Base_Start_IT>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80095fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009602:	2b00      	cmp	r3, #0
 8009604:	d111      	bne.n	800962a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009606:	2019      	movs	r0, #25
 8009608:	f000 fc7a 	bl	8009f00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b0f      	cmp	r3, #15
 8009610:	d808      	bhi.n	8009624 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8009612:	2200      	movs	r2, #0
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	2019      	movs	r0, #25
 8009618:	f000 fc56 	bl	8009ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800961c:	4a0a      	ldr	r2, [pc, #40]	@ (8009648 <HAL_InitTick+0xe4>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	e002      	b.n	800962a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800962a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800962e:	4618      	mov	r0, r3
 8009630:	3730      	adds	r7, #48	@ 0x30
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	40023800 	.word	0x40023800
 800963c:	431bde83 	.word	0x431bde83
 8009640:	20000294 	.word	0x20000294
 8009644:	40010000 	.word	0x40010000
 8009648:	2000000c 	.word	0x2000000c

0800964c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <NMI_Handler+0x4>

08009654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009658:	bf00      	nop
 800965a:	e7fd      	b.n	8009658 <HardFault_Handler+0x4>

0800965c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800965c:	b480      	push	{r7}
 800965e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009660:	bf00      	nop
 8009662:	e7fd      	b.n	8009660 <MemManage_Handler+0x4>

08009664 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009664:	b480      	push	{r7}
 8009666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009668:	bf00      	nop
 800966a:	e7fd      	b.n	8009668 <BusFault_Handler+0x4>

0800966c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009670:	bf00      	nop
 8009672:	e7fd      	b.n	8009670 <UsageFault_Handler+0x4>

08009674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009678:	bf00      	nop
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
	...

08009684 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009688:	4802      	ldr	r0, [pc, #8]	@ (8009694 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800968a:	f002 fc69 	bl	800bf60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800968e:	bf00      	nop
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20000294 	.word	0x20000294

08009698 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800969c:	4802      	ldr	r0, [pc, #8]	@ (80096a8 <SPI2_IRQHandler+0x10>)
 800969e:	f001 ff6f 	bl	800b580 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80096a2:	bf00      	nop
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	200001ac 	.word	0x200001ac

080096ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80096b0:	4802      	ldr	r0, [pc, #8]	@ (80096bc <USART3_IRQHandler+0x10>)
 80096b2:	f002 ff27 	bl	800c504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80096b6:	bf00      	nop
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	2000024c 	.word	0x2000024c

080096c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80096cc:	2300      	movs	r3, #0
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	e00a      	b.n	80096e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80096d2:	f3af 8000 	nop.w
 80096d6:	4601      	mov	r1, r0
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	60ba      	str	r2, [r7, #8]
 80096de:	b2ca      	uxtb	r2, r1
 80096e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	3301      	adds	r3, #1
 80096e6:	617b      	str	r3, [r7, #20]
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	dbf0      	blt.n	80096d2 <_read+0x12>
  }

  return len;
 80096f0:	687b      	ldr	r3, [r7, #4]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b086      	sub	sp, #24
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009706:	2300      	movs	r3, #0
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	e009      	b.n	8009720 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	60ba      	str	r2, [r7, #8]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff fbb7 	bl	8008e88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	3301      	adds	r3, #1
 800971e:	617b      	str	r3, [r7, #20]
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	dbf1      	blt.n	800970c <_write+0x12>
  }
  return len;
 8009728:	687b      	ldr	r3, [r7, #4]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <_close>:

int _close(int file)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800973a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800973e:	4618      	mov	r0, r3
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800974a:	b480      	push	{r7}
 800974c:	b083      	sub	sp, #12
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800975a:	605a      	str	r2, [r3, #4]
  return 0;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <_isatty>:

int _isatty(int file)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009772:	2301      	movs	r3, #1
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
	...

0800979c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80097a0:	4b07      	ldr	r3, [pc, #28]	@ (80097c0 <SystemInit+0x24>)
 80097a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a6:	4a06      	ldr	r2, [pc, #24]	@ (80097c0 <SystemInit+0x24>)
 80097a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80097b0:	4b03      	ldr	r3, [pc, #12]	@ (80097c0 <SystemInit+0x24>)
 80097b2:	4a04      	ldr	r2, [pc, #16]	@ (80097c4 <SystemInit+0x28>)
 80097b4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80097b6:	bf00      	nop
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	e000ed00 	.word	0xe000ed00
 80097c4:	08008000 	.word	0x08008000

080097c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80097c8:	b480      	push	{r7}
 80097ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80097cc:	f3bf 8f4f 	dsb	sy
}
 80097d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80097d2:	4b06      	ldr	r3, [pc, #24]	@ (80097ec <__NVIC_SystemReset+0x24>)
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80097da:	4904      	ldr	r1, [pc, #16]	@ (80097ec <__NVIC_SystemReset+0x24>)
 80097dc:	4b04      	ldr	r3, [pc, #16]	@ (80097f0 <__NVIC_SystemReset+0x28>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80097e2:	f3bf 8f4f 	dsb	sy
}
 80097e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80097e8:	bf00      	nop
 80097ea:	e7fd      	b.n	80097e8 <__NVIC_SystemReset+0x20>
 80097ec:	e000ed00 	.word	0xe000ed00
 80097f0:	05fa0004 	.word	0x05fa0004

080097f4 <setup_freeRTOS>:
volatile uint8_t light2State;
volatile uint8_t light3State;
volatile uint8_t light4State;

void setup_freeRTOS(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af02      	add	r7, sp, #8
	spiQueue = xQueueCreate(10, sizeof(spiRxBuffer));
 80097fa:	2200      	movs	r2, #0
 80097fc:	2102      	movs	r1, #2
 80097fe:	200a      	movs	r0, #10
 8009800:	f003 ff0a 	bl	800d618 <xQueueGenericCreate>
 8009804:	4603      	mov	r3, r0
 8009806:	4a3a      	ldr	r2, [pc, #232]	@ (80098f0 <setup_freeRTOS+0xfc>)
 8009808:	6013      	str	r3, [r2, #0]
	uartQueue = xQueueCreate(10, sizeof(uartRxBuffer));
 800980a:	2200      	movs	r2, #0
 800980c:	2101      	movs	r1, #1
 800980e:	200a      	movs	r0, #10
 8009810:	f003 ff02 	bl	800d618 <xQueueGenericCreate>
 8009814:	4603      	mov	r3, r0
 8009816:	4a37      	ldr	r2, [pc, #220]	@ (80098f4 <setup_freeRTOS+0x100>)
 8009818:	6013      	str	r3, [r2, #0]
	configASSERT(spiQueue != NULL && uartQueue != NULL);
 800981a:	4b35      	ldr	r3, [pc, #212]	@ (80098f0 <setup_freeRTOS+0xfc>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <setup_freeRTOS+0x3a>
 8009822:	4b34      	ldr	r3, [pc, #208]	@ (80098f4 <setup_freeRTOS+0x100>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <setup_freeRTOS+0x3a>
 800982a:	2301      	movs	r3, #1
 800982c:	e000      	b.n	8009830 <setup_freeRTOS+0x3c>
 800982e:	2300      	movs	r3, #0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10b      	bne.n	800984c <setup_freeRTOS+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8009846:	bf00      	nop
 8009848:	bf00      	nop
 800984a:	e7fd      	b.n	8009848 <setup_freeRTOS+0x54>

	// Start SPI and UART interrupt-based reception
	HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 800984c:	2202      	movs	r2, #2
 800984e:	492a      	ldr	r1, [pc, #168]	@ (80098f8 <setup_freeRTOS+0x104>)
 8009850:	482a      	ldr	r0, [pc, #168]	@ (80098fc <setup_freeRTOS+0x108>)
 8009852:	f001 fd6f 	bl	800b334 <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, sizeof(uartRxBuffer));
 8009856:	2201      	movs	r2, #1
 8009858:	4929      	ldr	r1, [pc, #164]	@ (8009900 <setup_freeRTOS+0x10c>)
 800985a:	482a      	ldr	r0, [pc, #168]	@ (8009904 <setup_freeRTOS+0x110>)
 800985c:	f002 fe2d 	bl	800c4ba <HAL_UART_Receive_IT>

	xUartMutex = xSemaphoreCreateMutex();
 8009860:	2001      	movs	r0, #1
 8009862:	f003 ff78 	bl	800d756 <xQueueCreateMutex>
 8009866:	4603      	mov	r3, r0
 8009868:	4a27      	ldr	r2, [pc, #156]	@ (8009908 <setup_freeRTOS+0x114>)
 800986a:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(SPI_handler, "SPIHandler", 512, NULL, 5, NULL);
 800986c:	2300      	movs	r3, #0
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	2305      	movs	r3, #5
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	2300      	movs	r3, #0
 8009876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800987a:	4924      	ldr	r1, [pc, #144]	@ (800990c <setup_freeRTOS+0x118>)
 800987c:	4824      	ldr	r0, [pc, #144]	@ (8009910 <setup_freeRTOS+0x11c>)
 800987e:	f004 fb83 	bl	800df88 <xTaskCreate>
 8009882:	4603      	mov	r3, r0
 8009884:	4a23      	ldr	r2, [pc, #140]	@ (8009914 <setup_freeRTOS+0x120>)
 8009886:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 8009888:	4b22      	ldr	r3, [pc, #136]	@ (8009914 <setup_freeRTOS+0x120>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d00b      	beq.n	80098a8 <setup_freeRTOS+0xb4>
        __asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	60bb      	str	r3, [r7, #8]
    }
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <setup_freeRTOS+0xb0>

	status = xTaskCreate(UART_handler, "UARTHandler", 256, NULL, 4, NULL);
 80098a8:	2300      	movs	r3, #0
 80098aa:	9301      	str	r3, [sp, #4]
 80098ac:	2304      	movs	r3, #4
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098b6:	4918      	ldr	r1, [pc, #96]	@ (8009918 <setup_freeRTOS+0x124>)
 80098b8:	4818      	ldr	r0, [pc, #96]	@ (800991c <setup_freeRTOS+0x128>)
 80098ba:	f004 fb65 	bl	800df88 <xTaskCreate>
 80098be:	4603      	mov	r3, r0
 80098c0:	4a14      	ldr	r2, [pc, #80]	@ (8009914 <setup_freeRTOS+0x120>)
 80098c2:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 80098c4:	4b13      	ldr	r3, [pc, #76]	@ (8009914 <setup_freeRTOS+0x120>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d00b      	beq.n	80098e4 <setup_freeRTOS+0xf0>
        __asm volatile
 80098cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	607b      	str	r3, [r7, #4]
    }
 80098de:	bf00      	nop
 80098e0:	bf00      	nop
 80098e2:	e7fd      	b.n	80098e0 <setup_freeRTOS+0xec>

	vTaskStartScheduler();
 80098e4:	f004 fc96 	bl	800e214 <vTaskStartScheduler>
}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	200002dc 	.word	0x200002dc
 80098f4:	200002e0 	.word	0x200002e0
 80098f8:	200002f0 	.word	0x200002f0
 80098fc:	200001ac 	.word	0x200001ac
 8009900:	200002ec 	.word	0x200002ec
 8009904:	2000024c 	.word	0x2000024c
 8009908:	200002e8 	.word	0x200002e8
 800990c:	08010ea0 	.word	0x08010ea0
 8009910:	08009921 	.word	0x08009921
 8009914:	200002e4 	.word	0x200002e4
 8009918:	08010eac 	.word	0x08010eac
 800991c:	08009a75 	.word	0x08009a75

08009920 <SPI_handler>:

void SPI_handler(void *param)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
    uint8_t localSpiRxBuffer[2];
    uint8_t uartTx;
    while (1) {
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 8009928:	4b44      	ldr	r3, [pc, #272]	@ (8009a3c <SPI_handler+0x11c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f107 010c 	add.w	r1, r7, #12
 8009930:	f04f 32ff 	mov.w	r2, #4294967295
 8009934:	4618      	mov	r0, r3
 8009936:	f004 f8d7 	bl	800dae8 <xQueueReceive>
 800993a:	4603      	mov	r3, r0
 800993c:	2b01      	cmp	r3, #1
 800993e:	d1f3      	bne.n	8009928 <SPI_handler+0x8>
        {
            printf("SPI Data Received: %s\n", localSpiRxBuffer);
 8009940:	f107 030c 	add.w	r3, r7, #12
 8009944:	4619      	mov	r1, r3
 8009946:	483e      	ldr	r0, [pc, #248]	@ (8009a40 <SPI_handler+0x120>)
 8009948:	f006 f9b6 	bl	800fcb8 <iprintf>
            if (strcmp((char *)localSpiRxBuffer, "L1") == 0)
 800994c:	f107 030c 	add.w	r3, r7, #12
 8009950:	493c      	ldr	r1, [pc, #240]	@ (8009a44 <SPI_handler+0x124>)
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fc5c 	bl	8008210 <strcmp>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d111      	bne.n	8009982 <SPI_handler+0x62>
            {
                HAL_GPIO_TogglePin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800995e:	2108      	movs	r1, #8
 8009960:	4839      	ldr	r0, [pc, #228]	@ (8009a48 <SPI_handler+0x128>)
 8009962:	f000 fd1a 	bl	800a39a <HAL_GPIO_TogglePin>
                uartTx = DEVICE_1;
 8009966:	2355      	movs	r3, #85	@ 0x55
 8009968:	72fb      	strb	r3, [r7, #11]
                HAL_UART_Transmit(&huart3, &uartTx, sizeof(uartTx), HAL_MAX_DELAY);
 800996a:	f107 010b 	add.w	r1, r7, #11
 800996e:	f04f 33ff 	mov.w	r3, #4294967295
 8009972:	2201      	movs	r2, #1
 8009974:	4835      	ldr	r0, [pc, #212]	@ (8009a4c <SPI_handler+0x12c>)
 8009976:	f002 fd15 	bl	800c3a4 <HAL_UART_Transmit>
                print_To_display("Device 1 operation");
 800997a:	4835      	ldr	r0, [pc, #212]	@ (8009a50 <SPI_handler+0x130>)
 800997c:	f7ff fa6a 	bl	8008e54 <print_To_display>
 8009980:	e053      	b.n	8009a2a <SPI_handler+0x10a>
            }
            else if(strcmp((char *)localSpiRxBuffer, "L2") == 0)
 8009982:	f107 030c 	add.w	r3, r7, #12
 8009986:	4933      	ldr	r1, [pc, #204]	@ (8009a54 <SPI_handler+0x134>)
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe fc41 	bl	8008210 <strcmp>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d111      	bne.n	80099b8 <SPI_handler+0x98>
            {
            	HAL_GPIO_TogglePin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 8009994:	2104      	movs	r1, #4
 8009996:	482c      	ldr	r0, [pc, #176]	@ (8009a48 <SPI_handler+0x128>)
 8009998:	f000 fcff 	bl	800a39a <HAL_GPIO_TogglePin>
            	uartTx = DEVICE_2;
 800999c:	2356      	movs	r3, #86	@ 0x56
 800999e:	72fb      	strb	r3, [r7, #11]
				HAL_UART_Transmit(&huart3, &uartTx, sizeof(uartTx), HAL_MAX_DELAY);
 80099a0:	f107 010b 	add.w	r1, r7, #11
 80099a4:	f04f 33ff 	mov.w	r3, #4294967295
 80099a8:	2201      	movs	r2, #1
 80099aa:	4828      	ldr	r0, [pc, #160]	@ (8009a4c <SPI_handler+0x12c>)
 80099ac:	f002 fcfa 	bl	800c3a4 <HAL_UART_Transmit>
            	print_To_display("Device 2 operation");
 80099b0:	4829      	ldr	r0, [pc, #164]	@ (8009a58 <SPI_handler+0x138>)
 80099b2:	f7ff fa4f 	bl	8008e54 <print_To_display>
 80099b6:	e038      	b.n	8009a2a <SPI_handler+0x10a>
            }
            else if(strcmp((char *)localSpiRxBuffer, "L3") == 0)
 80099b8:	f107 030c 	add.w	r3, r7, #12
 80099bc:	4927      	ldr	r1, [pc, #156]	@ (8009a5c <SPI_handler+0x13c>)
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fc26 	bl	8008210 <strcmp>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d111      	bne.n	80099ee <SPI_handler+0xce>
            {
				HAL_GPIO_TogglePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 80099ca:	2102      	movs	r1, #2
 80099cc:	4824      	ldr	r0, [pc, #144]	@ (8009a60 <SPI_handler+0x140>)
 80099ce:	f000 fce4 	bl	800a39a <HAL_GPIO_TogglePin>
				uartTx = DEVICE_3;
 80099d2:	2357      	movs	r3, #87	@ 0x57
 80099d4:	72fb      	strb	r3, [r7, #11]
				HAL_UART_Transmit(&huart3, &uartTx, sizeof(uartTx), HAL_MAX_DELAY);
 80099d6:	f107 010b 	add.w	r1, r7, #11
 80099da:	f04f 33ff 	mov.w	r3, #4294967295
 80099de:	2201      	movs	r2, #1
 80099e0:	481a      	ldr	r0, [pc, #104]	@ (8009a4c <SPI_handler+0x12c>)
 80099e2:	f002 fcdf 	bl	800c3a4 <HAL_UART_Transmit>
				print_To_display("Device 3 operation");
 80099e6:	481f      	ldr	r0, [pc, #124]	@ (8009a64 <SPI_handler+0x144>)
 80099e8:	f7ff fa34 	bl	8008e54 <print_To_display>
 80099ec:	e01d      	b.n	8009a2a <SPI_handler+0x10a>
			}
            else if(strcmp((char *)localSpiRxBuffer, "L4") == 0)
 80099ee:	f107 030c 	add.w	r3, r7, #12
 80099f2:	491d      	ldr	r1, [pc, #116]	@ (8009a68 <SPI_handler+0x148>)
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fe fc0b 	bl	8008210 <strcmp>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d111      	bne.n	8009a24 <SPI_handler+0x104>
            {
				HAL_GPIO_TogglePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 8009a00:	2101      	movs	r1, #1
 8009a02:	4811      	ldr	r0, [pc, #68]	@ (8009a48 <SPI_handler+0x128>)
 8009a04:	f000 fcc9 	bl	800a39a <HAL_GPIO_TogglePin>
				uartTx = DEVICE_4;
 8009a08:	2358      	movs	r3, #88	@ 0x58
 8009a0a:	72fb      	strb	r3, [r7, #11]
				HAL_UART_Transmit(&huart3, &uartTx, sizeof(uartTx), HAL_MAX_DELAY);
 8009a0c:	f107 010b 	add.w	r1, r7, #11
 8009a10:	f04f 33ff 	mov.w	r3, #4294967295
 8009a14:	2201      	movs	r2, #1
 8009a16:	480d      	ldr	r0, [pc, #52]	@ (8009a4c <SPI_handler+0x12c>)
 8009a18:	f002 fcc4 	bl	800c3a4 <HAL_UART_Transmit>
				print_To_display("Device 4 operation");
 8009a1c:	4813      	ldr	r0, [pc, #76]	@ (8009a6c <SPI_handler+0x14c>)
 8009a1e:	f7ff fa19 	bl	8008e54 <print_To_display>
 8009a22:	e002      	b.n	8009a2a <SPI_handler+0x10a>
			}
            else
            {
            	printf("junk data received on SPI\r\n");
 8009a24:	4812      	ldr	r0, [pc, #72]	@ (8009a70 <SPI_handler+0x150>)
 8009a26:	f006 f9af 	bl	800fd88 <puts>
            }
            memset(localSpiRxBuffer, 0, sizeof(localSpiRxBuffer));
 8009a2a:	f107 030c 	add.w	r3, r7, #12
 8009a2e:	2202      	movs	r2, #2
 8009a30:	2100      	movs	r1, #0
 8009a32:	4618      	mov	r0, r3
 8009a34:	f006 faa8 	bl	800ff88 <memset>
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 8009a38:	e776      	b.n	8009928 <SPI_handler+0x8>
 8009a3a:	bf00      	nop
 8009a3c:	200002dc 	.word	0x200002dc
 8009a40:	08010eb8 	.word	0x08010eb8
 8009a44:	08010ed0 	.word	0x08010ed0
 8009a48:	40020800 	.word	0x40020800
 8009a4c:	2000024c 	.word	0x2000024c
 8009a50:	08010ed4 	.word	0x08010ed4
 8009a54:	08010ee8 	.word	0x08010ee8
 8009a58:	08010eec 	.word	0x08010eec
 8009a5c:	08010f00 	.word	0x08010f00
 8009a60:	40021c00 	.word	0x40021c00
 8009a64:	08010f04 	.word	0x08010f04
 8009a68:	08010f18 	.word	0x08010f18
 8009a6c:	08010f1c 	.word	0x08010f1c
 8009a70:	08010f30 	.word	0x08010f30

08009a74 <UART_handler>:
    }
}


void UART_handler(void *param)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
    while (1) {
        if (xQueueReceive(uartQueue, uartRxBuffer, portMAX_DELAY) == pdTRUE) {
 8009a7c:	4b24      	ldr	r3, [pc, #144]	@ (8009b10 <UART_handler+0x9c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f04f 32ff 	mov.w	r2, #4294967295
 8009a84:	4923      	ldr	r1, [pc, #140]	@ (8009b14 <UART_handler+0xa0>)
 8009a86:	4618      	mov	r0, r3
 8009a88:	f004 f82e 	bl	800dae8 <xQueueReceive>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d1f4      	bne.n	8009a7c <UART_handler+0x8>
            printf("UART Data Received: %s\n", uartRxBuffer);
 8009a92:	4920      	ldr	r1, [pc, #128]	@ (8009b14 <UART_handler+0xa0>)
 8009a94:	4820      	ldr	r0, [pc, #128]	@ (8009b18 <UART_handler+0xa4>)
 8009a96:	f006 f90f 	bl	800fcb8 <iprintf>
            if(uartRxBuffer[0] == BOOT_CMD)
 8009a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8009b14 <UART_handler+0xa0>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b50      	cmp	r3, #80	@ 0x50
 8009aa0:	d101      	bne.n	8009aa6 <UART_handler+0x32>
            {
            	NVIC_SystemReset();
 8009aa2:	f7ff fe91 	bl	80097c8 <__NVIC_SystemReset>
            }
            else if (uartRxBuffer[0] == DEVICE_1)
 8009aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b14 <UART_handler+0xa0>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b55      	cmp	r3, #85	@ 0x55
 8009aac:	d107      	bne.n	8009abe <UART_handler+0x4a>
            {
            	HAL_GPIO_TogglePin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 8009aae:	2108      	movs	r1, #8
 8009ab0:	481a      	ldr	r0, [pc, #104]	@ (8009b1c <UART_handler+0xa8>)
 8009ab2:	f000 fc72 	bl	800a39a <HAL_GPIO_TogglePin>
            	printf("command L processed\r\n");
 8009ab6:	481a      	ldr	r0, [pc, #104]	@ (8009b20 <UART_handler+0xac>)
 8009ab8:	f006 f966 	bl	800fd88 <puts>
 8009abc:	e7de      	b.n	8009a7c <UART_handler+0x8>
            }
            else if(uartRxBuffer[0] == DEVICE_2)
 8009abe:	4b15      	ldr	r3, [pc, #84]	@ (8009b14 <UART_handler+0xa0>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b56      	cmp	r3, #86	@ 0x56
 8009ac4:	d107      	bne.n	8009ad6 <UART_handler+0x62>
            {
            	HAL_GPIO_TogglePin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 8009ac6:	2104      	movs	r1, #4
 8009ac8:	4814      	ldr	r0, [pc, #80]	@ (8009b1c <UART_handler+0xa8>)
 8009aca:	f000 fc66 	bl	800a39a <HAL_GPIO_TogglePin>
            	printf("command M processed\r\n");
 8009ace:	4815      	ldr	r0, [pc, #84]	@ (8009b24 <UART_handler+0xb0>)
 8009ad0:	f006 f95a 	bl	800fd88 <puts>
 8009ad4:	e7d2      	b.n	8009a7c <UART_handler+0x8>
            }
            else if(uartRxBuffer[0] == DEVICE_3)
 8009ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b14 <UART_handler+0xa0>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b57      	cmp	r3, #87	@ 0x57
 8009adc:	d107      	bne.n	8009aee <UART_handler+0x7a>
            {
				HAL_GPIO_TogglePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 8009ade:	2102      	movs	r1, #2
 8009ae0:	4811      	ldr	r0, [pc, #68]	@ (8009b28 <UART_handler+0xb4>)
 8009ae2:	f000 fc5a 	bl	800a39a <HAL_GPIO_TogglePin>
				printf("command N processed \r\n");
 8009ae6:	4811      	ldr	r0, [pc, #68]	@ (8009b2c <UART_handler+0xb8>)
 8009ae8:	f006 f94e 	bl	800fd88 <puts>
 8009aec:	e7c6      	b.n	8009a7c <UART_handler+0x8>
			}
            else if(uartRxBuffer[0] == DEVICE_4)
 8009aee:	4b09      	ldr	r3, [pc, #36]	@ (8009b14 <UART_handler+0xa0>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b58      	cmp	r3, #88	@ 0x58
 8009af4:	d107      	bne.n	8009b06 <UART_handler+0x92>
            {
				HAL_GPIO_TogglePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 8009af6:	2101      	movs	r1, #1
 8009af8:	4808      	ldr	r0, [pc, #32]	@ (8009b1c <UART_handler+0xa8>)
 8009afa:	f000 fc4e 	bl	800a39a <HAL_GPIO_TogglePin>
				printf("command O processed\r\n");
 8009afe:	480c      	ldr	r0, [pc, #48]	@ (8009b30 <UART_handler+0xbc>)
 8009b00:	f006 f942 	bl	800fd88 <puts>
 8009b04:	e7ba      	b.n	8009a7c <UART_handler+0x8>
			}
            else
            {
            	printf("command does not found , Junk data received on UART\r\n");
 8009b06:	480b      	ldr	r0, [pc, #44]	@ (8009b34 <UART_handler+0xc0>)
 8009b08:	f006 f93e 	bl	800fd88 <puts>
        if (xQueueReceive(uartQueue, uartRxBuffer, portMAX_DELAY) == pdTRUE) {
 8009b0c:	e7b6      	b.n	8009a7c <UART_handler+0x8>
 8009b0e:	bf00      	nop
 8009b10:	200002e0 	.word	0x200002e0
 8009b14:	200002ec 	.word	0x200002ec
 8009b18:	08010f4c 	.word	0x08010f4c
 8009b1c:	40020800 	.word	0x40020800
 8009b20:	08010f64 	.word	0x08010f64
 8009b24:	08010f7c 	.word	0x08010f7c
 8009b28:	40021c00 	.word	0x40021c00
 8009b2c:	08010f94 	.word	0x08010f94
 8009b30:	08010fac 	.word	0x08010fac
 8009b34:	08010fc4 	.word	0x08010fc4

08009b38 <HAL_SPI_RxCpltCallback>:
        }
    }
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a19      	ldr	r2, [pc, #100]	@ (8009bac <HAL_SPI_RxCpltCallback+0x74>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d121      	bne.n	8009b8e <HAL_SPI_RxCpltCallback+0x56>
    	printf("SPI Interrupt Triggered\n");
 8009b4a:	4819      	ldr	r0, [pc, #100]	@ (8009bb0 <HAL_SPI_RxCpltCallback+0x78>)
 8009b4c:	f006 f91c 	bl	800fd88 <puts>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(spiQueue, spiRxBuffer, &xHigherPriorityTaskWoken);
 8009b54:	4b17      	ldr	r3, [pc, #92]	@ (8009bb4 <HAL_SPI_RxCpltCallback+0x7c>)
 8009b56:	6818      	ldr	r0, [r3, #0]
 8009b58:	f107 020c 	add.w	r2, r7, #12
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4916      	ldr	r1, [pc, #88]	@ (8009bb8 <HAL_SPI_RxCpltCallback+0x80>)
 8009b60:	f003 ff14 	bl	800d98c <xQueueGenericSendFromISR>
        memset(spiRxBuffer, 0, sizeof(spiRxBuffer));
 8009b64:	2202      	movs	r2, #2
 8009b66:	2100      	movs	r1, #0
 8009b68:	4813      	ldr	r0, [pc, #76]	@ (8009bb8 <HAL_SPI_RxCpltCallback+0x80>)
 8009b6a:	f006 fa0d 	bl	800ff88 <memset>
        HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 8009b6e:	2202      	movs	r2, #2
 8009b70:	4911      	ldr	r1, [pc, #68]	@ (8009bb8 <HAL_SPI_RxCpltCallback+0x80>)
 8009b72:	4812      	ldr	r0, [pc, #72]	@ (8009bbc <HAL_SPI_RxCpltCallback+0x84>)
 8009b74:	f001 fbde 	bl	800b334 <HAL_SPI_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_SPI_RxCpltCallback+0x56>
 8009b7e:	4b10      	ldr	r3, [pc, #64]	@ (8009bc0 <HAL_SPI_RxCpltCallback+0x88>)
 8009b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	f3bf 8f6f 	isb	sy
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60bb      	str	r3, [r7, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	60bb      	str	r3, [r7, #8]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	60bb      	str	r3, [r7, #8]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
}
 8009ba4:	bf00      	nop
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	40003800 	.word	0x40003800
 8009bb0:	08010ffc 	.word	0x08010ffc
 8009bb4:	200002dc 	.word	0x200002dc
 8009bb8:	200002f0 	.word	0x200002f0
 8009bbc:	200001ac 	.word	0x200001ac
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a13      	ldr	r2, [pc, #76]	@ (8009c20 <HAL_UART_RxCpltCallback+0x5c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d11f      	bne.n	8009c16 <HAL_UART_RxCpltCallback+0x52>
    	printf("UART Interrupt Triggered\n");
 8009bd6:	4813      	ldr	r0, [pc, #76]	@ (8009c24 <HAL_UART_RxCpltCallback+0x60>)
 8009bd8:	f006 f8d6 	bl	800fd88 <puts>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(uartQueue, uartRxBuffer, &xHigherPriorityTaskWoken);
 8009be0:	4b11      	ldr	r3, [pc, #68]	@ (8009c28 <HAL_UART_RxCpltCallback+0x64>)
 8009be2:	6818      	ldr	r0, [r3, #0]
 8009be4:	f107 020c 	add.w	r2, r7, #12
 8009be8:	2300      	movs	r3, #0
 8009bea:	4910      	ldr	r1, [pc, #64]	@ (8009c2c <HAL_UART_RxCpltCallback+0x68>)
 8009bec:	f003 fece 	bl	800d98c <xQueueGenericSendFromISR>
        memset(uartRxBuffer, 0, sizeof(uartRxBuffer));
 8009bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8009c2c <HAL_UART_RxCpltCallback+0x68>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3, uartRxBuffer, sizeof(uartRxBuffer));
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	490c      	ldr	r1, [pc, #48]	@ (8009c2c <HAL_UART_RxCpltCallback+0x68>)
 8009bfa:	480d      	ldr	r0, [pc, #52]	@ (8009c30 <HAL_UART_RxCpltCallback+0x6c>)
 8009bfc:	f002 fc5d 	bl	800c4ba <HAL_UART_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d007      	beq.n	8009c16 <HAL_UART_RxCpltCallback+0x52>
 8009c06:	4b0b      	ldr	r3, [pc, #44]	@ (8009c34 <HAL_UART_RxCpltCallback+0x70>)
 8009c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	f3bf 8f6f 	isb	sy
    }
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	40004800 	.word	0x40004800
 8009c24:	08011014 	.word	0x08011014
 8009c28:	200002e0 	.word	0x200002e0
 8009c2c:	200002ec 	.word	0x200002ec
 8009c30:	2000024c 	.word	0x2000024c
 8009c34:	e000ed04 	.word	0xe000ed04

08009c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009c70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009c3c:	f7ff fdae 	bl	800979c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009c40:	480c      	ldr	r0, [pc, #48]	@ (8009c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009c42:	490d      	ldr	r1, [pc, #52]	@ (8009c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009c44:	4a0d      	ldr	r2, [pc, #52]	@ (8009c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c48:	e002      	b.n	8009c50 <LoopCopyDataInit>

08009c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c4e:	3304      	adds	r3, #4

08009c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c54:	d3f9      	bcc.n	8009c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c56:	4a0a      	ldr	r2, [pc, #40]	@ (8009c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009c58:	4c0a      	ldr	r4, [pc, #40]	@ (8009c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c5c:	e001      	b.n	8009c62 <LoopFillZerobss>

08009c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c60:	3204      	adds	r2, #4

08009c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c64:	d3fb      	bcc.n	8009c5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8009c66:	f006 f9f1 	bl	801004c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c6a:	f7ff f91f 	bl	8008eac <main>
  bx  lr    
 8009c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8009c7c:	08011888 	.word	0x08011888
  ldr r2, =_sbss
 8009c80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8009c84:	200131f0 	.word	0x200131f0

08009c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c88:	e7fe      	b.n	8009c88 <ADC_IRQHandler>
	...

08009c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c90:	4b0e      	ldr	r3, [pc, #56]	@ (8009ccc <HAL_Init+0x40>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a0d      	ldr	r2, [pc, #52]	@ (8009ccc <HAL_Init+0x40>)
 8009c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009ccc <HAL_Init+0x40>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8009ccc <HAL_Init+0x40>)
 8009ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009ca8:	4b08      	ldr	r3, [pc, #32]	@ (8009ccc <HAL_Init+0x40>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a07      	ldr	r2, [pc, #28]	@ (8009ccc <HAL_Init+0x40>)
 8009cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009cb4:	2003      	movs	r0, #3
 8009cb6:	f000 f8fc 	bl	8009eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009cba:	200f      	movs	r0, #15
 8009cbc:	f7ff fc52 	bl	8009564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009cc0:	f7ff fadc 	bl	800927c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	40023c00 	.word	0x40023c00

08009cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009cd4:	4b06      	ldr	r3, [pc, #24]	@ (8009cf0 <HAL_IncTick+0x20>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	4b06      	ldr	r3, [pc, #24]	@ (8009cf4 <HAL_IncTick+0x24>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4413      	add	r3, r2
 8009ce0:	4a04      	ldr	r2, [pc, #16]	@ (8009cf4 <HAL_IncTick+0x24>)
 8009ce2:	6013      	str	r3, [r2, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	20000010 	.word	0x20000010
 8009cf4:	200002f4 	.word	0x200002f4

08009cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8009cfc:	4b03      	ldr	r3, [pc, #12]	@ (8009d0c <HAL_GetTick+0x14>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	200002f4 	.word	0x200002f4

08009d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d18:	f7ff ffee 	bl	8009cf8 <HAL_GetTick>
 8009d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d28:	d005      	beq.n	8009d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d54 <HAL_Delay+0x44>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d36:	bf00      	nop
 8009d38:	f7ff ffde 	bl	8009cf8 <HAL_GetTick>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d8f7      	bhi.n	8009d38 <HAL_Delay+0x28>
  {
  }
}
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20000010 	.word	0x20000010

08009d58 <__NVIC_SetPriorityGrouping>:
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f003 0307 	and.w	r3, r3, #7
 8009d66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d68:	4b0c      	ldr	r3, [pc, #48]	@ (8009d9c <__NVIC_SetPriorityGrouping+0x44>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009d74:	4013      	ands	r3, r2
 8009d76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d8a:	4a04      	ldr	r2, [pc, #16]	@ (8009d9c <__NVIC_SetPriorityGrouping+0x44>)
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	60d3      	str	r3, [r2, #12]
}
 8009d90:	bf00      	nop
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	e000ed00 	.word	0xe000ed00

08009da0 <__NVIC_GetPriorityGrouping>:
{
 8009da0:	b480      	push	{r7}
 8009da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009da4:	4b04      	ldr	r3, [pc, #16]	@ (8009db8 <__NVIC_GetPriorityGrouping+0x18>)
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	0a1b      	lsrs	r3, r3, #8
 8009daa:	f003 0307 	and.w	r3, r3, #7
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	e000ed00 	.word	0xe000ed00

08009dbc <__NVIC_EnableIRQ>:
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	db0b      	blt.n	8009de6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009dce:	79fb      	ldrb	r3, [r7, #7]
 8009dd0:	f003 021f 	and.w	r2, r3, #31
 8009dd4:	4907      	ldr	r1, [pc, #28]	@ (8009df4 <__NVIC_EnableIRQ+0x38>)
 8009dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dda:	095b      	lsrs	r3, r3, #5
 8009ddc:	2001      	movs	r0, #1
 8009dde:	fa00 f202 	lsl.w	r2, r0, r2
 8009de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009de6:	bf00      	nop
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	e000e100 	.word	0xe000e100

08009df8 <__NVIC_SetPriority>:
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	6039      	str	r1, [r7, #0]
 8009e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	db0a      	blt.n	8009e22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	490c      	ldr	r1, [pc, #48]	@ (8009e44 <__NVIC_SetPriority+0x4c>)
 8009e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e16:	0112      	lsls	r2, r2, #4
 8009e18:	b2d2      	uxtb	r2, r2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009e20:	e00a      	b.n	8009e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	4908      	ldr	r1, [pc, #32]	@ (8009e48 <__NVIC_SetPriority+0x50>)
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	3b04      	subs	r3, #4
 8009e30:	0112      	lsls	r2, r2, #4
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	440b      	add	r3, r1
 8009e36:	761a      	strb	r2, [r3, #24]
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	e000e100 	.word	0xe000e100
 8009e48:	e000ed00 	.word	0xe000ed00

08009e4c <NVIC_EncodePriority>:
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b089      	sub	sp, #36	@ 0x24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	f1c3 0307 	rsb	r3, r3, #7
 8009e66:	2b04      	cmp	r3, #4
 8009e68:	bf28      	it	cs
 8009e6a:	2304      	movcs	r3, #4
 8009e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	3304      	adds	r3, #4
 8009e72:	2b06      	cmp	r3, #6
 8009e74:	d902      	bls.n	8009e7c <NVIC_EncodePriority+0x30>
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	3b03      	subs	r3, #3
 8009e7a:	e000      	b.n	8009e7e <NVIC_EncodePriority+0x32>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	fa02 f303 	lsl.w	r3, r2, r3
 8009e8a:	43da      	mvns	r2, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	401a      	ands	r2, r3
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e94:	f04f 31ff 	mov.w	r1, #4294967295
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e9e:	43d9      	mvns	r1, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ea4:	4313      	orrs	r3, r2
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3724      	adds	r7, #36	@ 0x24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7ff ff4c 	bl	8009d58 <__NVIC_SetPriorityGrouping>
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009eda:	f7ff ff61 	bl	8009da0 <__NVIC_GetPriorityGrouping>
 8009ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	6978      	ldr	r0, [r7, #20]
 8009ee6:	f7ff ffb1 	bl	8009e4c <NVIC_EncodePriority>
 8009eea:	4602      	mov	r2, r0
 8009eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff ff80 	bl	8009df8 <__NVIC_SetPriority>
}
 8009ef8:	bf00      	nop
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7ff ff54 	bl	8009dbc <__NVIC_EnableIRQ>
}
 8009f14:	bf00      	nop
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009f2a:	f7ff fee5 	bl	8009cf8 <HAL_GetTick>
 8009f2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d008      	beq.n	8009f4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2280      	movs	r2, #128	@ 0x80
 8009f40:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e052      	b.n	8009ff4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 0216 	bic.w	r2, r2, #22
 8009f5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	695a      	ldr	r2, [r3, #20]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d103      	bne.n	8009f7e <HAL_DMA_Abort+0x62>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d007      	beq.n	8009f8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f022 0208 	bic.w	r2, r2, #8
 8009f8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0201 	bic.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f9e:	e013      	b.n	8009fc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009fa0:	f7ff feaa 	bl	8009cf8 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	2b05      	cmp	r3, #5
 8009fac:	d90c      	bls.n	8009fc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2203      	movs	r2, #3
 8009fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e015      	b.n	8009ff4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e4      	bne.n	8009fa0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fda:	223f      	movs	r2, #63	@ 0x3f
 8009fdc:	409a      	lsls	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d004      	beq.n	800a01a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2280      	movs	r2, #128	@ 0x80
 800a014:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e00c      	b.n	800a034 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2205      	movs	r2, #5
 800a01e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f022 0201 	bic.w	r2, r2, #1
 800a030:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a040:	b480      	push	{r7}
 800a042:	b089      	sub	sp, #36	@ 0x24
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a04e:	2300      	movs	r3, #0
 800a050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a052:	2300      	movs	r3, #0
 800a054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a056:	2300      	movs	r3, #0
 800a058:	61fb      	str	r3, [r7, #28]
 800a05a:	e165      	b.n	800a328 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a05c:	2201      	movs	r2, #1
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	fa02 f303 	lsl.w	r3, r2, r3
 800a064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	4013      	ands	r3, r2
 800a06e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	f040 8154 	bne.w	800a322 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	2b01      	cmp	r3, #1
 800a084:	d005      	beq.n	800a092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d130      	bne.n	800a0f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	2203      	movs	r2, #3
 800a09e:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a2:	43db      	mvns	r3, r3
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d0:	43db      	mvns	r3, r3
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	091b      	lsrs	r3, r3, #4
 800a0de:	f003 0201 	and.w	r2, r3, #1
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f003 0303 	and.w	r3, r3, #3
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d017      	beq.n	800a130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	2203      	movs	r2, #3
 800a10c:	fa02 f303 	lsl.w	r3, r2, r3
 800a110:	43db      	mvns	r3, r3
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	4013      	ands	r3, r2
 800a116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	689a      	ldr	r2, [r3, #8]
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	fa02 f303 	lsl.w	r3, r2, r3
 800a124:	69ba      	ldr	r2, [r7, #24]
 800a126:	4313      	orrs	r3, r2
 800a128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f003 0303 	and.w	r3, r3, #3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d123      	bne.n	800a184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	08da      	lsrs	r2, r3, #3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3208      	adds	r2, #8
 800a144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	f003 0307 	and.w	r3, r3, #7
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	220f      	movs	r2, #15
 800a154:	fa02 f303 	lsl.w	r3, r2, r3
 800a158:	43db      	mvns	r3, r3
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	4013      	ands	r3, r2
 800a15e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	fa02 f303 	lsl.w	r3, r2, r3
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	4313      	orrs	r3, r2
 800a174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	08da      	lsrs	r2, r3, #3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3208      	adds	r2, #8
 800a17e:	69b9      	ldr	r1, [r7, #24]
 800a180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	005b      	lsls	r3, r3, #1
 800a18e:	2203      	movs	r2, #3
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	43db      	mvns	r3, r3
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	4013      	ands	r3, r2
 800a19a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	f003 0203 	and.w	r2, r3, #3
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 80ae 	beq.w	800a322 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	4b5d      	ldr	r3, [pc, #372]	@ (800a340 <HAL_GPIO_Init+0x300>)
 800a1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ce:	4a5c      	ldr	r2, [pc, #368]	@ (800a340 <HAL_GPIO_Init+0x300>)
 800a1d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1d4:	6453      	str	r3, [r2, #68]	@ 0x44
 800a1d6:	4b5a      	ldr	r3, [pc, #360]	@ (800a340 <HAL_GPIO_Init+0x300>)
 800a1d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a1e2:	4a58      	ldr	r2, [pc, #352]	@ (800a344 <HAL_GPIO_Init+0x304>)
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	089b      	lsrs	r3, r3, #2
 800a1e8:	3302      	adds	r3, #2
 800a1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	f003 0303 	and.w	r3, r3, #3
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	220f      	movs	r2, #15
 800a1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fe:	43db      	mvns	r3, r3
 800a200:	69ba      	ldr	r2, [r7, #24]
 800a202:	4013      	ands	r3, r2
 800a204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a4f      	ldr	r2, [pc, #316]	@ (800a348 <HAL_GPIO_Init+0x308>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d025      	beq.n	800a25a <HAL_GPIO_Init+0x21a>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a4e      	ldr	r2, [pc, #312]	@ (800a34c <HAL_GPIO_Init+0x30c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d01f      	beq.n	800a256 <HAL_GPIO_Init+0x216>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a4d      	ldr	r2, [pc, #308]	@ (800a350 <HAL_GPIO_Init+0x310>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d019      	beq.n	800a252 <HAL_GPIO_Init+0x212>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a4c      	ldr	r2, [pc, #304]	@ (800a354 <HAL_GPIO_Init+0x314>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d013      	beq.n	800a24e <HAL_GPIO_Init+0x20e>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a4b      	ldr	r2, [pc, #300]	@ (800a358 <HAL_GPIO_Init+0x318>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00d      	beq.n	800a24a <HAL_GPIO_Init+0x20a>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a4a      	ldr	r2, [pc, #296]	@ (800a35c <HAL_GPIO_Init+0x31c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d007      	beq.n	800a246 <HAL_GPIO_Init+0x206>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a49      	ldr	r2, [pc, #292]	@ (800a360 <HAL_GPIO_Init+0x320>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d101      	bne.n	800a242 <HAL_GPIO_Init+0x202>
 800a23e:	2306      	movs	r3, #6
 800a240:	e00c      	b.n	800a25c <HAL_GPIO_Init+0x21c>
 800a242:	2307      	movs	r3, #7
 800a244:	e00a      	b.n	800a25c <HAL_GPIO_Init+0x21c>
 800a246:	2305      	movs	r3, #5
 800a248:	e008      	b.n	800a25c <HAL_GPIO_Init+0x21c>
 800a24a:	2304      	movs	r3, #4
 800a24c:	e006      	b.n	800a25c <HAL_GPIO_Init+0x21c>
 800a24e:	2303      	movs	r3, #3
 800a250:	e004      	b.n	800a25c <HAL_GPIO_Init+0x21c>
 800a252:	2302      	movs	r3, #2
 800a254:	e002      	b.n	800a25c <HAL_GPIO_Init+0x21c>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <HAL_GPIO_Init+0x21c>
 800a25a:	2300      	movs	r3, #0
 800a25c:	69fa      	ldr	r2, [r7, #28]
 800a25e:	f002 0203 	and.w	r2, r2, #3
 800a262:	0092      	lsls	r2, r2, #2
 800a264:	4093      	lsls	r3, r2
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	4313      	orrs	r3, r2
 800a26a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a26c:	4935      	ldr	r1, [pc, #212]	@ (800a344 <HAL_GPIO_Init+0x304>)
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	089b      	lsrs	r3, r3, #2
 800a272:	3302      	adds	r3, #2
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a27a:	4b3a      	ldr	r3, [pc, #232]	@ (800a364 <HAL_GPIO_Init+0x324>)
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	43db      	mvns	r3, r3
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	4013      	ands	r3, r2
 800a288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d003      	beq.n	800a29e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a29e:	4a31      	ldr	r2, [pc, #196]	@ (800a364 <HAL_GPIO_Init+0x324>)
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a2a4:	4b2f      	ldr	r3, [pc, #188]	@ (800a364 <HAL_GPIO_Init+0x324>)
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	43db      	mvns	r3, r3
 800a2ae:	69ba      	ldr	r2, [r7, #24]
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a2c8:	4a26      	ldr	r2, [pc, #152]	@ (800a364 <HAL_GPIO_Init+0x324>)
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a2ce:	4b25      	ldr	r3, [pc, #148]	@ (800a364 <HAL_GPIO_Init+0x324>)
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	43db      	mvns	r3, r3
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800a2ea:	69ba      	ldr	r2, [r7, #24]
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a2f2:	4a1c      	ldr	r2, [pc, #112]	@ (800a364 <HAL_GPIO_Init+0x324>)
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a2f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a364 <HAL_GPIO_Init+0x324>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	43db      	mvns	r3, r3
 800a302:	69ba      	ldr	r2, [r7, #24]
 800a304:	4013      	ands	r3, r2
 800a306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a314:	69ba      	ldr	r2, [r7, #24]
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	4313      	orrs	r3, r2
 800a31a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a31c:	4a11      	ldr	r2, [pc, #68]	@ (800a364 <HAL_GPIO_Init+0x324>)
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	3301      	adds	r3, #1
 800a326:	61fb      	str	r3, [r7, #28]
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	2b0f      	cmp	r3, #15
 800a32c:	f67f ae96 	bls.w	800a05c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	3724      	adds	r7, #36	@ 0x24
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	40023800 	.word	0x40023800
 800a344:	40013800 	.word	0x40013800
 800a348:	40020000 	.word	0x40020000
 800a34c:	40020400 	.word	0x40020400
 800a350:	40020800 	.word	0x40020800
 800a354:	40020c00 	.word	0x40020c00
 800a358:	40021000 	.word	0x40021000
 800a35c:	40021400 	.word	0x40021400
 800a360:	40021800 	.word	0x40021800
 800a364:	40013c00 	.word	0x40013c00

0800a368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	460b      	mov	r3, r1
 800a372:	807b      	strh	r3, [r7, #2]
 800a374:	4613      	mov	r3, r2
 800a376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a378:	787b      	ldrb	r3, [r7, #1]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a37e:	887a      	ldrh	r2, [r7, #2]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a384:	e003      	b.n	800a38e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a386:	887b      	ldrh	r3, [r7, #2]
 800a388:	041a      	lsls	r2, r3, #16
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	619a      	str	r2, [r3, #24]
}
 800a38e:	bf00      	nop
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a3ac:	887a      	ldrh	r2, [r7, #2]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	041a      	lsls	r2, r3, #16
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	43d9      	mvns	r1, r3
 800a3b8:	887b      	ldrh	r3, [r7, #2]
 800a3ba:	400b      	ands	r3, r1
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	619a      	str	r2, [r3, #24]
}
 800a3c2:	bf00      	nop
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a3da:	2300      	movs	r3, #0
 800a3dc:	603b      	str	r3, [r7, #0]
 800a3de:	4b20      	ldr	r3, [pc, #128]	@ (800a460 <HAL_PWREx_EnableOverDrive+0x90>)
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e2:	4a1f      	ldr	r2, [pc, #124]	@ (800a460 <HAL_PWREx_EnableOverDrive+0x90>)
 800a3e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3e8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a3ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a460 <HAL_PWREx_EnableOverDrive+0x90>)
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a3f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a464 <HAL_PWREx_EnableOverDrive+0x94>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a3fc:	f7ff fc7c 	bl	8009cf8 <HAL_GetTick>
 800a400:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a402:	e009      	b.n	800a418 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a404:	f7ff fc78 	bl	8009cf8 <HAL_GetTick>
 800a408:	4602      	mov	r2, r0
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a412:	d901      	bls.n	800a418 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e01f      	b.n	800a458 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a418:	4b13      	ldr	r3, [pc, #76]	@ (800a468 <HAL_PWREx_EnableOverDrive+0x98>)
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a424:	d1ee      	bne.n	800a404 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a426:	4b11      	ldr	r3, [pc, #68]	@ (800a46c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a428:	2201      	movs	r2, #1
 800a42a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a42c:	f7ff fc64 	bl	8009cf8 <HAL_GetTick>
 800a430:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a432:	e009      	b.n	800a448 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a434:	f7ff fc60 	bl	8009cf8 <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a442:	d901      	bls.n	800a448 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e007      	b.n	800a458 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a448:	4b07      	ldr	r3, [pc, #28]	@ (800a468 <HAL_PWREx_EnableOverDrive+0x98>)
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a450:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a454:	d1ee      	bne.n	800a434 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	40023800 	.word	0x40023800
 800a464:	420e0040 	.word	0x420e0040
 800a468:	40007000 	.word	0x40007000
 800a46c:	420e0044 	.word	0x420e0044

0800a470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e0cc      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a484:	4b68      	ldr	r3, [pc, #416]	@ (800a628 <HAL_RCC_ClockConfig+0x1b8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 030f 	and.w	r3, r3, #15
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d90c      	bls.n	800a4ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a492:	4b65      	ldr	r3, [pc, #404]	@ (800a628 <HAL_RCC_ClockConfig+0x1b8>)
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	b2d2      	uxtb	r2, r2
 800a498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a49a:	4b63      	ldr	r3, [pc, #396]	@ (800a628 <HAL_RCC_ClockConfig+0x1b8>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d001      	beq.n	800a4ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e0b8      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d020      	beq.n	800a4fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4c4:	4b59      	ldr	r3, [pc, #356]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	4a58      	ldr	r2, [pc, #352]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a4ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a4ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a4dc:	4b53      	ldr	r3, [pc, #332]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	4a52      	ldr	r2, [pc, #328]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a4e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a4e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4e8:	4b50      	ldr	r3, [pc, #320]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	494d      	ldr	r1, [pc, #308]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d044      	beq.n	800a590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d107      	bne.n	800a51e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a50e:	4b47      	ldr	r3, [pc, #284]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d119      	bne.n	800a54e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e07f      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	2b02      	cmp	r3, #2
 800a524:	d003      	beq.n	800a52e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a52a:	2b03      	cmp	r3, #3
 800a52c:	d107      	bne.n	800a53e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a52e:	4b3f      	ldr	r3, [pc, #252]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d109      	bne.n	800a54e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e06f      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a53e:	4b3b      	ldr	r3, [pc, #236]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e067      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a54e:	4b37      	ldr	r3, [pc, #220]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f023 0203 	bic.w	r2, r3, #3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	4934      	ldr	r1, [pc, #208]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a560:	f7ff fbca 	bl	8009cf8 <HAL_GetTick>
 800a564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a566:	e00a      	b.n	800a57e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a568:	f7ff fbc6 	bl	8009cf8 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a576:	4293      	cmp	r3, r2
 800a578:	d901      	bls.n	800a57e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e04f      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a57e:	4b2b      	ldr	r3, [pc, #172]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f003 020c 	and.w	r2, r3, #12
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d1eb      	bne.n	800a568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a590:	4b25      	ldr	r3, [pc, #148]	@ (800a628 <HAL_RCC_ClockConfig+0x1b8>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d20c      	bcs.n	800a5b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a59e:	4b22      	ldr	r3, [pc, #136]	@ (800a628 <HAL_RCC_ClockConfig+0x1b8>)
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	b2d2      	uxtb	r2, r2
 800a5a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5a6:	4b20      	ldr	r3, [pc, #128]	@ (800a628 <HAL_RCC_ClockConfig+0x1b8>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 030f 	and.w	r3, r3, #15
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d001      	beq.n	800a5b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e032      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d008      	beq.n	800a5d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5c4:	4b19      	ldr	r3, [pc, #100]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	4916      	ldr	r1, [pc, #88]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0308 	and.w	r3, r3, #8
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d009      	beq.n	800a5f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5e2:	4b12      	ldr	r3, [pc, #72]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	490e      	ldr	r1, [pc, #56]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a5f6:	f000 f887 	bl	800a708 <HAL_RCC_GetSysClockFreq>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a62c <HAL_RCC_ClockConfig+0x1bc>)
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	091b      	lsrs	r3, r3, #4
 800a602:	f003 030f 	and.w	r3, r3, #15
 800a606:	490a      	ldr	r1, [pc, #40]	@ (800a630 <HAL_RCC_ClockConfig+0x1c0>)
 800a608:	5ccb      	ldrb	r3, [r1, r3]
 800a60a:	fa22 f303 	lsr.w	r3, r2, r3
 800a60e:	4a09      	ldr	r2, [pc, #36]	@ (800a634 <HAL_RCC_ClockConfig+0x1c4>)
 800a610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a612:	4b09      	ldr	r3, [pc, #36]	@ (800a638 <HAL_RCC_ClockConfig+0x1c8>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe ffa4 	bl	8009564 <HAL_InitTick>

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	40023c00 	.word	0x40023c00
 800a62c:	40023800 	.word	0x40023800
 800a630:	08011828 	.word	0x08011828
 800a634:	20000008 	.word	0x20000008
 800a638:	2000000c 	.word	0x2000000c

0800a63c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a63c:	b480      	push	{r7}
 800a63e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a640:	4b03      	ldr	r3, [pc, #12]	@ (800a650 <HAL_RCC_GetHCLKFreq+0x14>)
 800a642:	681b      	ldr	r3, [r3, #0]
}
 800a644:	4618      	mov	r0, r3
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20000008 	.word	0x20000008

0800a654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a658:	f7ff fff0 	bl	800a63c <HAL_RCC_GetHCLKFreq>
 800a65c:	4602      	mov	r2, r0
 800a65e:	4b05      	ldr	r3, [pc, #20]	@ (800a674 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	0a9b      	lsrs	r3, r3, #10
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	4903      	ldr	r1, [pc, #12]	@ (800a678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a66a:	5ccb      	ldrb	r3, [r1, r3]
 800a66c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a670:	4618      	mov	r0, r3
 800a672:	bd80      	pop	{r7, pc}
 800a674:	40023800 	.word	0x40023800
 800a678:	08011838 	.word	0x08011838

0800a67c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a680:	f7ff ffdc 	bl	800a63c <HAL_RCC_GetHCLKFreq>
 800a684:	4602      	mov	r2, r0
 800a686:	4b05      	ldr	r3, [pc, #20]	@ (800a69c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	0b5b      	lsrs	r3, r3, #13
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	4903      	ldr	r1, [pc, #12]	@ (800a6a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a692:	5ccb      	ldrb	r3, [r1, r3]
 800a694:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a698:	4618      	mov	r0, r3
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	40023800 	.word	0x40023800
 800a6a0:	08011838 	.word	0x08011838

0800a6a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	220f      	movs	r2, #15
 800a6b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a6b4:	4b12      	ldr	r3, [pc, #72]	@ (800a700 <HAL_RCC_GetClockConfig+0x5c>)
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	f003 0203 	and.w	r2, r3, #3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a6c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a700 <HAL_RCC_GetClockConfig+0x5c>)
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a700 <HAL_RCC_GetClockConfig+0x5c>)
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a6d8:	4b09      	ldr	r3, [pc, #36]	@ (800a700 <HAL_RCC_GetClockConfig+0x5c>)
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	08db      	lsrs	r3, r3, #3
 800a6de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a6e6:	4b07      	ldr	r3, [pc, #28]	@ (800a704 <HAL_RCC_GetClockConfig+0x60>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 020f 	and.w	r2, r3, #15
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	601a      	str	r2, [r3, #0]
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	40023800 	.word	0x40023800
 800a704:	40023c00 	.word	0x40023c00

0800a708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a70c:	b0a6      	sub	sp, #152	@ 0x98
 800a70e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a710:	2300      	movs	r3, #0
 800a712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800a71c:	2300      	movs	r3, #0
 800a71e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800a728:	2300      	movs	r3, #0
 800a72a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a72e:	4bc8      	ldr	r3, [pc, #800]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f003 030c 	and.w	r3, r3, #12
 800a736:	2b0c      	cmp	r3, #12
 800a738:	f200 817e 	bhi.w	800aa38 <HAL_RCC_GetSysClockFreq+0x330>
 800a73c:	a201      	add	r2, pc, #4	@ (adr r2, 800a744 <HAL_RCC_GetSysClockFreq+0x3c>)
 800a73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a742:	bf00      	nop
 800a744:	0800a779 	.word	0x0800a779
 800a748:	0800aa39 	.word	0x0800aa39
 800a74c:	0800aa39 	.word	0x0800aa39
 800a750:	0800aa39 	.word	0x0800aa39
 800a754:	0800a781 	.word	0x0800a781
 800a758:	0800aa39 	.word	0x0800aa39
 800a75c:	0800aa39 	.word	0x0800aa39
 800a760:	0800aa39 	.word	0x0800aa39
 800a764:	0800a789 	.word	0x0800a789
 800a768:	0800aa39 	.word	0x0800aa39
 800a76c:	0800aa39 	.word	0x0800aa39
 800a770:	0800aa39 	.word	0x0800aa39
 800a774:	0800a8f3 	.word	0x0800a8f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a778:	4bb6      	ldr	r3, [pc, #728]	@ (800aa54 <HAL_RCC_GetSysClockFreq+0x34c>)
 800a77a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800a77e:	e15f      	b.n	800aa40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a780:	4bb5      	ldr	r3, [pc, #724]	@ (800aa58 <HAL_RCC_GetSysClockFreq+0x350>)
 800a782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800a786:	e15b      	b.n	800aa40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a788:	4bb1      	ldr	r3, [pc, #708]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a790:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a794:	4bae      	ldr	r3, [pc, #696]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d031      	beq.n	800a804 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7a0:	4bab      	ldr	r3, [pc, #684]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	099b      	lsrs	r3, r3, #6
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a7ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7b8:	4ba7      	ldr	r3, [pc, #668]	@ (800aa58 <HAL_RCC_GetSysClockFreq+0x350>)
 800a7ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800a7be:	462a      	mov	r2, r5
 800a7c0:	fb03 f202 	mul.w	r2, r3, r2
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	fb01 f303 	mul.w	r3, r1, r3
 800a7cc:	4413      	add	r3, r2
 800a7ce:	4aa2      	ldr	r2, [pc, #648]	@ (800aa58 <HAL_RCC_GetSysClockFreq+0x350>)
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	fba1 1202 	umull	r1, r2, r1, r2
 800a7d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a7d8:	460a      	mov	r2, r1
 800a7da:	67ba      	str	r2, [r7, #120]	@ 0x78
 800a7dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a7de:	4413      	add	r3, r2
 800a7e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a7e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800a7ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a7f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800a7f4:	f7fd fd6c 	bl	80082d0 <__aeabi_uldivmod>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a802:	e064      	b.n	800a8ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a804:	4b92      	ldr	r3, [pc, #584]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	099b      	lsrs	r3, r3, #6
 800a80a:	2200      	movs	r2, #0
 800a80c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a80e:	657a      	str	r2, [r7, #84]	@ 0x54
 800a810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a816:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a818:	2300      	movs	r3, #0
 800a81a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a81c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800a820:	4622      	mov	r2, r4
 800a822:	462b      	mov	r3, r5
 800a824:	f04f 0000 	mov.w	r0, #0
 800a828:	f04f 0100 	mov.w	r1, #0
 800a82c:	0159      	lsls	r1, r3, #5
 800a82e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a832:	0150      	lsls	r0, r2, #5
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4621      	mov	r1, r4
 800a83a:	1a51      	subs	r1, r2, r1
 800a83c:	6139      	str	r1, [r7, #16]
 800a83e:	4629      	mov	r1, r5
 800a840:	eb63 0301 	sbc.w	r3, r3, r1
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a852:	4659      	mov	r1, fp
 800a854:	018b      	lsls	r3, r1, #6
 800a856:	4651      	mov	r1, sl
 800a858:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a85c:	4651      	mov	r1, sl
 800a85e:	018a      	lsls	r2, r1, #6
 800a860:	4651      	mov	r1, sl
 800a862:	ebb2 0801 	subs.w	r8, r2, r1
 800a866:	4659      	mov	r1, fp
 800a868:	eb63 0901 	sbc.w	r9, r3, r1
 800a86c:	f04f 0200 	mov.w	r2, #0
 800a870:	f04f 0300 	mov.w	r3, #0
 800a874:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a878:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a87c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a880:	4690      	mov	r8, r2
 800a882:	4699      	mov	r9, r3
 800a884:	4623      	mov	r3, r4
 800a886:	eb18 0303 	adds.w	r3, r8, r3
 800a88a:	60bb      	str	r3, [r7, #8]
 800a88c:	462b      	mov	r3, r5
 800a88e:	eb49 0303 	adc.w	r3, r9, r3
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	f04f 0200 	mov.w	r2, #0
 800a898:	f04f 0300 	mov.w	r3, #0
 800a89c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	028b      	lsls	r3, r1, #10
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	028a      	lsls	r2, r1, #10
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8ba:	647a      	str	r2, [r7, #68]	@ 0x44
 800a8bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a8c0:	f7fd fd06 	bl	80082d0 <__aeabi_uldivmod>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a8ce:	4b60      	ldr	r3, [pc, #384]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	0c1b      	lsrs	r3, r3, #16
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	3301      	adds	r3, #1
 800a8da:	005b      	lsls	r3, r3, #1
 800a8dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800a8e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a8e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800a8f0:	e0a6      	b.n	800aa40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8f2:	4b57      	ldr	r3, [pc, #348]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a8fe:	4b54      	ldr	r3, [pc, #336]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d02a      	beq.n	800a960 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a90a:	4b51      	ldr	r3, [pc, #324]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	099b      	lsrs	r3, r3, #6
 800a910:	2200      	movs	r2, #0
 800a912:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a914:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a91c:	2100      	movs	r1, #0
 800a91e:	4b4e      	ldr	r3, [pc, #312]	@ (800aa58 <HAL_RCC_GetSysClockFreq+0x350>)
 800a920:	fb03 f201 	mul.w	r2, r3, r1
 800a924:	2300      	movs	r3, #0
 800a926:	fb00 f303 	mul.w	r3, r0, r3
 800a92a:	4413      	add	r3, r2
 800a92c:	4a4a      	ldr	r2, [pc, #296]	@ (800aa58 <HAL_RCC_GetSysClockFreq+0x350>)
 800a92e:	fba0 1202 	umull	r1, r2, r0, r2
 800a932:	677a      	str	r2, [r7, #116]	@ 0x74
 800a934:	460a      	mov	r2, r1
 800a936:	673a      	str	r2, [r7, #112]	@ 0x70
 800a938:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a93a:	4413      	add	r3, r2
 800a93c:	677b      	str	r3, [r7, #116]	@ 0x74
 800a93e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a942:	2200      	movs	r2, #0
 800a944:	633b      	str	r3, [r7, #48]	@ 0x30
 800a946:	637a      	str	r2, [r7, #52]	@ 0x34
 800a948:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a94c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800a950:	f7fd fcbe 	bl	80082d0 <__aeabi_uldivmod>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4613      	mov	r3, r2
 800a95a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a95e:	e05b      	b.n	800aa18 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a960:	4b3b      	ldr	r3, [pc, #236]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	099b      	lsrs	r3, r3, #6
 800a966:	2200      	movs	r2, #0
 800a968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a96a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a972:	623b      	str	r3, [r7, #32]
 800a974:	2300      	movs	r3, #0
 800a976:	627b      	str	r3, [r7, #36]	@ 0x24
 800a978:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a97c:	4642      	mov	r2, r8
 800a97e:	464b      	mov	r3, r9
 800a980:	f04f 0000 	mov.w	r0, #0
 800a984:	f04f 0100 	mov.w	r1, #0
 800a988:	0159      	lsls	r1, r3, #5
 800a98a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a98e:	0150      	lsls	r0, r2, #5
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4641      	mov	r1, r8
 800a996:	ebb2 0a01 	subs.w	sl, r2, r1
 800a99a:	4649      	mov	r1, r9
 800a99c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a9a0:	f04f 0200 	mov.w	r2, #0
 800a9a4:	f04f 0300 	mov.w	r3, #0
 800a9a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a9ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a9b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a9b4:	ebb2 040a 	subs.w	r4, r2, sl
 800a9b8:	eb63 050b 	sbc.w	r5, r3, fp
 800a9bc:	f04f 0200 	mov.w	r2, #0
 800a9c0:	f04f 0300 	mov.w	r3, #0
 800a9c4:	00eb      	lsls	r3, r5, #3
 800a9c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9ca:	00e2      	lsls	r2, r4, #3
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	461d      	mov	r5, r3
 800a9d0:	4643      	mov	r3, r8
 800a9d2:	18e3      	adds	r3, r4, r3
 800a9d4:	603b      	str	r3, [r7, #0]
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	eb45 0303 	adc.w	r3, r5, r3
 800a9dc:	607b      	str	r3, [r7, #4]
 800a9de:	f04f 0200 	mov.w	r2, #0
 800a9e2:	f04f 0300 	mov.w	r3, #0
 800a9e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	028b      	lsls	r3, r1, #10
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	028a      	lsls	r2, r1, #10
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa00:	2200      	movs	r2, #0
 800aa02:	61bb      	str	r3, [r7, #24]
 800aa04:	61fa      	str	r2, [r7, #28]
 800aa06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa0a:	f7fd fc61 	bl	80082d0 <__aeabi_uldivmod>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	4613      	mov	r3, r2
 800aa14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800aa18:	4b0d      	ldr	r3, [pc, #52]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x348>)
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	0f1b      	lsrs	r3, r3, #28
 800aa1e:	f003 0307 	and.w	r3, r3, #7
 800aa22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800aa26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800aa36:	e003      	b.n	800aa40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa38:	4b06      	ldr	r3, [pc, #24]	@ (800aa54 <HAL_RCC_GetSysClockFreq+0x34c>)
 800aa3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800aa3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3798      	adds	r7, #152	@ 0x98
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa4e:	bf00      	nop
 800aa50:	40023800 	.word	0x40023800
 800aa54:	00f42400 	.word	0x00f42400
 800aa58:	017d7840 	.word	0x017d7840

0800aa5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e28d      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 8083 	beq.w	800ab82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800aa7c:	4b94      	ldr	r3, [pc, #592]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f003 030c 	and.w	r3, r3, #12
 800aa84:	2b04      	cmp	r3, #4
 800aa86:	d019      	beq.n	800aabc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800aa88:	4b91      	ldr	r3, [pc, #580]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f003 030c 	and.w	r3, r3, #12
        || \
 800aa90:	2b08      	cmp	r3, #8
 800aa92:	d106      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800aa94:	4b8e      	ldr	r3, [pc, #568]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aaa0:	d00c      	beq.n	800aabc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aaa2:	4b8b      	ldr	r3, [pc, #556]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800aaaa:	2b0c      	cmp	r3, #12
 800aaac:	d112      	bne.n	800aad4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aaae:	4b88      	ldr	r3, [pc, #544]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aaba:	d10b      	bne.n	800aad4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aabc:	4b84      	ldr	r3, [pc, #528]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d05b      	beq.n	800ab80 <HAL_RCC_OscConfig+0x124>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d157      	bne.n	800ab80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e25a      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aadc:	d106      	bne.n	800aaec <HAL_RCC_OscConfig+0x90>
 800aade:	4b7c      	ldr	r3, [pc, #496]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a7b      	ldr	r2, [pc, #492]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	e01d      	b.n	800ab28 <HAL_RCC_OscConfig+0xcc>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aaf4:	d10c      	bne.n	800ab10 <HAL_RCC_OscConfig+0xb4>
 800aaf6:	4b76      	ldr	r3, [pc, #472]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a75      	ldr	r2, [pc, #468]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aafc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	4b73      	ldr	r3, [pc, #460]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a72      	ldr	r2, [pc, #456]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	e00b      	b.n	800ab28 <HAL_RCC_OscConfig+0xcc>
 800ab10:	4b6f      	ldr	r3, [pc, #444]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a6e      	ldr	r2, [pc, #440]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	4b6c      	ldr	r3, [pc, #432]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a6b      	ldr	r2, [pc, #428]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d013      	beq.n	800ab58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab30:	f7ff f8e2 	bl	8009cf8 <HAL_GetTick>
 800ab34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab36:	e008      	b.n	800ab4a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab38:	f7ff f8de 	bl	8009cf8 <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	2b64      	cmp	r3, #100	@ 0x64
 800ab44:	d901      	bls.n	800ab4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e21f      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab4a:	4b61      	ldr	r3, [pc, #388]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0f0      	beq.n	800ab38 <HAL_RCC_OscConfig+0xdc>
 800ab56:	e014      	b.n	800ab82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab58:	f7ff f8ce 	bl	8009cf8 <HAL_GetTick>
 800ab5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab5e:	e008      	b.n	800ab72 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab60:	f7ff f8ca 	bl	8009cf8 <HAL_GetTick>
 800ab64:	4602      	mov	r2, r0
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	2b64      	cmp	r3, #100	@ 0x64
 800ab6c:	d901      	bls.n	800ab72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e20b      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab72:	4b57      	ldr	r3, [pc, #348]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1f0      	bne.n	800ab60 <HAL_RCC_OscConfig+0x104>
 800ab7e:	e000      	b.n	800ab82 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d06f      	beq.n	800ac6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ab8e:	4b50      	ldr	r3, [pc, #320]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f003 030c 	and.w	r3, r3, #12
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d017      	beq.n	800abca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ab9a:	4b4d      	ldr	r3, [pc, #308]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f003 030c 	and.w	r3, r3, #12
        || \
 800aba2:	2b08      	cmp	r3, #8
 800aba4:	d105      	bne.n	800abb2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800aba6:	4b4a      	ldr	r3, [pc, #296]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00b      	beq.n	800abca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800abb2:	4b47      	ldr	r3, [pc, #284]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800abba:	2b0c      	cmp	r3, #12
 800abbc:	d11c      	bne.n	800abf8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800abbe:	4b44      	ldr	r3, [pc, #272]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d116      	bne.n	800abf8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abca:	4b41      	ldr	r3, [pc, #260]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d005      	beq.n	800abe2 <HAL_RCC_OscConfig+0x186>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d001      	beq.n	800abe2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e1d3      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abe2:	4b3b      	ldr	r3, [pc, #236]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	4937      	ldr	r1, [pc, #220]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abf6:	e03a      	b.n	800ac6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d020      	beq.n	800ac42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac00:	4b34      	ldr	r3, [pc, #208]	@ (800acd4 <HAL_RCC_OscConfig+0x278>)
 800ac02:	2201      	movs	r2, #1
 800ac04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac06:	f7ff f877 	bl	8009cf8 <HAL_GetTick>
 800ac0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac0c:	e008      	b.n	800ac20 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac0e:	f7ff f873 	bl	8009cf8 <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d901      	bls.n	800ac20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e1b4      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac20:	4b2b      	ldr	r3, [pc, #172]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0302 	and.w	r3, r3, #2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0f0      	beq.n	800ac0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac2c:	4b28      	ldr	r3, [pc, #160]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	4925      	ldr	r1, [pc, #148]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	600b      	str	r3, [r1, #0]
 800ac40:	e015      	b.n	800ac6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac42:	4b24      	ldr	r3, [pc, #144]	@ (800acd4 <HAL_RCC_OscConfig+0x278>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac48:	f7ff f856 	bl	8009cf8 <HAL_GetTick>
 800ac4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac4e:	e008      	b.n	800ac62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac50:	f7ff f852 	bl	8009cf8 <HAL_GetTick>
 800ac54:	4602      	mov	r2, r0
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d901      	bls.n	800ac62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e193      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac62:	4b1b      	ldr	r3, [pc, #108]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1f0      	bne.n	800ac50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 0308 	and.w	r3, r3, #8
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d036      	beq.n	800ace8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d016      	beq.n	800acb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac82:	4b15      	ldr	r3, [pc, #84]	@ (800acd8 <HAL_RCC_OscConfig+0x27c>)
 800ac84:	2201      	movs	r2, #1
 800ac86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac88:	f7ff f836 	bl	8009cf8 <HAL_GetTick>
 800ac8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac8e:	e008      	b.n	800aca2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac90:	f7ff f832 	bl	8009cf8 <HAL_GetTick>
 800ac94:	4602      	mov	r2, r0
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	d901      	bls.n	800aca2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e173      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aca2:	4b0b      	ldr	r3, [pc, #44]	@ (800acd0 <HAL_RCC_OscConfig+0x274>)
 800aca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aca6:	f003 0302 	and.w	r3, r3, #2
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0f0      	beq.n	800ac90 <HAL_RCC_OscConfig+0x234>
 800acae:	e01b      	b.n	800ace8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800acb0:	4b09      	ldr	r3, [pc, #36]	@ (800acd8 <HAL_RCC_OscConfig+0x27c>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acb6:	f7ff f81f 	bl	8009cf8 <HAL_GetTick>
 800acba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800acbc:	e00e      	b.n	800acdc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acbe:	f7ff f81b 	bl	8009cf8 <HAL_GetTick>
 800acc2:	4602      	mov	r2, r0
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d907      	bls.n	800acdc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e15c      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
 800acd0:	40023800 	.word	0x40023800
 800acd4:	42470000 	.word	0x42470000
 800acd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800acdc:	4b8a      	ldr	r3, [pc, #552]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800acde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ace0:	f003 0302 	and.w	r3, r3, #2
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1ea      	bne.n	800acbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 0304 	and.w	r3, r3, #4
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 8097 	beq.w	800ae24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800acf6:	2300      	movs	r3, #0
 800acf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acfa:	4b83      	ldr	r3, [pc, #524]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800acfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10f      	bne.n	800ad26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad06:	2300      	movs	r3, #0
 800ad08:	60bb      	str	r3, [r7, #8]
 800ad0a:	4b7f      	ldr	r3, [pc, #508]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0e:	4a7e      	ldr	r2, [pc, #504]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad14:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad16:	4b7c      	ldr	r3, [pc, #496]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad1e:	60bb      	str	r3, [r7, #8]
 800ad20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad22:	2301      	movs	r3, #1
 800ad24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad26:	4b79      	ldr	r3, [pc, #484]	@ (800af0c <HAL_RCC_OscConfig+0x4b0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d118      	bne.n	800ad64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad32:	4b76      	ldr	r3, [pc, #472]	@ (800af0c <HAL_RCC_OscConfig+0x4b0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a75      	ldr	r2, [pc, #468]	@ (800af0c <HAL_RCC_OscConfig+0x4b0>)
 800ad38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad3e:	f7fe ffdb 	bl	8009cf8 <HAL_GetTick>
 800ad42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad44:	e008      	b.n	800ad58 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad46:	f7fe ffd7 	bl	8009cf8 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d901      	bls.n	800ad58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e118      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad58:	4b6c      	ldr	r3, [pc, #432]	@ (800af0c <HAL_RCC_OscConfig+0x4b0>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d0f0      	beq.n	800ad46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d106      	bne.n	800ad7a <HAL_RCC_OscConfig+0x31e>
 800ad6c:	4b66      	ldr	r3, [pc, #408]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad70:	4a65      	ldr	r2, [pc, #404]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad72:	f043 0301 	orr.w	r3, r3, #1
 800ad76:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad78:	e01c      	b.n	800adb4 <HAL_RCC_OscConfig+0x358>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	2b05      	cmp	r3, #5
 800ad80:	d10c      	bne.n	800ad9c <HAL_RCC_OscConfig+0x340>
 800ad82:	4b61      	ldr	r3, [pc, #388]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad86:	4a60      	ldr	r2, [pc, #384]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad88:	f043 0304 	orr.w	r3, r3, #4
 800ad8c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad8e:	4b5e      	ldr	r3, [pc, #376]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad92:	4a5d      	ldr	r2, [pc, #372]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad94:	f043 0301 	orr.w	r3, r3, #1
 800ad98:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad9a:	e00b      	b.n	800adb4 <HAL_RCC_OscConfig+0x358>
 800ad9c:	4b5a      	ldr	r3, [pc, #360]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ad9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ada0:	4a59      	ldr	r2, [pc, #356]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ada2:	f023 0301 	bic.w	r3, r3, #1
 800ada6:	6713      	str	r3, [r2, #112]	@ 0x70
 800ada8:	4b57      	ldr	r3, [pc, #348]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800adaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adac:	4a56      	ldr	r2, [pc, #344]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800adae:	f023 0304 	bic.w	r3, r3, #4
 800adb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d015      	beq.n	800ade8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adbc:	f7fe ff9c 	bl	8009cf8 <HAL_GetTick>
 800adc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adc2:	e00a      	b.n	800adda <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adc4:	f7fe ff98 	bl	8009cf8 <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800add2:	4293      	cmp	r3, r2
 800add4:	d901      	bls.n	800adda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800add6:	2303      	movs	r3, #3
 800add8:	e0d7      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adda:	4b4b      	ldr	r3, [pc, #300]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800addc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d0ee      	beq.n	800adc4 <HAL_RCC_OscConfig+0x368>
 800ade6:	e014      	b.n	800ae12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ade8:	f7fe ff86 	bl	8009cf8 <HAL_GetTick>
 800adec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800adee:	e00a      	b.n	800ae06 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adf0:	f7fe ff82 	bl	8009cf8 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d901      	bls.n	800ae06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e0c1      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae06:	4b40      	ldr	r3, [pc, #256]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ae08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1ee      	bne.n	800adf0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d105      	bne.n	800ae24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae18:	4b3b      	ldr	r3, [pc, #236]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ae1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1c:	4a3a      	ldr	r2, [pc, #232]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ae1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 80ad 	beq.w	800af88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ae2e:	4b36      	ldr	r3, [pc, #216]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	f003 030c 	and.w	r3, r3, #12
 800ae36:	2b08      	cmp	r3, #8
 800ae38:	d060      	beq.n	800aefc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d145      	bne.n	800aece <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae42:	4b33      	ldr	r3, [pc, #204]	@ (800af10 <HAL_RCC_OscConfig+0x4b4>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae48:	f7fe ff56 	bl	8009cf8 <HAL_GetTick>
 800ae4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae4e:	e008      	b.n	800ae62 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae50:	f7fe ff52 	bl	8009cf8 <HAL_GetTick>
 800ae54:	4602      	mov	r2, r0
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d901      	bls.n	800ae62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	e093      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae62:	4b29      	ldr	r3, [pc, #164]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1f0      	bne.n	800ae50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	69da      	ldr	r2, [r3, #28]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	431a      	orrs	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7c:	019b      	lsls	r3, r3, #6
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae84:	085b      	lsrs	r3, r3, #1
 800ae86:	3b01      	subs	r3, #1
 800ae88:	041b      	lsls	r3, r3, #16
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae90:	061b      	lsls	r3, r3, #24
 800ae92:	431a      	orrs	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae98:	071b      	lsls	r3, r3, #28
 800ae9a:	491b      	ldr	r1, [pc, #108]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aea0:	4b1b      	ldr	r3, [pc, #108]	@ (800af10 <HAL_RCC_OscConfig+0x4b4>)
 800aea2:	2201      	movs	r2, #1
 800aea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aea6:	f7fe ff27 	bl	8009cf8 <HAL_GetTick>
 800aeaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aeac:	e008      	b.n	800aec0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeae:	f7fe ff23 	bl	8009cf8 <HAL_GetTick>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d901      	bls.n	800aec0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800aebc:	2303      	movs	r3, #3
 800aebe:	e064      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aec0:	4b11      	ldr	r3, [pc, #68]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d0f0      	beq.n	800aeae <HAL_RCC_OscConfig+0x452>
 800aecc:	e05c      	b.n	800af88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aece:	4b10      	ldr	r3, [pc, #64]	@ (800af10 <HAL_RCC_OscConfig+0x4b4>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aed4:	f7fe ff10 	bl	8009cf8 <HAL_GetTick>
 800aed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aeda:	e008      	b.n	800aeee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aedc:	f7fe ff0c 	bl	8009cf8 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d901      	bls.n	800aeee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e04d      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aeee:	4b06      	ldr	r3, [pc, #24]	@ (800af08 <HAL_RCC_OscConfig+0x4ac>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1f0      	bne.n	800aedc <HAL_RCC_OscConfig+0x480>
 800aefa:	e045      	b.n	800af88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d107      	bne.n	800af14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e040      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
 800af08:	40023800 	.word	0x40023800
 800af0c:	40007000 	.word	0x40007000
 800af10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800af14:	4b1f      	ldr	r3, [pc, #124]	@ (800af94 <HAL_RCC_OscConfig+0x538>)
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d030      	beq.n	800af84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d129      	bne.n	800af84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d122      	bne.n	800af84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800af44:	4013      	ands	r3, r2
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800af4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d119      	bne.n	800af84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5a:	085b      	lsrs	r3, r3, #1
 800af5c:	3b01      	subs	r3, #1
 800af5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af60:	429a      	cmp	r2, r3
 800af62:	d10f      	bne.n	800af84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af70:	429a      	cmp	r2, r3
 800af72:	d107      	bne.n	800af84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800af80:	429a      	cmp	r2, r3
 800af82:	d001      	beq.n	800af88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	e000      	b.n	800af8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3718      	adds	r7, #24
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	40023800 	.word	0x40023800

0800af98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e07b      	b.n	800b0a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d108      	bne.n	800afc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800afba:	d009      	beq.n	800afd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	61da      	str	r2, [r3, #28]
 800afc2:	e005      	b.n	800afd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d106      	bne.n	800aff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7fe f96e 	bl	80092cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b006:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b018:	431a      	orrs	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b022:	431a      	orrs	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	f003 0302 	and.w	r3, r3, #2
 800b02c:	431a      	orrs	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	431a      	orrs	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b040:	431a      	orrs	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b04a:	431a      	orrs	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a1b      	ldr	r3, [r3, #32]
 800b050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b054:	ea42 0103 	orr.w	r1, r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b05c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	0c1b      	lsrs	r3, r3, #16
 800b06e:	f003 0104 	and.w	r1, r3, #4
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b076:	f003 0210 	and.w	r2, r3, #16
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69da      	ldr	r2, [r3, #28]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b090:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b088      	sub	sp, #32
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	60f8      	str	r0, [r7, #12]
 800b0b2:	60b9      	str	r1, [r7, #8]
 800b0b4:	603b      	str	r3, [r7, #0]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0ba:	f7fe fe1d 	bl	8009cf8 <HAL_GetTick>
 800b0be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b0c0:	88fb      	ldrh	r3, [r7, #6]
 800b0c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d001      	beq.n	800b0d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	e12a      	b.n	800b32a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <HAL_SPI_Transmit+0x36>
 800b0da:	88fb      	ldrh	r3, [r7, #6]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e122      	b.n	800b32a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d101      	bne.n	800b0f2 <HAL_SPI_Transmit+0x48>
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	e11b      	b.n	800b32a <HAL_SPI_Transmit+0x280>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	88fa      	ldrh	r2, [r7, #6]
 800b112:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	88fa      	ldrh	r2, [r7, #6]
 800b118:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b140:	d10f      	bne.n	800b162 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b150:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b160:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b16c:	2b40      	cmp	r3, #64	@ 0x40
 800b16e:	d007      	beq.n	800b180 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b17e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b188:	d152      	bne.n	800b230 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <HAL_SPI_Transmit+0xee>
 800b192:	8b7b      	ldrh	r3, [r7, #26]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d145      	bne.n	800b224 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b19c:	881a      	ldrh	r2, [r3, #0]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a8:	1c9a      	adds	r2, r3, #2
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b1bc:	e032      	b.n	800b224 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f003 0302 	and.w	r3, r3, #2
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d112      	bne.n	800b1f2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d0:	881a      	ldrh	r2, [r3, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1dc:	1c9a      	adds	r2, r3, #2
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b1f0:	e018      	b.n	800b224 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1f2:	f7fe fd81 	bl	8009cf8 <HAL_GetTick>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d803      	bhi.n	800b20a <HAL_SPI_Transmit+0x160>
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b208:	d102      	bne.n	800b210 <HAL_SPI_Transmit+0x166>
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d109      	bne.n	800b224 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e082      	b.n	800b32a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b228:	b29b      	uxth	r3, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1c7      	bne.n	800b1be <HAL_SPI_Transmit+0x114>
 800b22e:	e053      	b.n	800b2d8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <HAL_SPI_Transmit+0x194>
 800b238:	8b7b      	ldrh	r3, [r7, #26]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d147      	bne.n	800b2ce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	330c      	adds	r3, #12
 800b248:	7812      	ldrb	r2, [r2, #0]
 800b24a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	3b01      	subs	r3, #1
 800b25e:	b29a      	uxth	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b264:	e033      	b.n	800b2ce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	f003 0302 	and.w	r3, r3, #2
 800b270:	2b02      	cmp	r3, #2
 800b272:	d113      	bne.n	800b29c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	330c      	adds	r3, #12
 800b27e:	7812      	ldrb	r2, [r2, #0]
 800b280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b290:	b29b      	uxth	r3, r3
 800b292:	3b01      	subs	r3, #1
 800b294:	b29a      	uxth	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b29a:	e018      	b.n	800b2ce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b29c:	f7fe fd2c 	bl	8009cf8 <HAL_GetTick>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d803      	bhi.n	800b2b4 <HAL_SPI_Transmit+0x20a>
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b2:	d102      	bne.n	800b2ba <HAL_SPI_Transmit+0x210>
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d109      	bne.n	800b2ce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e02d      	b.n	800b32a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1c6      	bne.n	800b266 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2d8:	69fa      	ldr	r2, [r7, #28]
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 fc6f 	bl	800bbc0 <SPI_EndRxTxTransaction>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10a      	bne.n	800b30c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	617b      	str	r3, [r7, #20]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	617b      	str	r3, [r7, #20]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e000      	b.n	800b32a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b328:	2300      	movs	r3, #0
  }
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3720      	adds	r7, #32
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	4613      	mov	r3, r2
 800b340:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d001      	beq.n	800b352 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800b34e:	2302      	movs	r3, #2
 800b350:	e07f      	b.n	800b452 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <HAL_SPI_Receive_IT+0x2a>
 800b358:	88fb      	ldrh	r3, [r7, #6]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e077      	b.n	800b452 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d110      	bne.n	800b38c <HAL_SPI_Receive_IT+0x58>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b372:	d10b      	bne.n	800b38c <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2204      	movs	r2, #4
 800b378:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800b37c:	88fb      	ldrh	r3, [r7, #6]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	68b9      	ldr	r1, [r7, #8]
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f000 f86e 	bl	800b464 <HAL_SPI_TransmitReceive_IT>
 800b388:	4603      	mov	r3, r0
 800b38a:	e062      	b.n	800b452 <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b392:	2b01      	cmp	r3, #1
 800b394:	d101      	bne.n	800b39a <HAL_SPI_Receive_IT+0x66>
 800b396:	2302      	movs	r3, #2
 800b398:	e05b      	b.n	800b452 <HAL_SPI_Receive_IT+0x11e>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2204      	movs	r2, #4
 800b3a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	88fa      	ldrh	r2, [r7, #6]
 800b3ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	88fa      	ldrh	r2, [r7, #6]
 800b3c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b45c <HAL_SPI_Receive_IT+0x128>)
 800b3e6:	641a      	str	r2, [r3, #64]	@ 0x40
 800b3e8:	e002      	b.n	800b3f0 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4a1c      	ldr	r2, [pc, #112]	@ (800b460 <HAL_SPI_Receive_IT+0x12c>)
 800b3ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3f8:	d10f      	bne.n	800b41a <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b408:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b418:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b424:	2b40      	cmp	r3, #64	@ 0x40
 800b426:	d007      	beq.n	800b438 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b436:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b44e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	0800b99d 	.word	0x0800b99d
 800b460:	0800b953 	.word	0x0800b953

0800b464 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b478:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b480:	7dfb      	ldrb	r3, [r7, #23]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d00c      	beq.n	800b4a0 <HAL_SPI_TransmitReceive_IT+0x3c>
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b48c:	d106      	bne.n	800b49c <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d102      	bne.n	800b49c <HAL_SPI_TransmitReceive_IT+0x38>
 800b496:	7dfb      	ldrb	r3, [r7, #23]
 800b498:	2b04      	cmp	r3, #4
 800b49a:	d001      	beq.n	800b4a0 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b49c:	2302      	movs	r3, #2
 800b49e:	e061      	b.n	800b564 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d005      	beq.n	800b4b2 <HAL_SPI_TransmitReceive_IT+0x4e>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <HAL_SPI_TransmitReceive_IT+0x4e>
 800b4ac:	887b      	ldrh	r3, [r7, #2]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d101      	bne.n	800b4b6 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e056      	b.n	800b564 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d101      	bne.n	800b4c4 <HAL_SPI_TransmitReceive_IT+0x60>
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	e04f      	b.n	800b564 <HAL_SPI_TransmitReceive_IT+0x100>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b04      	cmp	r3, #4
 800b4d6:	d003      	beq.n	800b4e0 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2205      	movs	r2, #5
 800b4dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	887a      	ldrh	r2, [r7, #2]
 800b4f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	887a      	ldrh	r2, [r7, #2]
 800b4f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	887a      	ldrh	r2, [r7, #2]
 800b502:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	887a      	ldrh	r2, [r7, #2]
 800b508:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4a16      	ldr	r2, [pc, #88]	@ (800b570 <HAL_SPI_TransmitReceive_IT+0x10c>)
 800b516:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4a16      	ldr	r2, [pc, #88]	@ (800b574 <HAL_SPI_TransmitReceive_IT+0x110>)
 800b51c:	645a      	str	r2, [r3, #68]	@ 0x44
 800b51e:	e005      	b.n	800b52c <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4a15      	ldr	r2, [pc, #84]	@ (800b578 <HAL_SPI_TransmitReceive_IT+0x114>)
 800b524:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4a14      	ldr	r2, [pc, #80]	@ (800b57c <HAL_SPI_TransmitReceive_IT+0x118>)
 800b52a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b536:	2b40      	cmp	r3, #64	@ 0x40
 800b538:	d007      	beq.n	800b54a <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b548:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800b560:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	371c      	adds	r7, #28
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	0800b895 	.word	0x0800b895
 800b574:	0800b8f5 	.word	0x0800b8f5
 800b578:	0800b7d1 	.word	0x0800b7d1
 800b57c:	0800b835 	.word	0x0800b835

0800b580 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b088      	sub	sp, #32
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	099b      	lsrs	r3, r3, #6
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10f      	bne.n	800b5c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	099b      	lsrs	r3, r3, #6
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d004      	beq.n	800b5c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	4798      	blx	r3
    return;
 800b5c2:	e0d7      	b.n	800b774 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	085b      	lsrs	r3, r3, #1
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00a      	beq.n	800b5e6 <HAL_SPI_IRQHandler+0x66>
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	09db      	lsrs	r3, r3, #7
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d004      	beq.n	800b5e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	4798      	blx	r3
    return;
 800b5e4:	e0c6      	b.n	800b774 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	095b      	lsrs	r3, r3, #5
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10c      	bne.n	800b60c <HAL_SPI_IRQHandler+0x8c>
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	099b      	lsrs	r3, r3, #6
 800b5f6:	f003 0301 	and.w	r3, r3, #1
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	0a1b      	lsrs	r3, r3, #8
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	f000 80b4 	beq.w	800b774 <HAL_SPI_IRQHandler+0x1f4>
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	095b      	lsrs	r3, r3, #5
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 80ad 	beq.w	800b774 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	099b      	lsrs	r3, r3, #6
 800b61e:	f003 0301 	and.w	r3, r3, #1
 800b622:	2b00      	cmp	r3, #0
 800b624:	d023      	beq.n	800b66e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d011      	beq.n	800b656 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b636:	f043 0204 	orr.w	r2, r3, #4
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b63e:	2300      	movs	r3, #0
 800b640:	617b      	str	r3, [r7, #20]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	617b      	str	r3, [r7, #20]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	617b      	str	r3, [r7, #20]
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	e00b      	b.n	800b66e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b656:	2300      	movs	r3, #0
 800b658:	613b      	str	r3, [r7, #16]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	613b      	str	r3, [r7, #16]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	613b      	str	r3, [r7, #16]
 800b66a:	693b      	ldr	r3, [r7, #16]
        return;
 800b66c:	e082      	b.n	800b774 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	095b      	lsrs	r3, r3, #5
 800b672:	f003 0301 	and.w	r3, r3, #1
 800b676:	2b00      	cmp	r3, #0
 800b678:	d014      	beq.n	800b6a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b67e:	f043 0201 	orr.w	r2, r3, #1
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b686:	2300      	movs	r3, #0
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	0a1b      	lsrs	r3, r3, #8
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00c      	beq.n	800b6ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6b4:	f043 0208 	orr.w	r2, r3, #8
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b6bc:	2300      	movs	r3, #0
 800b6be:	60bb      	str	r3, [r7, #8]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	60bb      	str	r3, [r7, #8]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d04f      	beq.n	800b772 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b6e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	f003 0302 	and.w	r3, r3, #2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d104      	bne.n	800b6fe <HAL_SPI_IRQHandler+0x17e>
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d034      	beq.n	800b768 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f022 0203 	bic.w	r2, r2, #3
 800b70c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b712:	2b00      	cmp	r3, #0
 800b714:	d011      	beq.n	800b73a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b71a:	4a18      	ldr	r2, [pc, #96]	@ (800b77c <HAL_SPI_IRQHandler+0x1fc>)
 800b71c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fc6a 	bl	8009ffc <HAL_DMA_Abort_IT>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d005      	beq.n	800b73a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b732:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d016      	beq.n	800b770 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b746:	4a0d      	ldr	r2, [pc, #52]	@ (800b77c <HAL_SPI_IRQHandler+0x1fc>)
 800b748:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe fc54 	bl	8009ffc <HAL_DMA_Abort_IT>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00a      	beq.n	800b770 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b75e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800b766:	e003      	b.n	800b770 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f813 	bl	800b794 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b76e:	e000      	b.n	800b772 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b770:	bf00      	nop
    return;
 800b772:	bf00      	nop
  }
}
 800b774:	3720      	adds	r7, #32
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	0800b7a9 	.word	0x0800b7a9

0800b780 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7ff ffe6 	bl	800b794 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b7c8:	bf00      	nop
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f103 020c 	add.w	r2, r3, #12
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e4:	7812      	ldrb	r2, [r2, #0]
 800b7e6:	b2d2      	uxtb	r2, r2
 800b7e8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ee:	1c5a      	adds	r2, r3, #1
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b806:	b29b      	uxth	r3, r3
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10f      	bne.n	800b82c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800b81a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b820:	b29b      	uxth	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	d102      	bne.n	800b82c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fa1e 	bl	800bc68 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	330c      	adds	r3, #12
 800b846:	7812      	ldrb	r2, [r2, #0]
 800b848:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b84e:	1c5a      	adds	r2, r3, #1
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b858:	b29b      	uxth	r3, r3
 800b85a:	3b01      	subs	r3, #1
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b866:	b29b      	uxth	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10f      	bne.n	800b88c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b87a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b880:	b29b      	uxth	r3, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	d102      	bne.n	800b88c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f9ee 	bl	800bc68 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68da      	ldr	r2, [r3, #12]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8a6:	b292      	uxth	r2, r2
 800b8a8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ae:	1c9a      	adds	r2, r3, #2
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10f      	bne.n	800b8ec <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b8da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d102      	bne.n	800b8ec <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f9be 	bl	800bc68 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b8ec:	bf00      	nop
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b900:	881a      	ldrh	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b90c:	1c9a      	adds	r2, r3, #2
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b916:	b29b      	uxth	r3, r3
 800b918:	3b01      	subs	r3, #1
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b924:	b29b      	uxth	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10f      	bne.n	800b94a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	685a      	ldr	r2, [r3, #4]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b938:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b93e:	b29b      	uxth	r3, r3
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f98f 	bl	800bc68 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b94a:	bf00      	nop
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b082      	sub	sp, #8
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f103 020c 	add.w	r2, r3, #12
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b966:	7812      	ldrb	r2, [r2, #0]
 800b968:	b2d2      	uxtb	r2, r2
 800b96a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	3b01      	subs	r3, #1
 800b97e:	b29a      	uxth	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b988:	b29b      	uxth	r3, r3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d102      	bne.n	800b994 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f9de 	bl	800bd50 <SPI_CloseRx_ISR>
  }
}
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68da      	ldr	r2, [r3, #12]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ae:	b292      	uxth	r2, r2
 800b9b0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b6:	1c9a      	adds	r2, r3, #2
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d102      	bne.n	800b9da <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f9bb 	bl	800bd50 <SPI_CloseRx_ISR>
  }
}
 800b9da:	bf00      	nop
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
	...

0800b9e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	603b      	str	r3, [r7, #0]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b9f4:	f7fe f980 	bl	8009cf8 <HAL_GetTick>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fc:	1a9b      	subs	r3, r3, r2
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	4413      	add	r3, r2
 800ba02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ba04:	f7fe f978 	bl	8009cf8 <HAL_GetTick>
 800ba08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ba0a:	4b39      	ldr	r3, [pc, #228]	@ (800baf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	015b      	lsls	r3, r3, #5
 800ba10:	0d1b      	lsrs	r3, r3, #20
 800ba12:	69fa      	ldr	r2, [r7, #28]
 800ba14:	fb02 f303 	mul.w	r3, r2, r3
 800ba18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba1a:	e055      	b.n	800bac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba22:	d051      	beq.n	800bac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba24:	f7fe f968 	bl	8009cf8 <HAL_GetTick>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	69fa      	ldr	r2, [r7, #28]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d902      	bls.n	800ba3a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d13d      	bne.n	800bab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ba48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ba52:	d111      	bne.n	800ba78 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba5c:	d004      	beq.n	800ba68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba66:	d107      	bne.n	800ba78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ba76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba80:	d10f      	bne.n	800baa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ba90:	601a      	str	r2, [r3, #0]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800baa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bab2:	2303      	movs	r3, #3
 800bab4:	e018      	b.n	800bae8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d102      	bne.n	800bac2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	61fb      	str	r3, [r7, #28]
 800bac0:	e002      	b.n	800bac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689a      	ldr	r2, [r3, #8]
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	4013      	ands	r3, r2
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	bf0c      	ite	eq
 800bad8:	2301      	moveq	r3, #1
 800bada:	2300      	movne	r3, #0
 800badc:	b2db      	uxtb	r3, r3
 800bade:	461a      	mov	r2, r3
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d19a      	bne.n	800ba1c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3720      	adds	r7, #32
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20000008 	.word	0x20000008

0800baf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af02      	add	r7, sp, #8
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bb08:	d111      	bne.n	800bb2e <SPI_EndRxTransaction+0x3a>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb12:	d004      	beq.n	800bb1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb1c:	d107      	bne.n	800bb2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bb2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bb36:	d12a      	bne.n	800bb8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb40:	d012      	beq.n	800bb68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2180      	movs	r1, #128	@ 0x80
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f7ff ff49 	bl	800b9e4 <SPI_WaitFlagStateUntilTimeout>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d02d      	beq.n	800bbb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb5c:	f043 0220 	orr.w	r2, r3, #32
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e026      	b.n	800bbb6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	2101      	movs	r1, #1
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f7ff ff36 	bl	800b9e4 <SPI_WaitFlagStateUntilTimeout>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d01a      	beq.n	800bbb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb82:	f043 0220 	orr.w	r2, r3, #32
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e013      	b.n	800bbb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2200      	movs	r2, #0
 800bb96:	2101      	movs	r1, #1
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7ff ff23 	bl	800b9e4 <SPI_WaitFlagStateUntilTimeout>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d007      	beq.n	800bbb4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bba8:	f043 0220 	orr.w	r2, r3, #32
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	e000      	b.n	800bbb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b088      	sub	sp, #32
 800bbc4:	af02      	add	r7, sp, #8
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	2102      	movs	r1, #2
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f7ff ff04 	bl	800b9e4 <SPI_WaitFlagStateUntilTimeout>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d007      	beq.n	800bbf2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbe6:	f043 0220 	orr.w	r2, r3, #32
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	e032      	b.n	800bc58 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bbf2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc60 <SPI_EndRxTxTransaction+0xa0>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a1b      	ldr	r2, [pc, #108]	@ (800bc64 <SPI_EndRxTxTransaction+0xa4>)
 800bbf8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbfc:	0d5b      	lsrs	r3, r3, #21
 800bbfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bc02:	fb02 f303 	mul.w	r3, r2, r3
 800bc06:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bc10:	d112      	bne.n	800bc38 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2180      	movs	r1, #128	@ 0x80
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f7ff fee1 	bl	800b9e4 <SPI_WaitFlagStateUntilTimeout>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d016      	beq.n	800bc56 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc2c:	f043 0220 	orr.w	r2, r3, #32
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e00f      	b.n	800bc58 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00a      	beq.n	800bc54 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc4e:	2b80      	cmp	r3, #128	@ 0x80
 800bc50:	d0f2      	beq.n	800bc38 <SPI_EndRxTxTransaction+0x78>
 800bc52:	e000      	b.n	800bc56 <SPI_EndRxTxTransaction+0x96>
        break;
 800bc54:	bf00      	nop
  }

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	20000008 	.word	0x20000008
 800bc64:	165e9f81 	.word	0x165e9f81

0800bc68 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800bc70:	4b35      	ldr	r3, [pc, #212]	@ (800bd48 <SPI_CloseRxTx_ISR+0xe0>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a35      	ldr	r2, [pc, #212]	@ (800bd4c <SPI_CloseRxTx_ISR+0xe4>)
 800bc76:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7a:	0a5b      	lsrs	r3, r3, #9
 800bc7c:	2264      	movs	r2, #100	@ 0x64
 800bc7e:	fb02 f303 	mul.w	r3, r2, r3
 800bc82:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc84:	f7fe f838 	bl	8009cf8 <HAL_GetTick>
 800bc88:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f022 0220 	bic.w	r2, r2, #32
 800bc98:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d106      	bne.n	800bcae <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bca4:	f043 0220 	orr.w	r2, r3, #32
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bcac:	e009      	b.n	800bcc2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	f003 0302 	and.w	r3, r3, #2
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0eb      	beq.n	800bc9a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	2164      	movs	r1, #100	@ 0x64
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7ff ff7a 	bl	800bbc0 <SPI_EndRxTxTransaction>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d005      	beq.n	800bcde <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcd6:	f043 0220 	orr.w	r2, r3, #32
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10a      	bne.n	800bcfc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bce6:	2300      	movs	r3, #0
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	60fb      	str	r3, [r7, #12]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d115      	bne.n	800bd30 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b04      	cmp	r3, #4
 800bd0e:	d107      	bne.n	800bd20 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f7fd ff0d 	bl	8009b38 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800bd1e:	e00e      	b.n	800bd3e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7ff fd29 	bl	800b780 <HAL_SPI_TxRxCpltCallback>
}
 800bd2e:	e006      	b.n	800bd3e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7ff fd2b 	bl	800b794 <HAL_SPI_ErrorCallback>
}
 800bd3e:	bf00      	nop
 800bd40:	3718      	adds	r7, #24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	20000008 	.word	0x20000008
 800bd4c:	057619f1 	.word	0x057619f1

0800bd50 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800bd66:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800bd68:	f7fd ffc6 	bl	8009cf8 <HAL_GetTick>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	461a      	mov	r2, r3
 800bd70:	2164      	movs	r1, #100	@ 0x64
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7ff febe 	bl	800baf4 <SPI_EndRxTransaction>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d005      	beq.n	800bd8a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd82:	f043 0220 	orr.w	r2, r3, #32
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10a      	bne.n	800bda8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd92:	2300      	movs	r3, #0
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	60fb      	str	r3, [r7, #12]
 800bda6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d103      	bne.n	800bdc0 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7fd febd 	bl	8009b38 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800bdbe:	e002      	b.n	800bdc6 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff fce7 	bl	800b794 <HAL_SPI_ErrorCallback>
}
 800bdc6:	bf00      	nop
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d101      	bne.n	800bde0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e041      	b.n	800be64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d106      	bne.n	800bdfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f839 	bl	800be6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2202      	movs	r2, #2
 800bdfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	3304      	adds	r3, #4
 800be0a:	4619      	mov	r1, r3
 800be0c:	4610      	mov	r0, r2
 800be0e:	f000 f9bf 	bl	800c190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	2b01      	cmp	r3, #1
 800be92:	d001      	beq.n	800be98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e04e      	b.n	800bf36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68da      	ldr	r2, [r3, #12]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f042 0201 	orr.w	r2, r2, #1
 800beae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a23      	ldr	r2, [pc, #140]	@ (800bf44 <HAL_TIM_Base_Start_IT+0xc4>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d022      	beq.n	800bf00 <HAL_TIM_Base_Start_IT+0x80>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bec2:	d01d      	beq.n	800bf00 <HAL_TIM_Base_Start_IT+0x80>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a1f      	ldr	r2, [pc, #124]	@ (800bf48 <HAL_TIM_Base_Start_IT+0xc8>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d018      	beq.n	800bf00 <HAL_TIM_Base_Start_IT+0x80>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a1e      	ldr	r2, [pc, #120]	@ (800bf4c <HAL_TIM_Base_Start_IT+0xcc>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d013      	beq.n	800bf00 <HAL_TIM_Base_Start_IT+0x80>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a1c      	ldr	r2, [pc, #112]	@ (800bf50 <HAL_TIM_Base_Start_IT+0xd0>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d00e      	beq.n	800bf00 <HAL_TIM_Base_Start_IT+0x80>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a1b      	ldr	r2, [pc, #108]	@ (800bf54 <HAL_TIM_Base_Start_IT+0xd4>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d009      	beq.n	800bf00 <HAL_TIM_Base_Start_IT+0x80>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a19      	ldr	r2, [pc, #100]	@ (800bf58 <HAL_TIM_Base_Start_IT+0xd8>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d004      	beq.n	800bf00 <HAL_TIM_Base_Start_IT+0x80>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a18      	ldr	r2, [pc, #96]	@ (800bf5c <HAL_TIM_Base_Start_IT+0xdc>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d111      	bne.n	800bf24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b06      	cmp	r3, #6
 800bf10:	d010      	beq.n	800bf34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f042 0201 	orr.w	r2, r2, #1
 800bf20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf22:	e007      	b.n	800bf34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f042 0201 	orr.w	r2, r2, #1
 800bf32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	40010000 	.word	0x40010000
 800bf48:	40000400 	.word	0x40000400
 800bf4c:	40000800 	.word	0x40000800
 800bf50:	40000c00 	.word	0x40000c00
 800bf54:	40010400 	.word	0x40010400
 800bf58:	40014000 	.word	0x40014000
 800bf5c:	40001800 	.word	0x40001800

0800bf60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f003 0302 	and.w	r3, r3, #2
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d020      	beq.n	800bfc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f003 0302 	and.w	r3, r3, #2
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d01b      	beq.n	800bfc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f06f 0202 	mvn.w	r2, #2
 800bf94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	f003 0303 	and.w	r3, r3, #3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f8d2 	bl	800c154 <HAL_TIM_IC_CaptureCallback>
 800bfb0:	e005      	b.n	800bfbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f8c4 	bl	800c140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f8d5 	bl	800c168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	f003 0304 	and.w	r3, r3, #4
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d020      	beq.n	800c010 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01b      	beq.n	800c010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f06f 0204 	mvn.w	r2, #4
 800bfe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f8ac 	bl	800c154 <HAL_TIM_IC_CaptureCallback>
 800bffc:	e005      	b.n	800c00a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f89e 	bl	800c140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f8af 	bl	800c168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f003 0308 	and.w	r3, r3, #8
 800c016:	2b00      	cmp	r3, #0
 800c018:	d020      	beq.n	800c05c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f003 0308 	and.w	r3, r3, #8
 800c020:	2b00      	cmp	r3, #0
 800c022:	d01b      	beq.n	800c05c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f06f 0208 	mvn.w	r2, #8
 800c02c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2204      	movs	r2, #4
 800c032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	69db      	ldr	r3, [r3, #28]
 800c03a:	f003 0303 	and.w	r3, r3, #3
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f886 	bl	800c154 <HAL_TIM_IC_CaptureCallback>
 800c048:	e005      	b.n	800c056 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f878 	bl	800c140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f889 	bl	800c168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	f003 0310 	and.w	r3, r3, #16
 800c062:	2b00      	cmp	r3, #0
 800c064:	d020      	beq.n	800c0a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f003 0310 	and.w	r3, r3, #16
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d01b      	beq.n	800c0a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f06f 0210 	mvn.w	r2, #16
 800c078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2208      	movs	r2, #8
 800c07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f860 	bl	800c154 <HAL_TIM_IC_CaptureCallback>
 800c094:	e005      	b.n	800c0a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f852 	bl	800c140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f863 	bl	800c168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00c      	beq.n	800c0cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d007      	beq.n	800c0cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f06f 0201 	mvn.w	r2, #1
 800c0c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7fd f8c0 	bl	800924c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00c      	beq.n	800c0f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d007      	beq.n	800c0f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c0e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f900 	bl	800c2f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00c      	beq.n	800c114 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c100:	2b00      	cmp	r3, #0
 800c102:	d007      	beq.n	800c114 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c10c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f834 	bl	800c17c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f003 0320 	and.w	r3, r3, #32
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00c      	beq.n	800c138 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f003 0320 	and.w	r3, r3, #32
 800c124:	2b00      	cmp	r3, #0
 800c126:	d007      	beq.n	800c138 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f06f 0220 	mvn.w	r2, #32
 800c130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f8d2 	bl	800c2dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c138:	bf00      	nop
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c184:	bf00      	nop
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a43      	ldr	r2, [pc, #268]	@ (800c2b0 <TIM_Base_SetConfig+0x120>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d013      	beq.n	800c1d0 <TIM_Base_SetConfig+0x40>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1ae:	d00f      	beq.n	800c1d0 <TIM_Base_SetConfig+0x40>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a40      	ldr	r2, [pc, #256]	@ (800c2b4 <TIM_Base_SetConfig+0x124>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d00b      	beq.n	800c1d0 <TIM_Base_SetConfig+0x40>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a3f      	ldr	r2, [pc, #252]	@ (800c2b8 <TIM_Base_SetConfig+0x128>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d007      	beq.n	800c1d0 <TIM_Base_SetConfig+0x40>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a3e      	ldr	r2, [pc, #248]	@ (800c2bc <TIM_Base_SetConfig+0x12c>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d003      	beq.n	800c1d0 <TIM_Base_SetConfig+0x40>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a3d      	ldr	r2, [pc, #244]	@ (800c2c0 <TIM_Base_SetConfig+0x130>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d108      	bne.n	800c1e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a32      	ldr	r2, [pc, #200]	@ (800c2b0 <TIM_Base_SetConfig+0x120>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d02b      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1f0:	d027      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a2f      	ldr	r2, [pc, #188]	@ (800c2b4 <TIM_Base_SetConfig+0x124>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d023      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4a2e      	ldr	r2, [pc, #184]	@ (800c2b8 <TIM_Base_SetConfig+0x128>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d01f      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a2d      	ldr	r2, [pc, #180]	@ (800c2bc <TIM_Base_SetConfig+0x12c>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d01b      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4a2c      	ldr	r2, [pc, #176]	@ (800c2c0 <TIM_Base_SetConfig+0x130>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d017      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a2b      	ldr	r2, [pc, #172]	@ (800c2c4 <TIM_Base_SetConfig+0x134>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d013      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a2a      	ldr	r2, [pc, #168]	@ (800c2c8 <TIM_Base_SetConfig+0x138>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d00f      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a29      	ldr	r2, [pc, #164]	@ (800c2cc <TIM_Base_SetConfig+0x13c>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d00b      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4a28      	ldr	r2, [pc, #160]	@ (800c2d0 <TIM_Base_SetConfig+0x140>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d007      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a27      	ldr	r2, [pc, #156]	@ (800c2d4 <TIM_Base_SetConfig+0x144>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d003      	beq.n	800c242 <TIM_Base_SetConfig+0xb2>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a26      	ldr	r2, [pc, #152]	@ (800c2d8 <TIM_Base_SetConfig+0x148>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d108      	bne.n	800c254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	4313      	orrs	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	4313      	orrs	r3, r2
 800c260:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	689a      	ldr	r2, [r3, #8]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a0e      	ldr	r2, [pc, #56]	@ (800c2b0 <TIM_Base_SetConfig+0x120>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d003      	beq.n	800c282 <TIM_Base_SetConfig+0xf2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a10      	ldr	r2, [pc, #64]	@ (800c2c0 <TIM_Base_SetConfig+0x130>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d103      	bne.n	800c28a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f043 0204 	orr.w	r2, r3, #4
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	601a      	str	r2, [r3, #0]
}
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	40010000 	.word	0x40010000
 800c2b4:	40000400 	.word	0x40000400
 800c2b8:	40000800 	.word	0x40000800
 800c2bc:	40000c00 	.word	0x40000c00
 800c2c0:	40010400 	.word	0x40010400
 800c2c4:	40014000 	.word	0x40014000
 800c2c8:	40014400 	.word	0x40014400
 800c2cc:	40014800 	.word	0x40014800
 800c2d0:	40001800 	.word	0x40001800
 800c2d4:	40001c00 	.word	0x40001c00
 800c2d8:	40002000 	.word	0x40002000

0800c2dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2f8:	bf00      	nop
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	e042      	b.n	800c39c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d106      	bne.n	800c330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7fd f874 	bl	8009418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2224      	movs	r2, #36	@ 0x24
 800c334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68da      	ldr	r2, [r3, #12]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fdd3 	bl	800cef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	691a      	ldr	r2, [r3, #16]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c35c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	695a      	ldr	r2, [r3, #20]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c36c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68da      	ldr	r2, [r3, #12]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c37c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2220      	movs	r2, #32
 800c388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2220      	movs	r2, #32
 800c390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08a      	sub	sp, #40	@ 0x28
 800c3a8:	af02      	add	r7, sp, #8
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b20      	cmp	r3, #32
 800c3c2:	d175      	bne.n	800c4b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d002      	beq.n	800c3d0 <HAL_UART_Transmit+0x2c>
 800c3ca:	88fb      	ldrh	r3, [r7, #6]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e06e      	b.n	800c4b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2221      	movs	r2, #33	@ 0x21
 800c3de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c3e2:	f7fd fc89 	bl	8009cf8 <HAL_GetTick>
 800c3e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	88fa      	ldrh	r2, [r7, #6]
 800c3ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	88fa      	ldrh	r2, [r7, #6]
 800c3f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3fc:	d108      	bne.n	800c410 <HAL_UART_Transmit+0x6c>
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d104      	bne.n	800c410 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c406:	2300      	movs	r3, #0
 800c408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	61bb      	str	r3, [r7, #24]
 800c40e:	e003      	b.n	800c418 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c414:	2300      	movs	r3, #0
 800c416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c418:	e02e      	b.n	800c478 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	2200      	movs	r2, #0
 800c422:	2180      	movs	r1, #128	@ 0x80
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f000 fb37 	bl	800ca98 <UART_WaitOnFlagUntilTimeout>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d005      	beq.n	800c43c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2220      	movs	r2, #32
 800c434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c438:	2303      	movs	r3, #3
 800c43a:	e03a      	b.n	800c4b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10b      	bne.n	800c45a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	461a      	mov	r2, r3
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c450:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	3302      	adds	r3, #2
 800c456:	61bb      	str	r3, [r7, #24]
 800c458:	e007      	b.n	800c46a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	781a      	ldrb	r2, [r3, #0]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	3301      	adds	r3, #1
 800c468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c46e:	b29b      	uxth	r3, r3
 800c470:	3b01      	subs	r3, #1
 800c472:	b29a      	uxth	r2, r3
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1cb      	bne.n	800c41a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2200      	movs	r2, #0
 800c48a:	2140      	movs	r1, #64	@ 0x40
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f000 fb03 	bl	800ca98 <UART_WaitOnFlagUntilTimeout>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d005      	beq.n	800c4a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2220      	movs	r2, #32
 800c49c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e006      	b.n	800c4b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2220      	movs	r2, #32
 800c4a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e000      	b.n	800c4b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c4b0:	2302      	movs	r3, #2
  }
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3720      	adds	r7, #32
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	60f8      	str	r0, [r7, #12]
 800c4c2:	60b9      	str	r1, [r7, #8]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b20      	cmp	r3, #32
 800c4d2:	d112      	bne.n	800c4fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d002      	beq.n	800c4e0 <HAL_UART_Receive_IT+0x26>
 800c4da:	88fb      	ldrh	r3, [r7, #6]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e00b      	b.n	800c4fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c4ea:	88fb      	ldrh	r3, [r7, #6]
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	68b9      	ldr	r1, [r7, #8]
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f000 fb2a 	bl	800cb4a <UART_Start_Receive_IT>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	e000      	b.n	800c4fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c4fa:	2302      	movs	r3, #2
  }
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b0ba      	sub	sp, #232	@ 0xe8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c52a:	2300      	movs	r3, #0
 800c52c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c530:	2300      	movs	r3, #0
 800c532:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c53a:	f003 030f 	and.w	r3, r3, #15
 800c53e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10f      	bne.n	800c56a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c54a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c54e:	f003 0320 	and.w	r3, r3, #32
 800c552:	2b00      	cmp	r3, #0
 800c554:	d009      	beq.n	800c56a <HAL_UART_IRQHandler+0x66>
 800c556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c55a:	f003 0320 	and.w	r3, r3, #32
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d003      	beq.n	800c56a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 fc07 	bl	800cd76 <UART_Receive_IT>
      return;
 800c568:	e273      	b.n	800ca52 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c56a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 80de 	beq.w	800c730 <HAL_UART_IRQHandler+0x22c>
 800c574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c578:	f003 0301 	and.w	r3, r3, #1
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d106      	bne.n	800c58e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c584:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 80d1 	beq.w	800c730 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00b      	beq.n	800c5b2 <HAL_UART_IRQHandler+0xae>
 800c59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c59e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d005      	beq.n	800c5b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5aa:	f043 0201 	orr.w	r2, r3, #1
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00b      	beq.n	800c5d6 <HAL_UART_IRQHandler+0xd2>
 800c5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5c2:	f003 0301 	and.w	r3, r3, #1
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d005      	beq.n	800c5d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ce:	f043 0202 	orr.w	r2, r3, #2
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5da:	f003 0302 	and.w	r3, r3, #2
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00b      	beq.n	800c5fa <HAL_UART_IRQHandler+0xf6>
 800c5e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d005      	beq.n	800c5fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f2:	f043 0204 	orr.w	r2, r3, #4
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5fe:	f003 0308 	and.w	r3, r3, #8
 800c602:	2b00      	cmp	r3, #0
 800c604:	d011      	beq.n	800c62a <HAL_UART_IRQHandler+0x126>
 800c606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c60a:	f003 0320 	and.w	r3, r3, #32
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d105      	bne.n	800c61e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d005      	beq.n	800c62a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c622:	f043 0208 	orr.w	r2, r3, #8
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 820a 	beq.w	800ca48 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c638:	f003 0320 	and.w	r3, r3, #32
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d008      	beq.n	800c652 <HAL_UART_IRQHandler+0x14e>
 800c640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c644:	f003 0320 	and.w	r3, r3, #32
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d002      	beq.n	800c652 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fb92 	bl	800cd76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c65c:	2b40      	cmp	r3, #64	@ 0x40
 800c65e:	bf0c      	ite	eq
 800c660:	2301      	moveq	r3, #1
 800c662:	2300      	movne	r3, #0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c66e:	f003 0308 	and.w	r3, r3, #8
 800c672:	2b00      	cmp	r3, #0
 800c674:	d103      	bne.n	800c67e <HAL_UART_IRQHandler+0x17a>
 800c676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d04f      	beq.n	800c71e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fa9d 	bl	800cbbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c68e:	2b40      	cmp	r3, #64	@ 0x40
 800c690:	d141      	bne.n	800c716 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3314      	adds	r3, #20
 800c698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6a0:	e853 3f00 	ldrex	r3, [r3]
 800c6a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c6a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c6ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	3314      	adds	r3, #20
 800c6ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c6be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c6c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c6ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c6ce:	e841 2300 	strex	r3, r2, [r1]
 800c6d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c6d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1d9      	bne.n	800c692 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d013      	beq.n	800c70e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6ea:	4a8a      	ldr	r2, [pc, #552]	@ (800c914 <HAL_UART_IRQHandler+0x410>)
 800c6ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fd fc82 	bl	8009ffc <HAL_DMA_Abort_IT>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d016      	beq.n	800c72c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c708:	4610      	mov	r0, r2
 800c70a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c70c:	e00e      	b.n	800c72c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f9ac 	bl	800ca6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c714:	e00a      	b.n	800c72c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f9a8 	bl	800ca6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c71c:	e006      	b.n	800c72c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f9a4 	bl	800ca6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c72a:	e18d      	b.n	800ca48 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c72c:	bf00      	nop
    return;
 800c72e:	e18b      	b.n	800ca48 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c734:	2b01      	cmp	r3, #1
 800c736:	f040 8167 	bne.w	800ca08 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c73e:	f003 0310 	and.w	r3, r3, #16
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8160 	beq.w	800ca08 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800c748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c74c:	f003 0310 	and.w	r3, r3, #16
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 8159 	beq.w	800ca08 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c756:	2300      	movs	r3, #0
 800c758:	60bb      	str	r3, [r7, #8]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	60bb      	str	r3, [r7, #8]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	60bb      	str	r3, [r7, #8]
 800c76a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c776:	2b40      	cmp	r3, #64	@ 0x40
 800c778:	f040 80ce 	bne.w	800c918 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c788:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f000 80a9 	beq.w	800c8e4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c79a:	429a      	cmp	r2, r3
 800c79c:	f080 80a2 	bcs.w	800c8e4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c7a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7b2:	f000 8088 	beq.w	800c8c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	330c      	adds	r3, #12
 800c7bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c7c4:	e853 3f00 	ldrex	r3, [r3]
 800c7c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c7cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c7d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	330c      	adds	r3, #12
 800c7de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c7e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c7e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c7ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c7f2:	e841 2300 	strex	r3, r2, [r1]
 800c7f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c7fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1d9      	bne.n	800c7b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3314      	adds	r3, #20
 800c808:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c80a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c80c:	e853 3f00 	ldrex	r3, [r3]
 800c810:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c814:	f023 0301 	bic.w	r3, r3, #1
 800c818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3314      	adds	r3, #20
 800c822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c826:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c82a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c82e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c832:	e841 2300 	strex	r3, r2, [r1]
 800c836:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1e1      	bne.n	800c802 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3314      	adds	r3, #20
 800c844:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c848:	e853 3f00 	ldrex	r3, [r3]
 800c84c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c84e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	3314      	adds	r3, #20
 800c85e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c864:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c866:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c868:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c86a:	e841 2300 	strex	r3, r2, [r1]
 800c86e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1e3      	bne.n	800c83e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2220      	movs	r2, #32
 800c87a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	330c      	adds	r3, #12
 800c88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c88e:	e853 3f00 	ldrex	r3, [r3]
 800c892:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c896:	f023 0310 	bic.w	r3, r3, #16
 800c89a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	330c      	adds	r3, #12
 800c8a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c8a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c8aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c8ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8b0:	e841 2300 	strex	r3, r2, [r1]
 800c8b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c8b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1e3      	bne.n	800c884 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fd fb2b 	bl	8009f1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2202      	movs	r2, #2
 800c8ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	4619      	mov	r1, r3
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f8cf 	bl	800ca80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c8e2:	e0b3      	b.n	800ca4c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c8e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	f040 80ad 	bne.w	800ca4c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8f6:	69db      	ldr	r3, [r3, #28]
 800c8f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8fc:	f040 80a6 	bne.w	800ca4c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2202      	movs	r2, #2
 800c904:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 f8b7 	bl	800ca80 <HAL_UARTEx_RxEventCallback>
      return;
 800c912:	e09b      	b.n	800ca4c <HAL_UART_IRQHandler+0x548>
 800c914:	0800cc85 	.word	0x0800cc85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c920:	b29b      	uxth	r3, r3
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f000 808e 	beq.w	800ca50 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800c934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f000 8089 	beq.w	800ca50 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	330c      	adds	r3, #12
 800c944:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c948:	e853 3f00 	ldrex	r3, [r3]
 800c94c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c954:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	330c      	adds	r3, #12
 800c95e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c962:	647a      	str	r2, [r7, #68]	@ 0x44
 800c964:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c966:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c968:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c96a:	e841 2300 	strex	r3, r2, [r1]
 800c96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1e3      	bne.n	800c93e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3314      	adds	r3, #20
 800c97c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	e853 3f00 	ldrex	r3, [r3]
 800c984:	623b      	str	r3, [r7, #32]
   return(result);
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	f023 0301 	bic.w	r3, r3, #1
 800c98c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3314      	adds	r3, #20
 800c996:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c99a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9a2:	e841 2300 	strex	r3, r2, [r1]
 800c9a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e3      	bne.n	800c976 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2220      	movs	r2, #32
 800c9b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	330c      	adds	r3, #12
 800c9c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	e853 3f00 	ldrex	r3, [r3]
 800c9ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f023 0310 	bic.w	r3, r3, #16
 800c9d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	330c      	adds	r3, #12
 800c9dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c9e0:	61fa      	str	r2, [r7, #28]
 800c9e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e4:	69b9      	ldr	r1, [r7, #24]
 800c9e6:	69fa      	ldr	r2, [r7, #28]
 800c9e8:	e841 2300 	strex	r3, r2, [r1]
 800c9ec:	617b      	str	r3, [r7, #20]
   return(result);
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1e3      	bne.n	800c9bc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9fe:	4619      	mov	r1, r3
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f83d 	bl	800ca80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca06:	e023      	b.n	800ca50 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d009      	beq.n	800ca28 <HAL_UART_IRQHandler+0x524>
 800ca14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d003      	beq.n	800ca28 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 f940 	bl	800cca6 <UART_Transmit_IT>
    return;
 800ca26:	e014      	b.n	800ca52 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00e      	beq.n	800ca52 <HAL_UART_IRQHandler+0x54e>
 800ca34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d008      	beq.n	800ca52 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f980 	bl	800cd46 <UART_EndTransmit_IT>
    return;
 800ca46:	e004      	b.n	800ca52 <HAL_UART_IRQHandler+0x54e>
    return;
 800ca48:	bf00      	nop
 800ca4a:	e002      	b.n	800ca52 <HAL_UART_IRQHandler+0x54e>
      return;
 800ca4c:	bf00      	nop
 800ca4e:	e000      	b.n	800ca52 <HAL_UART_IRQHandler+0x54e>
      return;
 800ca50:	bf00      	nop
  }
}
 800ca52:	37e8      	adds	r7, #232	@ 0xe8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	460b      	mov	r3, r1
 800ca8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca8c:	bf00      	nop
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	603b      	str	r3, [r7, #0]
 800caa4:	4613      	mov	r3, r2
 800caa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caa8:	e03b      	b.n	800cb22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800caaa:	6a3b      	ldr	r3, [r7, #32]
 800caac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab0:	d037      	beq.n	800cb22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cab2:	f7fd f921 	bl	8009cf8 <HAL_GetTick>
 800cab6:	4602      	mov	r2, r0
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	6a3a      	ldr	r2, [r7, #32]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d302      	bcc.n	800cac8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d101      	bne.n	800cacc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cac8:	2303      	movs	r3, #3
 800caca:	e03a      	b.n	800cb42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	f003 0304 	and.w	r3, r3, #4
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d023      	beq.n	800cb22 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b80      	cmp	r3, #128	@ 0x80
 800cade:	d020      	beq.n	800cb22 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	2b40      	cmp	r3, #64	@ 0x40
 800cae4:	d01d      	beq.n	800cb22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f003 0308 	and.w	r3, r3, #8
 800caf0:	2b08      	cmp	r3, #8
 800caf2:	d116      	bne.n	800cb22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800caf4:	2300      	movs	r3, #0
 800caf6:	617b      	str	r3, [r7, #20]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	617b      	str	r3, [r7, #20]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	617b      	str	r3, [r7, #20]
 800cb08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f000 f857 	bl	800cbbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2208      	movs	r2, #8
 800cb14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e00f      	b.n	800cb42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	bf0c      	ite	eq
 800cb32:	2301      	moveq	r3, #1
 800cb34:	2300      	movne	r3, #0
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	461a      	mov	r2, r3
 800cb3a:	79fb      	ldrb	r3, [r7, #7]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d0b4      	beq.n	800caaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb4a:	b480      	push	{r7}
 800cb4c:	b085      	sub	sp, #20
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	4613      	mov	r3, r2
 800cb56:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	88fa      	ldrh	r2, [r7, #6]
 800cb62:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	88fa      	ldrh	r2, [r7, #6]
 800cb68:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2222      	movs	r2, #34	@ 0x22
 800cb74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d007      	beq.n	800cb90 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68da      	ldr	r2, [r3, #12]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cb8e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	695a      	ldr	r2, [r3, #20]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f042 0201 	orr.w	r2, r2, #1
 800cb9e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68da      	ldr	r2, [r3, #12]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f042 0220 	orr.w	r2, r2, #32
 800cbae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr

0800cbbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbbe:	b480      	push	{r7}
 800cbc0:	b095      	sub	sp, #84	@ 0x54
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	330c      	adds	r3, #12
 800cbcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbd0:	e853 3f00 	ldrex	r3, [r3]
 800cbd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	330c      	adds	r3, #12
 800cbe4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbe6:	643a      	str	r2, [r7, #64]	@ 0x40
 800cbe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cbec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbee:	e841 2300 	strex	r3, r2, [r1]
 800cbf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1e5      	bne.n	800cbc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	3314      	adds	r3, #20
 800cc00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	e853 3f00 	ldrex	r3, [r3]
 800cc08:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	f023 0301 	bic.w	r3, r3, #1
 800cc10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	3314      	adds	r3, #20
 800cc18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc22:	e841 2300 	strex	r3, r2, [r1]
 800cc26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1e5      	bne.n	800cbfa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d119      	bne.n	800cc6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	330c      	adds	r3, #12
 800cc3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	e853 3f00 	ldrex	r3, [r3]
 800cc44:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	f023 0310 	bic.w	r3, r3, #16
 800cc4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	330c      	adds	r3, #12
 800cc54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc56:	61ba      	str	r2, [r7, #24]
 800cc58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5a:	6979      	ldr	r1, [r7, #20]
 800cc5c:	69ba      	ldr	r2, [r7, #24]
 800cc5e:	e841 2300 	strex	r3, r2, [r1]
 800cc62:	613b      	str	r3, [r7, #16]
   return(result);
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1e5      	bne.n	800cc36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2220      	movs	r2, #32
 800cc6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cc78:	bf00      	nop
 800cc7a:	3754      	adds	r7, #84	@ 0x54
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f7ff fee7 	bl	800ca6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc9e:	bf00      	nop
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b21      	cmp	r3, #33	@ 0x21
 800ccb8:	d13e      	bne.n	800cd38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccc2:	d114      	bne.n	800ccee <UART_Transmit_IT+0x48>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	691b      	ldr	r3, [r3, #16]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d110      	bne.n	800ccee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a1b      	ldr	r3, [r3, #32]
 800ccd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	881b      	ldrh	r3, [r3, #0]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cce0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a1b      	ldr	r3, [r3, #32]
 800cce6:	1c9a      	adds	r2, r3, #2
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	621a      	str	r2, [r3, #32]
 800ccec:	e008      	b.n	800cd00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	1c59      	adds	r1, r3, #1
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	6211      	str	r1, [r2, #32]
 800ccf8:	781a      	ldrb	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	3b01      	subs	r3, #1
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d10f      	bne.n	800cd34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	68da      	ldr	r2, [r3, #12]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68da      	ldr	r2, [r3, #12]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	e000      	b.n	800cd3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd38:	2302      	movs	r3, #2
  }
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3714      	adds	r7, #20
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68da      	ldr	r2, [r3, #12]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2220      	movs	r2, #32
 800cd62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff fe76 	bl	800ca58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd6c:	2300      	movs	r3, #0
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b08c      	sub	sp, #48	@ 0x30
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b22      	cmp	r3, #34	@ 0x22
 800cd90:	f040 80aa 	bne.w	800cee8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd9c:	d115      	bne.n	800cdca <UART_Receive_IT+0x54>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d111      	bne.n	800cdca <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc2:	1c9a      	adds	r2, r3, #2
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	629a      	str	r2, [r3, #40]	@ 0x28
 800cdc8:	e024      	b.n	800ce14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdd8:	d007      	beq.n	800cdea <UART_Receive_IT+0x74>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10a      	bne.n	800cdf8 <UART_Receive_IT+0x82>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d106      	bne.n	800cdf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf4:	701a      	strb	r2, [r3, #0]
 800cdf6:	e008      	b.n	800ce0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce0e:	1c5a      	adds	r2, r3, #1
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	4619      	mov	r1, r3
 800ce22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d15d      	bne.n	800cee4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68da      	ldr	r2, [r3, #12]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f022 0220 	bic.w	r2, r2, #32
 800ce36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	68da      	ldr	r2, [r3, #12]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	695a      	ldr	r2, [r3, #20]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f022 0201 	bic.w	r2, r2, #1
 800ce56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2220      	movs	r2, #32
 800ce5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d135      	bne.n	800ceda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	330c      	adds	r3, #12
 800ce7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	e853 3f00 	ldrex	r3, [r3]
 800ce82:	613b      	str	r3, [r7, #16]
   return(result);
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	f023 0310 	bic.w	r3, r3, #16
 800ce8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	330c      	adds	r3, #12
 800ce92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce94:	623a      	str	r2, [r7, #32]
 800ce96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce98:	69f9      	ldr	r1, [r7, #28]
 800ce9a:	6a3a      	ldr	r2, [r7, #32]
 800ce9c:	e841 2300 	strex	r3, r2, [r1]
 800cea0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1e5      	bne.n	800ce74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f003 0310 	and.w	r3, r3, #16
 800ceb2:	2b10      	cmp	r3, #16
 800ceb4:	d10a      	bne.n	800cecc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60fb      	str	r3, [r7, #12]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	60fb      	str	r3, [r7, #12]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7ff fdd4 	bl	800ca80 <HAL_UARTEx_RxEventCallback>
 800ced8:	e002      	b.n	800cee0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7fc fe72 	bl	8009bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	e002      	b.n	800ceea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	e000      	b.n	800ceea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cee8:	2302      	movs	r3, #2
  }
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3730      	adds	r7, #48	@ 0x30
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
	...

0800cef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cef8:	b0c0      	sub	sp, #256	@ 0x100
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cf0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf10:	68d9      	ldr	r1, [r3, #12]
 800cf12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	ea40 0301 	orr.w	r3, r0, r1
 800cf1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cf1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf22:	689a      	ldr	r2, [r3, #8]
 800cf24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf30:	695b      	ldr	r3, [r3, #20]
 800cf32:	431a      	orrs	r2, r3
 800cf34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf38:	69db      	ldr	r3, [r3, #28]
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cf40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cf4c:	f021 010c 	bic.w	r1, r1, #12
 800cf50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf5a:	430b      	orrs	r3, r1
 800cf5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cf6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf6e:	6999      	ldr	r1, [r3, #24]
 800cf70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	ea40 0301 	orr.w	r3, r0, r1
 800cf7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	4b8f      	ldr	r3, [pc, #572]	@ (800d1c0 <UART_SetConfig+0x2cc>)
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d005      	beq.n	800cf94 <UART_SetConfig+0xa0>
 800cf88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	4b8d      	ldr	r3, [pc, #564]	@ (800d1c4 <UART_SetConfig+0x2d0>)
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d104      	bne.n	800cf9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cf94:	f7fd fb72 	bl	800a67c <HAL_RCC_GetPCLK2Freq>
 800cf98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cf9c:	e003      	b.n	800cfa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cf9e:	f7fd fb59 	bl	800a654 <HAL_RCC_GetPCLK1Freq>
 800cfa2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfaa:	69db      	ldr	r3, [r3, #28]
 800cfac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfb0:	f040 810c 	bne.w	800d1cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cfb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cfbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cfc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cfc6:	4622      	mov	r2, r4
 800cfc8:	462b      	mov	r3, r5
 800cfca:	1891      	adds	r1, r2, r2
 800cfcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cfce:	415b      	adcs	r3, r3
 800cfd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	eb12 0801 	adds.w	r8, r2, r1
 800cfdc:	4629      	mov	r1, r5
 800cfde:	eb43 0901 	adc.w	r9, r3, r1
 800cfe2:	f04f 0200 	mov.w	r2, #0
 800cfe6:	f04f 0300 	mov.w	r3, #0
 800cfea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cfee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cff6:	4690      	mov	r8, r2
 800cff8:	4699      	mov	r9, r3
 800cffa:	4623      	mov	r3, r4
 800cffc:	eb18 0303 	adds.w	r3, r8, r3
 800d000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d004:	462b      	mov	r3, r5
 800d006:	eb49 0303 	adc.w	r3, r9, r3
 800d00a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d01a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d01e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d022:	460b      	mov	r3, r1
 800d024:	18db      	adds	r3, r3, r3
 800d026:	653b      	str	r3, [r7, #80]	@ 0x50
 800d028:	4613      	mov	r3, r2
 800d02a:	eb42 0303 	adc.w	r3, r2, r3
 800d02e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d030:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d034:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d038:	f7fb f94a 	bl	80082d0 <__aeabi_uldivmod>
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	4b61      	ldr	r3, [pc, #388]	@ (800d1c8 <UART_SetConfig+0x2d4>)
 800d042:	fba3 2302 	umull	r2, r3, r3, r2
 800d046:	095b      	lsrs	r3, r3, #5
 800d048:	011c      	lsls	r4, r3, #4
 800d04a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d04e:	2200      	movs	r2, #0
 800d050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d054:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d058:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d05c:	4642      	mov	r2, r8
 800d05e:	464b      	mov	r3, r9
 800d060:	1891      	adds	r1, r2, r2
 800d062:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d064:	415b      	adcs	r3, r3
 800d066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d068:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d06c:	4641      	mov	r1, r8
 800d06e:	eb12 0a01 	adds.w	sl, r2, r1
 800d072:	4649      	mov	r1, r9
 800d074:	eb43 0b01 	adc.w	fp, r3, r1
 800d078:	f04f 0200 	mov.w	r2, #0
 800d07c:	f04f 0300 	mov.w	r3, #0
 800d080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d084:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d08c:	4692      	mov	sl, r2
 800d08e:	469b      	mov	fp, r3
 800d090:	4643      	mov	r3, r8
 800d092:	eb1a 0303 	adds.w	r3, sl, r3
 800d096:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d09a:	464b      	mov	r3, r9
 800d09c:	eb4b 0303 	adc.w	r3, fp, r3
 800d0a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d0b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	18db      	adds	r3, r3, r3
 800d0bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0be:	4613      	mov	r3, r2
 800d0c0:	eb42 0303 	adc.w	r3, r2, r3
 800d0c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d0ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d0ce:	f7fb f8ff 	bl	80082d0 <__aeabi_uldivmod>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	4b3b      	ldr	r3, [pc, #236]	@ (800d1c8 <UART_SetConfig+0x2d4>)
 800d0da:	fba3 2301 	umull	r2, r3, r3, r1
 800d0de:	095b      	lsrs	r3, r3, #5
 800d0e0:	2264      	movs	r2, #100	@ 0x64
 800d0e2:	fb02 f303 	mul.w	r3, r2, r3
 800d0e6:	1acb      	subs	r3, r1, r3
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d0ee:	4b36      	ldr	r3, [pc, #216]	@ (800d1c8 <UART_SetConfig+0x2d4>)
 800d0f0:	fba3 2302 	umull	r2, r3, r3, r2
 800d0f4:	095b      	lsrs	r3, r3, #5
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d0fc:	441c      	add	r4, r3
 800d0fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d102:	2200      	movs	r2, #0
 800d104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d108:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d10c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d110:	4642      	mov	r2, r8
 800d112:	464b      	mov	r3, r9
 800d114:	1891      	adds	r1, r2, r2
 800d116:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d118:	415b      	adcs	r3, r3
 800d11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d11c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d120:	4641      	mov	r1, r8
 800d122:	1851      	adds	r1, r2, r1
 800d124:	6339      	str	r1, [r7, #48]	@ 0x30
 800d126:	4649      	mov	r1, r9
 800d128:	414b      	adcs	r3, r1
 800d12a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d12c:	f04f 0200 	mov.w	r2, #0
 800d130:	f04f 0300 	mov.w	r3, #0
 800d134:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d138:	4659      	mov	r1, fp
 800d13a:	00cb      	lsls	r3, r1, #3
 800d13c:	4651      	mov	r1, sl
 800d13e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d142:	4651      	mov	r1, sl
 800d144:	00ca      	lsls	r2, r1, #3
 800d146:	4610      	mov	r0, r2
 800d148:	4619      	mov	r1, r3
 800d14a:	4603      	mov	r3, r0
 800d14c:	4642      	mov	r2, r8
 800d14e:	189b      	adds	r3, r3, r2
 800d150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d154:	464b      	mov	r3, r9
 800d156:	460a      	mov	r2, r1
 800d158:	eb42 0303 	adc.w	r3, r2, r3
 800d15c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d16c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d174:	460b      	mov	r3, r1
 800d176:	18db      	adds	r3, r3, r3
 800d178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d17a:	4613      	mov	r3, r2
 800d17c:	eb42 0303 	adc.w	r3, r2, r3
 800d180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d186:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d18a:	f7fb f8a1 	bl	80082d0 <__aeabi_uldivmod>
 800d18e:	4602      	mov	r2, r0
 800d190:	460b      	mov	r3, r1
 800d192:	4b0d      	ldr	r3, [pc, #52]	@ (800d1c8 <UART_SetConfig+0x2d4>)
 800d194:	fba3 1302 	umull	r1, r3, r3, r2
 800d198:	095b      	lsrs	r3, r3, #5
 800d19a:	2164      	movs	r1, #100	@ 0x64
 800d19c:	fb01 f303 	mul.w	r3, r1, r3
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	3332      	adds	r3, #50	@ 0x32
 800d1a6:	4a08      	ldr	r2, [pc, #32]	@ (800d1c8 <UART_SetConfig+0x2d4>)
 800d1a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ac:	095b      	lsrs	r3, r3, #5
 800d1ae:	f003 0207 	and.w	r2, r3, #7
 800d1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4422      	add	r2, r4
 800d1ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d1bc:	e106      	b.n	800d3cc <UART_SetConfig+0x4d8>
 800d1be:	bf00      	nop
 800d1c0:	40011000 	.word	0x40011000
 800d1c4:	40011400 	.word	0x40011400
 800d1c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d1cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d1d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d1da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d1de:	4642      	mov	r2, r8
 800d1e0:	464b      	mov	r3, r9
 800d1e2:	1891      	adds	r1, r2, r2
 800d1e4:	6239      	str	r1, [r7, #32]
 800d1e6:	415b      	adcs	r3, r3
 800d1e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d1ee:	4641      	mov	r1, r8
 800d1f0:	1854      	adds	r4, r2, r1
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	eb43 0501 	adc.w	r5, r3, r1
 800d1f8:	f04f 0200 	mov.w	r2, #0
 800d1fc:	f04f 0300 	mov.w	r3, #0
 800d200:	00eb      	lsls	r3, r5, #3
 800d202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d206:	00e2      	lsls	r2, r4, #3
 800d208:	4614      	mov	r4, r2
 800d20a:	461d      	mov	r5, r3
 800d20c:	4643      	mov	r3, r8
 800d20e:	18e3      	adds	r3, r4, r3
 800d210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d214:	464b      	mov	r3, r9
 800d216:	eb45 0303 	adc.w	r3, r5, r3
 800d21a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d22a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d22e:	f04f 0200 	mov.w	r2, #0
 800d232:	f04f 0300 	mov.w	r3, #0
 800d236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d23a:	4629      	mov	r1, r5
 800d23c:	008b      	lsls	r3, r1, #2
 800d23e:	4621      	mov	r1, r4
 800d240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d244:	4621      	mov	r1, r4
 800d246:	008a      	lsls	r2, r1, #2
 800d248:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d24c:	f7fb f840 	bl	80082d0 <__aeabi_uldivmod>
 800d250:	4602      	mov	r2, r0
 800d252:	460b      	mov	r3, r1
 800d254:	4b60      	ldr	r3, [pc, #384]	@ (800d3d8 <UART_SetConfig+0x4e4>)
 800d256:	fba3 2302 	umull	r2, r3, r3, r2
 800d25a:	095b      	lsrs	r3, r3, #5
 800d25c:	011c      	lsls	r4, r3, #4
 800d25e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d262:	2200      	movs	r2, #0
 800d264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d268:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d26c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d270:	4642      	mov	r2, r8
 800d272:	464b      	mov	r3, r9
 800d274:	1891      	adds	r1, r2, r2
 800d276:	61b9      	str	r1, [r7, #24]
 800d278:	415b      	adcs	r3, r3
 800d27a:	61fb      	str	r3, [r7, #28]
 800d27c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d280:	4641      	mov	r1, r8
 800d282:	1851      	adds	r1, r2, r1
 800d284:	6139      	str	r1, [r7, #16]
 800d286:	4649      	mov	r1, r9
 800d288:	414b      	adcs	r3, r1
 800d28a:	617b      	str	r3, [r7, #20]
 800d28c:	f04f 0200 	mov.w	r2, #0
 800d290:	f04f 0300 	mov.w	r3, #0
 800d294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d298:	4659      	mov	r1, fp
 800d29a:	00cb      	lsls	r3, r1, #3
 800d29c:	4651      	mov	r1, sl
 800d29e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2a2:	4651      	mov	r1, sl
 800d2a4:	00ca      	lsls	r2, r1, #3
 800d2a6:	4610      	mov	r0, r2
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	4642      	mov	r2, r8
 800d2ae:	189b      	adds	r3, r3, r2
 800d2b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d2b4:	464b      	mov	r3, r9
 800d2b6:	460a      	mov	r2, r1
 800d2b8:	eb42 0303 	adc.w	r3, r2, r3
 800d2bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d2ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d2cc:	f04f 0200 	mov.w	r2, #0
 800d2d0:	f04f 0300 	mov.w	r3, #0
 800d2d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d2d8:	4649      	mov	r1, r9
 800d2da:	008b      	lsls	r3, r1, #2
 800d2dc:	4641      	mov	r1, r8
 800d2de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2e2:	4641      	mov	r1, r8
 800d2e4:	008a      	lsls	r2, r1, #2
 800d2e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d2ea:	f7fa fff1 	bl	80082d0 <__aeabi_uldivmod>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4611      	mov	r1, r2
 800d2f4:	4b38      	ldr	r3, [pc, #224]	@ (800d3d8 <UART_SetConfig+0x4e4>)
 800d2f6:	fba3 2301 	umull	r2, r3, r3, r1
 800d2fa:	095b      	lsrs	r3, r3, #5
 800d2fc:	2264      	movs	r2, #100	@ 0x64
 800d2fe:	fb02 f303 	mul.w	r3, r2, r3
 800d302:	1acb      	subs	r3, r1, r3
 800d304:	011b      	lsls	r3, r3, #4
 800d306:	3332      	adds	r3, #50	@ 0x32
 800d308:	4a33      	ldr	r2, [pc, #204]	@ (800d3d8 <UART_SetConfig+0x4e4>)
 800d30a:	fba2 2303 	umull	r2, r3, r2, r3
 800d30e:	095b      	lsrs	r3, r3, #5
 800d310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d314:	441c      	add	r4, r3
 800d316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d31a:	2200      	movs	r2, #0
 800d31c:	673b      	str	r3, [r7, #112]	@ 0x70
 800d31e:	677a      	str	r2, [r7, #116]	@ 0x74
 800d320:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d324:	4642      	mov	r2, r8
 800d326:	464b      	mov	r3, r9
 800d328:	1891      	adds	r1, r2, r2
 800d32a:	60b9      	str	r1, [r7, #8]
 800d32c:	415b      	adcs	r3, r3
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d334:	4641      	mov	r1, r8
 800d336:	1851      	adds	r1, r2, r1
 800d338:	6039      	str	r1, [r7, #0]
 800d33a:	4649      	mov	r1, r9
 800d33c:	414b      	adcs	r3, r1
 800d33e:	607b      	str	r3, [r7, #4]
 800d340:	f04f 0200 	mov.w	r2, #0
 800d344:	f04f 0300 	mov.w	r3, #0
 800d348:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d34c:	4659      	mov	r1, fp
 800d34e:	00cb      	lsls	r3, r1, #3
 800d350:	4651      	mov	r1, sl
 800d352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d356:	4651      	mov	r1, sl
 800d358:	00ca      	lsls	r2, r1, #3
 800d35a:	4610      	mov	r0, r2
 800d35c:	4619      	mov	r1, r3
 800d35e:	4603      	mov	r3, r0
 800d360:	4642      	mov	r2, r8
 800d362:	189b      	adds	r3, r3, r2
 800d364:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d366:	464b      	mov	r3, r9
 800d368:	460a      	mov	r2, r1
 800d36a:	eb42 0303 	adc.w	r3, r2, r3
 800d36e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	663b      	str	r3, [r7, #96]	@ 0x60
 800d37a:	667a      	str	r2, [r7, #100]	@ 0x64
 800d37c:	f04f 0200 	mov.w	r2, #0
 800d380:	f04f 0300 	mov.w	r3, #0
 800d384:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d388:	4649      	mov	r1, r9
 800d38a:	008b      	lsls	r3, r1, #2
 800d38c:	4641      	mov	r1, r8
 800d38e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d392:	4641      	mov	r1, r8
 800d394:	008a      	lsls	r2, r1, #2
 800d396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d39a:	f7fa ff99 	bl	80082d0 <__aeabi_uldivmod>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d3d8 <UART_SetConfig+0x4e4>)
 800d3a4:	fba3 1302 	umull	r1, r3, r3, r2
 800d3a8:	095b      	lsrs	r3, r3, #5
 800d3aa:	2164      	movs	r1, #100	@ 0x64
 800d3ac:	fb01 f303 	mul.w	r3, r1, r3
 800d3b0:	1ad3      	subs	r3, r2, r3
 800d3b2:	011b      	lsls	r3, r3, #4
 800d3b4:	3332      	adds	r3, #50	@ 0x32
 800d3b6:	4a08      	ldr	r2, [pc, #32]	@ (800d3d8 <UART_SetConfig+0x4e4>)
 800d3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3bc:	095b      	lsrs	r3, r3, #5
 800d3be:	f003 020f 	and.w	r2, r3, #15
 800d3c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4422      	add	r2, r4
 800d3ca:	609a      	str	r2, [r3, #8]
}
 800d3cc:	bf00      	nop
 800d3ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3d8:	51eb851f 	.word	0x51eb851f

0800d3dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f103 0208 	add.w	r2, r3, #8
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f103 0208 	add.w	r2, r3, #8
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f103 0208 	add.w	r2, r3, #8
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d42a:	bf00      	nop
 800d42c:	370c      	adds	r7, #12
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800d436:	b480      	push	{r7}
 800d438:	b085      	sub	sp, #20
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	689a      	ldr	r2, [r3, #8]
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	683a      	ldr	r2, [r7, #0]
 800d45a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	601a      	str	r2, [r3, #0]
}
 800d472:	bf00      	nop
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr

0800d47e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800d47e:	b480      	push	{r7}
 800d480:	b085      	sub	sp, #20
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d494:	d103      	bne.n	800d49e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	60fb      	str	r3, [r7, #12]
 800d49c:	e00c      	b.n	800d4b8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	3308      	adds	r3, #8
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	e002      	b.n	800d4ac <vListInsert+0x2e>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	60fb      	str	r3, [r7, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d2f6      	bcs.n	800d4a6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	685a      	ldr	r2, [r3, #4]
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	683a      	ldr	r2, [r7, #0]
 800d4d2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	601a      	str	r2, [r3, #0]
}
 800d4e4:	bf00      	nop
 800d4e6:	3714      	adds	r7, #20
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	6892      	ldr	r2, [r2, #8]
 800d506:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	6852      	ldr	r2, [r2, #4]
 800d510:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d103      	bne.n	800d524 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	689a      	ldr	r2, [r3, #8]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	1e5a      	subs	r2, r3, #1
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3714      	adds	r7, #20
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10b      	bne.n	800d570 <xQueueGenericReset+0x2c>
        __asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	60bb      	str	r3, [r7, #8]
    }
 800d56a:	bf00      	nop
 800d56c:	bf00      	nop
 800d56e:	e7fd      	b.n	800d56c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800d570:	f001 ffb4 	bl	800f4dc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d57c:	68f9      	ldr	r1, [r7, #12]
 800d57e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d580:	fb01 f303 	mul.w	r3, r1, r3
 800d584:	441a      	add	r2, r3
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2200      	movs	r2, #0
 800d58e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	68f9      	ldr	r1, [r7, #12]
 800d5a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d5a6:	fb01 f303 	mul.w	r3, r1, r3
 800d5aa:	441a      	add	r2, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	22ff      	movs	r2, #255	@ 0xff
 800d5b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	22ff      	movs	r2, #255	@ 0xff
 800d5bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d114      	bne.n	800d5f0 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	691b      	ldr	r3, [r3, #16]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d01a      	beq.n	800d604 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3310      	adds	r3, #16
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f001 f894 	bl	800e700 <xTaskRemoveFromEventList>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d012      	beq.n	800d604 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800d5de:	4b0d      	ldr	r3, [pc, #52]	@ (800d614 <xQueueGenericReset+0xd0>)
 800d5e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5e4:	601a      	str	r2, [r3, #0]
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	f3bf 8f6f 	isb	sy
 800d5ee:	e009      	b.n	800d604 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	3310      	adds	r3, #16
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7ff fef1 	bl	800d3dc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	3324      	adds	r3, #36	@ 0x24
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7ff feec 	bl	800d3dc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800d604:	f001 ff9c 	bl	800f540 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800d608:	2301      	movs	r3, #1
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	e000ed04 	.word	0xe000ed04

0800d618 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800d618:	b580      	push	{r7, lr}
 800d61a:	b08c      	sub	sp, #48	@ 0x30
 800d61c:	af02      	add	r7, sp, #8
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	4613      	mov	r3, r2
 800d624:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10b      	bne.n	800d644 <xQueueGenericCreate+0x2c>
        __asm volatile
 800d62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d630:	f383 8811 	msr	BASEPRI, r3
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	61bb      	str	r3, [r7, #24]
    }
 800d63e:	bf00      	nop
 800d640:	bf00      	nop
 800d642:	e7fd      	b.n	800d640 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	fb02 f303 	mul.w	r3, r2, r3
 800d64c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d006      	beq.n	800d662 <xQueueGenericCreate+0x4a>
 800d654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	fbb2 f3f3 	udiv	r3, r2, r3
 800d65c:	68fa      	ldr	r2, [r7, #12]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d101      	bne.n	800d666 <xQueueGenericCreate+0x4e>
 800d662:	2301      	movs	r3, #1
 800d664:	e000      	b.n	800d668 <xQueueGenericCreate+0x50>
 800d666:	2300      	movs	r3, #0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10b      	bne.n	800d684 <xQueueGenericCreate+0x6c>
        __asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	617b      	str	r3, [r7, #20]
    }
 800d67e:	bf00      	nop
 800d680:	bf00      	nop
 800d682:	e7fd      	b.n	800d680 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800d684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d686:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800d68a:	d90b      	bls.n	800d6a4 <xQueueGenericCreate+0x8c>
        __asm volatile
 800d68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d690:	f383 8811 	msr	BASEPRI, r3
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	613b      	str	r3, [r7, #16]
    }
 800d69e:	bf00      	nop
 800d6a0:	bf00      	nop
 800d6a2:	e7fd      	b.n	800d6a0 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a6:	3350      	adds	r3, #80	@ 0x50
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f002 f841 	bl	800f730 <pvPortMalloc>
 800d6ae:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00d      	beq.n	800d6d2 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	3350      	adds	r3, #80	@ 0x50
 800d6be:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d6c0:	79fa      	ldrb	r2, [r7, #7]
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	69fa      	ldr	r2, [r7, #28]
 800d6ca:	68b9      	ldr	r1, [r7, #8]
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f000 f805 	bl	800d6dc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800d6d2:	6a3b      	ldr	r3, [r7, #32]
    }
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3728      	adds	r7, #40	@ 0x28
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d103      	bne.n	800d6f8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	69ba      	ldr	r2, [r7, #24]
 800d6f4:	601a      	str	r2, [r3, #0]
 800d6f6:	e002      	b.n	800d6fe <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d70a:	2101      	movs	r1, #1
 800d70c:	69b8      	ldr	r0, [r7, #24]
 800d70e:	f7ff ff19 	bl	800d544 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800d71a:	bf00      	nop
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800d722:	b580      	push	{r7, lr}
 800d724:	b082      	sub	sp, #8
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00e      	beq.n	800d74e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d742:	2300      	movs	r3, #0
 800d744:	2200      	movs	r2, #0
 800d746:	2100      	movs	r1, #0
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 f81d 	bl	800d788 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800d74e:	bf00      	nop
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800d756:	b580      	push	{r7, lr}
 800d758:	b086      	sub	sp, #24
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	4603      	mov	r3, r0
 800d75e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d760:	2301      	movs	r3, #1
 800d762:	617b      	str	r3, [r7, #20]
 800d764:	2300      	movs	r3, #0
 800d766:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d768:	79fb      	ldrb	r3, [r7, #7]
 800d76a:	461a      	mov	r2, r3
 800d76c:	6939      	ldr	r1, [r7, #16]
 800d76e:	6978      	ldr	r0, [r7, #20]
 800d770:	f7ff ff52 	bl	800d618 <xQueueGenericCreate>
 800d774:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f7ff ffd3 	bl	800d722 <prvInitialiseMutex>

        return xNewQueue;
 800d77c:	68fb      	ldr	r3, [r7, #12]
    }
 800d77e:	4618      	mov	r0, r3
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
	...

0800d788 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b08e      	sub	sp, #56	@ 0x38
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	607a      	str	r2, [r7, #4]
 800d794:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d796:	2300      	movs	r3, #0
 800d798:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800d79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10b      	bne.n	800d7bc <xQueueGenericSend+0x34>
        __asm volatile
 800d7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a8:	f383 8811 	msr	BASEPRI, r3
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	f3bf 8f4f 	dsb	sy
 800d7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800d7b6:	bf00      	nop
 800d7b8:	bf00      	nop
 800d7ba:	e7fd      	b.n	800d7b8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d103      	bne.n	800d7ca <xQueueGenericSend+0x42>
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d101      	bne.n	800d7ce <xQueueGenericSend+0x46>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e000      	b.n	800d7d0 <xQueueGenericSend+0x48>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10b      	bne.n	800d7ec <xQueueGenericSend+0x64>
        __asm volatile
 800d7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800d7e6:	bf00      	nop
 800d7e8:	bf00      	nop
 800d7ea:	e7fd      	b.n	800d7e8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	d103      	bne.n	800d7fa <xQueueGenericSend+0x72>
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d101      	bne.n	800d7fe <xQueueGenericSend+0x76>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e000      	b.n	800d800 <xQueueGenericSend+0x78>
 800d7fe:	2300      	movs	r3, #0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10b      	bne.n	800d81c <xQueueGenericSend+0x94>
        __asm volatile
 800d804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	623b      	str	r3, [r7, #32]
    }
 800d816:	bf00      	nop
 800d818:	bf00      	nop
 800d81a:	e7fd      	b.n	800d818 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d81c:	f001 f910 	bl	800ea40 <xTaskGetSchedulerState>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d102      	bne.n	800d82c <xQueueGenericSend+0xa4>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d101      	bne.n	800d830 <xQueueGenericSend+0xa8>
 800d82c:	2301      	movs	r3, #1
 800d82e:	e000      	b.n	800d832 <xQueueGenericSend+0xaa>
 800d830:	2300      	movs	r3, #0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10b      	bne.n	800d84e <xQueueGenericSend+0xc6>
        __asm volatile
 800d836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d83a:	f383 8811 	msr	BASEPRI, r3
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	61fb      	str	r3, [r7, #28]
    }
 800d848:	bf00      	nop
 800d84a:	bf00      	nop
 800d84c:	e7fd      	b.n	800d84a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d84e:	f001 fe45 	bl	800f4dc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d302      	bcc.n	800d864 <xQueueGenericSend+0xdc>
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b02      	cmp	r3, #2
 800d862:	d129      	bne.n	800d8b8 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	68b9      	ldr	r1, [r7, #8]
 800d868:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d86a:	f000 fa1f 	bl	800dcac <prvCopyDataToQueue>
 800d86e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d874:	2b00      	cmp	r3, #0
 800d876:	d010      	beq.n	800d89a <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87a:	3324      	adds	r3, #36	@ 0x24
 800d87c:	4618      	mov	r0, r3
 800d87e:	f000 ff3f 	bl	800e700 <xTaskRemoveFromEventList>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d013      	beq.n	800d8b0 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800d888:	4b3f      	ldr	r3, [pc, #252]	@ (800d988 <xQueueGenericSend+0x200>)
 800d88a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	e00a      	b.n	800d8b0 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800d89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d007      	beq.n	800d8b0 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800d8a0:	4b39      	ldr	r3, [pc, #228]	@ (800d988 <xQueueGenericSend+0x200>)
 800d8a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800d8b0:	f001 fe46 	bl	800f540 <vPortExitCritical>
                return pdPASS;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e063      	b.n	800d980 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d103      	bne.n	800d8c6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d8be:	f001 fe3f 	bl	800f540 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	e05c      	b.n	800d980 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d106      	bne.n	800d8da <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d8cc:	f107 0314 	add.w	r3, r7, #20
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f000 ff79 	bl	800e7c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d8da:	f001 fe31 	bl	800f540 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d8de:	f000 fceb 	bl	800e2b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d8e2:	f001 fdfb 	bl	800f4dc <vPortEnterCritical>
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d8ec:	b25b      	sxtb	r3, r3
 800d8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f2:	d103      	bne.n	800d8fc <xQueueGenericSend+0x174>
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d902:	b25b      	sxtb	r3, r3
 800d904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d908:	d103      	bne.n	800d912 <xQueueGenericSend+0x18a>
 800d90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d912:	f001 fe15 	bl	800f540 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d916:	1d3a      	adds	r2, r7, #4
 800d918:	f107 0314 	add.w	r3, r7, #20
 800d91c:	4611      	mov	r1, r2
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 ff68 	bl	800e7f4 <xTaskCheckForTimeOut>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d124      	bne.n	800d974 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d92a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d92c:	f000 fab6 	bl	800de9c <prvIsQueueFull>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d018      	beq.n	800d968 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d938:	3310      	adds	r3, #16
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	4611      	mov	r1, r2
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 fe8c 	bl	800e65c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800d944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d946:	f000 fa41 	bl	800ddcc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800d94a:	f000 fcc3 	bl	800e2d4 <xTaskResumeAll>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	f47f af7c 	bne.w	800d84e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800d956:	4b0c      	ldr	r3, [pc, #48]	@ (800d988 <xQueueGenericSend+0x200>)
 800d958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	e772      	b.n	800d84e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800d968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d96a:	f000 fa2f 	bl	800ddcc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d96e:	f000 fcb1 	bl	800e2d4 <xTaskResumeAll>
 800d972:	e76c      	b.n	800d84e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800d974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d976:	f000 fa29 	bl	800ddcc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d97a:	f000 fcab 	bl	800e2d4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800d97e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800d980:	4618      	mov	r0, r3
 800d982:	3738      	adds	r7, #56	@ 0x38
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	e000ed04 	.word	0xe000ed04

0800d98c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b090      	sub	sp, #64	@ 0x40
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800d99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d10b      	bne.n	800d9bc <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800d9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a8:	f383 8811 	msr	BASEPRI, r3
 800d9ac:	f3bf 8f6f 	isb	sy
 800d9b0:	f3bf 8f4f 	dsb	sy
 800d9b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800d9b6:	bf00      	nop
 800d9b8:	bf00      	nop
 800d9ba:	e7fd      	b.n	800d9b8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d103      	bne.n	800d9ca <xQueueGenericSendFromISR+0x3e>
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <xQueueGenericSendFromISR+0x42>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e000      	b.n	800d9d0 <xQueueGenericSendFromISR+0x44>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10b      	bne.n	800d9ec <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800d9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d8:	f383 8811 	msr	BASEPRI, r3
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	f3bf 8f4f 	dsb	sy
 800d9e4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800d9e6:	bf00      	nop
 800d9e8:	bf00      	nop
 800d9ea:	e7fd      	b.n	800d9e8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	d103      	bne.n	800d9fa <xQueueGenericSendFromISR+0x6e>
 800d9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d101      	bne.n	800d9fe <xQueueGenericSendFromISR+0x72>
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e000      	b.n	800da00 <xQueueGenericSendFromISR+0x74>
 800d9fe:	2300      	movs	r3, #0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10b      	bne.n	800da1c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800da04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	623b      	str	r3, [r7, #32]
    }
 800da16:	bf00      	nop
 800da18:	bf00      	nop
 800da1a:	e7fd      	b.n	800da18 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da1c:	f001 fe46 	bl	800f6ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800da20:	f3ef 8211 	mrs	r2, BASEPRI
 800da24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	61fa      	str	r2, [r7, #28]
 800da36:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800da38:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da3a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da44:	429a      	cmp	r2, r3
 800da46:	d302      	bcc.n	800da4e <xQueueGenericSendFromISR+0xc2>
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d13f      	bne.n	800dace <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800da4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	68b9      	ldr	r1, [r7, #8]
 800da62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800da64:	f000 f922 	bl	800dcac <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800da68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800da6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da70:	d112      	bne.n	800da98 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da76:	2b00      	cmp	r3, #0
 800da78:	d026      	beq.n	800dac8 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da7c:	3324      	adds	r3, #36	@ 0x24
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 fe3e 	bl	800e700 <xTaskRemoveFromEventList>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d01e      	beq.n	800dac8 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d01b      	beq.n	800dac8 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	601a      	str	r2, [r3, #0]
 800da96:	e017      	b.n	800dac8 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800da98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800da9c:	2b7f      	cmp	r3, #127	@ 0x7f
 800da9e:	d10b      	bne.n	800dab8 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 800daa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	617b      	str	r3, [r7, #20]
    }
 800dab2:	bf00      	nop
 800dab4:	bf00      	nop
 800dab6:	e7fd      	b.n	800dab4 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dab8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dabc:	3301      	adds	r3, #1
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	b25a      	sxtb	r2, r3
 800dac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800dac8:	2301      	movs	r3, #1
 800daca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800dacc:	e001      	b.n	800dad2 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800dace:	2300      	movs	r3, #0
 800dad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800dadc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800dade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3740      	adds	r7, #64	@ 0x40
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08c      	sub	sp, #48	@ 0x30
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800daf4:	2300      	movs	r3, #0
 800daf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800dafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d10b      	bne.n	800db1a <xQueueReceive+0x32>
        __asm volatile
 800db02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db06:	f383 8811 	msr	BASEPRI, r3
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	623b      	str	r3, [r7, #32]
    }
 800db14:	bf00      	nop
 800db16:	bf00      	nop
 800db18:	e7fd      	b.n	800db16 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d103      	bne.n	800db28 <xQueueReceive+0x40>
 800db20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <xQueueReceive+0x44>
 800db28:	2301      	movs	r3, #1
 800db2a:	e000      	b.n	800db2e <xQueueReceive+0x46>
 800db2c:	2300      	movs	r3, #0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d10b      	bne.n	800db4a <xQueueReceive+0x62>
        __asm volatile
 800db32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db36:	f383 8811 	msr	BASEPRI, r3
 800db3a:	f3bf 8f6f 	isb	sy
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	61fb      	str	r3, [r7, #28]
    }
 800db44:	bf00      	nop
 800db46:	bf00      	nop
 800db48:	e7fd      	b.n	800db46 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db4a:	f000 ff79 	bl	800ea40 <xTaskGetSchedulerState>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d102      	bne.n	800db5a <xQueueReceive+0x72>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <xQueueReceive+0x76>
 800db5a:	2301      	movs	r3, #1
 800db5c:	e000      	b.n	800db60 <xQueueReceive+0x78>
 800db5e:	2300      	movs	r3, #0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d10b      	bne.n	800db7c <xQueueReceive+0x94>
        __asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	61bb      	str	r3, [r7, #24]
    }
 800db76:	bf00      	nop
 800db78:	bf00      	nop
 800db7a:	e7fd      	b.n	800db78 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800db7c:	f001 fcae 	bl	800f4dc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db84:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d01f      	beq.n	800dbcc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db8c:	68b9      	ldr	r1, [r7, #8]
 800db8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db90:	f000 f8f6 	bl	800dd80 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db96:	1e5a      	subs	r2, r3, #1
 800db98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9e:	691b      	ldr	r3, [r3, #16]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d00f      	beq.n	800dbc4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba6:	3310      	adds	r3, #16
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 fda9 	bl	800e700 <xTaskRemoveFromEventList>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d007      	beq.n	800dbc4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800dbb4:	4b3c      	ldr	r3, [pc, #240]	@ (800dca8 <xQueueReceive+0x1c0>)
 800dbb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800dbc4:	f001 fcbc 	bl	800f540 <vPortExitCritical>
                return pdPASS;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e069      	b.n	800dca0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d103      	bne.n	800dbda <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800dbd2:	f001 fcb5 	bl	800f540 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	e062      	b.n	800dca0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800dbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d106      	bne.n	800dbee <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800dbe0:	f107 0310 	add.w	r3, r7, #16
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f000 fdef 	bl	800e7c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800dbea:	2301      	movs	r3, #1
 800dbec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800dbee:	f001 fca7 	bl	800f540 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800dbf2:	f000 fb61 	bl	800e2b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800dbf6:	f001 fc71 	bl	800f4dc <vPortEnterCritical>
 800dbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc00:	b25b      	sxtb	r3, r3
 800dc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc06:	d103      	bne.n	800dc10 <xQueueReceive+0x128>
 800dc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc16:	b25b      	sxtb	r3, r3
 800dc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1c:	d103      	bne.n	800dc26 <xQueueReceive+0x13e>
 800dc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc26:	f001 fc8b 	bl	800f540 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc2a:	1d3a      	adds	r2, r7, #4
 800dc2c:	f107 0310 	add.w	r3, r7, #16
 800dc30:	4611      	mov	r1, r2
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fdde 	bl	800e7f4 <xTaskCheckForTimeOut>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d123      	bne.n	800dc86 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc40:	f000 f916 	bl	800de70 <prvIsQueueEmpty>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d017      	beq.n	800dc7a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc4c:	3324      	adds	r3, #36	@ 0x24
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	4611      	mov	r1, r2
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 fd02 	bl	800e65c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800dc58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc5a:	f000 f8b7 	bl	800ddcc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800dc5e:	f000 fb39 	bl	800e2d4 <xTaskResumeAll>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d189      	bne.n	800db7c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800dc68:	4b0f      	ldr	r3, [pc, #60]	@ (800dca8 <xQueueReceive+0x1c0>)
 800dc6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc6e:	601a      	str	r2, [r3, #0]
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	e780      	b.n	800db7c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800dc7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc7c:	f000 f8a6 	bl	800ddcc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800dc80:	f000 fb28 	bl	800e2d4 <xTaskResumeAll>
 800dc84:	e77a      	b.n	800db7c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800dc86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc88:	f000 f8a0 	bl	800ddcc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800dc8c:	f000 fb22 	bl	800e2d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc92:	f000 f8ed 	bl	800de70 <prvIsQueueEmpty>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f43f af6f 	beq.w	800db7c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800dc9e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3730      	adds	r7, #48	@ 0x30
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	e000ed04 	.word	0xe000ed04

0800dcac <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b086      	sub	sp, #24
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcc0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10d      	bne.n	800dce6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d14d      	bne.n	800dd6e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 fed0 	bl	800ea7c <xTaskPriorityDisinherit>
 800dcdc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2200      	movs	r2, #0
 800dce2:	609a      	str	r2, [r3, #8]
 800dce4:	e043      	b.n	800dd6e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d119      	bne.n	800dd20 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6858      	ldr	r0, [r3, #4]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	68b9      	ldr	r1, [r7, #8]
 800dcf8:	f002 f9cf 	bl	801009a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	685a      	ldr	r2, [r3, #4]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd04:	441a      	add	r2, r3
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d32b      	bcc.n	800dd6e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	605a      	str	r2, [r3, #4]
 800dd1e:	e026      	b.n	800dd6e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	68d8      	ldr	r0, [r3, #12]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd28:	461a      	mov	r2, r3
 800dd2a:	68b9      	ldr	r1, [r7, #8]
 800dd2c:	f002 f9b5 	bl	801009a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	68da      	ldr	r2, [r3, #12]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd38:	425b      	negs	r3, r3
 800dd3a:	441a      	add	r2, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	68da      	ldr	r2, [r3, #12]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d207      	bcs.n	800dd5c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	689a      	ldr	r2, [r3, #8]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd54:	425b      	negs	r3, r3
 800dd56:	441a      	add	r2, r3
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d105      	bne.n	800dd6e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d002      	beq.n	800dd6e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800dd76:	697b      	ldr	r3, [r7, #20]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d018      	beq.n	800ddc4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	68da      	ldr	r2, [r3, #12]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd9a:	441a      	add	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68da      	ldr	r2, [r3, #12]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d303      	bcc.n	800ddb4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	68d9      	ldr	r1, [r3, #12]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	6838      	ldr	r0, [r7, #0]
 800ddc0:	f002 f96b 	bl	801009a <memcpy>
    }
}
 800ddc4:	bf00      	nop
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800ddd4:	f001 fb82 	bl	800f4dc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ddde:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800dde0:	e011      	b.n	800de06 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d012      	beq.n	800de10 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	3324      	adds	r3, #36	@ 0x24
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 fc86 	bl	800e700 <xTaskRemoveFromEventList>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800ddfa:	f000 fd63 	bl	800e8c4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
 800de00:	3b01      	subs	r3, #1
 800de02:	b2db      	uxtb	r3, r3
 800de04:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800de06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	dce9      	bgt.n	800dde2 <prvUnlockQueue+0x16>
 800de0e:	e000      	b.n	800de12 <prvUnlockQueue+0x46>
                        break;
 800de10:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	22ff      	movs	r2, #255	@ 0xff
 800de16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800de1a:	f001 fb91 	bl	800f540 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800de1e:	f001 fb5d 	bl	800f4dc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de28:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800de2a:	e011      	b.n	800de50 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	691b      	ldr	r3, [r3, #16]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d012      	beq.n	800de5a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	3310      	adds	r3, #16
 800de38:	4618      	mov	r0, r3
 800de3a:	f000 fc61 	bl	800e700 <xTaskRemoveFromEventList>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d001      	beq.n	800de48 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800de44:	f000 fd3e 	bl	800e8c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	3b01      	subs	r3, #1
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800de50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de54:	2b00      	cmp	r3, #0
 800de56:	dce9      	bgt.n	800de2c <prvUnlockQueue+0x60>
 800de58:	e000      	b.n	800de5c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800de5a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	22ff      	movs	r2, #255	@ 0xff
 800de60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800de64:	f001 fb6c 	bl	800f540 <vPortExitCritical>
}
 800de68:	bf00      	nop
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800de78:	f001 fb30 	bl	800f4dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de80:	2b00      	cmp	r3, #0
 800de82:	d102      	bne.n	800de8a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800de84:	2301      	movs	r3, #1
 800de86:	60fb      	str	r3, [r7, #12]
 800de88:	e001      	b.n	800de8e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800de8a:	2300      	movs	r3, #0
 800de8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800de8e:	f001 fb57 	bl	800f540 <vPortExitCritical>

    return xReturn;
 800de92:	68fb      	ldr	r3, [r7, #12]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800dea4:	f001 fb1a 	bl	800f4dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d102      	bne.n	800deba <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800deb4:	2301      	movs	r3, #1
 800deb6:	60fb      	str	r3, [r7, #12]
 800deb8:	e001      	b.n	800debe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800deba:	2300      	movs	r3, #0
 800debc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800debe:	f001 fb3f 	bl	800f540 <vPortExitCritical>

    return xReturn;
 800dec2:	68fb      	ldr	r3, [r7, #12]
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ded6:	2300      	movs	r3, #0
 800ded8:	60fb      	str	r3, [r7, #12]
 800deda:	e014      	b.n	800df06 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dedc:	4a0f      	ldr	r2, [pc, #60]	@ (800df1c <vQueueAddToRegistry+0x50>)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10b      	bne.n	800df00 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dee8:	490c      	ldr	r1, [pc, #48]	@ (800df1c <vQueueAddToRegistry+0x50>)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	683a      	ldr	r2, [r7, #0]
 800deee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800def2:	4a0a      	ldr	r2, [pc, #40]	@ (800df1c <vQueueAddToRegistry+0x50>)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	00db      	lsls	r3, r3, #3
 800def8:	4413      	add	r3, r2
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800defe:	e006      	b.n	800df0e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3301      	adds	r3, #1
 800df04:	60fb      	str	r3, [r7, #12]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2b07      	cmp	r3, #7
 800df0a:	d9e7      	bls.n	800dedc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	3714      	adds	r7, #20
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	200002f8 	.word	0x200002f8

0800df20 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800df20:	b580      	push	{r7, lr}
 800df22:	b086      	sub	sp, #24
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800df30:	f001 fad4 	bl	800f4dc <vPortEnterCritical>
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df3a:	b25b      	sxtb	r3, r3
 800df3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df40:	d103      	bne.n	800df4a <vQueueWaitForMessageRestricted+0x2a>
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	2200      	movs	r2, #0
 800df46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df50:	b25b      	sxtb	r3, r3
 800df52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df56:	d103      	bne.n	800df60 <vQueueWaitForMessageRestricted+0x40>
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df60:	f001 faee 	bl	800f540 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d106      	bne.n	800df7a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	3324      	adds	r3, #36	@ 0x24
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	68b9      	ldr	r1, [r7, #8]
 800df74:	4618      	mov	r0, r3
 800df76:	f000 fb97 	bl	800e6a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800df7a:	6978      	ldr	r0, [r7, #20]
 800df7c:	f7ff ff26 	bl	800ddcc <prvUnlockQueue>
    }
 800df80:	bf00      	nop
 800df82:	3718      	adds	r7, #24
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800df88:	b580      	push	{r7, lr}
 800df8a:	b08c      	sub	sp, #48	@ 0x30
 800df8c:	af04      	add	r7, sp, #16
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	603b      	str	r3, [r7, #0]
 800df94:	4613      	mov	r3, r2
 800df96:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df98:	88fb      	ldrh	r3, [r7, #6]
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4618      	mov	r0, r3
 800df9e:	f001 fbc7 	bl	800f730 <pvPortMalloc>
 800dfa2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00e      	beq.n	800dfc8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dfaa:	2058      	movs	r0, #88	@ 0x58
 800dfac:	f001 fbc0 	bl	800f730 <pvPortMalloc>
 800dfb0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d003      	beq.n	800dfc0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	697a      	ldr	r2, [r7, #20]
 800dfbc:	631a      	str	r2, [r3, #48]	@ 0x30
 800dfbe:	e005      	b.n	800dfcc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800dfc0:	6978      	ldr	r0, [r7, #20]
 800dfc2:	f001 fc97 	bl	800f8f4 <vPortFree>
 800dfc6:	e001      	b.n	800dfcc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d013      	beq.n	800dffa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfd2:	88fa      	ldrh	r2, [r7, #6]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9303      	str	r3, [sp, #12]
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	68b9      	ldr	r1, [r7, #8]
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f000 f80e 	bl	800e00a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800dfee:	69f8      	ldr	r0, [r7, #28]
 800dff0:	f000 f8a2 	bl	800e138 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800dff4:	2301      	movs	r3, #1
 800dff6:	61bb      	str	r3, [r7, #24]
 800dff8:	e002      	b.n	800e000 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dffa:	f04f 33ff 	mov.w	r3, #4294967295
 800dffe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800e000:	69bb      	ldr	r3, [r7, #24]
    }
 800e002:	4618      	mov	r0, r3
 800e004:	3720      	adds	r7, #32
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800e00a:	b580      	push	{r7, lr}
 800e00c:	b088      	sub	sp, #32
 800e00e:	af00      	add	r7, sp, #0
 800e010:	60f8      	str	r0, [r7, #12]
 800e012:	60b9      	str	r1, [r7, #8]
 800e014:	607a      	str	r2, [r7, #4]
 800e016:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	461a      	mov	r2, r3
 800e022:	21a5      	movs	r1, #165	@ 0xa5
 800e024:	f001 ffb0 	bl	800ff88 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e02a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e032:	3b01      	subs	r3, #1
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4413      	add	r3, r2
 800e038:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	f023 0307 	bic.w	r3, r3, #7
 800e040:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	f003 0307 	and.w	r3, r3, #7
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00b      	beq.n	800e064 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800e04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	617b      	str	r3, [r7, #20]
    }
 800e05e:	bf00      	nop
 800e060:	bf00      	nop
 800e062:	e7fd      	b.n	800e060 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d01f      	beq.n	800e0aa <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e06a:	2300      	movs	r3, #0
 800e06c:	61fb      	str	r3, [r7, #28]
 800e06e:	e012      	b.n	800e096 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e070:	68ba      	ldr	r2, [r7, #8]
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	4413      	add	r3, r2
 800e076:	7819      	ldrb	r1, [r3, #0]
 800e078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	4413      	add	r3, r2
 800e07e:	3334      	adds	r3, #52	@ 0x34
 800e080:	460a      	mov	r2, r1
 800e082:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800e084:	68ba      	ldr	r2, [r7, #8]
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	4413      	add	r3, r2
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d006      	beq.n	800e09e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	3301      	adds	r3, #1
 800e094:	61fb      	str	r3, [r7, #28]
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	2b09      	cmp	r3, #9
 800e09a:	d9e9      	bls.n	800e070 <prvInitialiseNewTask+0x66>
 800e09c:	e000      	b.n	800e0a0 <prvInitialiseNewTask+0x96>
            {
                break;
 800e09e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e0a8:	e003      	b.n	800e0b2 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b4:	2b04      	cmp	r3, #4
 800e0b6:	d901      	bls.n	800e0bc <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0b8:	2304      	movs	r3, #4
 800e0ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800e0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0c6:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800e0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7ff f9a2 	bl	800d41c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0da:	3318      	adds	r3, #24
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff f99d 	bl	800d41c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0e6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ea:	f1c3 0205 	rsb	r2, r3, #5
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0f6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800e0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fa:	3350      	adds	r3, #80	@ 0x50
 800e0fc:	2204      	movs	r2, #4
 800e0fe:	2100      	movs	r1, #0
 800e100:	4618      	mov	r0, r3
 800e102:	f001 ff41 	bl	800ff88 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	3354      	adds	r3, #84	@ 0x54
 800e10a:	2201      	movs	r2, #1
 800e10c:	2100      	movs	r1, #0
 800e10e:	4618      	mov	r0, r3
 800e110:	f001 ff3a 	bl	800ff88 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e114:	683a      	ldr	r2, [r7, #0]
 800e116:	68f9      	ldr	r1, [r7, #12]
 800e118:	69b8      	ldr	r0, [r7, #24]
 800e11a:	f001 f8af 	bl	800f27c <pxPortInitialiseStack>
 800e11e:	4602      	mov	r2, r0
 800e120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e122:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800e124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e12e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e130:	bf00      	nop
 800e132:	3720      	adds	r7, #32
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800e140:	f001 f9cc 	bl	800f4dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800e144:	4b2c      	ldr	r3, [pc, #176]	@ (800e1f8 <prvAddNewTaskToReadyList+0xc0>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3301      	adds	r3, #1
 800e14a:	4a2b      	ldr	r2, [pc, #172]	@ (800e1f8 <prvAddNewTaskToReadyList+0xc0>)
 800e14c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800e14e:	4b2b      	ldr	r3, [pc, #172]	@ (800e1fc <prvAddNewTaskToReadyList+0xc4>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d109      	bne.n	800e16a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800e156:	4a29      	ldr	r2, [pc, #164]	@ (800e1fc <prvAddNewTaskToReadyList+0xc4>)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e15c:	4b26      	ldr	r3, [pc, #152]	@ (800e1f8 <prvAddNewTaskToReadyList+0xc0>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b01      	cmp	r3, #1
 800e162:	d110      	bne.n	800e186 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800e164:	f000 fbd2 	bl	800e90c <prvInitialiseTaskLists>
 800e168:	e00d      	b.n	800e186 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800e16a:	4b25      	ldr	r3, [pc, #148]	@ (800e200 <prvAddNewTaskToReadyList+0xc8>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d109      	bne.n	800e186 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e172:	4b22      	ldr	r3, [pc, #136]	@ (800e1fc <prvAddNewTaskToReadyList+0xc4>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d802      	bhi.n	800e186 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800e180:	4a1e      	ldr	r2, [pc, #120]	@ (800e1fc <prvAddNewTaskToReadyList+0xc4>)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800e186:	4b1f      	ldr	r3, [pc, #124]	@ (800e204 <prvAddNewTaskToReadyList+0xcc>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3301      	adds	r3, #1
 800e18c:	4a1d      	ldr	r2, [pc, #116]	@ (800e204 <prvAddNewTaskToReadyList+0xcc>)
 800e18e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e190:	4b1c      	ldr	r3, [pc, #112]	@ (800e204 <prvAddNewTaskToReadyList+0xcc>)
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e19c:	2201      	movs	r2, #1
 800e19e:	409a      	lsls	r2, r3
 800e1a0:	4b19      	ldr	r3, [pc, #100]	@ (800e208 <prvAddNewTaskToReadyList+0xd0>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	4a18      	ldr	r2, [pc, #96]	@ (800e208 <prvAddNewTaskToReadyList+0xd0>)
 800e1a8:	6013      	str	r3, [r2, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4a15      	ldr	r2, [pc, #84]	@ (800e20c <prvAddNewTaskToReadyList+0xd4>)
 800e1b8:	441a      	add	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	4619      	mov	r1, r3
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	f7ff f938 	bl	800d436 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800e1c6:	f001 f9bb 	bl	800f540 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800e1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e200 <prvAddNewTaskToReadyList+0xc8>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00e      	beq.n	800e1f0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e1fc <prvAddNewTaskToReadyList+0xc4>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d207      	bcs.n	800e1f0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800e1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e210 <prvAddNewTaskToReadyList+0xd8>)
 800e1e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1e6:	601a      	str	r2, [r3, #0]
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	20000410 	.word	0x20000410
 800e1fc:	20000338 	.word	0x20000338
 800e200:	2000041c 	.word	0x2000041c
 800e204:	2000042c 	.word	0x2000042c
 800e208:	20000418 	.word	0x20000418
 800e20c:	2000033c 	.word	0x2000033c
 800e210:	e000ed04 	.word	0xe000ed04

0800e214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b086      	sub	sp, #24
 800e218:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800e21a:	4b20      	ldr	r3, [pc, #128]	@ (800e29c <vTaskStartScheduler+0x88>)
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	2300      	movs	r3, #0
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	2300      	movs	r3, #0
 800e224:	2282      	movs	r2, #130	@ 0x82
 800e226:	491e      	ldr	r1, [pc, #120]	@ (800e2a0 <vTaskStartScheduler+0x8c>)
 800e228:	481e      	ldr	r0, [pc, #120]	@ (800e2a4 <vTaskStartScheduler+0x90>)
 800e22a:	f7ff fead 	bl	800df88 <xTaskCreate>
 800e22e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b01      	cmp	r3, #1
 800e234:	d102      	bne.n	800e23c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800e236:	f000 fd03 	bl	800ec40 <xTimerCreateTimerTask>
 800e23a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d116      	bne.n	800e270 <vTaskStartScheduler+0x5c>
        __asm volatile
 800e242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e246:	f383 8811 	msr	BASEPRI, r3
 800e24a:	f3bf 8f6f 	isb	sy
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	60bb      	str	r3, [r7, #8]
    }
 800e254:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800e256:	4b14      	ldr	r3, [pc, #80]	@ (800e2a8 <vTaskStartScheduler+0x94>)
 800e258:	f04f 32ff 	mov.w	r2, #4294967295
 800e25c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800e25e:	4b13      	ldr	r3, [pc, #76]	@ (800e2ac <vTaskStartScheduler+0x98>)
 800e260:	2201      	movs	r2, #1
 800e262:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e264:	4b12      	ldr	r3, [pc, #72]	@ (800e2b0 <vTaskStartScheduler+0x9c>)
 800e266:	2200      	movs	r2, #0
 800e268:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800e26a:	f001 f893 	bl	800f394 <xPortStartScheduler>
 800e26e:	e00f      	b.n	800e290 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e276:	d10b      	bne.n	800e290 <vTaskStartScheduler+0x7c>
        __asm volatile
 800e278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e27c:	f383 8811 	msr	BASEPRI, r3
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	607b      	str	r3, [r7, #4]
    }
 800e28a:	bf00      	nop
 800e28c:	bf00      	nop
 800e28e:	e7fd      	b.n	800e28c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800e290:	4b08      	ldr	r3, [pc, #32]	@ (800e2b4 <vTaskStartScheduler+0xa0>)
 800e292:	681b      	ldr	r3, [r3, #0]
}
 800e294:	bf00      	nop
 800e296:	3710      	adds	r7, #16
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	20000434 	.word	0x20000434
 800e2a0:	08011030 	.word	0x08011030
 800e2a4:	0800e8dd 	.word	0x0800e8dd
 800e2a8:	20000430 	.word	0x20000430
 800e2ac:	2000041c 	.word	0x2000041c
 800e2b0:	20000414 	.word	0x20000414
 800e2b4:	08011840 	.word	0x08011840

0800e2b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800e2bc:	4b04      	ldr	r3, [pc, #16]	@ (800e2d0 <vTaskSuspendAll+0x18>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	4a03      	ldr	r2, [pc, #12]	@ (800e2d0 <vTaskSuspendAll+0x18>)
 800e2c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800e2c6:	bf00      	nop
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr
 800e2d0:	20000438 	.word	0x20000438

0800e2d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800e2e2:	4b42      	ldr	r3, [pc, #264]	@ (800e3ec <xTaskResumeAll+0x118>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10b      	bne.n	800e302 <xTaskResumeAll+0x2e>
        __asm volatile
 800e2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	603b      	str	r3, [r7, #0]
    }
 800e2fc:	bf00      	nop
 800e2fe:	bf00      	nop
 800e300:	e7fd      	b.n	800e2fe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800e302:	f001 f8eb 	bl	800f4dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800e306:	4b39      	ldr	r3, [pc, #228]	@ (800e3ec <xTaskResumeAll+0x118>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	3b01      	subs	r3, #1
 800e30c:	4a37      	ldr	r2, [pc, #220]	@ (800e3ec <xTaskResumeAll+0x118>)
 800e30e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e310:	4b36      	ldr	r3, [pc, #216]	@ (800e3ec <xTaskResumeAll+0x118>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d161      	bne.n	800e3dc <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e318:	4b35      	ldr	r3, [pc, #212]	@ (800e3f0 <xTaskResumeAll+0x11c>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d05d      	beq.n	800e3dc <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e320:	e02e      	b.n	800e380 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e322:	4b34      	ldr	r3, [pc, #208]	@ (800e3f4 <xTaskResumeAll+0x120>)
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3318      	adds	r3, #24
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff f8de 	bl	800d4f0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	3304      	adds	r3, #4
 800e338:	4618      	mov	r0, r3
 800e33a:	f7ff f8d9 	bl	800d4f0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e342:	2201      	movs	r2, #1
 800e344:	409a      	lsls	r2, r3
 800e346:	4b2c      	ldr	r3, [pc, #176]	@ (800e3f8 <xTaskResumeAll+0x124>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4313      	orrs	r3, r2
 800e34c:	4a2a      	ldr	r2, [pc, #168]	@ (800e3f8 <xTaskResumeAll+0x124>)
 800e34e:	6013      	str	r3, [r2, #0]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e354:	4613      	mov	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	4413      	add	r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	4a27      	ldr	r2, [pc, #156]	@ (800e3fc <xTaskResumeAll+0x128>)
 800e35e:	441a      	add	r2, r3
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	3304      	adds	r3, #4
 800e364:	4619      	mov	r1, r3
 800e366:	4610      	mov	r0, r2
 800e368:	f7ff f865 	bl	800d436 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e370:	4b23      	ldr	r3, [pc, #140]	@ (800e400 <xTaskResumeAll+0x12c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e376:	429a      	cmp	r2, r3
 800e378:	d302      	bcc.n	800e380 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800e37a:	4b22      	ldr	r3, [pc, #136]	@ (800e404 <xTaskResumeAll+0x130>)
 800e37c:	2201      	movs	r2, #1
 800e37e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e380:	4b1c      	ldr	r3, [pc, #112]	@ (800e3f4 <xTaskResumeAll+0x120>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1cc      	bne.n	800e322 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d001      	beq.n	800e392 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800e38e:	f000 fb3b 	bl	800ea08 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e392:	4b1d      	ldr	r3, [pc, #116]	@ (800e408 <xTaskResumeAll+0x134>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d010      	beq.n	800e3c0 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800e39e:	f000 f847 	bl	800e430 <xTaskIncrementTick>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d002      	beq.n	800e3ae <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 800e3a8:	4b16      	ldr	r3, [pc, #88]	@ (800e404 <xTaskResumeAll+0x130>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1f1      	bne.n	800e39e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800e3ba:	4b13      	ldr	r3, [pc, #76]	@ (800e408 <xTaskResumeAll+0x134>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800e3c0:	4b10      	ldr	r3, [pc, #64]	@ (800e404 <xTaskResumeAll+0x130>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d009      	beq.n	800e3dc <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800e3cc:	4b0f      	ldr	r3, [pc, #60]	@ (800e40c <xTaskResumeAll+0x138>)
 800e3ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3d2:	601a      	str	r2, [r3, #0]
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800e3dc:	f001 f8b0 	bl	800f540 <vPortExitCritical>

    return xAlreadyYielded;
 800e3e0:	68bb      	ldr	r3, [r7, #8]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	20000438 	.word	0x20000438
 800e3f0:	20000410 	.word	0x20000410
 800e3f4:	200003d0 	.word	0x200003d0
 800e3f8:	20000418 	.word	0x20000418
 800e3fc:	2000033c 	.word	0x2000033c
 800e400:	20000338 	.word	0x20000338
 800e404:	20000424 	.word	0x20000424
 800e408:	20000420 	.word	0x20000420
 800e40c:	e000ed04 	.word	0xe000ed04

0800e410 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800e416:	4b05      	ldr	r3, [pc, #20]	@ (800e42c <xTaskGetTickCount+0x1c>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800e41c:	687b      	ldr	r3, [r7, #4]
}
 800e41e:	4618      	mov	r0, r3
 800e420:	370c      	adds	r7, #12
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	20000414 	.word	0x20000414

0800e430 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800e436:	2300      	movs	r3, #0
 800e438:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e43a:	4b4f      	ldr	r3, [pc, #316]	@ (800e578 <xTaskIncrementTick+0x148>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f040 808f 	bne.w	800e562 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e444:	4b4d      	ldr	r3, [pc, #308]	@ (800e57c <xTaskIncrementTick+0x14c>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	3301      	adds	r3, #1
 800e44a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800e44c:	4a4b      	ldr	r2, [pc, #300]	@ (800e57c <xTaskIncrementTick+0x14c>)
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d121      	bne.n	800e49c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800e458:	4b49      	ldr	r3, [pc, #292]	@ (800e580 <xTaskIncrementTick+0x150>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00b      	beq.n	800e47a <xTaskIncrementTick+0x4a>
        __asm volatile
 800e462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	603b      	str	r3, [r7, #0]
    }
 800e474:	bf00      	nop
 800e476:	bf00      	nop
 800e478:	e7fd      	b.n	800e476 <xTaskIncrementTick+0x46>
 800e47a:	4b41      	ldr	r3, [pc, #260]	@ (800e580 <xTaskIncrementTick+0x150>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	60fb      	str	r3, [r7, #12]
 800e480:	4b40      	ldr	r3, [pc, #256]	@ (800e584 <xTaskIncrementTick+0x154>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4a3e      	ldr	r2, [pc, #248]	@ (800e580 <xTaskIncrementTick+0x150>)
 800e486:	6013      	str	r3, [r2, #0]
 800e488:	4a3e      	ldr	r2, [pc, #248]	@ (800e584 <xTaskIncrementTick+0x154>)
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6013      	str	r3, [r2, #0]
 800e48e:	4b3e      	ldr	r3, [pc, #248]	@ (800e588 <xTaskIncrementTick+0x158>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	3301      	adds	r3, #1
 800e494:	4a3c      	ldr	r2, [pc, #240]	@ (800e588 <xTaskIncrementTick+0x158>)
 800e496:	6013      	str	r3, [r2, #0]
 800e498:	f000 fab6 	bl	800ea08 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800e49c:	4b3b      	ldr	r3, [pc, #236]	@ (800e58c <xTaskIncrementTick+0x15c>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	693a      	ldr	r2, [r7, #16]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d348      	bcc.n	800e538 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4a6:	4b36      	ldr	r3, [pc, #216]	@ (800e580 <xTaskIncrementTick+0x150>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d104      	bne.n	800e4ba <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4b0:	4b36      	ldr	r3, [pc, #216]	@ (800e58c <xTaskIncrementTick+0x15c>)
 800e4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b6:	601a      	str	r2, [r3, #0]
                    break;
 800e4b8:	e03e      	b.n	800e538 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ba:	4b31      	ldr	r3, [pc, #196]	@ (800e580 <xTaskIncrementTick+0x150>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800e4ca:	693a      	ldr	r2, [r7, #16]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d203      	bcs.n	800e4da <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800e4d2:	4a2e      	ldr	r2, [pc, #184]	@ (800e58c <xTaskIncrementTick+0x15c>)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e4d8:	e02e      	b.n	800e538 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	3304      	adds	r3, #4
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7ff f806 	bl	800d4f0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d004      	beq.n	800e4f6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	3318      	adds	r3, #24
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe fffd 	bl	800d4f0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	409a      	lsls	r2, r3
 800e4fe:	4b24      	ldr	r3, [pc, #144]	@ (800e590 <xTaskIncrementTick+0x160>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4313      	orrs	r3, r2
 800e504:	4a22      	ldr	r2, [pc, #136]	@ (800e590 <xTaskIncrementTick+0x160>)
 800e506:	6013      	str	r3, [r2, #0]
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e50c:	4613      	mov	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4413      	add	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4a1f      	ldr	r2, [pc, #124]	@ (800e594 <xTaskIncrementTick+0x164>)
 800e516:	441a      	add	r2, r3
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	3304      	adds	r3, #4
 800e51c:	4619      	mov	r1, r3
 800e51e:	4610      	mov	r0, r2
 800e520:	f7fe ff89 	bl	800d436 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e528:	4b1b      	ldr	r3, [pc, #108]	@ (800e598 <xTaskIncrementTick+0x168>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e52e:	429a      	cmp	r2, r3
 800e530:	d3b9      	bcc.n	800e4a6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800e532:	2301      	movs	r3, #1
 800e534:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e536:	e7b6      	b.n	800e4a6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e538:	4b17      	ldr	r3, [pc, #92]	@ (800e598 <xTaskIncrementTick+0x168>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e53e:	4915      	ldr	r1, [pc, #84]	@ (800e594 <xTaskIncrementTick+0x164>)
 800e540:	4613      	mov	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	440b      	add	r3, r1
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d901      	bls.n	800e554 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 800e550:	2301      	movs	r3, #1
 800e552:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800e554:	4b11      	ldr	r3, [pc, #68]	@ (800e59c <xTaskIncrementTick+0x16c>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d007      	beq.n	800e56c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 800e55c:	2301      	movs	r3, #1
 800e55e:	617b      	str	r3, [r7, #20]
 800e560:	e004      	b.n	800e56c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800e562:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a0 <xTaskIncrementTick+0x170>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	3301      	adds	r3, #1
 800e568:	4a0d      	ldr	r2, [pc, #52]	@ (800e5a0 <xTaskIncrementTick+0x170>)
 800e56a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800e56c:	697b      	ldr	r3, [r7, #20]
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3718      	adds	r7, #24
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	20000438 	.word	0x20000438
 800e57c:	20000414 	.word	0x20000414
 800e580:	200003c8 	.word	0x200003c8
 800e584:	200003cc 	.word	0x200003cc
 800e588:	20000428 	.word	0x20000428
 800e58c:	20000430 	.word	0x20000430
 800e590:	20000418 	.word	0x20000418
 800e594:	2000033c 	.word	0x2000033c
 800e598:	20000338 	.word	0x20000338
 800e59c:	20000424 	.word	0x20000424
 800e5a0:	20000420 	.word	0x20000420

0800e5a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b087      	sub	sp, #28
 800e5a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5aa:	4b27      	ldr	r3, [pc, #156]	@ (800e648 <vTaskSwitchContext+0xa4>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d003      	beq.n	800e5ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800e5b2:	4b26      	ldr	r3, [pc, #152]	@ (800e64c <vTaskSwitchContext+0xa8>)
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800e5b8:	e040      	b.n	800e63c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800e5ba:	4b24      	ldr	r3, [pc, #144]	@ (800e64c <vTaskSwitchContext+0xa8>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5c0:	4b23      	ldr	r3, [pc, #140]	@ (800e650 <vTaskSwitchContext+0xac>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	fab3 f383 	clz	r3, r3
 800e5cc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800e5ce:	7afb      	ldrb	r3, [r7, #11]
 800e5d0:	f1c3 031f 	rsb	r3, r3, #31
 800e5d4:	617b      	str	r3, [r7, #20]
 800e5d6:	491f      	ldr	r1, [pc, #124]	@ (800e654 <vTaskSwitchContext+0xb0>)
 800e5d8:	697a      	ldr	r2, [r7, #20]
 800e5da:	4613      	mov	r3, r2
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4413      	add	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	440b      	add	r3, r1
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10b      	bne.n	800e602 <vTaskSwitchContext+0x5e>
        __asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	607b      	str	r3, [r7, #4]
    }
 800e5fc:	bf00      	nop
 800e5fe:	bf00      	nop
 800e600:	e7fd      	b.n	800e5fe <vTaskSwitchContext+0x5a>
 800e602:	697a      	ldr	r2, [r7, #20]
 800e604:	4613      	mov	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4a11      	ldr	r2, [pc, #68]	@ (800e654 <vTaskSwitchContext+0xb0>)
 800e60e:	4413      	add	r3, r2
 800e610:	613b      	str	r3, [r7, #16]
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	605a      	str	r2, [r3, #4]
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	3308      	adds	r3, #8
 800e624:	429a      	cmp	r2, r3
 800e626:	d104      	bne.n	800e632 <vTaskSwitchContext+0x8e>
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	685a      	ldr	r2, [r3, #4]
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	605a      	str	r2, [r3, #4]
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	4a07      	ldr	r2, [pc, #28]	@ (800e658 <vTaskSwitchContext+0xb4>)
 800e63a:	6013      	str	r3, [r2, #0]
}
 800e63c:	bf00      	nop
 800e63e:	371c      	adds	r7, #28
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	20000438 	.word	0x20000438
 800e64c:	20000424 	.word	0x20000424
 800e650:	20000418 	.word	0x20000418
 800e654:	2000033c 	.word	0x2000033c
 800e658:	20000338 	.word	0x20000338

0800e65c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10b      	bne.n	800e684 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800e66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	60fb      	str	r3, [r7, #12]
    }
 800e67e:	bf00      	nop
 800e680:	bf00      	nop
 800e682:	e7fd      	b.n	800e680 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e684:	4b07      	ldr	r3, [pc, #28]	@ (800e6a4 <vTaskPlaceOnEventList+0x48>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3318      	adds	r3, #24
 800e68a:	4619      	mov	r1, r3
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7fe fef6 	bl	800d47e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e692:	2101      	movs	r1, #1
 800e694:	6838      	ldr	r0, [r7, #0]
 800e696:	f000 fa6d 	bl	800eb74 <prvAddCurrentTaskToDelayedList>
}
 800e69a:	bf00      	nop
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	20000338 	.word	0x20000338

0800e6a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10b      	bne.n	800e6d2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800e6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6be:	f383 8811 	msr	BASEPRI, r3
 800e6c2:	f3bf 8f6f 	isb	sy
 800e6c6:	f3bf 8f4f 	dsb	sy
 800e6ca:	617b      	str	r3, [r7, #20]
    }
 800e6cc:	bf00      	nop
 800e6ce:	bf00      	nop
 800e6d0:	e7fd      	b.n	800e6ce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e6fc <vTaskPlaceOnEventListRestricted+0x54>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	3318      	adds	r3, #24
 800e6d8:	4619      	mov	r1, r3
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f7fe feab 	bl	800d436 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d002      	beq.n	800e6ec <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800e6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ea:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6ec:	6879      	ldr	r1, [r7, #4]
 800e6ee:	68b8      	ldr	r0, [r7, #8]
 800e6f0:	f000 fa40 	bl	800eb74 <prvAddCurrentTaskToDelayedList>
    }
 800e6f4:	bf00      	nop
 800e6f6:	3718      	adds	r7, #24
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	20000338 	.word	0x20000338

0800e700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d10b      	bne.n	800e72e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800e716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e71a:	f383 8811 	msr	BASEPRI, r3
 800e71e:	f3bf 8f6f 	isb	sy
 800e722:	f3bf 8f4f 	dsb	sy
 800e726:	60fb      	str	r3, [r7, #12]
    }
 800e728:	bf00      	nop
 800e72a:	bf00      	nop
 800e72c:	e7fd      	b.n	800e72a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	3318      	adds	r3, #24
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe fedc 	bl	800d4f0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e738:	4b1d      	ldr	r3, [pc, #116]	@ (800e7b0 <xTaskRemoveFromEventList+0xb0>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d11c      	bne.n	800e77a <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	3304      	adds	r3, #4
 800e744:	4618      	mov	r0, r3
 800e746:	f7fe fed3 	bl	800d4f0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e74e:	2201      	movs	r2, #1
 800e750:	409a      	lsls	r2, r3
 800e752:	4b18      	ldr	r3, [pc, #96]	@ (800e7b4 <xTaskRemoveFromEventList+0xb4>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4313      	orrs	r3, r2
 800e758:	4a16      	ldr	r2, [pc, #88]	@ (800e7b4 <xTaskRemoveFromEventList+0xb4>)
 800e75a:	6013      	str	r3, [r2, #0]
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e760:	4613      	mov	r3, r2
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	4413      	add	r3, r2
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	4a13      	ldr	r2, [pc, #76]	@ (800e7b8 <xTaskRemoveFromEventList+0xb8>)
 800e76a:	441a      	add	r2, r3
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	3304      	adds	r3, #4
 800e770:	4619      	mov	r1, r3
 800e772:	4610      	mov	r0, r2
 800e774:	f7fe fe5f 	bl	800d436 <vListInsertEnd>
 800e778:	e005      	b.n	800e786 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	3318      	adds	r3, #24
 800e77e:	4619      	mov	r1, r3
 800e780:	480e      	ldr	r0, [pc, #56]	@ (800e7bc <xTaskRemoveFromEventList+0xbc>)
 800e782:	f7fe fe58 	bl	800d436 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e78a:	4b0d      	ldr	r3, [pc, #52]	@ (800e7c0 <xTaskRemoveFromEventList+0xc0>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e790:	429a      	cmp	r2, r3
 800e792:	d905      	bls.n	800e7a0 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800e794:	2301      	movs	r3, #1
 800e796:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800e798:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c4 <xTaskRemoveFromEventList+0xc4>)
 800e79a:	2201      	movs	r2, #1
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	e001      	b.n	800e7a4 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e7a4:	697b      	ldr	r3, [r7, #20]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3718      	adds	r7, #24
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20000438 	.word	0x20000438
 800e7b4:	20000418 	.word	0x20000418
 800e7b8:	2000033c 	.word	0x2000033c
 800e7bc:	200003d0 	.word	0x200003d0
 800e7c0:	20000338 	.word	0x20000338
 800e7c4:	20000424 	.word	0x20000424

0800e7c8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7d0:	4b06      	ldr	r3, [pc, #24]	@ (800e7ec <vTaskInternalSetTimeOutState+0x24>)
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800e7d8:	4b05      	ldr	r3, [pc, #20]	@ (800e7f0 <vTaskInternalSetTimeOutState+0x28>)
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	605a      	str	r2, [r3, #4]
}
 800e7e0:	bf00      	nop
 800e7e2:	370c      	adds	r7, #12
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	20000428 	.word	0x20000428
 800e7f0:	20000414 	.word	0x20000414

0800e7f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b088      	sub	sp, #32
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10b      	bne.n	800e81c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	613b      	str	r3, [r7, #16]
    }
 800e816:	bf00      	nop
 800e818:	bf00      	nop
 800e81a:	e7fd      	b.n	800e818 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d10b      	bne.n	800e83a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800e822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	60fb      	str	r3, [r7, #12]
    }
 800e834:	bf00      	nop
 800e836:	bf00      	nop
 800e838:	e7fd      	b.n	800e836 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800e83a:	f000 fe4f 	bl	800f4dc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800e83e:	4b1f      	ldr	r3, [pc, #124]	@ (800e8bc <xTaskCheckForTimeOut+0xc8>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	69ba      	ldr	r2, [r7, #24]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e856:	d102      	bne.n	800e85e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800e858:	2300      	movs	r3, #0
 800e85a:	61fb      	str	r3, [r7, #28]
 800e85c:	e026      	b.n	800e8ac <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	4b17      	ldr	r3, [pc, #92]	@ (800e8c0 <xTaskCheckForTimeOut+0xcc>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	429a      	cmp	r2, r3
 800e868:	d00a      	beq.n	800e880 <xTaskCheckForTimeOut+0x8c>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	69ba      	ldr	r2, [r7, #24]
 800e870:	429a      	cmp	r2, r3
 800e872:	d305      	bcc.n	800e880 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800e874:	2301      	movs	r3, #1
 800e876:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	2200      	movs	r2, #0
 800e87c:	601a      	str	r2, [r3, #0]
 800e87e:	e015      	b.n	800e8ac <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	697a      	ldr	r2, [r7, #20]
 800e886:	429a      	cmp	r2, r3
 800e888:	d20b      	bcs.n	800e8a2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	1ad2      	subs	r2, r2, r3
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7ff ff96 	bl	800e7c8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800e89c:	2300      	movs	r3, #0
 800e89e:	61fb      	str	r3, [r7, #28]
 800e8a0:	e004      	b.n	800e8ac <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800e8ac:	f000 fe48 	bl	800f540 <vPortExitCritical>

    return xReturn;
 800e8b0:	69fb      	ldr	r3, [r7, #28]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3720      	adds	r7, #32
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20000414 	.word	0x20000414
 800e8c0:	20000428 	.word	0x20000428

0800e8c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800e8c8:	4b03      	ldr	r3, [pc, #12]	@ (800e8d8 <vTaskMissedYield+0x14>)
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	601a      	str	r2, [r3, #0]
}
 800e8ce:	bf00      	nop
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr
 800e8d8:	20000424 	.word	0x20000424

0800e8dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800e8e4:	f000 f852 	bl	800e98c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8e8:	4b06      	ldr	r3, [pc, #24]	@ (800e904 <prvIdleTask+0x28>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d9f9      	bls.n	800e8e4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800e8f0:	4b05      	ldr	r3, [pc, #20]	@ (800e908 <prvIdleTask+0x2c>)
 800e8f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8f6:	601a      	str	r2, [r3, #0]
 800e8f8:	f3bf 8f4f 	dsb	sy
 800e8fc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800e900:	e7f0      	b.n	800e8e4 <prvIdleTask+0x8>
 800e902:	bf00      	nop
 800e904:	2000033c 	.word	0x2000033c
 800e908:	e000ed04 	.word	0xe000ed04

0800e90c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e912:	2300      	movs	r3, #0
 800e914:	607b      	str	r3, [r7, #4]
 800e916:	e00c      	b.n	800e932 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	4613      	mov	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	4a12      	ldr	r2, [pc, #72]	@ (800e96c <prvInitialiseTaskLists+0x60>)
 800e924:	4413      	add	r3, r2
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe fd58 	bl	800d3dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	3301      	adds	r3, #1
 800e930:	607b      	str	r3, [r7, #4]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2b04      	cmp	r3, #4
 800e936:	d9ef      	bls.n	800e918 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800e938:	480d      	ldr	r0, [pc, #52]	@ (800e970 <prvInitialiseTaskLists+0x64>)
 800e93a:	f7fe fd4f 	bl	800d3dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800e93e:	480d      	ldr	r0, [pc, #52]	@ (800e974 <prvInitialiseTaskLists+0x68>)
 800e940:	f7fe fd4c 	bl	800d3dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800e944:	480c      	ldr	r0, [pc, #48]	@ (800e978 <prvInitialiseTaskLists+0x6c>)
 800e946:	f7fe fd49 	bl	800d3dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800e94a:	480c      	ldr	r0, [pc, #48]	@ (800e97c <prvInitialiseTaskLists+0x70>)
 800e94c:	f7fe fd46 	bl	800d3dc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800e950:	480b      	ldr	r0, [pc, #44]	@ (800e980 <prvInitialiseTaskLists+0x74>)
 800e952:	f7fe fd43 	bl	800d3dc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800e956:	4b0b      	ldr	r3, [pc, #44]	@ (800e984 <prvInitialiseTaskLists+0x78>)
 800e958:	4a05      	ldr	r2, [pc, #20]	@ (800e970 <prvInitialiseTaskLists+0x64>)
 800e95a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e95c:	4b0a      	ldr	r3, [pc, #40]	@ (800e988 <prvInitialiseTaskLists+0x7c>)
 800e95e:	4a05      	ldr	r2, [pc, #20]	@ (800e974 <prvInitialiseTaskLists+0x68>)
 800e960:	601a      	str	r2, [r3, #0]
}
 800e962:	bf00      	nop
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	2000033c 	.word	0x2000033c
 800e970:	200003a0 	.word	0x200003a0
 800e974:	200003b4 	.word	0x200003b4
 800e978:	200003d0 	.word	0x200003d0
 800e97c:	200003e4 	.word	0x200003e4
 800e980:	200003fc 	.word	0x200003fc
 800e984:	200003c8 	.word	0x200003c8
 800e988:	200003cc 	.word	0x200003cc

0800e98c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e992:	e019      	b.n	800e9c8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800e994:	f000 fda2 	bl	800f4dc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e998:	4b10      	ldr	r3, [pc, #64]	@ (800e9dc <prvCheckTasksWaitingTermination+0x50>)
 800e99a:	68db      	ldr	r3, [r3, #12]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7fe fda3 	bl	800d4f0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800e9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e9e0 <prvCheckTasksWaitingTermination+0x54>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	4a0b      	ldr	r2, [pc, #44]	@ (800e9e0 <prvCheckTasksWaitingTermination+0x54>)
 800e9b2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800e9b4:	4b0b      	ldr	r3, [pc, #44]	@ (800e9e4 <prvCheckTasksWaitingTermination+0x58>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	3b01      	subs	r3, #1
 800e9ba:	4a0a      	ldr	r2, [pc, #40]	@ (800e9e4 <prvCheckTasksWaitingTermination+0x58>)
 800e9bc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800e9be:	f000 fdbf 	bl	800f540 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 f810 	bl	800e9e8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9c8:	4b06      	ldr	r3, [pc, #24]	@ (800e9e4 <prvCheckTasksWaitingTermination+0x58>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1e1      	bne.n	800e994 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800e9d0:	bf00      	nop
 800e9d2:	bf00      	nop
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	200003e4 	.word	0x200003e4
 800e9e0:	20000410 	.word	0x20000410
 800e9e4:	200003f8 	.word	0x200003f8

0800e9e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f000 ff7d 	bl	800f8f4 <vPortFree>
                vPortFree( pxTCB );
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 ff7a 	bl	800f8f4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800ea00:	bf00      	nop
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea08:	b480      	push	{r7}
 800ea0a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea38 <prvResetNextTaskUnblockTime+0x30>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d104      	bne.n	800ea20 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ea16:	4b09      	ldr	r3, [pc, #36]	@ (800ea3c <prvResetNextTaskUnblockTime+0x34>)
 800ea18:	f04f 32ff 	mov.w	r2, #4294967295
 800ea1c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800ea1e:	e005      	b.n	800ea2c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ea20:	4b05      	ldr	r3, [pc, #20]	@ (800ea38 <prvResetNextTaskUnblockTime+0x30>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a04      	ldr	r2, [pc, #16]	@ (800ea3c <prvResetNextTaskUnblockTime+0x34>)
 800ea2a:	6013      	str	r3, [r2, #0]
}
 800ea2c:	bf00      	nop
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	200003c8 	.word	0x200003c8
 800ea3c:	20000430 	.word	0x20000430

0800ea40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800ea46:	4b0b      	ldr	r3, [pc, #44]	@ (800ea74 <xTaskGetSchedulerState+0x34>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d102      	bne.n	800ea54 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	607b      	str	r3, [r7, #4]
 800ea52:	e008      	b.n	800ea66 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea54:	4b08      	ldr	r3, [pc, #32]	@ (800ea78 <xTaskGetSchedulerState+0x38>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d102      	bne.n	800ea62 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	607b      	str	r3, [r7, #4]
 800ea60:	e001      	b.n	800ea66 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800ea62:	2300      	movs	r3, #0
 800ea64:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800ea66:	687b      	ldr	r3, [r7, #4]
    }
 800ea68:	4618      	mov	r0, r3
 800ea6a:	370c      	adds	r7, #12
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr
 800ea74:	2000041c 	.word	0x2000041c
 800ea78:	20000438 	.word	0x20000438

0800ea7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b086      	sub	sp, #24
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d065      	beq.n	800eb5e <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800ea92:	4b35      	ldr	r3, [pc, #212]	@ (800eb68 <xTaskPriorityDisinherit+0xec>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	693a      	ldr	r2, [r7, #16]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d00b      	beq.n	800eab4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800ea9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa0:	f383 8811 	msr	BASEPRI, r3
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	60fb      	str	r3, [r7, #12]
    }
 800eaae:	bf00      	nop
 800eab0:	bf00      	nop
 800eab2:	e7fd      	b.n	800eab0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d10b      	bne.n	800ead4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800eabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac0:	f383 8811 	msr	BASEPRI, r3
 800eac4:	f3bf 8f6f 	isb	sy
 800eac8:	f3bf 8f4f 	dsb	sy
 800eacc:	60bb      	str	r3, [r7, #8]
    }
 800eace:	bf00      	nop
 800ead0:	bf00      	nop
 800ead2:	e7fd      	b.n	800ead0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ead8:	1e5a      	subs	r2, r3, #1
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d039      	beq.n	800eb5e <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d135      	bne.n	800eb5e <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	3304      	adds	r3, #4
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fe fcfa 	bl	800d4f0 <uxListRemove>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10a      	bne.n	800eb18 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb06:	2201      	movs	r2, #1
 800eb08:	fa02 f303 	lsl.w	r3, r2, r3
 800eb0c:	43da      	mvns	r2, r3
 800eb0e:	4b17      	ldr	r3, [pc, #92]	@ (800eb6c <xTaskPriorityDisinherit+0xf0>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4013      	ands	r3, r2
 800eb14:	4a15      	ldr	r2, [pc, #84]	@ (800eb6c <xTaskPriorityDisinherit+0xf0>)
 800eb16:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb24:	f1c3 0205 	rsb	r2, r3, #5
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb30:	2201      	movs	r2, #1
 800eb32:	409a      	lsls	r2, r3
 800eb34:	4b0d      	ldr	r3, [pc, #52]	@ (800eb6c <xTaskPriorityDisinherit+0xf0>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	4a0c      	ldr	r2, [pc, #48]	@ (800eb6c <xTaskPriorityDisinherit+0xf0>)
 800eb3c:	6013      	str	r3, [r2, #0]
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb42:	4613      	mov	r3, r2
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	4413      	add	r3, r2
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	4a09      	ldr	r2, [pc, #36]	@ (800eb70 <xTaskPriorityDisinherit+0xf4>)
 800eb4c:	441a      	add	r2, r3
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	3304      	adds	r3, #4
 800eb52:	4619      	mov	r1, r3
 800eb54:	4610      	mov	r0, r2
 800eb56:	f7fe fc6e 	bl	800d436 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800eb5e:	697b      	ldr	r3, [r7, #20]
    }
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	20000338 	.word	0x20000338
 800eb6c:	20000418 	.word	0x20000418
 800eb70:	2000033c 	.word	0x2000033c

0800eb74 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800eb7e:	4b29      	ldr	r3, [pc, #164]	@ (800ec24 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb84:	4b28      	ldr	r3, [pc, #160]	@ (800ec28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	3304      	adds	r3, #4
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fe fcb0 	bl	800d4f0 <uxListRemove>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10b      	bne.n	800ebae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eb96:	4b24      	ldr	r3, [pc, #144]	@ (800ec28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	fa02 f303 	lsl.w	r3, r2, r3
 800eba2:	43da      	mvns	r2, r3
 800eba4:	4b21      	ldr	r3, [pc, #132]	@ (800ec2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4013      	ands	r3, r2
 800ebaa:	4a20      	ldr	r2, [pc, #128]	@ (800ec2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ebac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb4:	d10a      	bne.n	800ebcc <prvAddCurrentTaskToDelayedList+0x58>
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d007      	beq.n	800ebcc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebbc:	4b1a      	ldr	r3, [pc, #104]	@ (800ec28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	481a      	ldr	r0, [pc, #104]	@ (800ec30 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ebc6:	f7fe fc36 	bl	800d436 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ebca:	e026      	b.n	800ec1a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ebd4:	4b14      	ldr	r3, [pc, #80]	@ (800ec28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	68ba      	ldr	r2, [r7, #8]
 800ebda:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800ebdc:	68ba      	ldr	r2, [r7, #8]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d209      	bcs.n	800ebf8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebe4:	4b13      	ldr	r3, [pc, #76]	@ (800ec34 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	4b0f      	ldr	r3, [pc, #60]	@ (800ec28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	3304      	adds	r3, #4
 800ebee:	4619      	mov	r1, r3
 800ebf0:	4610      	mov	r0, r2
 800ebf2:	f7fe fc44 	bl	800d47e <vListInsert>
}
 800ebf6:	e010      	b.n	800ec1a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebf8:	4b0f      	ldr	r3, [pc, #60]	@ (800ec38 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ec28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3304      	adds	r3, #4
 800ec02:	4619      	mov	r1, r3
 800ec04:	4610      	mov	r0, r2
 800ec06:	f7fe fc3a 	bl	800d47e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800ec0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d202      	bcs.n	800ec1a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800ec14:	4a09      	ldr	r2, [pc, #36]	@ (800ec3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	6013      	str	r3, [r2, #0]
}
 800ec1a:	bf00      	nop
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	20000414 	.word	0x20000414
 800ec28:	20000338 	.word	0x20000338
 800ec2c:	20000418 	.word	0x20000418
 800ec30:	200003fc 	.word	0x200003fc
 800ec34:	200003cc 	.word	0x200003cc
 800ec38:	200003c8 	.word	0x200003c8
 800ec3c:	20000430 	.word	0x20000430

0800ec40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800ec4a:	f000 fae1 	bl	800f210 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800ec4e:	4b12      	ldr	r3, [pc, #72]	@ (800ec98 <xTimerCreateTimerTask+0x58>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00b      	beq.n	800ec6e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800ec56:	4b11      	ldr	r3, [pc, #68]	@ (800ec9c <xTimerCreateTimerTask+0x5c>)
 800ec58:	9301      	str	r3, [sp, #4]
 800ec5a:	2302      	movs	r3, #2
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	2300      	movs	r3, #0
 800ec60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ec64:	490e      	ldr	r1, [pc, #56]	@ (800eca0 <xTimerCreateTimerTask+0x60>)
 800ec66:	480f      	ldr	r0, [pc, #60]	@ (800eca4 <xTimerCreateTimerTask+0x64>)
 800ec68:	f7ff f98e 	bl	800df88 <xTaskCreate>
 800ec6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10b      	bne.n	800ec8c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800ec74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	603b      	str	r3, [r7, #0]
    }
 800ec86:	bf00      	nop
 800ec88:	bf00      	nop
 800ec8a:	e7fd      	b.n	800ec88 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800ec8c:	687b      	ldr	r3, [r7, #4]
    }
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	2000046c 	.word	0x2000046c
 800ec9c:	20000470 	.word	0x20000470
 800eca0:	08011038 	.word	0x08011038
 800eca4:	0800ede1 	.word	0x0800ede1

0800eca8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b08a      	sub	sp, #40	@ 0x28
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d10b      	bne.n	800ecd8 <xTimerGenericCommand+0x30>
        __asm volatile
 800ecc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc4:	f383 8811 	msr	BASEPRI, r3
 800ecc8:	f3bf 8f6f 	isb	sy
 800eccc:	f3bf 8f4f 	dsb	sy
 800ecd0:	623b      	str	r3, [r7, #32]
    }
 800ecd2:	bf00      	nop
 800ecd4:	bf00      	nop
 800ecd6:	e7fd      	b.n	800ecd4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800ecd8:	4b19      	ldr	r3, [pc, #100]	@ (800ed40 <xTimerGenericCommand+0x98>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d02a      	beq.n	800ed36 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	2b05      	cmp	r3, #5
 800ecf0:	dc18      	bgt.n	800ed24 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ecf2:	f7ff fea5 	bl	800ea40 <xTaskGetSchedulerState>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b02      	cmp	r3, #2
 800ecfa:	d109      	bne.n	800ed10 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ecfc:	4b10      	ldr	r3, [pc, #64]	@ (800ed40 <xTimerGenericCommand+0x98>)
 800ecfe:	6818      	ldr	r0, [r3, #0]
 800ed00:	f107 0114 	add.w	r1, r7, #20
 800ed04:	2300      	movs	r3, #0
 800ed06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed08:	f7fe fd3e 	bl	800d788 <xQueueGenericSend>
 800ed0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed0e:	e012      	b.n	800ed36 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed10:	4b0b      	ldr	r3, [pc, #44]	@ (800ed40 <xTimerGenericCommand+0x98>)
 800ed12:	6818      	ldr	r0, [r3, #0]
 800ed14:	f107 0114 	add.w	r1, r7, #20
 800ed18:	2300      	movs	r3, #0
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f7fe fd34 	bl	800d788 <xQueueGenericSend>
 800ed20:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed22:	e008      	b.n	800ed36 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed24:	4b06      	ldr	r3, [pc, #24]	@ (800ed40 <xTimerGenericCommand+0x98>)
 800ed26:	6818      	ldr	r0, [r3, #0]
 800ed28:	f107 0114 	add.w	r1, r7, #20
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	f7fe fe2c 	bl	800d98c <xQueueGenericSendFromISR>
 800ed34:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800ed36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3728      	adds	r7, #40	@ 0x28
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}
 800ed40:	2000046c 	.word	0x2000046c

0800ed44 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af02      	add	r7, sp, #8
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed4e:	4b23      	ldr	r3, [pc, #140]	@ (800eddc <prvProcessExpiredTimer+0x98>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fe fbc7 	bl	800d4f0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed68:	f003 0304 	and.w	r3, r3, #4
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d023      	beq.n	800edb8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	699a      	ldr	r2, [r3, #24]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	18d1      	adds	r1, r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	6978      	ldr	r0, [r7, #20]
 800ed7e:	f000 f8d5 	bl	800ef2c <prvInsertTimerInActiveList>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d020      	beq.n	800edca <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed88:	2300      	movs	r3, #0
 800ed8a:	9300      	str	r3, [sp, #0]
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	2100      	movs	r1, #0
 800ed92:	6978      	ldr	r0, [r7, #20]
 800ed94:	f7ff ff88 	bl	800eca8 <xTimerGenericCommand>
 800ed98:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d114      	bne.n	800edca <prvProcessExpiredTimer+0x86>
        __asm volatile
 800eda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda4:	f383 8811 	msr	BASEPRI, r3
 800eda8:	f3bf 8f6f 	isb	sy
 800edac:	f3bf 8f4f 	dsb	sy
 800edb0:	60fb      	str	r3, [r7, #12]
    }
 800edb2:	bf00      	nop
 800edb4:	bf00      	nop
 800edb6:	e7fd      	b.n	800edb4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edbe:	f023 0301 	bic.w	r3, r3, #1
 800edc2:	b2da      	uxtb	r2, r3
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	6a1b      	ldr	r3, [r3, #32]
 800edce:	6978      	ldr	r0, [r7, #20]
 800edd0:	4798      	blx	r3
    }
 800edd2:	bf00      	nop
 800edd4:	3718      	adds	r7, #24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20000464 	.word	0x20000464

0800ede0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ede8:	f107 0308 	add.w	r3, r7, #8
 800edec:	4618      	mov	r0, r3
 800edee:	f000 f859 	bl	800eea4 <prvGetNextExpireTime>
 800edf2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	4619      	mov	r1, r3
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f000 f805 	bl	800ee08 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800edfe:	f000 f8d7 	bl	800efb0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee02:	bf00      	nop
 800ee04:	e7f0      	b.n	800ede8 <prvTimerTask+0x8>
	...

0800ee08 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800ee12:	f7ff fa51 	bl	800e2b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee16:	f107 0308 	add.w	r3, r7, #8
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f000 f866 	bl	800eeec <prvSampleTimeNow>
 800ee20:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d130      	bne.n	800ee8a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d10a      	bne.n	800ee44 <prvProcessTimerOrBlockTask+0x3c>
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d806      	bhi.n	800ee44 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800ee36:	f7ff fa4d 	bl	800e2d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ee3a:	68f9      	ldr	r1, [r7, #12]
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7ff ff81 	bl	800ed44 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800ee42:	e024      	b.n	800ee8e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d008      	beq.n	800ee5c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ee4a:	4b13      	ldr	r3, [pc, #76]	@ (800ee98 <prvProcessTimerOrBlockTask+0x90>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d101      	bne.n	800ee58 <prvProcessTimerOrBlockTask+0x50>
 800ee54:	2301      	movs	r3, #1
 800ee56:	e000      	b.n	800ee5a <prvProcessTimerOrBlockTask+0x52>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ee5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ee9c <prvProcessTimerOrBlockTask+0x94>)
 800ee5e:	6818      	ldr	r0, [r3, #0]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	1ad3      	subs	r3, r2, r3
 800ee66:	683a      	ldr	r2, [r7, #0]
 800ee68:	4619      	mov	r1, r3
 800ee6a:	f7ff f859 	bl	800df20 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800ee6e:	f7ff fa31 	bl	800e2d4 <xTaskResumeAll>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d10a      	bne.n	800ee8e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800ee78:	4b09      	ldr	r3, [pc, #36]	@ (800eea0 <prvProcessTimerOrBlockTask+0x98>)
 800ee7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee7e:	601a      	str	r2, [r3, #0]
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	f3bf 8f6f 	isb	sy
    }
 800ee88:	e001      	b.n	800ee8e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800ee8a:	f7ff fa23 	bl	800e2d4 <xTaskResumeAll>
    }
 800ee8e:	bf00      	nop
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	20000468 	.word	0x20000468
 800ee9c:	2000046c 	.word	0x2000046c
 800eea0:	e000ed04 	.word	0xe000ed04

0800eea4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800eea4:	b480      	push	{r7}
 800eea6:	b085      	sub	sp, #20
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eeac:	4b0e      	ldr	r3, [pc, #56]	@ (800eee8 <prvGetNextExpireTime+0x44>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d101      	bne.n	800eeba <prvGetNextExpireTime+0x16>
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	e000      	b.n	800eebc <prvGetNextExpireTime+0x18>
 800eeba:	2200      	movs	r2, #0
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d105      	bne.n	800eed4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eec8:	4b07      	ldr	r3, [pc, #28]	@ (800eee8 <prvGetNextExpireTime+0x44>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	60fb      	str	r3, [r7, #12]
 800eed2:	e001      	b.n	800eed8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800eed4:	2300      	movs	r3, #0
 800eed6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800eed8:	68fb      	ldr	r3, [r7, #12]
    }
 800eeda:	4618      	mov	r0, r3
 800eedc:	3714      	adds	r7, #20
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	20000464 	.word	0x20000464

0800eeec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800eef4:	f7ff fa8c 	bl	800e410 <xTaskGetTickCount>
 800eef8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800eefa:	4b0b      	ldr	r3, [pc, #44]	@ (800ef28 <prvSampleTimeNow+0x3c>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d205      	bcs.n	800ef10 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800ef04:	f000 f91e 	bl	800f144 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	601a      	str	r2, [r3, #0]
 800ef0e:	e002      	b.n	800ef16 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800ef16:	4a04      	ldr	r2, [pc, #16]	@ (800ef28 <prvSampleTimeNow+0x3c>)
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
    }
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	20000474 	.word	0x20000474

0800ef2c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b086      	sub	sp, #24
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	607a      	str	r2, [r7, #4]
 800ef38:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	68fa      	ldr	r2, [r7, #12]
 800ef48:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800ef4a:	68ba      	ldr	r2, [r7, #8]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d812      	bhi.n	800ef78 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	1ad2      	subs	r2, r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	699b      	ldr	r3, [r3, #24]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d302      	bcc.n	800ef66 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800ef60:	2301      	movs	r3, #1
 800ef62:	617b      	str	r3, [r7, #20]
 800ef64:	e01b      	b.n	800ef9e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ef66:	4b10      	ldr	r3, [pc, #64]	@ (800efa8 <prvInsertTimerInActiveList+0x7c>)
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	4619      	mov	r1, r3
 800ef70:	4610      	mov	r0, r2
 800ef72:	f7fe fa84 	bl	800d47e <vListInsert>
 800ef76:	e012      	b.n	800ef9e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d206      	bcs.n	800ef8e <prvInsertTimerInActiveList+0x62>
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d302      	bcc.n	800ef8e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	e007      	b.n	800ef9e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef8e:	4b07      	ldr	r3, [pc, #28]	@ (800efac <prvInsertTimerInActiveList+0x80>)
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	3304      	adds	r3, #4
 800ef96:	4619      	mov	r1, r3
 800ef98:	4610      	mov	r0, r2
 800ef9a:	f7fe fa70 	bl	800d47e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800ef9e:	697b      	ldr	r3, [r7, #20]
    }
 800efa0:	4618      	mov	r0, r3
 800efa2:	3718      	adds	r7, #24
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	20000468 	.word	0x20000468
 800efac:	20000464 	.word	0x20000464

0800efb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08c      	sub	sp, #48	@ 0x30
 800efb4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800efb6:	e0b2      	b.n	800f11e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f2c0 80af 	blt.w	800f11e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800efc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc6:	695b      	ldr	r3, [r3, #20]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d004      	beq.n	800efd6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efce:	3304      	adds	r3, #4
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fe fa8d 	bl	800d4f0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efd6:	1d3b      	adds	r3, r7, #4
 800efd8:	4618      	mov	r0, r3
 800efda:	f7ff ff87 	bl	800eeec <prvSampleTimeNow>
 800efde:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b09      	cmp	r3, #9
 800efe4:	f200 8098 	bhi.w	800f118 <prvProcessReceivedCommands+0x168>
 800efe8:	a201      	add	r2, pc, #4	@ (adr r2, 800eff0 <prvProcessReceivedCommands+0x40>)
 800efea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efee:	bf00      	nop
 800eff0:	0800f019 	.word	0x0800f019
 800eff4:	0800f019 	.word	0x0800f019
 800eff8:	0800f019 	.word	0x0800f019
 800effc:	0800f08f 	.word	0x0800f08f
 800f000:	0800f0a3 	.word	0x0800f0a3
 800f004:	0800f0ef 	.word	0x0800f0ef
 800f008:	0800f019 	.word	0x0800f019
 800f00c:	0800f019 	.word	0x0800f019
 800f010:	0800f08f 	.word	0x0800f08f
 800f014:	0800f0a3 	.word	0x0800f0a3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f01a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f01e:	f043 0301 	orr.w	r3, r3, #1
 800f022:	b2da      	uxtb	r2, r3
 800f024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02e:	699b      	ldr	r3, [r3, #24]
 800f030:	18d1      	adds	r1, r2, r3
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	6a3a      	ldr	r2, [r7, #32]
 800f036:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f038:	f7ff ff78 	bl	800ef2c <prvInsertTimerInActiveList>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d06c      	beq.n	800f11c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f044:	6a1b      	ldr	r3, [r3, #32]
 800f046:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f048:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f050:	f003 0304 	and.w	r3, r3, #4
 800f054:	2b00      	cmp	r3, #0
 800f056:	d061      	beq.n	800f11c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	441a      	add	r2, r3
 800f060:	2300      	movs	r3, #0
 800f062:	9300      	str	r3, [sp, #0]
 800f064:	2300      	movs	r3, #0
 800f066:	2100      	movs	r1, #0
 800f068:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f06a:	f7ff fe1d 	bl	800eca8 <xTimerGenericCommand>
 800f06e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d152      	bne.n	800f11c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800f076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f07a:	f383 8811 	msr	BASEPRI, r3
 800f07e:	f3bf 8f6f 	isb	sy
 800f082:	f3bf 8f4f 	dsb	sy
 800f086:	61bb      	str	r3, [r7, #24]
    }
 800f088:	bf00      	nop
 800f08a:	bf00      	nop
 800f08c:	e7fd      	b.n	800f08a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f094:	f023 0301 	bic.w	r3, r3, #1
 800f098:	b2da      	uxtb	r2, r3
 800f09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800f0a0:	e03d      	b.n	800f11e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0a8:	f043 0301 	orr.w	r3, r3, #1
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0bc:	699b      	ldr	r3, [r3, #24]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d10b      	bne.n	800f0da <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800f0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c6:	f383 8811 	msr	BASEPRI, r3
 800f0ca:	f3bf 8f6f 	isb	sy
 800f0ce:	f3bf 8f4f 	dsb	sy
 800f0d2:	617b      	str	r3, [r7, #20]
    }
 800f0d4:	bf00      	nop
 800f0d6:	bf00      	nop
 800f0d8:	e7fd      	b.n	800f0d6 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0dc:	699a      	ldr	r2, [r3, #24]
 800f0de:	6a3b      	ldr	r3, [r7, #32]
 800f0e0:	18d1      	adds	r1, r2, r3
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	6a3a      	ldr	r2, [r7, #32]
 800f0e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f0e8:	f7ff ff20 	bl	800ef2c <prvInsertTimerInActiveList>
                        break;
 800f0ec:	e017      	b.n	800f11e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0f4:	f003 0302 	and.w	r3, r3, #2
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d103      	bne.n	800f104 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800f0fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f0fe:	f000 fbf9 	bl	800f8f4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800f102:	e00c      	b.n	800f11e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f10a:	f023 0301 	bic.w	r3, r3, #1
 800f10e:	b2da      	uxtb	r2, r3
 800f110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800f116:	e002      	b.n	800f11e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800f118:	bf00      	nop
 800f11a:	e000      	b.n	800f11e <prvProcessReceivedCommands+0x16e>
                        break;
 800f11c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f11e:	4b08      	ldr	r3, [pc, #32]	@ (800f140 <prvProcessReceivedCommands+0x190>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f107 0108 	add.w	r1, r7, #8
 800f126:	2200      	movs	r2, #0
 800f128:	4618      	mov	r0, r3
 800f12a:	f7fe fcdd 	bl	800dae8 <xQueueReceive>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	f47f af41 	bne.w	800efb8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800f136:	bf00      	nop
 800f138:	bf00      	nop
 800f13a:	3728      	adds	r7, #40	@ 0x28
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	2000046c 	.word	0x2000046c

0800f144 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800f144:	b580      	push	{r7, lr}
 800f146:	b088      	sub	sp, #32
 800f148:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f14a:	e049      	b.n	800f1e0 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f14c:	4b2e      	ldr	r3, [pc, #184]	@ (800f208 <prvSwitchTimerLists+0xc4>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f156:	4b2c      	ldr	r3, [pc, #176]	@ (800f208 <prvSwitchTimerLists+0xc4>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	3304      	adds	r3, #4
 800f164:	4618      	mov	r0, r3
 800f166:	f7fe f9c3 	bl	800d4f0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6a1b      	ldr	r3, [r3, #32]
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f178:	f003 0304 	and.w	r3, r3, #4
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d02f      	beq.n	800f1e0 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	699b      	ldr	r3, [r3, #24]
 800f184:	693a      	ldr	r2, [r7, #16]
 800f186:	4413      	add	r3, r2
 800f188:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800f18a:	68ba      	ldr	r2, [r7, #8]
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d90e      	bls.n	800f1b0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	68fa      	ldr	r2, [r7, #12]
 800f19c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f19e:	4b1a      	ldr	r3, [pc, #104]	@ (800f208 <prvSwitchTimerLists+0xc4>)
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	3304      	adds	r3, #4
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	f7fe f968 	bl	800d47e <vListInsert>
 800f1ae:	e017      	b.n	800f1e0 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	693a      	ldr	r2, [r7, #16]
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	68f8      	ldr	r0, [r7, #12]
 800f1bc:	f7ff fd74 	bl	800eca8 <xTimerGenericCommand>
 800f1c0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d10b      	bne.n	800f1e0 <prvSwitchTimerLists+0x9c>
        __asm volatile
 800f1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1cc:	f383 8811 	msr	BASEPRI, r3
 800f1d0:	f3bf 8f6f 	isb	sy
 800f1d4:	f3bf 8f4f 	dsb	sy
 800f1d8:	603b      	str	r3, [r7, #0]
    }
 800f1da:	bf00      	nop
 800f1dc:	bf00      	nop
 800f1de:	e7fd      	b.n	800f1dc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f1e0:	4b09      	ldr	r3, [pc, #36]	@ (800f208 <prvSwitchTimerLists+0xc4>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d1b0      	bne.n	800f14c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800f1ea:	4b07      	ldr	r3, [pc, #28]	@ (800f208 <prvSwitchTimerLists+0xc4>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800f1f0:	4b06      	ldr	r3, [pc, #24]	@ (800f20c <prvSwitchTimerLists+0xc8>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4a04      	ldr	r2, [pc, #16]	@ (800f208 <prvSwitchTimerLists+0xc4>)
 800f1f6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800f1f8:	4a04      	ldr	r2, [pc, #16]	@ (800f20c <prvSwitchTimerLists+0xc8>)
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	6013      	str	r3, [r2, #0]
    }
 800f1fe:	bf00      	nop
 800f200:	3718      	adds	r7, #24
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	20000464 	.word	0x20000464
 800f20c:	20000468 	.word	0x20000468

0800f210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800f210:	b580      	push	{r7, lr}
 800f212:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800f214:	f000 f962 	bl	800f4dc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800f218:	4b12      	ldr	r3, [pc, #72]	@ (800f264 <prvCheckForValidListAndQueue+0x54>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d11d      	bne.n	800f25c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800f220:	4811      	ldr	r0, [pc, #68]	@ (800f268 <prvCheckForValidListAndQueue+0x58>)
 800f222:	f7fe f8db 	bl	800d3dc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800f226:	4811      	ldr	r0, [pc, #68]	@ (800f26c <prvCheckForValidListAndQueue+0x5c>)
 800f228:	f7fe f8d8 	bl	800d3dc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800f22c:	4b10      	ldr	r3, [pc, #64]	@ (800f270 <prvCheckForValidListAndQueue+0x60>)
 800f22e:	4a0e      	ldr	r2, [pc, #56]	@ (800f268 <prvCheckForValidListAndQueue+0x58>)
 800f230:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800f232:	4b10      	ldr	r3, [pc, #64]	@ (800f274 <prvCheckForValidListAndQueue+0x64>)
 800f234:	4a0d      	ldr	r2, [pc, #52]	@ (800f26c <prvCheckForValidListAndQueue+0x5c>)
 800f236:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f238:	2200      	movs	r2, #0
 800f23a:	210c      	movs	r1, #12
 800f23c:	200a      	movs	r0, #10
 800f23e:	f7fe f9eb 	bl	800d618 <xQueueGenericCreate>
 800f242:	4603      	mov	r3, r0
 800f244:	4a07      	ldr	r2, [pc, #28]	@ (800f264 <prvCheckForValidListAndQueue+0x54>)
 800f246:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800f248:	4b06      	ldr	r3, [pc, #24]	@ (800f264 <prvCheckForValidListAndQueue+0x54>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d005      	beq.n	800f25c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f250:	4b04      	ldr	r3, [pc, #16]	@ (800f264 <prvCheckForValidListAndQueue+0x54>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4908      	ldr	r1, [pc, #32]	@ (800f278 <prvCheckForValidListAndQueue+0x68>)
 800f256:	4618      	mov	r0, r3
 800f258:	f7fe fe38 	bl	800decc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800f25c:	f000 f970 	bl	800f540 <vPortExitCritical>
    }
 800f260:	bf00      	nop
 800f262:	bd80      	pop	{r7, pc}
 800f264:	2000046c 	.word	0x2000046c
 800f268:	2000043c 	.word	0x2000043c
 800f26c:	20000450 	.word	0x20000450
 800f270:	20000464 	.word	0x20000464
 800f274:	20000468 	.word	0x20000468
 800f278:	08011040 	.word	0x08011040

0800f27c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3b04      	subs	r3, #4
 800f28c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f294:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	3b04      	subs	r3, #4
 800f29a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	f023 0201 	bic.w	r2, r3, #1
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	3b04      	subs	r3, #4
 800f2aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800f2ac:	4a0c      	ldr	r2, [pc, #48]	@ (800f2e0 <pxPortInitialiseStack+0x64>)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	3b14      	subs	r3, #20
 800f2b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	3b04      	subs	r3, #4
 800f2c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f06f 0202 	mvn.w	r2, #2
 800f2ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	3b20      	subs	r3, #32
 800f2d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3714      	adds	r7, #20
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr
 800f2e0:	0800f2e5 	.word	0x0800f2e5

0800f2e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800f2ee:	4b13      	ldr	r3, [pc, #76]	@ (800f33c <prvTaskExitError+0x58>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f6:	d00b      	beq.n	800f310 <prvTaskExitError+0x2c>
        __asm volatile
 800f2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	60fb      	str	r3, [r7, #12]
    }
 800f30a:	bf00      	nop
 800f30c:	bf00      	nop
 800f30e:	e7fd      	b.n	800f30c <prvTaskExitError+0x28>
        __asm volatile
 800f310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f314:	f383 8811 	msr	BASEPRI, r3
 800f318:	f3bf 8f6f 	isb	sy
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	60bb      	str	r3, [r7, #8]
    }
 800f322:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800f324:	bf00      	nop
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d0fc      	beq.n	800f326 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800f32c:	bf00      	nop
 800f32e:	bf00      	nop
 800f330:	3714      	adds	r7, #20
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	20000014 	.word	0x20000014

0800f340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800f340:	4b07      	ldr	r3, [pc, #28]	@ (800f360 <pxCurrentTCBConst2>)
 800f342:	6819      	ldr	r1, [r3, #0]
 800f344:	6808      	ldr	r0, [r1, #0]
 800f346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f34a:	f380 8809 	msr	PSP, r0
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f04f 0000 	mov.w	r0, #0
 800f356:	f380 8811 	msr	BASEPRI, r0
 800f35a:	4770      	bx	lr
 800f35c:	f3af 8000 	nop.w

0800f360 <pxCurrentTCBConst2>:
 800f360:	20000338 	.word	0x20000338
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800f364:	bf00      	nop
 800f366:	bf00      	nop

0800f368 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800f368:	4808      	ldr	r0, [pc, #32]	@ (800f38c <prvPortStartFirstTask+0x24>)
 800f36a:	6800      	ldr	r0, [r0, #0]
 800f36c:	6800      	ldr	r0, [r0, #0]
 800f36e:	f380 8808 	msr	MSP, r0
 800f372:	f04f 0000 	mov.w	r0, #0
 800f376:	f380 8814 	msr	CONTROL, r0
 800f37a:	b662      	cpsie	i
 800f37c:	b661      	cpsie	f
 800f37e:	f3bf 8f4f 	dsb	sy
 800f382:	f3bf 8f6f 	isb	sy
 800f386:	df00      	svc	0
 800f388:	bf00      	nop
 800f38a:	0000      	.short	0x0000
 800f38c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800f390:	bf00      	nop
 800f392:	bf00      	nop

0800f394 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b086      	sub	sp, #24
 800f398:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f39a:	4b47      	ldr	r3, [pc, #284]	@ (800f4b8 <xPortStartScheduler+0x124>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	4a47      	ldr	r2, [pc, #284]	@ (800f4bc <xPortStartScheduler+0x128>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d10b      	bne.n	800f3bc <xPortStartScheduler+0x28>
        __asm volatile
 800f3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a8:	f383 8811 	msr	BASEPRI, r3
 800f3ac:	f3bf 8f6f 	isb	sy
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	60fb      	str	r3, [r7, #12]
    }
 800f3b6:	bf00      	nop
 800f3b8:	bf00      	nop
 800f3ba:	e7fd      	b.n	800f3b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f3bc:	4b3e      	ldr	r3, [pc, #248]	@ (800f4b8 <xPortStartScheduler+0x124>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a3f      	ldr	r2, [pc, #252]	@ (800f4c0 <xPortStartScheduler+0x12c>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d10b      	bne.n	800f3de <xPortStartScheduler+0x4a>
        __asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ca:	f383 8811 	msr	BASEPRI, r3
 800f3ce:	f3bf 8f6f 	isb	sy
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	613b      	str	r3, [r7, #16]
    }
 800f3d8:	bf00      	nop
 800f3da:	bf00      	nop
 800f3dc:	e7fd      	b.n	800f3da <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f3de:	4b39      	ldr	r3, [pc, #228]	@ (800f4c4 <xPortStartScheduler+0x130>)
 800f3e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	22ff      	movs	r2, #255	@ 0xff
 800f3ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f3f8:	78fb      	ldrb	r3, [r7, #3]
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f400:	b2da      	uxtb	r2, r3
 800f402:	4b31      	ldr	r3, [pc, #196]	@ (800f4c8 <xPortStartScheduler+0x134>)
 800f404:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f406:	4b31      	ldr	r3, [pc, #196]	@ (800f4cc <xPortStartScheduler+0x138>)
 800f408:	2207      	movs	r2, #7
 800f40a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f40c:	e009      	b.n	800f422 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800f40e:	4b2f      	ldr	r3, [pc, #188]	@ (800f4cc <xPortStartScheduler+0x138>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	3b01      	subs	r3, #1
 800f414:	4a2d      	ldr	r2, [pc, #180]	@ (800f4cc <xPortStartScheduler+0x138>)
 800f416:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f418:	78fb      	ldrb	r3, [r7, #3]
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	005b      	lsls	r3, r3, #1
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f422:	78fb      	ldrb	r3, [r7, #3]
 800f424:	b2db      	uxtb	r3, r3
 800f426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f42a:	2b80      	cmp	r3, #128	@ 0x80
 800f42c:	d0ef      	beq.n	800f40e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f42e:	4b27      	ldr	r3, [pc, #156]	@ (800f4cc <xPortStartScheduler+0x138>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f1c3 0307 	rsb	r3, r3, #7
 800f436:	2b04      	cmp	r3, #4
 800f438:	d00b      	beq.n	800f452 <xPortStartScheduler+0xbe>
        __asm volatile
 800f43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	60bb      	str	r3, [r7, #8]
    }
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	e7fd      	b.n	800f44e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f452:	4b1e      	ldr	r3, [pc, #120]	@ (800f4cc <xPortStartScheduler+0x138>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	021b      	lsls	r3, r3, #8
 800f458:	4a1c      	ldr	r2, [pc, #112]	@ (800f4cc <xPortStartScheduler+0x138>)
 800f45a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f45c:	4b1b      	ldr	r3, [pc, #108]	@ (800f4cc <xPortStartScheduler+0x138>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f464:	4a19      	ldr	r2, [pc, #100]	@ (800f4cc <xPortStartScheduler+0x138>)
 800f466:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	b2da      	uxtb	r2, r3
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800f470:	4b17      	ldr	r3, [pc, #92]	@ (800f4d0 <xPortStartScheduler+0x13c>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4a16      	ldr	r2, [pc, #88]	@ (800f4d0 <xPortStartScheduler+0x13c>)
 800f476:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f47a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800f47c:	4b14      	ldr	r3, [pc, #80]	@ (800f4d0 <xPortStartScheduler+0x13c>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4a13      	ldr	r2, [pc, #76]	@ (800f4d0 <xPortStartScheduler+0x13c>)
 800f482:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f486:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800f488:	f000 f8e0 	bl	800f64c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800f48c:	4b11      	ldr	r3, [pc, #68]	@ (800f4d4 <xPortStartScheduler+0x140>)
 800f48e:	2200      	movs	r2, #0
 800f490:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800f492:	f000 f8ff 	bl	800f694 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f496:	4b10      	ldr	r3, [pc, #64]	@ (800f4d8 <xPortStartScheduler+0x144>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a0f      	ldr	r2, [pc, #60]	@ (800f4d8 <xPortStartScheduler+0x144>)
 800f49c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f4a0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800f4a2:	f7ff ff61 	bl	800f368 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800f4a6:	f7ff f87d 	bl	800e5a4 <vTaskSwitchContext>
    prvTaskExitError();
 800f4aa:	f7ff ff1b 	bl	800f2e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800f4ae:	2300      	movs	r3, #0
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3718      	adds	r7, #24
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	e000ed00 	.word	0xe000ed00
 800f4bc:	410fc271 	.word	0x410fc271
 800f4c0:	410fc270 	.word	0x410fc270
 800f4c4:	e000e400 	.word	0xe000e400
 800f4c8:	20000478 	.word	0x20000478
 800f4cc:	2000047c 	.word	0x2000047c
 800f4d0:	e000ed20 	.word	0xe000ed20
 800f4d4:	20000014 	.word	0x20000014
 800f4d8:	e000ef34 	.word	0xe000ef34

0800f4dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
        __asm volatile
 800f4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e6:	f383 8811 	msr	BASEPRI, r3
 800f4ea:	f3bf 8f6f 	isb	sy
 800f4ee:	f3bf 8f4f 	dsb	sy
 800f4f2:	607b      	str	r3, [r7, #4]
    }
 800f4f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800f4f6:	4b10      	ldr	r3, [pc, #64]	@ (800f538 <vPortEnterCritical+0x5c>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	4a0e      	ldr	r2, [pc, #56]	@ (800f538 <vPortEnterCritical+0x5c>)
 800f4fe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800f500:	4b0d      	ldr	r3, [pc, #52]	@ (800f538 <vPortEnterCritical+0x5c>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d110      	bne.n	800f52a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f508:	4b0c      	ldr	r3, [pc, #48]	@ (800f53c <vPortEnterCritical+0x60>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00b      	beq.n	800f52a <vPortEnterCritical+0x4e>
        __asm volatile
 800f512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	603b      	str	r3, [r7, #0]
    }
 800f524:	bf00      	nop
 800f526:	bf00      	nop
 800f528:	e7fd      	b.n	800f526 <vPortEnterCritical+0x4a>
    }
}
 800f52a:	bf00      	nop
 800f52c:	370c      	adds	r7, #12
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr
 800f536:	bf00      	nop
 800f538:	20000014 	.word	0x20000014
 800f53c:	e000ed04 	.word	0xe000ed04

0800f540 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800f546:	4b12      	ldr	r3, [pc, #72]	@ (800f590 <vPortExitCritical+0x50>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d10b      	bne.n	800f566 <vPortExitCritical+0x26>
        __asm volatile
 800f54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f552:	f383 8811 	msr	BASEPRI, r3
 800f556:	f3bf 8f6f 	isb	sy
 800f55a:	f3bf 8f4f 	dsb	sy
 800f55e:	607b      	str	r3, [r7, #4]
    }
 800f560:	bf00      	nop
 800f562:	bf00      	nop
 800f564:	e7fd      	b.n	800f562 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800f566:	4b0a      	ldr	r3, [pc, #40]	@ (800f590 <vPortExitCritical+0x50>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3b01      	subs	r3, #1
 800f56c:	4a08      	ldr	r2, [pc, #32]	@ (800f590 <vPortExitCritical+0x50>)
 800f56e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800f570:	4b07      	ldr	r3, [pc, #28]	@ (800f590 <vPortExitCritical+0x50>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d105      	bne.n	800f584 <vPortExitCritical+0x44>
 800f578:	2300      	movs	r3, #0
 800f57a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	f383 8811 	msr	BASEPRI, r3
    }
 800f582:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800f584:	bf00      	nop
 800f586:	370c      	adds	r7, #12
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr
 800f590:	20000014 	.word	0x20000014
	...

0800f5a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800f5a0:	f3ef 8009 	mrs	r0, PSP
 800f5a4:	f3bf 8f6f 	isb	sy
 800f5a8:	4b15      	ldr	r3, [pc, #84]	@ (800f600 <pxCurrentTCBConst>)
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	f01e 0f10 	tst.w	lr, #16
 800f5b0:	bf08      	it	eq
 800f5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ba:	6010      	str	r0, [r2, #0]
 800f5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f5c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f5c4:	f380 8811 	msr	BASEPRI, r0
 800f5c8:	f3bf 8f4f 	dsb	sy
 800f5cc:	f3bf 8f6f 	isb	sy
 800f5d0:	f7fe ffe8 	bl	800e5a4 <vTaskSwitchContext>
 800f5d4:	f04f 0000 	mov.w	r0, #0
 800f5d8:	f380 8811 	msr	BASEPRI, r0
 800f5dc:	bc09      	pop	{r0, r3}
 800f5de:	6819      	ldr	r1, [r3, #0]
 800f5e0:	6808      	ldr	r0, [r1, #0]
 800f5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e6:	f01e 0f10 	tst.w	lr, #16
 800f5ea:	bf08      	it	eq
 800f5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f5f0:	f380 8809 	msr	PSP, r0
 800f5f4:	f3bf 8f6f 	isb	sy
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	f3af 8000 	nop.w

0800f600 <pxCurrentTCBConst>:
 800f600:	20000338 	.word	0x20000338
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800f604:	bf00      	nop
 800f606:	bf00      	nop

0800f608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
        __asm volatile
 800f60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f612:	f383 8811 	msr	BASEPRI, r3
 800f616:	f3bf 8f6f 	isb	sy
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	607b      	str	r3, [r7, #4]
    }
 800f620:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800f622:	f7fe ff05 	bl	800e430 <xTaskIncrementTick>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d003      	beq.n	800f634 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f62c:	4b06      	ldr	r3, [pc, #24]	@ (800f648 <SysTick_Handler+0x40>)
 800f62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f632:	601a      	str	r2, [r3, #0]
 800f634:	2300      	movs	r3, #0
 800f636:	603b      	str	r3, [r7, #0]
        __asm volatile
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	f383 8811 	msr	BASEPRI, r3
    }
 800f63e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800f640:	bf00      	nop
 800f642:	3708      	adds	r7, #8
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	e000ed04 	.word	0xe000ed04

0800f64c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800f64c:	b480      	push	{r7}
 800f64e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f650:	4b0b      	ldr	r3, [pc, #44]	@ (800f680 <vPortSetupTimerInterrupt+0x34>)
 800f652:	2200      	movs	r2, #0
 800f654:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f656:	4b0b      	ldr	r3, [pc, #44]	@ (800f684 <vPortSetupTimerInterrupt+0x38>)
 800f658:	2200      	movs	r2, #0
 800f65a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f65c:	4b0a      	ldr	r3, [pc, #40]	@ (800f688 <vPortSetupTimerInterrupt+0x3c>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a0a      	ldr	r2, [pc, #40]	@ (800f68c <vPortSetupTimerInterrupt+0x40>)
 800f662:	fba2 2303 	umull	r2, r3, r2, r3
 800f666:	099b      	lsrs	r3, r3, #6
 800f668:	4a09      	ldr	r2, [pc, #36]	@ (800f690 <vPortSetupTimerInterrupt+0x44>)
 800f66a:	3b01      	subs	r3, #1
 800f66c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f66e:	4b04      	ldr	r3, [pc, #16]	@ (800f680 <vPortSetupTimerInterrupt+0x34>)
 800f670:	2207      	movs	r2, #7
 800f672:	601a      	str	r2, [r3, #0]
}
 800f674:	bf00      	nop
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	e000e010 	.word	0xe000e010
 800f684:	e000e018 	.word	0xe000e018
 800f688:	20000008 	.word	0x20000008
 800f68c:	10624dd3 	.word	0x10624dd3
 800f690:	e000e014 	.word	0xe000e014

0800f694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800f694:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f6a4 <vPortEnableVFP+0x10>
 800f698:	6801      	ldr	r1, [r0, #0]
 800f69a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f69e:	6001      	str	r1, [r0, #0]
 800f6a0:	4770      	bx	lr
 800f6a2:	0000      	.short	0x0000
 800f6a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800f6a8:	bf00      	nop
 800f6aa:	bf00      	nop

0800f6ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800f6b2:	f3ef 8305 	mrs	r3, IPSR
 800f6b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2b0f      	cmp	r3, #15
 800f6bc:	d915      	bls.n	800f6ea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f6be:	4a18      	ldr	r2, [pc, #96]	@ (800f720 <vPortValidateInterruptPriority+0x74>)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f6c8:	4b16      	ldr	r3, [pc, #88]	@ (800f724 <vPortValidateInterruptPriority+0x78>)
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	7afa      	ldrb	r2, [r7, #11]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d20b      	bcs.n	800f6ea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d6:	f383 8811 	msr	BASEPRI, r3
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	607b      	str	r3, [r7, #4]
    }
 800f6e4:	bf00      	nop
 800f6e6:	bf00      	nop
 800f6e8:	e7fd      	b.n	800f6e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f6ea:	4b0f      	ldr	r3, [pc, #60]	@ (800f728 <vPortValidateInterruptPriority+0x7c>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f6f2:	4b0e      	ldr	r3, [pc, #56]	@ (800f72c <vPortValidateInterruptPriority+0x80>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d90b      	bls.n	800f712 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800f6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6fe:	f383 8811 	msr	BASEPRI, r3
 800f702:	f3bf 8f6f 	isb	sy
 800f706:	f3bf 8f4f 	dsb	sy
 800f70a:	603b      	str	r3, [r7, #0]
    }
 800f70c:	bf00      	nop
 800f70e:	bf00      	nop
 800f710:	e7fd      	b.n	800f70e <vPortValidateInterruptPriority+0x62>
    }
 800f712:	bf00      	nop
 800f714:	3714      	adds	r7, #20
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	e000e3f0 	.word	0xe000e3f0
 800f724:	20000478 	.word	0x20000478
 800f728:	e000ed0c 	.word	0xe000ed0c
 800f72c:	2000047c 	.word	0x2000047c

0800f730 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b08a      	sub	sp, #40	@ 0x28
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800f738:	2300      	movs	r3, #0
 800f73a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800f73c:	f7fe fdbc 	bl	800e2b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800f740:	4b66      	ldr	r3, [pc, #408]	@ (800f8dc <pvPortMalloc+0x1ac>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d101      	bne.n	800f74c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800f748:	f000 f938 	bl	800f9bc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f74c:	4b64      	ldr	r3, [pc, #400]	@ (800f8e0 <pvPortMalloc+0x1b0>)
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4013      	ands	r3, r2
 800f754:	2b00      	cmp	r3, #0
 800f756:	f040 80a9 	bne.w	800f8ac <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d02e      	beq.n	800f7be <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800f760:	2208      	movs	r2, #8
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d228      	bcs.n	800f7be <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800f76c:	2208      	movs	r2, #8
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4413      	add	r3, r2
 800f772:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f003 0307 	and.w	r3, r3, #7
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d022      	beq.n	800f7c4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f023 0307 	bic.w	r3, r3, #7
 800f784:	3308      	adds	r3, #8
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d215      	bcs.n	800f7b8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f023 0307 	bic.w	r3, r3, #7
 800f792:	3308      	adds	r3, #8
 800f794:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f003 0307 	and.w	r3, r3, #7
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d011      	beq.n	800f7c4 <pvPortMalloc+0x94>
        __asm volatile
 800f7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	617b      	str	r3, [r7, #20]
    }
 800f7b2:	bf00      	nop
 800f7b4:	bf00      	nop
 800f7b6:	e7fd      	b.n	800f7b4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f7bc:	e002      	b.n	800f7c4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	607b      	str	r3, [r7, #4]
 800f7c2:	e000      	b.n	800f7c6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f7c4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d06f      	beq.n	800f8ac <pvPortMalloc+0x17c>
 800f7cc:	4b45      	ldr	r3, [pc, #276]	@ (800f8e4 <pvPortMalloc+0x1b4>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d86a      	bhi.n	800f8ac <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800f7d6:	4b44      	ldr	r3, [pc, #272]	@ (800f8e8 <pvPortMalloc+0x1b8>)
 800f7d8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800f7da:	4b43      	ldr	r3, [pc, #268]	@ (800f8e8 <pvPortMalloc+0x1b8>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f7e0:	e004      	b.n	800f7ec <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800f7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d903      	bls.n	800f7fe <pvPortMalloc+0xce>
 800f7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d1f1      	bne.n	800f7e2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800f7fe:	4b37      	ldr	r3, [pc, #220]	@ (800f8dc <pvPortMalloc+0x1ac>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f804:	429a      	cmp	r2, r3
 800f806:	d051      	beq.n	800f8ac <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f808:	6a3b      	ldr	r3, [r7, #32]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	2208      	movs	r2, #8
 800f80e:	4413      	add	r3, r2
 800f810:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	6a3b      	ldr	r3, [r7, #32]
 800f818:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f81c:	685a      	ldr	r2, [r3, #4]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	1ad2      	subs	r2, r2, r3
 800f822:	2308      	movs	r3, #8
 800f824:	005b      	lsls	r3, r3, #1
 800f826:	429a      	cmp	r2, r3
 800f828:	d920      	bls.n	800f86c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4413      	add	r3, r2
 800f830:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	f003 0307 	and.w	r3, r3, #7
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00b      	beq.n	800f854 <pvPortMalloc+0x124>
        __asm volatile
 800f83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f840:	f383 8811 	msr	BASEPRI, r3
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	613b      	str	r3, [r7, #16]
    }
 800f84e:	bf00      	nop
 800f850:	bf00      	nop
 800f852:	e7fd      	b.n	800f850 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f856:	685a      	ldr	r2, [r3, #4]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	1ad2      	subs	r2, r2, r3
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800f860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f866:	69b8      	ldr	r0, [r7, #24]
 800f868:	f000 f90a 	bl	800fa80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f86c:	4b1d      	ldr	r3, [pc, #116]	@ (800f8e4 <pvPortMalloc+0x1b4>)
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	4a1b      	ldr	r2, [pc, #108]	@ (800f8e4 <pvPortMalloc+0x1b4>)
 800f878:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f87a:	4b1a      	ldr	r3, [pc, #104]	@ (800f8e4 <pvPortMalloc+0x1b4>)
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	4b1b      	ldr	r3, [pc, #108]	@ (800f8ec <pvPortMalloc+0x1bc>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	429a      	cmp	r2, r3
 800f884:	d203      	bcs.n	800f88e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f886:	4b17      	ldr	r3, [pc, #92]	@ (800f8e4 <pvPortMalloc+0x1b4>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a18      	ldr	r2, [pc, #96]	@ (800f8ec <pvPortMalloc+0x1bc>)
 800f88c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f890:	685a      	ldr	r2, [r3, #4]
 800f892:	4b13      	ldr	r3, [pc, #76]	@ (800f8e0 <pvPortMalloc+0x1b0>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	431a      	orrs	r2, r3
 800f898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f89a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800f89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f89e:	2200      	movs	r2, #0
 800f8a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800f8a2:	4b13      	ldr	r3, [pc, #76]	@ (800f8f0 <pvPortMalloc+0x1c0>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	4a11      	ldr	r2, [pc, #68]	@ (800f8f0 <pvPortMalloc+0x1c0>)
 800f8aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800f8ac:	f7fe fd12 	bl	800e2d4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	f003 0307 	and.w	r3, r3, #7
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d00b      	beq.n	800f8d2 <pvPortMalloc+0x1a2>
        __asm volatile
 800f8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	60fb      	str	r3, [r7, #12]
    }
 800f8cc:	bf00      	nop
 800f8ce:	bf00      	nop
 800f8d0:	e7fd      	b.n	800f8ce <pvPortMalloc+0x19e>
    return pvReturn;
 800f8d2:	69fb      	ldr	r3, [r7, #28]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3728      	adds	r7, #40	@ 0x28
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	20013088 	.word	0x20013088
 800f8e0:	2001309c 	.word	0x2001309c
 800f8e4:	2001308c 	.word	0x2001308c
 800f8e8:	20013080 	.word	0x20013080
 800f8ec:	20013090 	.word	0x20013090
 800f8f0:	20013094 	.word	0x20013094

0800f8f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b086      	sub	sp, #24
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d04f      	beq.n	800f9a6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800f906:	2308      	movs	r3, #8
 800f908:	425b      	negs	r3, r3
 800f90a:	697a      	ldr	r2, [r7, #20]
 800f90c:	4413      	add	r3, r2
 800f90e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	685a      	ldr	r2, [r3, #4]
 800f918:	4b25      	ldr	r3, [pc, #148]	@ (800f9b0 <vPortFree+0xbc>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4013      	ands	r3, r2
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d10b      	bne.n	800f93a <vPortFree+0x46>
        __asm volatile
 800f922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f926:	f383 8811 	msr	BASEPRI, r3
 800f92a:	f3bf 8f6f 	isb	sy
 800f92e:	f3bf 8f4f 	dsb	sy
 800f932:	60fb      	str	r3, [r7, #12]
    }
 800f934:	bf00      	nop
 800f936:	bf00      	nop
 800f938:	e7fd      	b.n	800f936 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00b      	beq.n	800f95a <vPortFree+0x66>
        __asm volatile
 800f942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f946:	f383 8811 	msr	BASEPRI, r3
 800f94a:	f3bf 8f6f 	isb	sy
 800f94e:	f3bf 8f4f 	dsb	sy
 800f952:	60bb      	str	r3, [r7, #8]
    }
 800f954:	bf00      	nop
 800f956:	bf00      	nop
 800f958:	e7fd      	b.n	800f956 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	685a      	ldr	r2, [r3, #4]
 800f95e:	4b14      	ldr	r3, [pc, #80]	@ (800f9b0 <vPortFree+0xbc>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4013      	ands	r3, r2
 800f964:	2b00      	cmp	r3, #0
 800f966:	d01e      	beq.n	800f9a6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d11a      	bne.n	800f9a6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	685a      	ldr	r2, [r3, #4]
 800f974:	4b0e      	ldr	r3, [pc, #56]	@ (800f9b0 <vPortFree+0xbc>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	43db      	mvns	r3, r3
 800f97a:	401a      	ands	r2, r3
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800f980:	f7fe fc9a 	bl	800e2b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	685a      	ldr	r2, [r3, #4]
 800f988:	4b0a      	ldr	r3, [pc, #40]	@ (800f9b4 <vPortFree+0xc0>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	4413      	add	r3, r2
 800f98e:	4a09      	ldr	r2, [pc, #36]	@ (800f9b4 <vPortFree+0xc0>)
 800f990:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f992:	6938      	ldr	r0, [r7, #16]
 800f994:	f000 f874 	bl	800fa80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800f998:	4b07      	ldr	r3, [pc, #28]	@ (800f9b8 <vPortFree+0xc4>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	3301      	adds	r3, #1
 800f99e:	4a06      	ldr	r2, [pc, #24]	@ (800f9b8 <vPortFree+0xc4>)
 800f9a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800f9a2:	f7fe fc97 	bl	800e2d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800f9a6:	bf00      	nop
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	2001309c 	.word	0x2001309c
 800f9b4:	2001308c 	.word	0x2001308c
 800f9b8:	20013098 	.word	0x20013098

0800f9bc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f9c2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800f9c6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800f9c8:	4b27      	ldr	r3, [pc, #156]	@ (800fa68 <prvHeapInit+0xac>)
 800f9ca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f003 0307 	and.w	r3, r3, #7
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00c      	beq.n	800f9f0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	3307      	adds	r3, #7
 800f9da:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f023 0307 	bic.w	r3, r3, #7
 800f9e2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	1ad3      	subs	r3, r2, r3
 800f9ea:	4a1f      	ldr	r2, [pc, #124]	@ (800fa68 <prvHeapInit+0xac>)
 800f9ec:	4413      	add	r3, r2
 800f9ee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f9f4:	4a1d      	ldr	r2, [pc, #116]	@ (800fa6c <prvHeapInit+0xb0>)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800f9fa:	4b1c      	ldr	r3, [pc, #112]	@ (800fa6c <prvHeapInit+0xb0>)
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	68ba      	ldr	r2, [r7, #8]
 800fa04:	4413      	add	r3, r2
 800fa06:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800fa08:	2208      	movs	r2, #8
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	1a9b      	subs	r3, r3, r2
 800fa0e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f023 0307 	bic.w	r3, r3, #7
 800fa16:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	4a15      	ldr	r2, [pc, #84]	@ (800fa70 <prvHeapInit+0xb4>)
 800fa1c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800fa1e:	4b14      	ldr	r3, [pc, #80]	@ (800fa70 <prvHeapInit+0xb4>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2200      	movs	r2, #0
 800fa24:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800fa26:	4b12      	ldr	r3, [pc, #72]	@ (800fa70 <prvHeapInit+0xb4>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	1ad2      	subs	r2, r2, r3
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fa3c:	4b0c      	ldr	r3, [pc, #48]	@ (800fa70 <prvHeapInit+0xb4>)
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	4a0a      	ldr	r2, [pc, #40]	@ (800fa74 <prvHeapInit+0xb8>)
 800fa4a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	4a09      	ldr	r2, [pc, #36]	@ (800fa78 <prvHeapInit+0xbc>)
 800fa52:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fa54:	4b09      	ldr	r3, [pc, #36]	@ (800fa7c <prvHeapInit+0xc0>)
 800fa56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fa5a:	601a      	str	r2, [r3, #0]
}
 800fa5c:	bf00      	nop
 800fa5e:	3714      	adds	r7, #20
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr
 800fa68:	20000480 	.word	0x20000480
 800fa6c:	20013080 	.word	0x20013080
 800fa70:	20013088 	.word	0x20013088
 800fa74:	20013090 	.word	0x20013090
 800fa78:	2001308c 	.word	0x2001308c
 800fa7c:	2001309c 	.word	0x2001309c

0800fa80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fa88:	4b28      	ldr	r3, [pc, #160]	@ (800fb2c <prvInsertBlockIntoFreeList+0xac>)
 800fa8a:	60fb      	str	r3, [r7, #12]
 800fa8c:	e002      	b.n	800fa94 <prvInsertBlockIntoFreeList+0x14>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	60fb      	str	r3, [r7, #12]
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d8f7      	bhi.n	800fa8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	68ba      	ldr	r2, [r7, #8]
 800faa8:	4413      	add	r3, r2
 800faaa:	687a      	ldr	r2, [r7, #4]
 800faac:	429a      	cmp	r2, r3
 800faae:	d108      	bne.n	800fac2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	685a      	ldr	r2, [r3, #4]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	441a      	add	r2, r3
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	68ba      	ldr	r2, [r7, #8]
 800facc:	441a      	add	r2, r3
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d118      	bne.n	800fb08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	4b15      	ldr	r3, [pc, #84]	@ (800fb30 <prvInsertBlockIntoFreeList+0xb0>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d00d      	beq.n	800fafe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	685a      	ldr	r2, [r3, #4]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	441a      	add	r2, r3
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	601a      	str	r2, [r3, #0]
 800fafc:	e008      	b.n	800fb10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fafe:	4b0c      	ldr	r3, [pc, #48]	@ (800fb30 <prvInsertBlockIntoFreeList+0xb0>)
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	e003      	b.n	800fb10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800fb10:	68fa      	ldr	r2, [r7, #12]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d002      	beq.n	800fb1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800fb1e:	bf00      	nop
 800fb20:	3714      	adds	r7, #20
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr
 800fb2a:	bf00      	nop
 800fb2c:	20013080 	.word	0x20013080
 800fb30:	20013088 	.word	0x20013088

0800fb34 <std>:
 800fb34:	2300      	movs	r3, #0
 800fb36:	b510      	push	{r4, lr}
 800fb38:	4604      	mov	r4, r0
 800fb3a:	e9c0 3300 	strd	r3, r3, [r0]
 800fb3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb42:	6083      	str	r3, [r0, #8]
 800fb44:	8181      	strh	r1, [r0, #12]
 800fb46:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb48:	81c2      	strh	r2, [r0, #14]
 800fb4a:	6183      	str	r3, [r0, #24]
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	2208      	movs	r2, #8
 800fb50:	305c      	adds	r0, #92	@ 0x5c
 800fb52:	f000 fa19 	bl	800ff88 <memset>
 800fb56:	4b0d      	ldr	r3, [pc, #52]	@ (800fb8c <std+0x58>)
 800fb58:	6263      	str	r3, [r4, #36]	@ 0x24
 800fb5a:	4b0d      	ldr	r3, [pc, #52]	@ (800fb90 <std+0x5c>)
 800fb5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fb5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fb94 <std+0x60>)
 800fb60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fb62:	4b0d      	ldr	r3, [pc, #52]	@ (800fb98 <std+0x64>)
 800fb64:	6323      	str	r3, [r4, #48]	@ 0x30
 800fb66:	4b0d      	ldr	r3, [pc, #52]	@ (800fb9c <std+0x68>)
 800fb68:	6224      	str	r4, [r4, #32]
 800fb6a:	429c      	cmp	r4, r3
 800fb6c:	d006      	beq.n	800fb7c <std+0x48>
 800fb6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fb72:	4294      	cmp	r4, r2
 800fb74:	d002      	beq.n	800fb7c <std+0x48>
 800fb76:	33d0      	adds	r3, #208	@ 0xd0
 800fb78:	429c      	cmp	r4, r3
 800fb7a:	d105      	bne.n	800fb88 <std+0x54>
 800fb7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb84:	f000 ba86 	b.w	8010094 <__retarget_lock_init_recursive>
 800fb88:	bd10      	pop	{r4, pc}
 800fb8a:	bf00      	nop
 800fb8c:	0800fd99 	.word	0x0800fd99
 800fb90:	0800fdbb 	.word	0x0800fdbb
 800fb94:	0800fdf3 	.word	0x0800fdf3
 800fb98:	0800fe17 	.word	0x0800fe17
 800fb9c:	200130a0 	.word	0x200130a0

0800fba0 <stdio_exit_handler>:
 800fba0:	4a02      	ldr	r2, [pc, #8]	@ (800fbac <stdio_exit_handler+0xc>)
 800fba2:	4903      	ldr	r1, [pc, #12]	@ (800fbb0 <stdio_exit_handler+0x10>)
 800fba4:	4803      	ldr	r0, [pc, #12]	@ (800fbb4 <stdio_exit_handler+0x14>)
 800fba6:	f000 b869 	b.w	800fc7c <_fwalk_sglue>
 800fbaa:	bf00      	nop
 800fbac:	20000018 	.word	0x20000018
 800fbb0:	08010bfd 	.word	0x08010bfd
 800fbb4:	20000028 	.word	0x20000028

0800fbb8 <cleanup_stdio>:
 800fbb8:	6841      	ldr	r1, [r0, #4]
 800fbba:	4b0c      	ldr	r3, [pc, #48]	@ (800fbec <cleanup_stdio+0x34>)
 800fbbc:	4299      	cmp	r1, r3
 800fbbe:	b510      	push	{r4, lr}
 800fbc0:	4604      	mov	r4, r0
 800fbc2:	d001      	beq.n	800fbc8 <cleanup_stdio+0x10>
 800fbc4:	f001 f81a 	bl	8010bfc <_fflush_r>
 800fbc8:	68a1      	ldr	r1, [r4, #8]
 800fbca:	4b09      	ldr	r3, [pc, #36]	@ (800fbf0 <cleanup_stdio+0x38>)
 800fbcc:	4299      	cmp	r1, r3
 800fbce:	d002      	beq.n	800fbd6 <cleanup_stdio+0x1e>
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f001 f813 	bl	8010bfc <_fflush_r>
 800fbd6:	68e1      	ldr	r1, [r4, #12]
 800fbd8:	4b06      	ldr	r3, [pc, #24]	@ (800fbf4 <cleanup_stdio+0x3c>)
 800fbda:	4299      	cmp	r1, r3
 800fbdc:	d004      	beq.n	800fbe8 <cleanup_stdio+0x30>
 800fbde:	4620      	mov	r0, r4
 800fbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbe4:	f001 b80a 	b.w	8010bfc <_fflush_r>
 800fbe8:	bd10      	pop	{r4, pc}
 800fbea:	bf00      	nop
 800fbec:	200130a0 	.word	0x200130a0
 800fbf0:	20013108 	.word	0x20013108
 800fbf4:	20013170 	.word	0x20013170

0800fbf8 <global_stdio_init.part.0>:
 800fbf8:	b510      	push	{r4, lr}
 800fbfa:	4b0b      	ldr	r3, [pc, #44]	@ (800fc28 <global_stdio_init.part.0+0x30>)
 800fbfc:	4c0b      	ldr	r4, [pc, #44]	@ (800fc2c <global_stdio_init.part.0+0x34>)
 800fbfe:	4a0c      	ldr	r2, [pc, #48]	@ (800fc30 <global_stdio_init.part.0+0x38>)
 800fc00:	601a      	str	r2, [r3, #0]
 800fc02:	4620      	mov	r0, r4
 800fc04:	2200      	movs	r2, #0
 800fc06:	2104      	movs	r1, #4
 800fc08:	f7ff ff94 	bl	800fb34 <std>
 800fc0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fc10:	2201      	movs	r2, #1
 800fc12:	2109      	movs	r1, #9
 800fc14:	f7ff ff8e 	bl	800fb34 <std>
 800fc18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc1c:	2202      	movs	r2, #2
 800fc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc22:	2112      	movs	r1, #18
 800fc24:	f7ff bf86 	b.w	800fb34 <std>
 800fc28:	200131d8 	.word	0x200131d8
 800fc2c:	200130a0 	.word	0x200130a0
 800fc30:	0800fba1 	.word	0x0800fba1

0800fc34 <__sfp_lock_acquire>:
 800fc34:	4801      	ldr	r0, [pc, #4]	@ (800fc3c <__sfp_lock_acquire+0x8>)
 800fc36:	f000 ba2e 	b.w	8010096 <__retarget_lock_acquire_recursive>
 800fc3a:	bf00      	nop
 800fc3c:	200131e1 	.word	0x200131e1

0800fc40 <__sfp_lock_release>:
 800fc40:	4801      	ldr	r0, [pc, #4]	@ (800fc48 <__sfp_lock_release+0x8>)
 800fc42:	f000 ba29 	b.w	8010098 <__retarget_lock_release_recursive>
 800fc46:	bf00      	nop
 800fc48:	200131e1 	.word	0x200131e1

0800fc4c <__sinit>:
 800fc4c:	b510      	push	{r4, lr}
 800fc4e:	4604      	mov	r4, r0
 800fc50:	f7ff fff0 	bl	800fc34 <__sfp_lock_acquire>
 800fc54:	6a23      	ldr	r3, [r4, #32]
 800fc56:	b11b      	cbz	r3, 800fc60 <__sinit+0x14>
 800fc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc5c:	f7ff bff0 	b.w	800fc40 <__sfp_lock_release>
 800fc60:	4b04      	ldr	r3, [pc, #16]	@ (800fc74 <__sinit+0x28>)
 800fc62:	6223      	str	r3, [r4, #32]
 800fc64:	4b04      	ldr	r3, [pc, #16]	@ (800fc78 <__sinit+0x2c>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d1f5      	bne.n	800fc58 <__sinit+0xc>
 800fc6c:	f7ff ffc4 	bl	800fbf8 <global_stdio_init.part.0>
 800fc70:	e7f2      	b.n	800fc58 <__sinit+0xc>
 800fc72:	bf00      	nop
 800fc74:	0800fbb9 	.word	0x0800fbb9
 800fc78:	200131d8 	.word	0x200131d8

0800fc7c <_fwalk_sglue>:
 800fc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc80:	4607      	mov	r7, r0
 800fc82:	4688      	mov	r8, r1
 800fc84:	4614      	mov	r4, r2
 800fc86:	2600      	movs	r6, #0
 800fc88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc8c:	f1b9 0901 	subs.w	r9, r9, #1
 800fc90:	d505      	bpl.n	800fc9e <_fwalk_sglue+0x22>
 800fc92:	6824      	ldr	r4, [r4, #0]
 800fc94:	2c00      	cmp	r4, #0
 800fc96:	d1f7      	bne.n	800fc88 <_fwalk_sglue+0xc>
 800fc98:	4630      	mov	r0, r6
 800fc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc9e:	89ab      	ldrh	r3, [r5, #12]
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d907      	bls.n	800fcb4 <_fwalk_sglue+0x38>
 800fca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	d003      	beq.n	800fcb4 <_fwalk_sglue+0x38>
 800fcac:	4629      	mov	r1, r5
 800fcae:	4638      	mov	r0, r7
 800fcb0:	47c0      	blx	r8
 800fcb2:	4306      	orrs	r6, r0
 800fcb4:	3568      	adds	r5, #104	@ 0x68
 800fcb6:	e7e9      	b.n	800fc8c <_fwalk_sglue+0x10>

0800fcb8 <iprintf>:
 800fcb8:	b40f      	push	{r0, r1, r2, r3}
 800fcba:	b507      	push	{r0, r1, r2, lr}
 800fcbc:	4906      	ldr	r1, [pc, #24]	@ (800fcd8 <iprintf+0x20>)
 800fcbe:	ab04      	add	r3, sp, #16
 800fcc0:	6808      	ldr	r0, [r1, #0]
 800fcc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc6:	6881      	ldr	r1, [r0, #8]
 800fcc8:	9301      	str	r3, [sp, #4]
 800fcca:	f000 fc6f 	bl	80105ac <_vfiprintf_r>
 800fcce:	b003      	add	sp, #12
 800fcd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcd4:	b004      	add	sp, #16
 800fcd6:	4770      	bx	lr
 800fcd8:	20000024 	.word	0x20000024

0800fcdc <_puts_r>:
 800fcdc:	6a03      	ldr	r3, [r0, #32]
 800fcde:	b570      	push	{r4, r5, r6, lr}
 800fce0:	6884      	ldr	r4, [r0, #8]
 800fce2:	4605      	mov	r5, r0
 800fce4:	460e      	mov	r6, r1
 800fce6:	b90b      	cbnz	r3, 800fcec <_puts_r+0x10>
 800fce8:	f7ff ffb0 	bl	800fc4c <__sinit>
 800fcec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fcee:	07db      	lsls	r3, r3, #31
 800fcf0:	d405      	bmi.n	800fcfe <_puts_r+0x22>
 800fcf2:	89a3      	ldrh	r3, [r4, #12]
 800fcf4:	0598      	lsls	r0, r3, #22
 800fcf6:	d402      	bmi.n	800fcfe <_puts_r+0x22>
 800fcf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fcfa:	f000 f9cc 	bl	8010096 <__retarget_lock_acquire_recursive>
 800fcfe:	89a3      	ldrh	r3, [r4, #12]
 800fd00:	0719      	lsls	r1, r3, #28
 800fd02:	d502      	bpl.n	800fd0a <_puts_r+0x2e>
 800fd04:	6923      	ldr	r3, [r4, #16]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d135      	bne.n	800fd76 <_puts_r+0x9a>
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	f000 f8e5 	bl	800fedc <__swsetup_r>
 800fd12:	b380      	cbz	r0, 800fd76 <_puts_r+0x9a>
 800fd14:	f04f 35ff 	mov.w	r5, #4294967295
 800fd18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd1a:	07da      	lsls	r2, r3, #31
 800fd1c:	d405      	bmi.n	800fd2a <_puts_r+0x4e>
 800fd1e:	89a3      	ldrh	r3, [r4, #12]
 800fd20:	059b      	lsls	r3, r3, #22
 800fd22:	d402      	bmi.n	800fd2a <_puts_r+0x4e>
 800fd24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd26:	f000 f9b7 	bl	8010098 <__retarget_lock_release_recursive>
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	bd70      	pop	{r4, r5, r6, pc}
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	da04      	bge.n	800fd3c <_puts_r+0x60>
 800fd32:	69a2      	ldr	r2, [r4, #24]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	dc17      	bgt.n	800fd68 <_puts_r+0x8c>
 800fd38:	290a      	cmp	r1, #10
 800fd3a:	d015      	beq.n	800fd68 <_puts_r+0x8c>
 800fd3c:	6823      	ldr	r3, [r4, #0]
 800fd3e:	1c5a      	adds	r2, r3, #1
 800fd40:	6022      	str	r2, [r4, #0]
 800fd42:	7019      	strb	r1, [r3, #0]
 800fd44:	68a3      	ldr	r3, [r4, #8]
 800fd46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	60a3      	str	r3, [r4, #8]
 800fd4e:	2900      	cmp	r1, #0
 800fd50:	d1ed      	bne.n	800fd2e <_puts_r+0x52>
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	da11      	bge.n	800fd7a <_puts_r+0x9e>
 800fd56:	4622      	mov	r2, r4
 800fd58:	210a      	movs	r1, #10
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	f000 f880 	bl	800fe60 <__swbuf_r>
 800fd60:	3001      	adds	r0, #1
 800fd62:	d0d7      	beq.n	800fd14 <_puts_r+0x38>
 800fd64:	250a      	movs	r5, #10
 800fd66:	e7d7      	b.n	800fd18 <_puts_r+0x3c>
 800fd68:	4622      	mov	r2, r4
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	f000 f878 	bl	800fe60 <__swbuf_r>
 800fd70:	3001      	adds	r0, #1
 800fd72:	d1e7      	bne.n	800fd44 <_puts_r+0x68>
 800fd74:	e7ce      	b.n	800fd14 <_puts_r+0x38>
 800fd76:	3e01      	subs	r6, #1
 800fd78:	e7e4      	b.n	800fd44 <_puts_r+0x68>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	1c5a      	adds	r2, r3, #1
 800fd7e:	6022      	str	r2, [r4, #0]
 800fd80:	220a      	movs	r2, #10
 800fd82:	701a      	strb	r2, [r3, #0]
 800fd84:	e7ee      	b.n	800fd64 <_puts_r+0x88>
	...

0800fd88 <puts>:
 800fd88:	4b02      	ldr	r3, [pc, #8]	@ (800fd94 <puts+0xc>)
 800fd8a:	4601      	mov	r1, r0
 800fd8c:	6818      	ldr	r0, [r3, #0]
 800fd8e:	f7ff bfa5 	b.w	800fcdc <_puts_r>
 800fd92:	bf00      	nop
 800fd94:	20000024 	.word	0x20000024

0800fd98 <__sread>:
 800fd98:	b510      	push	{r4, lr}
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fda0:	f000 f930 	bl	8010004 <_read_r>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	bfab      	itete	ge
 800fda8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fdaa:	89a3      	ldrhlt	r3, [r4, #12]
 800fdac:	181b      	addge	r3, r3, r0
 800fdae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fdb2:	bfac      	ite	ge
 800fdb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fdb6:	81a3      	strhlt	r3, [r4, #12]
 800fdb8:	bd10      	pop	{r4, pc}

0800fdba <__swrite>:
 800fdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdbe:	461f      	mov	r7, r3
 800fdc0:	898b      	ldrh	r3, [r1, #12]
 800fdc2:	05db      	lsls	r3, r3, #23
 800fdc4:	4605      	mov	r5, r0
 800fdc6:	460c      	mov	r4, r1
 800fdc8:	4616      	mov	r6, r2
 800fdca:	d505      	bpl.n	800fdd8 <__swrite+0x1e>
 800fdcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdd0:	2302      	movs	r3, #2
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f000 f904 	bl	800ffe0 <_lseek_r>
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fde2:	81a3      	strh	r3, [r4, #12]
 800fde4:	4632      	mov	r2, r6
 800fde6:	463b      	mov	r3, r7
 800fde8:	4628      	mov	r0, r5
 800fdea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdee:	f000 b91b 	b.w	8010028 <_write_r>

0800fdf2 <__sseek>:
 800fdf2:	b510      	push	{r4, lr}
 800fdf4:	460c      	mov	r4, r1
 800fdf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdfa:	f000 f8f1 	bl	800ffe0 <_lseek_r>
 800fdfe:	1c43      	adds	r3, r0, #1
 800fe00:	89a3      	ldrh	r3, [r4, #12]
 800fe02:	bf15      	itete	ne
 800fe04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fe06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fe0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fe0e:	81a3      	strheq	r3, [r4, #12]
 800fe10:	bf18      	it	ne
 800fe12:	81a3      	strhne	r3, [r4, #12]
 800fe14:	bd10      	pop	{r4, pc}

0800fe16 <__sclose>:
 800fe16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe1a:	f000 b8d1 	b.w	800ffc0 <_close_r>
	...

0800fe20 <_vsiprintf_r>:
 800fe20:	b510      	push	{r4, lr}
 800fe22:	b09a      	sub	sp, #104	@ 0x68
 800fe24:	2400      	movs	r4, #0
 800fe26:	9100      	str	r1, [sp, #0]
 800fe28:	9104      	str	r1, [sp, #16]
 800fe2a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe2e:	9105      	str	r1, [sp, #20]
 800fe30:	9102      	str	r1, [sp, #8]
 800fe32:	4905      	ldr	r1, [pc, #20]	@ (800fe48 <_vsiprintf_r+0x28>)
 800fe34:	9103      	str	r1, [sp, #12]
 800fe36:	4669      	mov	r1, sp
 800fe38:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe3a:	f000 fa91 	bl	8010360 <_svfiprintf_r>
 800fe3e:	9b00      	ldr	r3, [sp, #0]
 800fe40:	701c      	strb	r4, [r3, #0]
 800fe42:	b01a      	add	sp, #104	@ 0x68
 800fe44:	bd10      	pop	{r4, pc}
 800fe46:	bf00      	nop
 800fe48:	ffff0208 	.word	0xffff0208

0800fe4c <vsiprintf>:
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	460a      	mov	r2, r1
 800fe50:	4601      	mov	r1, r0
 800fe52:	4802      	ldr	r0, [pc, #8]	@ (800fe5c <vsiprintf+0x10>)
 800fe54:	6800      	ldr	r0, [r0, #0]
 800fe56:	f7ff bfe3 	b.w	800fe20 <_vsiprintf_r>
 800fe5a:	bf00      	nop
 800fe5c:	20000024 	.word	0x20000024

0800fe60 <__swbuf_r>:
 800fe60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe62:	460e      	mov	r6, r1
 800fe64:	4614      	mov	r4, r2
 800fe66:	4605      	mov	r5, r0
 800fe68:	b118      	cbz	r0, 800fe72 <__swbuf_r+0x12>
 800fe6a:	6a03      	ldr	r3, [r0, #32]
 800fe6c:	b90b      	cbnz	r3, 800fe72 <__swbuf_r+0x12>
 800fe6e:	f7ff feed 	bl	800fc4c <__sinit>
 800fe72:	69a3      	ldr	r3, [r4, #24]
 800fe74:	60a3      	str	r3, [r4, #8]
 800fe76:	89a3      	ldrh	r3, [r4, #12]
 800fe78:	071a      	lsls	r2, r3, #28
 800fe7a:	d501      	bpl.n	800fe80 <__swbuf_r+0x20>
 800fe7c:	6923      	ldr	r3, [r4, #16]
 800fe7e:	b943      	cbnz	r3, 800fe92 <__swbuf_r+0x32>
 800fe80:	4621      	mov	r1, r4
 800fe82:	4628      	mov	r0, r5
 800fe84:	f000 f82a 	bl	800fedc <__swsetup_r>
 800fe88:	b118      	cbz	r0, 800fe92 <__swbuf_r+0x32>
 800fe8a:	f04f 37ff 	mov.w	r7, #4294967295
 800fe8e:	4638      	mov	r0, r7
 800fe90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe92:	6823      	ldr	r3, [r4, #0]
 800fe94:	6922      	ldr	r2, [r4, #16]
 800fe96:	1a98      	subs	r0, r3, r2
 800fe98:	6963      	ldr	r3, [r4, #20]
 800fe9a:	b2f6      	uxtb	r6, r6
 800fe9c:	4283      	cmp	r3, r0
 800fe9e:	4637      	mov	r7, r6
 800fea0:	dc05      	bgt.n	800feae <__swbuf_r+0x4e>
 800fea2:	4621      	mov	r1, r4
 800fea4:	4628      	mov	r0, r5
 800fea6:	f000 fea9 	bl	8010bfc <_fflush_r>
 800feaa:	2800      	cmp	r0, #0
 800feac:	d1ed      	bne.n	800fe8a <__swbuf_r+0x2a>
 800feae:	68a3      	ldr	r3, [r4, #8]
 800feb0:	3b01      	subs	r3, #1
 800feb2:	60a3      	str	r3, [r4, #8]
 800feb4:	6823      	ldr	r3, [r4, #0]
 800feb6:	1c5a      	adds	r2, r3, #1
 800feb8:	6022      	str	r2, [r4, #0]
 800feba:	701e      	strb	r6, [r3, #0]
 800febc:	6962      	ldr	r2, [r4, #20]
 800febe:	1c43      	adds	r3, r0, #1
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d004      	beq.n	800fece <__swbuf_r+0x6e>
 800fec4:	89a3      	ldrh	r3, [r4, #12]
 800fec6:	07db      	lsls	r3, r3, #31
 800fec8:	d5e1      	bpl.n	800fe8e <__swbuf_r+0x2e>
 800feca:	2e0a      	cmp	r6, #10
 800fecc:	d1df      	bne.n	800fe8e <__swbuf_r+0x2e>
 800fece:	4621      	mov	r1, r4
 800fed0:	4628      	mov	r0, r5
 800fed2:	f000 fe93 	bl	8010bfc <_fflush_r>
 800fed6:	2800      	cmp	r0, #0
 800fed8:	d0d9      	beq.n	800fe8e <__swbuf_r+0x2e>
 800feda:	e7d6      	b.n	800fe8a <__swbuf_r+0x2a>

0800fedc <__swsetup_r>:
 800fedc:	b538      	push	{r3, r4, r5, lr}
 800fede:	4b29      	ldr	r3, [pc, #164]	@ (800ff84 <__swsetup_r+0xa8>)
 800fee0:	4605      	mov	r5, r0
 800fee2:	6818      	ldr	r0, [r3, #0]
 800fee4:	460c      	mov	r4, r1
 800fee6:	b118      	cbz	r0, 800fef0 <__swsetup_r+0x14>
 800fee8:	6a03      	ldr	r3, [r0, #32]
 800feea:	b90b      	cbnz	r3, 800fef0 <__swsetup_r+0x14>
 800feec:	f7ff feae 	bl	800fc4c <__sinit>
 800fef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fef4:	0719      	lsls	r1, r3, #28
 800fef6:	d422      	bmi.n	800ff3e <__swsetup_r+0x62>
 800fef8:	06da      	lsls	r2, r3, #27
 800fefa:	d407      	bmi.n	800ff0c <__swsetup_r+0x30>
 800fefc:	2209      	movs	r2, #9
 800fefe:	602a      	str	r2, [r5, #0]
 800ff00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff04:	81a3      	strh	r3, [r4, #12]
 800ff06:	f04f 30ff 	mov.w	r0, #4294967295
 800ff0a:	e033      	b.n	800ff74 <__swsetup_r+0x98>
 800ff0c:	0758      	lsls	r0, r3, #29
 800ff0e:	d512      	bpl.n	800ff36 <__swsetup_r+0x5a>
 800ff10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff12:	b141      	cbz	r1, 800ff26 <__swsetup_r+0x4a>
 800ff14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff18:	4299      	cmp	r1, r3
 800ff1a:	d002      	beq.n	800ff22 <__swsetup_r+0x46>
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	f000 f8cb 	bl	80100b8 <_free_r>
 800ff22:	2300      	movs	r3, #0
 800ff24:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff26:	89a3      	ldrh	r3, [r4, #12]
 800ff28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ff2c:	81a3      	strh	r3, [r4, #12]
 800ff2e:	2300      	movs	r3, #0
 800ff30:	6063      	str	r3, [r4, #4]
 800ff32:	6923      	ldr	r3, [r4, #16]
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	89a3      	ldrh	r3, [r4, #12]
 800ff38:	f043 0308 	orr.w	r3, r3, #8
 800ff3c:	81a3      	strh	r3, [r4, #12]
 800ff3e:	6923      	ldr	r3, [r4, #16]
 800ff40:	b94b      	cbnz	r3, 800ff56 <__swsetup_r+0x7a>
 800ff42:	89a3      	ldrh	r3, [r4, #12]
 800ff44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ff48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff4c:	d003      	beq.n	800ff56 <__swsetup_r+0x7a>
 800ff4e:	4621      	mov	r1, r4
 800ff50:	4628      	mov	r0, r5
 800ff52:	f000 fea1 	bl	8010c98 <__smakebuf_r>
 800ff56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff5a:	f013 0201 	ands.w	r2, r3, #1
 800ff5e:	d00a      	beq.n	800ff76 <__swsetup_r+0x9a>
 800ff60:	2200      	movs	r2, #0
 800ff62:	60a2      	str	r2, [r4, #8]
 800ff64:	6962      	ldr	r2, [r4, #20]
 800ff66:	4252      	negs	r2, r2
 800ff68:	61a2      	str	r2, [r4, #24]
 800ff6a:	6922      	ldr	r2, [r4, #16]
 800ff6c:	b942      	cbnz	r2, 800ff80 <__swsetup_r+0xa4>
 800ff6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff72:	d1c5      	bne.n	800ff00 <__swsetup_r+0x24>
 800ff74:	bd38      	pop	{r3, r4, r5, pc}
 800ff76:	0799      	lsls	r1, r3, #30
 800ff78:	bf58      	it	pl
 800ff7a:	6962      	ldrpl	r2, [r4, #20]
 800ff7c:	60a2      	str	r2, [r4, #8]
 800ff7e:	e7f4      	b.n	800ff6a <__swsetup_r+0x8e>
 800ff80:	2000      	movs	r0, #0
 800ff82:	e7f7      	b.n	800ff74 <__swsetup_r+0x98>
 800ff84:	20000024 	.word	0x20000024

0800ff88 <memset>:
 800ff88:	4402      	add	r2, r0
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d100      	bne.n	800ff92 <memset+0xa>
 800ff90:	4770      	bx	lr
 800ff92:	f803 1b01 	strb.w	r1, [r3], #1
 800ff96:	e7f9      	b.n	800ff8c <memset+0x4>

0800ff98 <strncpy>:
 800ff98:	b510      	push	{r4, lr}
 800ff9a:	3901      	subs	r1, #1
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	b132      	cbz	r2, 800ffae <strncpy+0x16>
 800ffa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ffa4:	f803 4b01 	strb.w	r4, [r3], #1
 800ffa8:	3a01      	subs	r2, #1
 800ffaa:	2c00      	cmp	r4, #0
 800ffac:	d1f7      	bne.n	800ff9e <strncpy+0x6>
 800ffae:	441a      	add	r2, r3
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d100      	bne.n	800ffb8 <strncpy+0x20>
 800ffb6:	bd10      	pop	{r4, pc}
 800ffb8:	f803 1b01 	strb.w	r1, [r3], #1
 800ffbc:	e7f9      	b.n	800ffb2 <strncpy+0x1a>
	...

0800ffc0 <_close_r>:
 800ffc0:	b538      	push	{r3, r4, r5, lr}
 800ffc2:	4d06      	ldr	r5, [pc, #24]	@ (800ffdc <_close_r+0x1c>)
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	4608      	mov	r0, r1
 800ffca:	602b      	str	r3, [r5, #0]
 800ffcc:	f7f9 fbb1 	bl	8009732 <_close>
 800ffd0:	1c43      	adds	r3, r0, #1
 800ffd2:	d102      	bne.n	800ffda <_close_r+0x1a>
 800ffd4:	682b      	ldr	r3, [r5, #0]
 800ffd6:	b103      	cbz	r3, 800ffda <_close_r+0x1a>
 800ffd8:	6023      	str	r3, [r4, #0]
 800ffda:	bd38      	pop	{r3, r4, r5, pc}
 800ffdc:	200131dc 	.word	0x200131dc

0800ffe0 <_lseek_r>:
 800ffe0:	b538      	push	{r3, r4, r5, lr}
 800ffe2:	4d07      	ldr	r5, [pc, #28]	@ (8010000 <_lseek_r+0x20>)
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	4608      	mov	r0, r1
 800ffe8:	4611      	mov	r1, r2
 800ffea:	2200      	movs	r2, #0
 800ffec:	602a      	str	r2, [r5, #0]
 800ffee:	461a      	mov	r2, r3
 800fff0:	f7f9 fbc6 	bl	8009780 <_lseek>
 800fff4:	1c43      	adds	r3, r0, #1
 800fff6:	d102      	bne.n	800fffe <_lseek_r+0x1e>
 800fff8:	682b      	ldr	r3, [r5, #0]
 800fffa:	b103      	cbz	r3, 800fffe <_lseek_r+0x1e>
 800fffc:	6023      	str	r3, [r4, #0]
 800fffe:	bd38      	pop	{r3, r4, r5, pc}
 8010000:	200131dc 	.word	0x200131dc

08010004 <_read_r>:
 8010004:	b538      	push	{r3, r4, r5, lr}
 8010006:	4d07      	ldr	r5, [pc, #28]	@ (8010024 <_read_r+0x20>)
 8010008:	4604      	mov	r4, r0
 801000a:	4608      	mov	r0, r1
 801000c:	4611      	mov	r1, r2
 801000e:	2200      	movs	r2, #0
 8010010:	602a      	str	r2, [r5, #0]
 8010012:	461a      	mov	r2, r3
 8010014:	f7f9 fb54 	bl	80096c0 <_read>
 8010018:	1c43      	adds	r3, r0, #1
 801001a:	d102      	bne.n	8010022 <_read_r+0x1e>
 801001c:	682b      	ldr	r3, [r5, #0]
 801001e:	b103      	cbz	r3, 8010022 <_read_r+0x1e>
 8010020:	6023      	str	r3, [r4, #0]
 8010022:	bd38      	pop	{r3, r4, r5, pc}
 8010024:	200131dc 	.word	0x200131dc

08010028 <_write_r>:
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	4d07      	ldr	r5, [pc, #28]	@ (8010048 <_write_r+0x20>)
 801002c:	4604      	mov	r4, r0
 801002e:	4608      	mov	r0, r1
 8010030:	4611      	mov	r1, r2
 8010032:	2200      	movs	r2, #0
 8010034:	602a      	str	r2, [r5, #0]
 8010036:	461a      	mov	r2, r3
 8010038:	f7f9 fb5f 	bl	80096fa <_write>
 801003c:	1c43      	adds	r3, r0, #1
 801003e:	d102      	bne.n	8010046 <_write_r+0x1e>
 8010040:	682b      	ldr	r3, [r5, #0]
 8010042:	b103      	cbz	r3, 8010046 <_write_r+0x1e>
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	bd38      	pop	{r3, r4, r5, pc}
 8010048:	200131dc 	.word	0x200131dc

0801004c <__libc_init_array>:
 801004c:	b570      	push	{r4, r5, r6, lr}
 801004e:	4d0d      	ldr	r5, [pc, #52]	@ (8010084 <__libc_init_array+0x38>)
 8010050:	4c0d      	ldr	r4, [pc, #52]	@ (8010088 <__libc_init_array+0x3c>)
 8010052:	1b64      	subs	r4, r4, r5
 8010054:	10a4      	asrs	r4, r4, #2
 8010056:	2600      	movs	r6, #0
 8010058:	42a6      	cmp	r6, r4
 801005a:	d109      	bne.n	8010070 <__libc_init_array+0x24>
 801005c:	4d0b      	ldr	r5, [pc, #44]	@ (801008c <__libc_init_array+0x40>)
 801005e:	4c0c      	ldr	r4, [pc, #48]	@ (8010090 <__libc_init_array+0x44>)
 8010060:	f000 fee6 	bl	8010e30 <_init>
 8010064:	1b64      	subs	r4, r4, r5
 8010066:	10a4      	asrs	r4, r4, #2
 8010068:	2600      	movs	r6, #0
 801006a:	42a6      	cmp	r6, r4
 801006c:	d105      	bne.n	801007a <__libc_init_array+0x2e>
 801006e:	bd70      	pop	{r4, r5, r6, pc}
 8010070:	f855 3b04 	ldr.w	r3, [r5], #4
 8010074:	4798      	blx	r3
 8010076:	3601      	adds	r6, #1
 8010078:	e7ee      	b.n	8010058 <__libc_init_array+0xc>
 801007a:	f855 3b04 	ldr.w	r3, [r5], #4
 801007e:	4798      	blx	r3
 8010080:	3601      	adds	r6, #1
 8010082:	e7f2      	b.n	801006a <__libc_init_array+0x1e>
 8010084:	08011880 	.word	0x08011880
 8010088:	08011880 	.word	0x08011880
 801008c:	08011880 	.word	0x08011880
 8010090:	08011884 	.word	0x08011884

08010094 <__retarget_lock_init_recursive>:
 8010094:	4770      	bx	lr

08010096 <__retarget_lock_acquire_recursive>:
 8010096:	4770      	bx	lr

08010098 <__retarget_lock_release_recursive>:
 8010098:	4770      	bx	lr

0801009a <memcpy>:
 801009a:	440a      	add	r2, r1
 801009c:	4291      	cmp	r1, r2
 801009e:	f100 33ff 	add.w	r3, r0, #4294967295
 80100a2:	d100      	bne.n	80100a6 <memcpy+0xc>
 80100a4:	4770      	bx	lr
 80100a6:	b510      	push	{r4, lr}
 80100a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100b0:	4291      	cmp	r1, r2
 80100b2:	d1f9      	bne.n	80100a8 <memcpy+0xe>
 80100b4:	bd10      	pop	{r4, pc}
	...

080100b8 <_free_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4605      	mov	r5, r0
 80100bc:	2900      	cmp	r1, #0
 80100be:	d041      	beq.n	8010144 <_free_r+0x8c>
 80100c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100c4:	1f0c      	subs	r4, r1, #4
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	bfb8      	it	lt
 80100ca:	18e4      	addlt	r4, r4, r3
 80100cc:	f000 f8e0 	bl	8010290 <__malloc_lock>
 80100d0:	4a1d      	ldr	r2, [pc, #116]	@ (8010148 <_free_r+0x90>)
 80100d2:	6813      	ldr	r3, [r2, #0]
 80100d4:	b933      	cbnz	r3, 80100e4 <_free_r+0x2c>
 80100d6:	6063      	str	r3, [r4, #4]
 80100d8:	6014      	str	r4, [r2, #0]
 80100da:	4628      	mov	r0, r5
 80100dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100e0:	f000 b8dc 	b.w	801029c <__malloc_unlock>
 80100e4:	42a3      	cmp	r3, r4
 80100e6:	d908      	bls.n	80100fa <_free_r+0x42>
 80100e8:	6820      	ldr	r0, [r4, #0]
 80100ea:	1821      	adds	r1, r4, r0
 80100ec:	428b      	cmp	r3, r1
 80100ee:	bf01      	itttt	eq
 80100f0:	6819      	ldreq	r1, [r3, #0]
 80100f2:	685b      	ldreq	r3, [r3, #4]
 80100f4:	1809      	addeq	r1, r1, r0
 80100f6:	6021      	streq	r1, [r4, #0]
 80100f8:	e7ed      	b.n	80100d6 <_free_r+0x1e>
 80100fa:	461a      	mov	r2, r3
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	b10b      	cbz	r3, 8010104 <_free_r+0x4c>
 8010100:	42a3      	cmp	r3, r4
 8010102:	d9fa      	bls.n	80100fa <_free_r+0x42>
 8010104:	6811      	ldr	r1, [r2, #0]
 8010106:	1850      	adds	r0, r2, r1
 8010108:	42a0      	cmp	r0, r4
 801010a:	d10b      	bne.n	8010124 <_free_r+0x6c>
 801010c:	6820      	ldr	r0, [r4, #0]
 801010e:	4401      	add	r1, r0
 8010110:	1850      	adds	r0, r2, r1
 8010112:	4283      	cmp	r3, r0
 8010114:	6011      	str	r1, [r2, #0]
 8010116:	d1e0      	bne.n	80100da <_free_r+0x22>
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	6053      	str	r3, [r2, #4]
 801011e:	4408      	add	r0, r1
 8010120:	6010      	str	r0, [r2, #0]
 8010122:	e7da      	b.n	80100da <_free_r+0x22>
 8010124:	d902      	bls.n	801012c <_free_r+0x74>
 8010126:	230c      	movs	r3, #12
 8010128:	602b      	str	r3, [r5, #0]
 801012a:	e7d6      	b.n	80100da <_free_r+0x22>
 801012c:	6820      	ldr	r0, [r4, #0]
 801012e:	1821      	adds	r1, r4, r0
 8010130:	428b      	cmp	r3, r1
 8010132:	bf04      	itt	eq
 8010134:	6819      	ldreq	r1, [r3, #0]
 8010136:	685b      	ldreq	r3, [r3, #4]
 8010138:	6063      	str	r3, [r4, #4]
 801013a:	bf04      	itt	eq
 801013c:	1809      	addeq	r1, r1, r0
 801013e:	6021      	streq	r1, [r4, #0]
 8010140:	6054      	str	r4, [r2, #4]
 8010142:	e7ca      	b.n	80100da <_free_r+0x22>
 8010144:	bd38      	pop	{r3, r4, r5, pc}
 8010146:	bf00      	nop
 8010148:	200131e8 	.word	0x200131e8

0801014c <sbrk_aligned>:
 801014c:	b570      	push	{r4, r5, r6, lr}
 801014e:	4e0f      	ldr	r6, [pc, #60]	@ (801018c <sbrk_aligned+0x40>)
 8010150:	460c      	mov	r4, r1
 8010152:	6831      	ldr	r1, [r6, #0]
 8010154:	4605      	mov	r5, r0
 8010156:	b911      	cbnz	r1, 801015e <sbrk_aligned+0x12>
 8010158:	f000 fe16 	bl	8010d88 <_sbrk_r>
 801015c:	6030      	str	r0, [r6, #0]
 801015e:	4621      	mov	r1, r4
 8010160:	4628      	mov	r0, r5
 8010162:	f000 fe11 	bl	8010d88 <_sbrk_r>
 8010166:	1c43      	adds	r3, r0, #1
 8010168:	d103      	bne.n	8010172 <sbrk_aligned+0x26>
 801016a:	f04f 34ff 	mov.w	r4, #4294967295
 801016e:	4620      	mov	r0, r4
 8010170:	bd70      	pop	{r4, r5, r6, pc}
 8010172:	1cc4      	adds	r4, r0, #3
 8010174:	f024 0403 	bic.w	r4, r4, #3
 8010178:	42a0      	cmp	r0, r4
 801017a:	d0f8      	beq.n	801016e <sbrk_aligned+0x22>
 801017c:	1a21      	subs	r1, r4, r0
 801017e:	4628      	mov	r0, r5
 8010180:	f000 fe02 	bl	8010d88 <_sbrk_r>
 8010184:	3001      	adds	r0, #1
 8010186:	d1f2      	bne.n	801016e <sbrk_aligned+0x22>
 8010188:	e7ef      	b.n	801016a <sbrk_aligned+0x1e>
 801018a:	bf00      	nop
 801018c:	200131e4 	.word	0x200131e4

08010190 <_malloc_r>:
 8010190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010194:	1ccd      	adds	r5, r1, #3
 8010196:	f025 0503 	bic.w	r5, r5, #3
 801019a:	3508      	adds	r5, #8
 801019c:	2d0c      	cmp	r5, #12
 801019e:	bf38      	it	cc
 80101a0:	250c      	movcc	r5, #12
 80101a2:	2d00      	cmp	r5, #0
 80101a4:	4606      	mov	r6, r0
 80101a6:	db01      	blt.n	80101ac <_malloc_r+0x1c>
 80101a8:	42a9      	cmp	r1, r5
 80101aa:	d904      	bls.n	80101b6 <_malloc_r+0x26>
 80101ac:	230c      	movs	r3, #12
 80101ae:	6033      	str	r3, [r6, #0]
 80101b0:	2000      	movs	r0, #0
 80101b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801028c <_malloc_r+0xfc>
 80101ba:	f000 f869 	bl	8010290 <__malloc_lock>
 80101be:	f8d8 3000 	ldr.w	r3, [r8]
 80101c2:	461c      	mov	r4, r3
 80101c4:	bb44      	cbnz	r4, 8010218 <_malloc_r+0x88>
 80101c6:	4629      	mov	r1, r5
 80101c8:	4630      	mov	r0, r6
 80101ca:	f7ff ffbf 	bl	801014c <sbrk_aligned>
 80101ce:	1c43      	adds	r3, r0, #1
 80101d0:	4604      	mov	r4, r0
 80101d2:	d158      	bne.n	8010286 <_malloc_r+0xf6>
 80101d4:	f8d8 4000 	ldr.w	r4, [r8]
 80101d8:	4627      	mov	r7, r4
 80101da:	2f00      	cmp	r7, #0
 80101dc:	d143      	bne.n	8010266 <_malloc_r+0xd6>
 80101de:	2c00      	cmp	r4, #0
 80101e0:	d04b      	beq.n	801027a <_malloc_r+0xea>
 80101e2:	6823      	ldr	r3, [r4, #0]
 80101e4:	4639      	mov	r1, r7
 80101e6:	4630      	mov	r0, r6
 80101e8:	eb04 0903 	add.w	r9, r4, r3
 80101ec:	f000 fdcc 	bl	8010d88 <_sbrk_r>
 80101f0:	4581      	cmp	r9, r0
 80101f2:	d142      	bne.n	801027a <_malloc_r+0xea>
 80101f4:	6821      	ldr	r1, [r4, #0]
 80101f6:	1a6d      	subs	r5, r5, r1
 80101f8:	4629      	mov	r1, r5
 80101fa:	4630      	mov	r0, r6
 80101fc:	f7ff ffa6 	bl	801014c <sbrk_aligned>
 8010200:	3001      	adds	r0, #1
 8010202:	d03a      	beq.n	801027a <_malloc_r+0xea>
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	442b      	add	r3, r5
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	f8d8 3000 	ldr.w	r3, [r8]
 801020e:	685a      	ldr	r2, [r3, #4]
 8010210:	bb62      	cbnz	r2, 801026c <_malloc_r+0xdc>
 8010212:	f8c8 7000 	str.w	r7, [r8]
 8010216:	e00f      	b.n	8010238 <_malloc_r+0xa8>
 8010218:	6822      	ldr	r2, [r4, #0]
 801021a:	1b52      	subs	r2, r2, r5
 801021c:	d420      	bmi.n	8010260 <_malloc_r+0xd0>
 801021e:	2a0b      	cmp	r2, #11
 8010220:	d917      	bls.n	8010252 <_malloc_r+0xc2>
 8010222:	1961      	adds	r1, r4, r5
 8010224:	42a3      	cmp	r3, r4
 8010226:	6025      	str	r5, [r4, #0]
 8010228:	bf18      	it	ne
 801022a:	6059      	strne	r1, [r3, #4]
 801022c:	6863      	ldr	r3, [r4, #4]
 801022e:	bf08      	it	eq
 8010230:	f8c8 1000 	streq.w	r1, [r8]
 8010234:	5162      	str	r2, [r4, r5]
 8010236:	604b      	str	r3, [r1, #4]
 8010238:	4630      	mov	r0, r6
 801023a:	f000 f82f 	bl	801029c <__malloc_unlock>
 801023e:	f104 000b 	add.w	r0, r4, #11
 8010242:	1d23      	adds	r3, r4, #4
 8010244:	f020 0007 	bic.w	r0, r0, #7
 8010248:	1ac2      	subs	r2, r0, r3
 801024a:	bf1c      	itt	ne
 801024c:	1a1b      	subne	r3, r3, r0
 801024e:	50a3      	strne	r3, [r4, r2]
 8010250:	e7af      	b.n	80101b2 <_malloc_r+0x22>
 8010252:	6862      	ldr	r2, [r4, #4]
 8010254:	42a3      	cmp	r3, r4
 8010256:	bf0c      	ite	eq
 8010258:	f8c8 2000 	streq.w	r2, [r8]
 801025c:	605a      	strne	r2, [r3, #4]
 801025e:	e7eb      	b.n	8010238 <_malloc_r+0xa8>
 8010260:	4623      	mov	r3, r4
 8010262:	6864      	ldr	r4, [r4, #4]
 8010264:	e7ae      	b.n	80101c4 <_malloc_r+0x34>
 8010266:	463c      	mov	r4, r7
 8010268:	687f      	ldr	r7, [r7, #4]
 801026a:	e7b6      	b.n	80101da <_malloc_r+0x4a>
 801026c:	461a      	mov	r2, r3
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	42a3      	cmp	r3, r4
 8010272:	d1fb      	bne.n	801026c <_malloc_r+0xdc>
 8010274:	2300      	movs	r3, #0
 8010276:	6053      	str	r3, [r2, #4]
 8010278:	e7de      	b.n	8010238 <_malloc_r+0xa8>
 801027a:	230c      	movs	r3, #12
 801027c:	6033      	str	r3, [r6, #0]
 801027e:	4630      	mov	r0, r6
 8010280:	f000 f80c 	bl	801029c <__malloc_unlock>
 8010284:	e794      	b.n	80101b0 <_malloc_r+0x20>
 8010286:	6005      	str	r5, [r0, #0]
 8010288:	e7d6      	b.n	8010238 <_malloc_r+0xa8>
 801028a:	bf00      	nop
 801028c:	200131e8 	.word	0x200131e8

08010290 <__malloc_lock>:
 8010290:	4801      	ldr	r0, [pc, #4]	@ (8010298 <__malloc_lock+0x8>)
 8010292:	f7ff bf00 	b.w	8010096 <__retarget_lock_acquire_recursive>
 8010296:	bf00      	nop
 8010298:	200131e0 	.word	0x200131e0

0801029c <__malloc_unlock>:
 801029c:	4801      	ldr	r0, [pc, #4]	@ (80102a4 <__malloc_unlock+0x8>)
 801029e:	f7ff befb 	b.w	8010098 <__retarget_lock_release_recursive>
 80102a2:	bf00      	nop
 80102a4:	200131e0 	.word	0x200131e0

080102a8 <__ssputs_r>:
 80102a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102ac:	688e      	ldr	r6, [r1, #8]
 80102ae:	461f      	mov	r7, r3
 80102b0:	42be      	cmp	r6, r7
 80102b2:	680b      	ldr	r3, [r1, #0]
 80102b4:	4682      	mov	sl, r0
 80102b6:	460c      	mov	r4, r1
 80102b8:	4690      	mov	r8, r2
 80102ba:	d82d      	bhi.n	8010318 <__ssputs_r+0x70>
 80102bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80102c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80102c4:	d026      	beq.n	8010314 <__ssputs_r+0x6c>
 80102c6:	6965      	ldr	r5, [r4, #20]
 80102c8:	6909      	ldr	r1, [r1, #16]
 80102ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102ce:	eba3 0901 	sub.w	r9, r3, r1
 80102d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102d6:	1c7b      	adds	r3, r7, #1
 80102d8:	444b      	add	r3, r9
 80102da:	106d      	asrs	r5, r5, #1
 80102dc:	429d      	cmp	r5, r3
 80102de:	bf38      	it	cc
 80102e0:	461d      	movcc	r5, r3
 80102e2:	0553      	lsls	r3, r2, #21
 80102e4:	d527      	bpl.n	8010336 <__ssputs_r+0x8e>
 80102e6:	4629      	mov	r1, r5
 80102e8:	f7ff ff52 	bl	8010190 <_malloc_r>
 80102ec:	4606      	mov	r6, r0
 80102ee:	b360      	cbz	r0, 801034a <__ssputs_r+0xa2>
 80102f0:	6921      	ldr	r1, [r4, #16]
 80102f2:	464a      	mov	r2, r9
 80102f4:	f7ff fed1 	bl	801009a <memcpy>
 80102f8:	89a3      	ldrh	r3, [r4, #12]
 80102fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80102fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010302:	81a3      	strh	r3, [r4, #12]
 8010304:	6126      	str	r6, [r4, #16]
 8010306:	6165      	str	r5, [r4, #20]
 8010308:	444e      	add	r6, r9
 801030a:	eba5 0509 	sub.w	r5, r5, r9
 801030e:	6026      	str	r6, [r4, #0]
 8010310:	60a5      	str	r5, [r4, #8]
 8010312:	463e      	mov	r6, r7
 8010314:	42be      	cmp	r6, r7
 8010316:	d900      	bls.n	801031a <__ssputs_r+0x72>
 8010318:	463e      	mov	r6, r7
 801031a:	6820      	ldr	r0, [r4, #0]
 801031c:	4632      	mov	r2, r6
 801031e:	4641      	mov	r1, r8
 8010320:	f000 fcf6 	bl	8010d10 <memmove>
 8010324:	68a3      	ldr	r3, [r4, #8]
 8010326:	1b9b      	subs	r3, r3, r6
 8010328:	60a3      	str	r3, [r4, #8]
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	4433      	add	r3, r6
 801032e:	6023      	str	r3, [r4, #0]
 8010330:	2000      	movs	r0, #0
 8010332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010336:	462a      	mov	r2, r5
 8010338:	f000 fd36 	bl	8010da8 <_realloc_r>
 801033c:	4606      	mov	r6, r0
 801033e:	2800      	cmp	r0, #0
 8010340:	d1e0      	bne.n	8010304 <__ssputs_r+0x5c>
 8010342:	6921      	ldr	r1, [r4, #16]
 8010344:	4650      	mov	r0, sl
 8010346:	f7ff feb7 	bl	80100b8 <_free_r>
 801034a:	230c      	movs	r3, #12
 801034c:	f8ca 3000 	str.w	r3, [sl]
 8010350:	89a3      	ldrh	r3, [r4, #12]
 8010352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010356:	81a3      	strh	r3, [r4, #12]
 8010358:	f04f 30ff 	mov.w	r0, #4294967295
 801035c:	e7e9      	b.n	8010332 <__ssputs_r+0x8a>
	...

08010360 <_svfiprintf_r>:
 8010360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010364:	4698      	mov	r8, r3
 8010366:	898b      	ldrh	r3, [r1, #12]
 8010368:	061b      	lsls	r3, r3, #24
 801036a:	b09d      	sub	sp, #116	@ 0x74
 801036c:	4607      	mov	r7, r0
 801036e:	460d      	mov	r5, r1
 8010370:	4614      	mov	r4, r2
 8010372:	d510      	bpl.n	8010396 <_svfiprintf_r+0x36>
 8010374:	690b      	ldr	r3, [r1, #16]
 8010376:	b973      	cbnz	r3, 8010396 <_svfiprintf_r+0x36>
 8010378:	2140      	movs	r1, #64	@ 0x40
 801037a:	f7ff ff09 	bl	8010190 <_malloc_r>
 801037e:	6028      	str	r0, [r5, #0]
 8010380:	6128      	str	r0, [r5, #16]
 8010382:	b930      	cbnz	r0, 8010392 <_svfiprintf_r+0x32>
 8010384:	230c      	movs	r3, #12
 8010386:	603b      	str	r3, [r7, #0]
 8010388:	f04f 30ff 	mov.w	r0, #4294967295
 801038c:	b01d      	add	sp, #116	@ 0x74
 801038e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010392:	2340      	movs	r3, #64	@ 0x40
 8010394:	616b      	str	r3, [r5, #20]
 8010396:	2300      	movs	r3, #0
 8010398:	9309      	str	r3, [sp, #36]	@ 0x24
 801039a:	2320      	movs	r3, #32
 801039c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80103a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80103a4:	2330      	movs	r3, #48	@ 0x30
 80103a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010544 <_svfiprintf_r+0x1e4>
 80103aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80103ae:	f04f 0901 	mov.w	r9, #1
 80103b2:	4623      	mov	r3, r4
 80103b4:	469a      	mov	sl, r3
 80103b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103ba:	b10a      	cbz	r2, 80103c0 <_svfiprintf_r+0x60>
 80103bc:	2a25      	cmp	r2, #37	@ 0x25
 80103be:	d1f9      	bne.n	80103b4 <_svfiprintf_r+0x54>
 80103c0:	ebba 0b04 	subs.w	fp, sl, r4
 80103c4:	d00b      	beq.n	80103de <_svfiprintf_r+0x7e>
 80103c6:	465b      	mov	r3, fp
 80103c8:	4622      	mov	r2, r4
 80103ca:	4629      	mov	r1, r5
 80103cc:	4638      	mov	r0, r7
 80103ce:	f7ff ff6b 	bl	80102a8 <__ssputs_r>
 80103d2:	3001      	adds	r0, #1
 80103d4:	f000 80a7 	beq.w	8010526 <_svfiprintf_r+0x1c6>
 80103d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103da:	445a      	add	r2, fp
 80103dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80103de:	f89a 3000 	ldrb.w	r3, [sl]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f000 809f 	beq.w	8010526 <_svfiprintf_r+0x1c6>
 80103e8:	2300      	movs	r3, #0
 80103ea:	f04f 32ff 	mov.w	r2, #4294967295
 80103ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103f2:	f10a 0a01 	add.w	sl, sl, #1
 80103f6:	9304      	str	r3, [sp, #16]
 80103f8:	9307      	str	r3, [sp, #28]
 80103fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8010400:	4654      	mov	r4, sl
 8010402:	2205      	movs	r2, #5
 8010404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010408:	484e      	ldr	r0, [pc, #312]	@ (8010544 <_svfiprintf_r+0x1e4>)
 801040a:	f7f7 ff11 	bl	8008230 <memchr>
 801040e:	9a04      	ldr	r2, [sp, #16]
 8010410:	b9d8      	cbnz	r0, 801044a <_svfiprintf_r+0xea>
 8010412:	06d0      	lsls	r0, r2, #27
 8010414:	bf44      	itt	mi
 8010416:	2320      	movmi	r3, #32
 8010418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801041c:	0711      	lsls	r1, r2, #28
 801041e:	bf44      	itt	mi
 8010420:	232b      	movmi	r3, #43	@ 0x2b
 8010422:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010426:	f89a 3000 	ldrb.w	r3, [sl]
 801042a:	2b2a      	cmp	r3, #42	@ 0x2a
 801042c:	d015      	beq.n	801045a <_svfiprintf_r+0xfa>
 801042e:	9a07      	ldr	r2, [sp, #28]
 8010430:	4654      	mov	r4, sl
 8010432:	2000      	movs	r0, #0
 8010434:	f04f 0c0a 	mov.w	ip, #10
 8010438:	4621      	mov	r1, r4
 801043a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801043e:	3b30      	subs	r3, #48	@ 0x30
 8010440:	2b09      	cmp	r3, #9
 8010442:	d94b      	bls.n	80104dc <_svfiprintf_r+0x17c>
 8010444:	b1b0      	cbz	r0, 8010474 <_svfiprintf_r+0x114>
 8010446:	9207      	str	r2, [sp, #28]
 8010448:	e014      	b.n	8010474 <_svfiprintf_r+0x114>
 801044a:	eba0 0308 	sub.w	r3, r0, r8
 801044e:	fa09 f303 	lsl.w	r3, r9, r3
 8010452:	4313      	orrs	r3, r2
 8010454:	9304      	str	r3, [sp, #16]
 8010456:	46a2      	mov	sl, r4
 8010458:	e7d2      	b.n	8010400 <_svfiprintf_r+0xa0>
 801045a:	9b03      	ldr	r3, [sp, #12]
 801045c:	1d19      	adds	r1, r3, #4
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	9103      	str	r1, [sp, #12]
 8010462:	2b00      	cmp	r3, #0
 8010464:	bfbb      	ittet	lt
 8010466:	425b      	neglt	r3, r3
 8010468:	f042 0202 	orrlt.w	r2, r2, #2
 801046c:	9307      	strge	r3, [sp, #28]
 801046e:	9307      	strlt	r3, [sp, #28]
 8010470:	bfb8      	it	lt
 8010472:	9204      	strlt	r2, [sp, #16]
 8010474:	7823      	ldrb	r3, [r4, #0]
 8010476:	2b2e      	cmp	r3, #46	@ 0x2e
 8010478:	d10a      	bne.n	8010490 <_svfiprintf_r+0x130>
 801047a:	7863      	ldrb	r3, [r4, #1]
 801047c:	2b2a      	cmp	r3, #42	@ 0x2a
 801047e:	d132      	bne.n	80104e6 <_svfiprintf_r+0x186>
 8010480:	9b03      	ldr	r3, [sp, #12]
 8010482:	1d1a      	adds	r2, r3, #4
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	9203      	str	r2, [sp, #12]
 8010488:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801048c:	3402      	adds	r4, #2
 801048e:	9305      	str	r3, [sp, #20]
 8010490:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010554 <_svfiprintf_r+0x1f4>
 8010494:	7821      	ldrb	r1, [r4, #0]
 8010496:	2203      	movs	r2, #3
 8010498:	4650      	mov	r0, sl
 801049a:	f7f7 fec9 	bl	8008230 <memchr>
 801049e:	b138      	cbz	r0, 80104b0 <_svfiprintf_r+0x150>
 80104a0:	9b04      	ldr	r3, [sp, #16]
 80104a2:	eba0 000a 	sub.w	r0, r0, sl
 80104a6:	2240      	movs	r2, #64	@ 0x40
 80104a8:	4082      	lsls	r2, r0
 80104aa:	4313      	orrs	r3, r2
 80104ac:	3401      	adds	r4, #1
 80104ae:	9304      	str	r3, [sp, #16]
 80104b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104b4:	4824      	ldr	r0, [pc, #144]	@ (8010548 <_svfiprintf_r+0x1e8>)
 80104b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80104ba:	2206      	movs	r2, #6
 80104bc:	f7f7 feb8 	bl	8008230 <memchr>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d036      	beq.n	8010532 <_svfiprintf_r+0x1d2>
 80104c4:	4b21      	ldr	r3, [pc, #132]	@ (801054c <_svfiprintf_r+0x1ec>)
 80104c6:	bb1b      	cbnz	r3, 8010510 <_svfiprintf_r+0x1b0>
 80104c8:	9b03      	ldr	r3, [sp, #12]
 80104ca:	3307      	adds	r3, #7
 80104cc:	f023 0307 	bic.w	r3, r3, #7
 80104d0:	3308      	adds	r3, #8
 80104d2:	9303      	str	r3, [sp, #12]
 80104d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104d6:	4433      	add	r3, r6
 80104d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80104da:	e76a      	b.n	80103b2 <_svfiprintf_r+0x52>
 80104dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80104e0:	460c      	mov	r4, r1
 80104e2:	2001      	movs	r0, #1
 80104e4:	e7a8      	b.n	8010438 <_svfiprintf_r+0xd8>
 80104e6:	2300      	movs	r3, #0
 80104e8:	3401      	adds	r4, #1
 80104ea:	9305      	str	r3, [sp, #20]
 80104ec:	4619      	mov	r1, r3
 80104ee:	f04f 0c0a 	mov.w	ip, #10
 80104f2:	4620      	mov	r0, r4
 80104f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104f8:	3a30      	subs	r2, #48	@ 0x30
 80104fa:	2a09      	cmp	r2, #9
 80104fc:	d903      	bls.n	8010506 <_svfiprintf_r+0x1a6>
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d0c6      	beq.n	8010490 <_svfiprintf_r+0x130>
 8010502:	9105      	str	r1, [sp, #20]
 8010504:	e7c4      	b.n	8010490 <_svfiprintf_r+0x130>
 8010506:	fb0c 2101 	mla	r1, ip, r1, r2
 801050a:	4604      	mov	r4, r0
 801050c:	2301      	movs	r3, #1
 801050e:	e7f0      	b.n	80104f2 <_svfiprintf_r+0x192>
 8010510:	ab03      	add	r3, sp, #12
 8010512:	9300      	str	r3, [sp, #0]
 8010514:	462a      	mov	r2, r5
 8010516:	4b0e      	ldr	r3, [pc, #56]	@ (8010550 <_svfiprintf_r+0x1f0>)
 8010518:	a904      	add	r1, sp, #16
 801051a:	4638      	mov	r0, r7
 801051c:	f3af 8000 	nop.w
 8010520:	1c42      	adds	r2, r0, #1
 8010522:	4606      	mov	r6, r0
 8010524:	d1d6      	bne.n	80104d4 <_svfiprintf_r+0x174>
 8010526:	89ab      	ldrh	r3, [r5, #12]
 8010528:	065b      	lsls	r3, r3, #25
 801052a:	f53f af2d 	bmi.w	8010388 <_svfiprintf_r+0x28>
 801052e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010530:	e72c      	b.n	801038c <_svfiprintf_r+0x2c>
 8010532:	ab03      	add	r3, sp, #12
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	462a      	mov	r2, r5
 8010538:	4b05      	ldr	r3, [pc, #20]	@ (8010550 <_svfiprintf_r+0x1f0>)
 801053a:	a904      	add	r1, sp, #16
 801053c:	4638      	mov	r0, r7
 801053e:	f000 f9bb 	bl	80108b8 <_printf_i>
 8010542:	e7ed      	b.n	8010520 <_svfiprintf_r+0x1c0>
 8010544:	08011844 	.word	0x08011844
 8010548:	0801184e 	.word	0x0801184e
 801054c:	00000000 	.word	0x00000000
 8010550:	080102a9 	.word	0x080102a9
 8010554:	0801184a 	.word	0x0801184a

08010558 <__sfputc_r>:
 8010558:	6893      	ldr	r3, [r2, #8]
 801055a:	3b01      	subs	r3, #1
 801055c:	2b00      	cmp	r3, #0
 801055e:	b410      	push	{r4}
 8010560:	6093      	str	r3, [r2, #8]
 8010562:	da08      	bge.n	8010576 <__sfputc_r+0x1e>
 8010564:	6994      	ldr	r4, [r2, #24]
 8010566:	42a3      	cmp	r3, r4
 8010568:	db01      	blt.n	801056e <__sfputc_r+0x16>
 801056a:	290a      	cmp	r1, #10
 801056c:	d103      	bne.n	8010576 <__sfputc_r+0x1e>
 801056e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010572:	f7ff bc75 	b.w	800fe60 <__swbuf_r>
 8010576:	6813      	ldr	r3, [r2, #0]
 8010578:	1c58      	adds	r0, r3, #1
 801057a:	6010      	str	r0, [r2, #0]
 801057c:	7019      	strb	r1, [r3, #0]
 801057e:	4608      	mov	r0, r1
 8010580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010584:	4770      	bx	lr

08010586 <__sfputs_r>:
 8010586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010588:	4606      	mov	r6, r0
 801058a:	460f      	mov	r7, r1
 801058c:	4614      	mov	r4, r2
 801058e:	18d5      	adds	r5, r2, r3
 8010590:	42ac      	cmp	r4, r5
 8010592:	d101      	bne.n	8010598 <__sfputs_r+0x12>
 8010594:	2000      	movs	r0, #0
 8010596:	e007      	b.n	80105a8 <__sfputs_r+0x22>
 8010598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801059c:	463a      	mov	r2, r7
 801059e:	4630      	mov	r0, r6
 80105a0:	f7ff ffda 	bl	8010558 <__sfputc_r>
 80105a4:	1c43      	adds	r3, r0, #1
 80105a6:	d1f3      	bne.n	8010590 <__sfputs_r+0xa>
 80105a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105ac <_vfiprintf_r>:
 80105ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b0:	460d      	mov	r5, r1
 80105b2:	b09d      	sub	sp, #116	@ 0x74
 80105b4:	4614      	mov	r4, r2
 80105b6:	4698      	mov	r8, r3
 80105b8:	4606      	mov	r6, r0
 80105ba:	b118      	cbz	r0, 80105c4 <_vfiprintf_r+0x18>
 80105bc:	6a03      	ldr	r3, [r0, #32]
 80105be:	b90b      	cbnz	r3, 80105c4 <_vfiprintf_r+0x18>
 80105c0:	f7ff fb44 	bl	800fc4c <__sinit>
 80105c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105c6:	07d9      	lsls	r1, r3, #31
 80105c8:	d405      	bmi.n	80105d6 <_vfiprintf_r+0x2a>
 80105ca:	89ab      	ldrh	r3, [r5, #12]
 80105cc:	059a      	lsls	r2, r3, #22
 80105ce:	d402      	bmi.n	80105d6 <_vfiprintf_r+0x2a>
 80105d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105d2:	f7ff fd60 	bl	8010096 <__retarget_lock_acquire_recursive>
 80105d6:	89ab      	ldrh	r3, [r5, #12]
 80105d8:	071b      	lsls	r3, r3, #28
 80105da:	d501      	bpl.n	80105e0 <_vfiprintf_r+0x34>
 80105dc:	692b      	ldr	r3, [r5, #16]
 80105de:	b99b      	cbnz	r3, 8010608 <_vfiprintf_r+0x5c>
 80105e0:	4629      	mov	r1, r5
 80105e2:	4630      	mov	r0, r6
 80105e4:	f7ff fc7a 	bl	800fedc <__swsetup_r>
 80105e8:	b170      	cbz	r0, 8010608 <_vfiprintf_r+0x5c>
 80105ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105ec:	07dc      	lsls	r4, r3, #31
 80105ee:	d504      	bpl.n	80105fa <_vfiprintf_r+0x4e>
 80105f0:	f04f 30ff 	mov.w	r0, #4294967295
 80105f4:	b01d      	add	sp, #116	@ 0x74
 80105f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105fa:	89ab      	ldrh	r3, [r5, #12]
 80105fc:	0598      	lsls	r0, r3, #22
 80105fe:	d4f7      	bmi.n	80105f0 <_vfiprintf_r+0x44>
 8010600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010602:	f7ff fd49 	bl	8010098 <__retarget_lock_release_recursive>
 8010606:	e7f3      	b.n	80105f0 <_vfiprintf_r+0x44>
 8010608:	2300      	movs	r3, #0
 801060a:	9309      	str	r3, [sp, #36]	@ 0x24
 801060c:	2320      	movs	r3, #32
 801060e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010612:	f8cd 800c 	str.w	r8, [sp, #12]
 8010616:	2330      	movs	r3, #48	@ 0x30
 8010618:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80107c8 <_vfiprintf_r+0x21c>
 801061c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010620:	f04f 0901 	mov.w	r9, #1
 8010624:	4623      	mov	r3, r4
 8010626:	469a      	mov	sl, r3
 8010628:	f813 2b01 	ldrb.w	r2, [r3], #1
 801062c:	b10a      	cbz	r2, 8010632 <_vfiprintf_r+0x86>
 801062e:	2a25      	cmp	r2, #37	@ 0x25
 8010630:	d1f9      	bne.n	8010626 <_vfiprintf_r+0x7a>
 8010632:	ebba 0b04 	subs.w	fp, sl, r4
 8010636:	d00b      	beq.n	8010650 <_vfiprintf_r+0xa4>
 8010638:	465b      	mov	r3, fp
 801063a:	4622      	mov	r2, r4
 801063c:	4629      	mov	r1, r5
 801063e:	4630      	mov	r0, r6
 8010640:	f7ff ffa1 	bl	8010586 <__sfputs_r>
 8010644:	3001      	adds	r0, #1
 8010646:	f000 80a7 	beq.w	8010798 <_vfiprintf_r+0x1ec>
 801064a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801064c:	445a      	add	r2, fp
 801064e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010650:	f89a 3000 	ldrb.w	r3, [sl]
 8010654:	2b00      	cmp	r3, #0
 8010656:	f000 809f 	beq.w	8010798 <_vfiprintf_r+0x1ec>
 801065a:	2300      	movs	r3, #0
 801065c:	f04f 32ff 	mov.w	r2, #4294967295
 8010660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010664:	f10a 0a01 	add.w	sl, sl, #1
 8010668:	9304      	str	r3, [sp, #16]
 801066a:	9307      	str	r3, [sp, #28]
 801066c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010670:	931a      	str	r3, [sp, #104]	@ 0x68
 8010672:	4654      	mov	r4, sl
 8010674:	2205      	movs	r2, #5
 8010676:	f814 1b01 	ldrb.w	r1, [r4], #1
 801067a:	4853      	ldr	r0, [pc, #332]	@ (80107c8 <_vfiprintf_r+0x21c>)
 801067c:	f7f7 fdd8 	bl	8008230 <memchr>
 8010680:	9a04      	ldr	r2, [sp, #16]
 8010682:	b9d8      	cbnz	r0, 80106bc <_vfiprintf_r+0x110>
 8010684:	06d1      	lsls	r1, r2, #27
 8010686:	bf44      	itt	mi
 8010688:	2320      	movmi	r3, #32
 801068a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801068e:	0713      	lsls	r3, r2, #28
 8010690:	bf44      	itt	mi
 8010692:	232b      	movmi	r3, #43	@ 0x2b
 8010694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010698:	f89a 3000 	ldrb.w	r3, [sl]
 801069c:	2b2a      	cmp	r3, #42	@ 0x2a
 801069e:	d015      	beq.n	80106cc <_vfiprintf_r+0x120>
 80106a0:	9a07      	ldr	r2, [sp, #28]
 80106a2:	4654      	mov	r4, sl
 80106a4:	2000      	movs	r0, #0
 80106a6:	f04f 0c0a 	mov.w	ip, #10
 80106aa:	4621      	mov	r1, r4
 80106ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106b0:	3b30      	subs	r3, #48	@ 0x30
 80106b2:	2b09      	cmp	r3, #9
 80106b4:	d94b      	bls.n	801074e <_vfiprintf_r+0x1a2>
 80106b6:	b1b0      	cbz	r0, 80106e6 <_vfiprintf_r+0x13a>
 80106b8:	9207      	str	r2, [sp, #28]
 80106ba:	e014      	b.n	80106e6 <_vfiprintf_r+0x13a>
 80106bc:	eba0 0308 	sub.w	r3, r0, r8
 80106c0:	fa09 f303 	lsl.w	r3, r9, r3
 80106c4:	4313      	orrs	r3, r2
 80106c6:	9304      	str	r3, [sp, #16]
 80106c8:	46a2      	mov	sl, r4
 80106ca:	e7d2      	b.n	8010672 <_vfiprintf_r+0xc6>
 80106cc:	9b03      	ldr	r3, [sp, #12]
 80106ce:	1d19      	adds	r1, r3, #4
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	9103      	str	r1, [sp, #12]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	bfbb      	ittet	lt
 80106d8:	425b      	neglt	r3, r3
 80106da:	f042 0202 	orrlt.w	r2, r2, #2
 80106de:	9307      	strge	r3, [sp, #28]
 80106e0:	9307      	strlt	r3, [sp, #28]
 80106e2:	bfb8      	it	lt
 80106e4:	9204      	strlt	r2, [sp, #16]
 80106e6:	7823      	ldrb	r3, [r4, #0]
 80106e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80106ea:	d10a      	bne.n	8010702 <_vfiprintf_r+0x156>
 80106ec:	7863      	ldrb	r3, [r4, #1]
 80106ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80106f0:	d132      	bne.n	8010758 <_vfiprintf_r+0x1ac>
 80106f2:	9b03      	ldr	r3, [sp, #12]
 80106f4:	1d1a      	adds	r2, r3, #4
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	9203      	str	r2, [sp, #12]
 80106fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80106fe:	3402      	adds	r4, #2
 8010700:	9305      	str	r3, [sp, #20]
 8010702:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80107d8 <_vfiprintf_r+0x22c>
 8010706:	7821      	ldrb	r1, [r4, #0]
 8010708:	2203      	movs	r2, #3
 801070a:	4650      	mov	r0, sl
 801070c:	f7f7 fd90 	bl	8008230 <memchr>
 8010710:	b138      	cbz	r0, 8010722 <_vfiprintf_r+0x176>
 8010712:	9b04      	ldr	r3, [sp, #16]
 8010714:	eba0 000a 	sub.w	r0, r0, sl
 8010718:	2240      	movs	r2, #64	@ 0x40
 801071a:	4082      	lsls	r2, r0
 801071c:	4313      	orrs	r3, r2
 801071e:	3401      	adds	r4, #1
 8010720:	9304      	str	r3, [sp, #16]
 8010722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010726:	4829      	ldr	r0, [pc, #164]	@ (80107cc <_vfiprintf_r+0x220>)
 8010728:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801072c:	2206      	movs	r2, #6
 801072e:	f7f7 fd7f 	bl	8008230 <memchr>
 8010732:	2800      	cmp	r0, #0
 8010734:	d03f      	beq.n	80107b6 <_vfiprintf_r+0x20a>
 8010736:	4b26      	ldr	r3, [pc, #152]	@ (80107d0 <_vfiprintf_r+0x224>)
 8010738:	bb1b      	cbnz	r3, 8010782 <_vfiprintf_r+0x1d6>
 801073a:	9b03      	ldr	r3, [sp, #12]
 801073c:	3307      	adds	r3, #7
 801073e:	f023 0307 	bic.w	r3, r3, #7
 8010742:	3308      	adds	r3, #8
 8010744:	9303      	str	r3, [sp, #12]
 8010746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010748:	443b      	add	r3, r7
 801074a:	9309      	str	r3, [sp, #36]	@ 0x24
 801074c:	e76a      	b.n	8010624 <_vfiprintf_r+0x78>
 801074e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010752:	460c      	mov	r4, r1
 8010754:	2001      	movs	r0, #1
 8010756:	e7a8      	b.n	80106aa <_vfiprintf_r+0xfe>
 8010758:	2300      	movs	r3, #0
 801075a:	3401      	adds	r4, #1
 801075c:	9305      	str	r3, [sp, #20]
 801075e:	4619      	mov	r1, r3
 8010760:	f04f 0c0a 	mov.w	ip, #10
 8010764:	4620      	mov	r0, r4
 8010766:	f810 2b01 	ldrb.w	r2, [r0], #1
 801076a:	3a30      	subs	r2, #48	@ 0x30
 801076c:	2a09      	cmp	r2, #9
 801076e:	d903      	bls.n	8010778 <_vfiprintf_r+0x1cc>
 8010770:	2b00      	cmp	r3, #0
 8010772:	d0c6      	beq.n	8010702 <_vfiprintf_r+0x156>
 8010774:	9105      	str	r1, [sp, #20]
 8010776:	e7c4      	b.n	8010702 <_vfiprintf_r+0x156>
 8010778:	fb0c 2101 	mla	r1, ip, r1, r2
 801077c:	4604      	mov	r4, r0
 801077e:	2301      	movs	r3, #1
 8010780:	e7f0      	b.n	8010764 <_vfiprintf_r+0x1b8>
 8010782:	ab03      	add	r3, sp, #12
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	462a      	mov	r2, r5
 8010788:	4b12      	ldr	r3, [pc, #72]	@ (80107d4 <_vfiprintf_r+0x228>)
 801078a:	a904      	add	r1, sp, #16
 801078c:	4630      	mov	r0, r6
 801078e:	f3af 8000 	nop.w
 8010792:	4607      	mov	r7, r0
 8010794:	1c78      	adds	r0, r7, #1
 8010796:	d1d6      	bne.n	8010746 <_vfiprintf_r+0x19a>
 8010798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801079a:	07d9      	lsls	r1, r3, #31
 801079c:	d405      	bmi.n	80107aa <_vfiprintf_r+0x1fe>
 801079e:	89ab      	ldrh	r3, [r5, #12]
 80107a0:	059a      	lsls	r2, r3, #22
 80107a2:	d402      	bmi.n	80107aa <_vfiprintf_r+0x1fe>
 80107a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107a6:	f7ff fc77 	bl	8010098 <__retarget_lock_release_recursive>
 80107aa:	89ab      	ldrh	r3, [r5, #12]
 80107ac:	065b      	lsls	r3, r3, #25
 80107ae:	f53f af1f 	bmi.w	80105f0 <_vfiprintf_r+0x44>
 80107b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107b4:	e71e      	b.n	80105f4 <_vfiprintf_r+0x48>
 80107b6:	ab03      	add	r3, sp, #12
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	462a      	mov	r2, r5
 80107bc:	4b05      	ldr	r3, [pc, #20]	@ (80107d4 <_vfiprintf_r+0x228>)
 80107be:	a904      	add	r1, sp, #16
 80107c0:	4630      	mov	r0, r6
 80107c2:	f000 f879 	bl	80108b8 <_printf_i>
 80107c6:	e7e4      	b.n	8010792 <_vfiprintf_r+0x1e6>
 80107c8:	08011844 	.word	0x08011844
 80107cc:	0801184e 	.word	0x0801184e
 80107d0:	00000000 	.word	0x00000000
 80107d4:	08010587 	.word	0x08010587
 80107d8:	0801184a 	.word	0x0801184a

080107dc <_printf_common>:
 80107dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107e0:	4616      	mov	r6, r2
 80107e2:	4698      	mov	r8, r3
 80107e4:	688a      	ldr	r2, [r1, #8]
 80107e6:	690b      	ldr	r3, [r1, #16]
 80107e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80107ec:	4293      	cmp	r3, r2
 80107ee:	bfb8      	it	lt
 80107f0:	4613      	movlt	r3, r2
 80107f2:	6033      	str	r3, [r6, #0]
 80107f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80107f8:	4607      	mov	r7, r0
 80107fa:	460c      	mov	r4, r1
 80107fc:	b10a      	cbz	r2, 8010802 <_printf_common+0x26>
 80107fe:	3301      	adds	r3, #1
 8010800:	6033      	str	r3, [r6, #0]
 8010802:	6823      	ldr	r3, [r4, #0]
 8010804:	0699      	lsls	r1, r3, #26
 8010806:	bf42      	ittt	mi
 8010808:	6833      	ldrmi	r3, [r6, #0]
 801080a:	3302      	addmi	r3, #2
 801080c:	6033      	strmi	r3, [r6, #0]
 801080e:	6825      	ldr	r5, [r4, #0]
 8010810:	f015 0506 	ands.w	r5, r5, #6
 8010814:	d106      	bne.n	8010824 <_printf_common+0x48>
 8010816:	f104 0a19 	add.w	sl, r4, #25
 801081a:	68e3      	ldr	r3, [r4, #12]
 801081c:	6832      	ldr	r2, [r6, #0]
 801081e:	1a9b      	subs	r3, r3, r2
 8010820:	42ab      	cmp	r3, r5
 8010822:	dc26      	bgt.n	8010872 <_printf_common+0x96>
 8010824:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010828:	6822      	ldr	r2, [r4, #0]
 801082a:	3b00      	subs	r3, #0
 801082c:	bf18      	it	ne
 801082e:	2301      	movne	r3, #1
 8010830:	0692      	lsls	r2, r2, #26
 8010832:	d42b      	bmi.n	801088c <_printf_common+0xb0>
 8010834:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010838:	4641      	mov	r1, r8
 801083a:	4638      	mov	r0, r7
 801083c:	47c8      	blx	r9
 801083e:	3001      	adds	r0, #1
 8010840:	d01e      	beq.n	8010880 <_printf_common+0xa4>
 8010842:	6823      	ldr	r3, [r4, #0]
 8010844:	6922      	ldr	r2, [r4, #16]
 8010846:	f003 0306 	and.w	r3, r3, #6
 801084a:	2b04      	cmp	r3, #4
 801084c:	bf02      	ittt	eq
 801084e:	68e5      	ldreq	r5, [r4, #12]
 8010850:	6833      	ldreq	r3, [r6, #0]
 8010852:	1aed      	subeq	r5, r5, r3
 8010854:	68a3      	ldr	r3, [r4, #8]
 8010856:	bf0c      	ite	eq
 8010858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801085c:	2500      	movne	r5, #0
 801085e:	4293      	cmp	r3, r2
 8010860:	bfc4      	itt	gt
 8010862:	1a9b      	subgt	r3, r3, r2
 8010864:	18ed      	addgt	r5, r5, r3
 8010866:	2600      	movs	r6, #0
 8010868:	341a      	adds	r4, #26
 801086a:	42b5      	cmp	r5, r6
 801086c:	d11a      	bne.n	80108a4 <_printf_common+0xc8>
 801086e:	2000      	movs	r0, #0
 8010870:	e008      	b.n	8010884 <_printf_common+0xa8>
 8010872:	2301      	movs	r3, #1
 8010874:	4652      	mov	r2, sl
 8010876:	4641      	mov	r1, r8
 8010878:	4638      	mov	r0, r7
 801087a:	47c8      	blx	r9
 801087c:	3001      	adds	r0, #1
 801087e:	d103      	bne.n	8010888 <_printf_common+0xac>
 8010880:	f04f 30ff 	mov.w	r0, #4294967295
 8010884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010888:	3501      	adds	r5, #1
 801088a:	e7c6      	b.n	801081a <_printf_common+0x3e>
 801088c:	18e1      	adds	r1, r4, r3
 801088e:	1c5a      	adds	r2, r3, #1
 8010890:	2030      	movs	r0, #48	@ 0x30
 8010892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010896:	4422      	add	r2, r4
 8010898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801089c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80108a0:	3302      	adds	r3, #2
 80108a2:	e7c7      	b.n	8010834 <_printf_common+0x58>
 80108a4:	2301      	movs	r3, #1
 80108a6:	4622      	mov	r2, r4
 80108a8:	4641      	mov	r1, r8
 80108aa:	4638      	mov	r0, r7
 80108ac:	47c8      	blx	r9
 80108ae:	3001      	adds	r0, #1
 80108b0:	d0e6      	beq.n	8010880 <_printf_common+0xa4>
 80108b2:	3601      	adds	r6, #1
 80108b4:	e7d9      	b.n	801086a <_printf_common+0x8e>
	...

080108b8 <_printf_i>:
 80108b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108bc:	7e0f      	ldrb	r7, [r1, #24]
 80108be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80108c0:	2f78      	cmp	r7, #120	@ 0x78
 80108c2:	4691      	mov	r9, r2
 80108c4:	4680      	mov	r8, r0
 80108c6:	460c      	mov	r4, r1
 80108c8:	469a      	mov	sl, r3
 80108ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80108ce:	d807      	bhi.n	80108e0 <_printf_i+0x28>
 80108d0:	2f62      	cmp	r7, #98	@ 0x62
 80108d2:	d80a      	bhi.n	80108ea <_printf_i+0x32>
 80108d4:	2f00      	cmp	r7, #0
 80108d6:	f000 80d1 	beq.w	8010a7c <_printf_i+0x1c4>
 80108da:	2f58      	cmp	r7, #88	@ 0x58
 80108dc:	f000 80b8 	beq.w	8010a50 <_printf_i+0x198>
 80108e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80108e8:	e03a      	b.n	8010960 <_printf_i+0xa8>
 80108ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80108ee:	2b15      	cmp	r3, #21
 80108f0:	d8f6      	bhi.n	80108e0 <_printf_i+0x28>
 80108f2:	a101      	add	r1, pc, #4	@ (adr r1, 80108f8 <_printf_i+0x40>)
 80108f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108f8:	08010951 	.word	0x08010951
 80108fc:	08010965 	.word	0x08010965
 8010900:	080108e1 	.word	0x080108e1
 8010904:	080108e1 	.word	0x080108e1
 8010908:	080108e1 	.word	0x080108e1
 801090c:	080108e1 	.word	0x080108e1
 8010910:	08010965 	.word	0x08010965
 8010914:	080108e1 	.word	0x080108e1
 8010918:	080108e1 	.word	0x080108e1
 801091c:	080108e1 	.word	0x080108e1
 8010920:	080108e1 	.word	0x080108e1
 8010924:	08010a63 	.word	0x08010a63
 8010928:	0801098f 	.word	0x0801098f
 801092c:	08010a1d 	.word	0x08010a1d
 8010930:	080108e1 	.word	0x080108e1
 8010934:	080108e1 	.word	0x080108e1
 8010938:	08010a85 	.word	0x08010a85
 801093c:	080108e1 	.word	0x080108e1
 8010940:	0801098f 	.word	0x0801098f
 8010944:	080108e1 	.word	0x080108e1
 8010948:	080108e1 	.word	0x080108e1
 801094c:	08010a25 	.word	0x08010a25
 8010950:	6833      	ldr	r3, [r6, #0]
 8010952:	1d1a      	adds	r2, r3, #4
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	6032      	str	r2, [r6, #0]
 8010958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801095c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010960:	2301      	movs	r3, #1
 8010962:	e09c      	b.n	8010a9e <_printf_i+0x1e6>
 8010964:	6833      	ldr	r3, [r6, #0]
 8010966:	6820      	ldr	r0, [r4, #0]
 8010968:	1d19      	adds	r1, r3, #4
 801096a:	6031      	str	r1, [r6, #0]
 801096c:	0606      	lsls	r6, r0, #24
 801096e:	d501      	bpl.n	8010974 <_printf_i+0xbc>
 8010970:	681d      	ldr	r5, [r3, #0]
 8010972:	e003      	b.n	801097c <_printf_i+0xc4>
 8010974:	0645      	lsls	r5, r0, #25
 8010976:	d5fb      	bpl.n	8010970 <_printf_i+0xb8>
 8010978:	f9b3 5000 	ldrsh.w	r5, [r3]
 801097c:	2d00      	cmp	r5, #0
 801097e:	da03      	bge.n	8010988 <_printf_i+0xd0>
 8010980:	232d      	movs	r3, #45	@ 0x2d
 8010982:	426d      	negs	r5, r5
 8010984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010988:	4858      	ldr	r0, [pc, #352]	@ (8010aec <_printf_i+0x234>)
 801098a:	230a      	movs	r3, #10
 801098c:	e011      	b.n	80109b2 <_printf_i+0xfa>
 801098e:	6821      	ldr	r1, [r4, #0]
 8010990:	6833      	ldr	r3, [r6, #0]
 8010992:	0608      	lsls	r0, r1, #24
 8010994:	f853 5b04 	ldr.w	r5, [r3], #4
 8010998:	d402      	bmi.n	80109a0 <_printf_i+0xe8>
 801099a:	0649      	lsls	r1, r1, #25
 801099c:	bf48      	it	mi
 801099e:	b2ad      	uxthmi	r5, r5
 80109a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80109a2:	4852      	ldr	r0, [pc, #328]	@ (8010aec <_printf_i+0x234>)
 80109a4:	6033      	str	r3, [r6, #0]
 80109a6:	bf14      	ite	ne
 80109a8:	230a      	movne	r3, #10
 80109aa:	2308      	moveq	r3, #8
 80109ac:	2100      	movs	r1, #0
 80109ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80109b2:	6866      	ldr	r6, [r4, #4]
 80109b4:	60a6      	str	r6, [r4, #8]
 80109b6:	2e00      	cmp	r6, #0
 80109b8:	db05      	blt.n	80109c6 <_printf_i+0x10e>
 80109ba:	6821      	ldr	r1, [r4, #0]
 80109bc:	432e      	orrs	r6, r5
 80109be:	f021 0104 	bic.w	r1, r1, #4
 80109c2:	6021      	str	r1, [r4, #0]
 80109c4:	d04b      	beq.n	8010a5e <_printf_i+0x1a6>
 80109c6:	4616      	mov	r6, r2
 80109c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80109cc:	fb03 5711 	mls	r7, r3, r1, r5
 80109d0:	5dc7      	ldrb	r7, [r0, r7]
 80109d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80109d6:	462f      	mov	r7, r5
 80109d8:	42bb      	cmp	r3, r7
 80109da:	460d      	mov	r5, r1
 80109dc:	d9f4      	bls.n	80109c8 <_printf_i+0x110>
 80109de:	2b08      	cmp	r3, #8
 80109e0:	d10b      	bne.n	80109fa <_printf_i+0x142>
 80109e2:	6823      	ldr	r3, [r4, #0]
 80109e4:	07df      	lsls	r7, r3, #31
 80109e6:	d508      	bpl.n	80109fa <_printf_i+0x142>
 80109e8:	6923      	ldr	r3, [r4, #16]
 80109ea:	6861      	ldr	r1, [r4, #4]
 80109ec:	4299      	cmp	r1, r3
 80109ee:	bfde      	ittt	le
 80109f0:	2330      	movle	r3, #48	@ 0x30
 80109f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80109f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80109fa:	1b92      	subs	r2, r2, r6
 80109fc:	6122      	str	r2, [r4, #16]
 80109fe:	f8cd a000 	str.w	sl, [sp]
 8010a02:	464b      	mov	r3, r9
 8010a04:	aa03      	add	r2, sp, #12
 8010a06:	4621      	mov	r1, r4
 8010a08:	4640      	mov	r0, r8
 8010a0a:	f7ff fee7 	bl	80107dc <_printf_common>
 8010a0e:	3001      	adds	r0, #1
 8010a10:	d14a      	bne.n	8010aa8 <_printf_i+0x1f0>
 8010a12:	f04f 30ff 	mov.w	r0, #4294967295
 8010a16:	b004      	add	sp, #16
 8010a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	f043 0320 	orr.w	r3, r3, #32
 8010a22:	6023      	str	r3, [r4, #0]
 8010a24:	4832      	ldr	r0, [pc, #200]	@ (8010af0 <_printf_i+0x238>)
 8010a26:	2778      	movs	r7, #120	@ 0x78
 8010a28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010a2c:	6823      	ldr	r3, [r4, #0]
 8010a2e:	6831      	ldr	r1, [r6, #0]
 8010a30:	061f      	lsls	r7, r3, #24
 8010a32:	f851 5b04 	ldr.w	r5, [r1], #4
 8010a36:	d402      	bmi.n	8010a3e <_printf_i+0x186>
 8010a38:	065f      	lsls	r7, r3, #25
 8010a3a:	bf48      	it	mi
 8010a3c:	b2ad      	uxthmi	r5, r5
 8010a3e:	6031      	str	r1, [r6, #0]
 8010a40:	07d9      	lsls	r1, r3, #31
 8010a42:	bf44      	itt	mi
 8010a44:	f043 0320 	orrmi.w	r3, r3, #32
 8010a48:	6023      	strmi	r3, [r4, #0]
 8010a4a:	b11d      	cbz	r5, 8010a54 <_printf_i+0x19c>
 8010a4c:	2310      	movs	r3, #16
 8010a4e:	e7ad      	b.n	80109ac <_printf_i+0xf4>
 8010a50:	4826      	ldr	r0, [pc, #152]	@ (8010aec <_printf_i+0x234>)
 8010a52:	e7e9      	b.n	8010a28 <_printf_i+0x170>
 8010a54:	6823      	ldr	r3, [r4, #0]
 8010a56:	f023 0320 	bic.w	r3, r3, #32
 8010a5a:	6023      	str	r3, [r4, #0]
 8010a5c:	e7f6      	b.n	8010a4c <_printf_i+0x194>
 8010a5e:	4616      	mov	r6, r2
 8010a60:	e7bd      	b.n	80109de <_printf_i+0x126>
 8010a62:	6833      	ldr	r3, [r6, #0]
 8010a64:	6825      	ldr	r5, [r4, #0]
 8010a66:	6961      	ldr	r1, [r4, #20]
 8010a68:	1d18      	adds	r0, r3, #4
 8010a6a:	6030      	str	r0, [r6, #0]
 8010a6c:	062e      	lsls	r6, r5, #24
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	d501      	bpl.n	8010a76 <_printf_i+0x1be>
 8010a72:	6019      	str	r1, [r3, #0]
 8010a74:	e002      	b.n	8010a7c <_printf_i+0x1c4>
 8010a76:	0668      	lsls	r0, r5, #25
 8010a78:	d5fb      	bpl.n	8010a72 <_printf_i+0x1ba>
 8010a7a:	8019      	strh	r1, [r3, #0]
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	6123      	str	r3, [r4, #16]
 8010a80:	4616      	mov	r6, r2
 8010a82:	e7bc      	b.n	80109fe <_printf_i+0x146>
 8010a84:	6833      	ldr	r3, [r6, #0]
 8010a86:	1d1a      	adds	r2, r3, #4
 8010a88:	6032      	str	r2, [r6, #0]
 8010a8a:	681e      	ldr	r6, [r3, #0]
 8010a8c:	6862      	ldr	r2, [r4, #4]
 8010a8e:	2100      	movs	r1, #0
 8010a90:	4630      	mov	r0, r6
 8010a92:	f7f7 fbcd 	bl	8008230 <memchr>
 8010a96:	b108      	cbz	r0, 8010a9c <_printf_i+0x1e4>
 8010a98:	1b80      	subs	r0, r0, r6
 8010a9a:	6060      	str	r0, [r4, #4]
 8010a9c:	6863      	ldr	r3, [r4, #4]
 8010a9e:	6123      	str	r3, [r4, #16]
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010aa6:	e7aa      	b.n	80109fe <_printf_i+0x146>
 8010aa8:	6923      	ldr	r3, [r4, #16]
 8010aaa:	4632      	mov	r2, r6
 8010aac:	4649      	mov	r1, r9
 8010aae:	4640      	mov	r0, r8
 8010ab0:	47d0      	blx	sl
 8010ab2:	3001      	adds	r0, #1
 8010ab4:	d0ad      	beq.n	8010a12 <_printf_i+0x15a>
 8010ab6:	6823      	ldr	r3, [r4, #0]
 8010ab8:	079b      	lsls	r3, r3, #30
 8010aba:	d413      	bmi.n	8010ae4 <_printf_i+0x22c>
 8010abc:	68e0      	ldr	r0, [r4, #12]
 8010abe:	9b03      	ldr	r3, [sp, #12]
 8010ac0:	4298      	cmp	r0, r3
 8010ac2:	bfb8      	it	lt
 8010ac4:	4618      	movlt	r0, r3
 8010ac6:	e7a6      	b.n	8010a16 <_printf_i+0x15e>
 8010ac8:	2301      	movs	r3, #1
 8010aca:	4632      	mov	r2, r6
 8010acc:	4649      	mov	r1, r9
 8010ace:	4640      	mov	r0, r8
 8010ad0:	47d0      	blx	sl
 8010ad2:	3001      	adds	r0, #1
 8010ad4:	d09d      	beq.n	8010a12 <_printf_i+0x15a>
 8010ad6:	3501      	adds	r5, #1
 8010ad8:	68e3      	ldr	r3, [r4, #12]
 8010ada:	9903      	ldr	r1, [sp, #12]
 8010adc:	1a5b      	subs	r3, r3, r1
 8010ade:	42ab      	cmp	r3, r5
 8010ae0:	dcf2      	bgt.n	8010ac8 <_printf_i+0x210>
 8010ae2:	e7eb      	b.n	8010abc <_printf_i+0x204>
 8010ae4:	2500      	movs	r5, #0
 8010ae6:	f104 0619 	add.w	r6, r4, #25
 8010aea:	e7f5      	b.n	8010ad8 <_printf_i+0x220>
 8010aec:	08011855 	.word	0x08011855
 8010af0:	08011866 	.word	0x08011866

08010af4 <__sflush_r>:
 8010af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010afc:	0716      	lsls	r6, r2, #28
 8010afe:	4605      	mov	r5, r0
 8010b00:	460c      	mov	r4, r1
 8010b02:	d454      	bmi.n	8010bae <__sflush_r+0xba>
 8010b04:	684b      	ldr	r3, [r1, #4]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	dc02      	bgt.n	8010b10 <__sflush_r+0x1c>
 8010b0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	dd48      	ble.n	8010ba2 <__sflush_r+0xae>
 8010b10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b12:	2e00      	cmp	r6, #0
 8010b14:	d045      	beq.n	8010ba2 <__sflush_r+0xae>
 8010b16:	2300      	movs	r3, #0
 8010b18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b1c:	682f      	ldr	r7, [r5, #0]
 8010b1e:	6a21      	ldr	r1, [r4, #32]
 8010b20:	602b      	str	r3, [r5, #0]
 8010b22:	d030      	beq.n	8010b86 <__sflush_r+0x92>
 8010b24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b26:	89a3      	ldrh	r3, [r4, #12]
 8010b28:	0759      	lsls	r1, r3, #29
 8010b2a:	d505      	bpl.n	8010b38 <__sflush_r+0x44>
 8010b2c:	6863      	ldr	r3, [r4, #4]
 8010b2e:	1ad2      	subs	r2, r2, r3
 8010b30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b32:	b10b      	cbz	r3, 8010b38 <__sflush_r+0x44>
 8010b34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b36:	1ad2      	subs	r2, r2, r3
 8010b38:	2300      	movs	r3, #0
 8010b3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b3c:	6a21      	ldr	r1, [r4, #32]
 8010b3e:	4628      	mov	r0, r5
 8010b40:	47b0      	blx	r6
 8010b42:	1c43      	adds	r3, r0, #1
 8010b44:	89a3      	ldrh	r3, [r4, #12]
 8010b46:	d106      	bne.n	8010b56 <__sflush_r+0x62>
 8010b48:	6829      	ldr	r1, [r5, #0]
 8010b4a:	291d      	cmp	r1, #29
 8010b4c:	d82b      	bhi.n	8010ba6 <__sflush_r+0xb2>
 8010b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8010bf8 <__sflush_r+0x104>)
 8010b50:	40ca      	lsrs	r2, r1
 8010b52:	07d6      	lsls	r6, r2, #31
 8010b54:	d527      	bpl.n	8010ba6 <__sflush_r+0xb2>
 8010b56:	2200      	movs	r2, #0
 8010b58:	6062      	str	r2, [r4, #4]
 8010b5a:	04d9      	lsls	r1, r3, #19
 8010b5c:	6922      	ldr	r2, [r4, #16]
 8010b5e:	6022      	str	r2, [r4, #0]
 8010b60:	d504      	bpl.n	8010b6c <__sflush_r+0x78>
 8010b62:	1c42      	adds	r2, r0, #1
 8010b64:	d101      	bne.n	8010b6a <__sflush_r+0x76>
 8010b66:	682b      	ldr	r3, [r5, #0]
 8010b68:	b903      	cbnz	r3, 8010b6c <__sflush_r+0x78>
 8010b6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b6e:	602f      	str	r7, [r5, #0]
 8010b70:	b1b9      	cbz	r1, 8010ba2 <__sflush_r+0xae>
 8010b72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b76:	4299      	cmp	r1, r3
 8010b78:	d002      	beq.n	8010b80 <__sflush_r+0x8c>
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	f7ff fa9c 	bl	80100b8 <_free_r>
 8010b80:	2300      	movs	r3, #0
 8010b82:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b84:	e00d      	b.n	8010ba2 <__sflush_r+0xae>
 8010b86:	2301      	movs	r3, #1
 8010b88:	4628      	mov	r0, r5
 8010b8a:	47b0      	blx	r6
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	1c50      	adds	r0, r2, #1
 8010b90:	d1c9      	bne.n	8010b26 <__sflush_r+0x32>
 8010b92:	682b      	ldr	r3, [r5, #0]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d0c6      	beq.n	8010b26 <__sflush_r+0x32>
 8010b98:	2b1d      	cmp	r3, #29
 8010b9a:	d001      	beq.n	8010ba0 <__sflush_r+0xac>
 8010b9c:	2b16      	cmp	r3, #22
 8010b9e:	d11e      	bne.n	8010bde <__sflush_r+0xea>
 8010ba0:	602f      	str	r7, [r5, #0]
 8010ba2:	2000      	movs	r0, #0
 8010ba4:	e022      	b.n	8010bec <__sflush_r+0xf8>
 8010ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010baa:	b21b      	sxth	r3, r3
 8010bac:	e01b      	b.n	8010be6 <__sflush_r+0xf2>
 8010bae:	690f      	ldr	r7, [r1, #16]
 8010bb0:	2f00      	cmp	r7, #0
 8010bb2:	d0f6      	beq.n	8010ba2 <__sflush_r+0xae>
 8010bb4:	0793      	lsls	r3, r2, #30
 8010bb6:	680e      	ldr	r6, [r1, #0]
 8010bb8:	bf08      	it	eq
 8010bba:	694b      	ldreq	r3, [r1, #20]
 8010bbc:	600f      	str	r7, [r1, #0]
 8010bbe:	bf18      	it	ne
 8010bc0:	2300      	movne	r3, #0
 8010bc2:	eba6 0807 	sub.w	r8, r6, r7
 8010bc6:	608b      	str	r3, [r1, #8]
 8010bc8:	f1b8 0f00 	cmp.w	r8, #0
 8010bcc:	dde9      	ble.n	8010ba2 <__sflush_r+0xae>
 8010bce:	6a21      	ldr	r1, [r4, #32]
 8010bd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010bd2:	4643      	mov	r3, r8
 8010bd4:	463a      	mov	r2, r7
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	47b0      	blx	r6
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	dc08      	bgt.n	8010bf0 <__sflush_r+0xfc>
 8010bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010be6:	81a3      	strh	r3, [r4, #12]
 8010be8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bf0:	4407      	add	r7, r0
 8010bf2:	eba8 0800 	sub.w	r8, r8, r0
 8010bf6:	e7e7      	b.n	8010bc8 <__sflush_r+0xd4>
 8010bf8:	20400001 	.word	0x20400001

08010bfc <_fflush_r>:
 8010bfc:	b538      	push	{r3, r4, r5, lr}
 8010bfe:	690b      	ldr	r3, [r1, #16]
 8010c00:	4605      	mov	r5, r0
 8010c02:	460c      	mov	r4, r1
 8010c04:	b913      	cbnz	r3, 8010c0c <_fflush_r+0x10>
 8010c06:	2500      	movs	r5, #0
 8010c08:	4628      	mov	r0, r5
 8010c0a:	bd38      	pop	{r3, r4, r5, pc}
 8010c0c:	b118      	cbz	r0, 8010c16 <_fflush_r+0x1a>
 8010c0e:	6a03      	ldr	r3, [r0, #32]
 8010c10:	b90b      	cbnz	r3, 8010c16 <_fflush_r+0x1a>
 8010c12:	f7ff f81b 	bl	800fc4c <__sinit>
 8010c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d0f3      	beq.n	8010c06 <_fflush_r+0xa>
 8010c1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c20:	07d0      	lsls	r0, r2, #31
 8010c22:	d404      	bmi.n	8010c2e <_fflush_r+0x32>
 8010c24:	0599      	lsls	r1, r3, #22
 8010c26:	d402      	bmi.n	8010c2e <_fflush_r+0x32>
 8010c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c2a:	f7ff fa34 	bl	8010096 <__retarget_lock_acquire_recursive>
 8010c2e:	4628      	mov	r0, r5
 8010c30:	4621      	mov	r1, r4
 8010c32:	f7ff ff5f 	bl	8010af4 <__sflush_r>
 8010c36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c38:	07da      	lsls	r2, r3, #31
 8010c3a:	4605      	mov	r5, r0
 8010c3c:	d4e4      	bmi.n	8010c08 <_fflush_r+0xc>
 8010c3e:	89a3      	ldrh	r3, [r4, #12]
 8010c40:	059b      	lsls	r3, r3, #22
 8010c42:	d4e1      	bmi.n	8010c08 <_fflush_r+0xc>
 8010c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c46:	f7ff fa27 	bl	8010098 <__retarget_lock_release_recursive>
 8010c4a:	e7dd      	b.n	8010c08 <_fflush_r+0xc>

08010c4c <__swhatbuf_r>:
 8010c4c:	b570      	push	{r4, r5, r6, lr}
 8010c4e:	460c      	mov	r4, r1
 8010c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c54:	2900      	cmp	r1, #0
 8010c56:	b096      	sub	sp, #88	@ 0x58
 8010c58:	4615      	mov	r5, r2
 8010c5a:	461e      	mov	r6, r3
 8010c5c:	da0d      	bge.n	8010c7a <__swhatbuf_r+0x2e>
 8010c5e:	89a3      	ldrh	r3, [r4, #12]
 8010c60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010c64:	f04f 0100 	mov.w	r1, #0
 8010c68:	bf14      	ite	ne
 8010c6a:	2340      	movne	r3, #64	@ 0x40
 8010c6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010c70:	2000      	movs	r0, #0
 8010c72:	6031      	str	r1, [r6, #0]
 8010c74:	602b      	str	r3, [r5, #0]
 8010c76:	b016      	add	sp, #88	@ 0x58
 8010c78:	bd70      	pop	{r4, r5, r6, pc}
 8010c7a:	466a      	mov	r2, sp
 8010c7c:	f000 f862 	bl	8010d44 <_fstat_r>
 8010c80:	2800      	cmp	r0, #0
 8010c82:	dbec      	blt.n	8010c5e <__swhatbuf_r+0x12>
 8010c84:	9901      	ldr	r1, [sp, #4]
 8010c86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010c8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c8e:	4259      	negs	r1, r3
 8010c90:	4159      	adcs	r1, r3
 8010c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c96:	e7eb      	b.n	8010c70 <__swhatbuf_r+0x24>

08010c98 <__smakebuf_r>:
 8010c98:	898b      	ldrh	r3, [r1, #12]
 8010c9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c9c:	079d      	lsls	r5, r3, #30
 8010c9e:	4606      	mov	r6, r0
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	d507      	bpl.n	8010cb4 <__smakebuf_r+0x1c>
 8010ca4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010ca8:	6023      	str	r3, [r4, #0]
 8010caa:	6123      	str	r3, [r4, #16]
 8010cac:	2301      	movs	r3, #1
 8010cae:	6163      	str	r3, [r4, #20]
 8010cb0:	b003      	add	sp, #12
 8010cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cb4:	ab01      	add	r3, sp, #4
 8010cb6:	466a      	mov	r2, sp
 8010cb8:	f7ff ffc8 	bl	8010c4c <__swhatbuf_r>
 8010cbc:	9f00      	ldr	r7, [sp, #0]
 8010cbe:	4605      	mov	r5, r0
 8010cc0:	4639      	mov	r1, r7
 8010cc2:	4630      	mov	r0, r6
 8010cc4:	f7ff fa64 	bl	8010190 <_malloc_r>
 8010cc8:	b948      	cbnz	r0, 8010cde <__smakebuf_r+0x46>
 8010cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cce:	059a      	lsls	r2, r3, #22
 8010cd0:	d4ee      	bmi.n	8010cb0 <__smakebuf_r+0x18>
 8010cd2:	f023 0303 	bic.w	r3, r3, #3
 8010cd6:	f043 0302 	orr.w	r3, r3, #2
 8010cda:	81a3      	strh	r3, [r4, #12]
 8010cdc:	e7e2      	b.n	8010ca4 <__smakebuf_r+0xc>
 8010cde:	89a3      	ldrh	r3, [r4, #12]
 8010ce0:	6020      	str	r0, [r4, #0]
 8010ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ce6:	81a3      	strh	r3, [r4, #12]
 8010ce8:	9b01      	ldr	r3, [sp, #4]
 8010cea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010cee:	b15b      	cbz	r3, 8010d08 <__smakebuf_r+0x70>
 8010cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	f000 f837 	bl	8010d68 <_isatty_r>
 8010cfa:	b128      	cbz	r0, 8010d08 <__smakebuf_r+0x70>
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	f023 0303 	bic.w	r3, r3, #3
 8010d02:	f043 0301 	orr.w	r3, r3, #1
 8010d06:	81a3      	strh	r3, [r4, #12]
 8010d08:	89a3      	ldrh	r3, [r4, #12]
 8010d0a:	431d      	orrs	r5, r3
 8010d0c:	81a5      	strh	r5, [r4, #12]
 8010d0e:	e7cf      	b.n	8010cb0 <__smakebuf_r+0x18>

08010d10 <memmove>:
 8010d10:	4288      	cmp	r0, r1
 8010d12:	b510      	push	{r4, lr}
 8010d14:	eb01 0402 	add.w	r4, r1, r2
 8010d18:	d902      	bls.n	8010d20 <memmove+0x10>
 8010d1a:	4284      	cmp	r4, r0
 8010d1c:	4623      	mov	r3, r4
 8010d1e:	d807      	bhi.n	8010d30 <memmove+0x20>
 8010d20:	1e43      	subs	r3, r0, #1
 8010d22:	42a1      	cmp	r1, r4
 8010d24:	d008      	beq.n	8010d38 <memmove+0x28>
 8010d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d2e:	e7f8      	b.n	8010d22 <memmove+0x12>
 8010d30:	4402      	add	r2, r0
 8010d32:	4601      	mov	r1, r0
 8010d34:	428a      	cmp	r2, r1
 8010d36:	d100      	bne.n	8010d3a <memmove+0x2a>
 8010d38:	bd10      	pop	{r4, pc}
 8010d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d42:	e7f7      	b.n	8010d34 <memmove+0x24>

08010d44 <_fstat_r>:
 8010d44:	b538      	push	{r3, r4, r5, lr}
 8010d46:	4d07      	ldr	r5, [pc, #28]	@ (8010d64 <_fstat_r+0x20>)
 8010d48:	2300      	movs	r3, #0
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	4608      	mov	r0, r1
 8010d4e:	4611      	mov	r1, r2
 8010d50:	602b      	str	r3, [r5, #0]
 8010d52:	f7f8 fcfa 	bl	800974a <_fstat>
 8010d56:	1c43      	adds	r3, r0, #1
 8010d58:	d102      	bne.n	8010d60 <_fstat_r+0x1c>
 8010d5a:	682b      	ldr	r3, [r5, #0]
 8010d5c:	b103      	cbz	r3, 8010d60 <_fstat_r+0x1c>
 8010d5e:	6023      	str	r3, [r4, #0]
 8010d60:	bd38      	pop	{r3, r4, r5, pc}
 8010d62:	bf00      	nop
 8010d64:	200131dc 	.word	0x200131dc

08010d68 <_isatty_r>:
 8010d68:	b538      	push	{r3, r4, r5, lr}
 8010d6a:	4d06      	ldr	r5, [pc, #24]	@ (8010d84 <_isatty_r+0x1c>)
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	4604      	mov	r4, r0
 8010d70:	4608      	mov	r0, r1
 8010d72:	602b      	str	r3, [r5, #0]
 8010d74:	f7f8 fcf9 	bl	800976a <_isatty>
 8010d78:	1c43      	adds	r3, r0, #1
 8010d7a:	d102      	bne.n	8010d82 <_isatty_r+0x1a>
 8010d7c:	682b      	ldr	r3, [r5, #0]
 8010d7e:	b103      	cbz	r3, 8010d82 <_isatty_r+0x1a>
 8010d80:	6023      	str	r3, [r4, #0]
 8010d82:	bd38      	pop	{r3, r4, r5, pc}
 8010d84:	200131dc 	.word	0x200131dc

08010d88 <_sbrk_r>:
 8010d88:	b538      	push	{r3, r4, r5, lr}
 8010d8a:	4d06      	ldr	r5, [pc, #24]	@ (8010da4 <_sbrk_r+0x1c>)
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	4604      	mov	r4, r0
 8010d90:	4608      	mov	r0, r1
 8010d92:	602b      	str	r3, [r5, #0]
 8010d94:	f000 f83e 	bl	8010e14 <_sbrk>
 8010d98:	1c43      	adds	r3, r0, #1
 8010d9a:	d102      	bne.n	8010da2 <_sbrk_r+0x1a>
 8010d9c:	682b      	ldr	r3, [r5, #0]
 8010d9e:	b103      	cbz	r3, 8010da2 <_sbrk_r+0x1a>
 8010da0:	6023      	str	r3, [r4, #0]
 8010da2:	bd38      	pop	{r3, r4, r5, pc}
 8010da4:	200131dc 	.word	0x200131dc

08010da8 <_realloc_r>:
 8010da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dac:	4607      	mov	r7, r0
 8010dae:	4614      	mov	r4, r2
 8010db0:	460d      	mov	r5, r1
 8010db2:	b921      	cbnz	r1, 8010dbe <_realloc_r+0x16>
 8010db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010db8:	4611      	mov	r1, r2
 8010dba:	f7ff b9e9 	b.w	8010190 <_malloc_r>
 8010dbe:	b92a      	cbnz	r2, 8010dcc <_realloc_r+0x24>
 8010dc0:	f7ff f97a 	bl	80100b8 <_free_r>
 8010dc4:	4625      	mov	r5, r4
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dcc:	f000 f81a 	bl	8010e04 <_malloc_usable_size_r>
 8010dd0:	4284      	cmp	r4, r0
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	d802      	bhi.n	8010ddc <_realloc_r+0x34>
 8010dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010dda:	d8f4      	bhi.n	8010dc6 <_realloc_r+0x1e>
 8010ddc:	4621      	mov	r1, r4
 8010dde:	4638      	mov	r0, r7
 8010de0:	f7ff f9d6 	bl	8010190 <_malloc_r>
 8010de4:	4680      	mov	r8, r0
 8010de6:	b908      	cbnz	r0, 8010dec <_realloc_r+0x44>
 8010de8:	4645      	mov	r5, r8
 8010dea:	e7ec      	b.n	8010dc6 <_realloc_r+0x1e>
 8010dec:	42b4      	cmp	r4, r6
 8010dee:	4622      	mov	r2, r4
 8010df0:	4629      	mov	r1, r5
 8010df2:	bf28      	it	cs
 8010df4:	4632      	movcs	r2, r6
 8010df6:	f7ff f950 	bl	801009a <memcpy>
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	4638      	mov	r0, r7
 8010dfe:	f7ff f95b 	bl	80100b8 <_free_r>
 8010e02:	e7f1      	b.n	8010de8 <_realloc_r+0x40>

08010e04 <_malloc_usable_size_r>:
 8010e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e08:	1f18      	subs	r0, r3, #4
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	bfbc      	itt	lt
 8010e0e:	580b      	ldrlt	r3, [r1, r0]
 8010e10:	18c0      	addlt	r0, r0, r3
 8010e12:	4770      	bx	lr

08010e14 <_sbrk>:
 8010e14:	4a04      	ldr	r2, [pc, #16]	@ (8010e28 <_sbrk+0x14>)
 8010e16:	6811      	ldr	r1, [r2, #0]
 8010e18:	4603      	mov	r3, r0
 8010e1a:	b909      	cbnz	r1, 8010e20 <_sbrk+0xc>
 8010e1c:	4903      	ldr	r1, [pc, #12]	@ (8010e2c <_sbrk+0x18>)
 8010e1e:	6011      	str	r1, [r2, #0]
 8010e20:	6810      	ldr	r0, [r2, #0]
 8010e22:	4403      	add	r3, r0
 8010e24:	6013      	str	r3, [r2, #0]
 8010e26:	4770      	bx	lr
 8010e28:	200131ec 	.word	0x200131ec
 8010e2c:	200131f0 	.word	0x200131f0

08010e30 <_init>:
 8010e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e32:	bf00      	nop
 8010e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e36:	bc08      	pop	{r3}
 8010e38:	469e      	mov	lr, r3
 8010e3a:	4770      	bx	lr

08010e3c <_fini>:
 8010e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3e:	bf00      	nop
 8010e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e42:	bc08      	pop	{r3}
 8010e44:	469e      	mov	lr, r3
 8010e46:	4770      	bx	lr
