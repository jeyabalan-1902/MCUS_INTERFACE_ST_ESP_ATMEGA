
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f0  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  080133c0  080133c0  0000c3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fa4  08013fa4  0000d080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013fa4  08013fa4  0000cfa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013fac  08013fac  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fac  08013fac  0000cfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013fb0  08013fb0  0000cfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08013fb4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001317c  20000080  08014034  0000d080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200131fc  08014034  0000d1fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b49f  00000000  00000000  0000d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004171  00000000  00000000  0002854f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  0002c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e6  00000000  00000000  0002e150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263c2  00000000  00000000  0002f636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eaba  00000000  00000000  000559f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e12d5  00000000  00000000  000744b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ee0  00000000  00000000  001557cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000080 	.word	0x20000080
 80081ec:	00000000 	.word	0x00000000
 80081f0:	080133a8 	.word	0x080133a8

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	20000084 	.word	0x20000084
 800820c:	080133a8 	.word	0x080133a8

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr

08008224 <strlen>:
 8008224:	4603      	mov	r3, r0
 8008226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800822a:	2a00      	cmp	r2, #0
 800822c:	d1fb      	bne.n	8008226 <strlen+0x2>
 800822e:	1a18      	subs	r0, r3, r0
 8008230:	3801      	subs	r0, #1
 8008232:	4770      	bx	lr
	...

08008240 <memchr>:
 8008240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008244:	2a10      	cmp	r2, #16
 8008246:	db2b      	blt.n	80082a0 <memchr+0x60>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	d008      	beq.n	8008260 <memchr+0x20>
 800824e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008252:	3a01      	subs	r2, #1
 8008254:	428b      	cmp	r3, r1
 8008256:	d02d      	beq.n	80082b4 <memchr+0x74>
 8008258:	f010 0f07 	tst.w	r0, #7
 800825c:	b342      	cbz	r2, 80082b0 <memchr+0x70>
 800825e:	d1f6      	bne.n	800824e <memchr+0xe>
 8008260:	b4f0      	push	{r4, r5, r6, r7}
 8008262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800826a:	f022 0407 	bic.w	r4, r2, #7
 800826e:	f07f 0700 	mvns.w	r7, #0
 8008272:	2300      	movs	r3, #0
 8008274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008278:	3c08      	subs	r4, #8
 800827a:	ea85 0501 	eor.w	r5, r5, r1
 800827e:	ea86 0601 	eor.w	r6, r6, r1
 8008282:	fa85 f547 	uadd8	r5, r5, r7
 8008286:	faa3 f587 	sel	r5, r3, r7
 800828a:	fa86 f647 	uadd8	r6, r6, r7
 800828e:	faa5 f687 	sel	r6, r5, r7
 8008292:	b98e      	cbnz	r6, 80082b8 <memchr+0x78>
 8008294:	d1ee      	bne.n	8008274 <memchr+0x34>
 8008296:	bcf0      	pop	{r4, r5, r6, r7}
 8008298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800829c:	f002 0207 	and.w	r2, r2, #7
 80082a0:	b132      	cbz	r2, 80082b0 <memchr+0x70>
 80082a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082a6:	3a01      	subs	r2, #1
 80082a8:	ea83 0301 	eor.w	r3, r3, r1
 80082ac:	b113      	cbz	r3, 80082b4 <memchr+0x74>
 80082ae:	d1f8      	bne.n	80082a2 <memchr+0x62>
 80082b0:	2000      	movs	r0, #0
 80082b2:	4770      	bx	lr
 80082b4:	3801      	subs	r0, #1
 80082b6:	4770      	bx	lr
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	bf06      	itte	eq
 80082bc:	4635      	moveq	r5, r6
 80082be:	3803      	subeq	r0, #3
 80082c0:	3807      	subne	r0, #7
 80082c2:	f015 0f01 	tst.w	r5, #1
 80082c6:	d107      	bne.n	80082d8 <memchr+0x98>
 80082c8:	3001      	adds	r0, #1
 80082ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082ce:	bf02      	ittt	eq
 80082d0:	3001      	addeq	r0, #1
 80082d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082d6:	3001      	addeq	r0, #1
 80082d8:	bcf0      	pop	{r4, r5, r6, r7}
 80082da:	3801      	subs	r0, #1
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_uldivmod>:
 8008c08:	b953      	cbnz	r3, 8008c20 <__aeabi_uldivmod+0x18>
 8008c0a:	b94a      	cbnz	r2, 8008c20 <__aeabi_uldivmod+0x18>
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	bf08      	it	eq
 8008c10:	2800      	cmpeq	r0, #0
 8008c12:	bf1c      	itt	ne
 8008c14:	f04f 31ff 	movne.w	r1, #4294967295
 8008c18:	f04f 30ff 	movne.w	r0, #4294967295
 8008c1c:	f000 b988 	b.w	8008f30 <__aeabi_idiv0>
 8008c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c28:	f000 f806 	bl	8008c38 <__udivmoddi4>
 8008c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c34:	b004      	add	sp, #16
 8008c36:	4770      	bx	lr

08008c38 <__udivmoddi4>:
 8008c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c3c:	9d08      	ldr	r5, [sp, #32]
 8008c3e:	468e      	mov	lr, r1
 8008c40:	4604      	mov	r4, r0
 8008c42:	4688      	mov	r8, r1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d14a      	bne.n	8008cde <__udivmoddi4+0xa6>
 8008c48:	428a      	cmp	r2, r1
 8008c4a:	4617      	mov	r7, r2
 8008c4c:	d962      	bls.n	8008d14 <__udivmoddi4+0xdc>
 8008c4e:	fab2 f682 	clz	r6, r2
 8008c52:	b14e      	cbz	r6, 8008c68 <__udivmoddi4+0x30>
 8008c54:	f1c6 0320 	rsb	r3, r6, #32
 8008c58:	fa01 f806 	lsl.w	r8, r1, r6
 8008c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8008c60:	40b7      	lsls	r7, r6
 8008c62:	ea43 0808 	orr.w	r8, r3, r8
 8008c66:	40b4      	lsls	r4, r6
 8008c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008c6c:	fa1f fc87 	uxth.w	ip, r7
 8008c70:	fbb8 f1fe 	udiv	r1, r8, lr
 8008c74:	0c23      	lsrs	r3, r4, #16
 8008c76:	fb0e 8811 	mls	r8, lr, r1, r8
 8008c7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008c7e:	fb01 f20c 	mul.w	r2, r1, ip
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d909      	bls.n	8008c9a <__udivmoddi4+0x62>
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	f101 30ff 	add.w	r0, r1, #4294967295
 8008c8c:	f080 80ea 	bcs.w	8008e64 <__udivmoddi4+0x22c>
 8008c90:	429a      	cmp	r2, r3
 8008c92:	f240 80e7 	bls.w	8008e64 <__udivmoddi4+0x22c>
 8008c96:	3902      	subs	r1, #2
 8008c98:	443b      	add	r3, r7
 8008c9a:	1a9a      	subs	r2, r3, r2
 8008c9c:	b2a3      	uxth	r3, r4
 8008c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8008ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8008ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008caa:	fb00 fc0c 	mul.w	ip, r0, ip
 8008cae:	459c      	cmp	ip, r3
 8008cb0:	d909      	bls.n	8008cc6 <__udivmoddi4+0x8e>
 8008cb2:	18fb      	adds	r3, r7, r3
 8008cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8008cb8:	f080 80d6 	bcs.w	8008e68 <__udivmoddi4+0x230>
 8008cbc:	459c      	cmp	ip, r3
 8008cbe:	f240 80d3 	bls.w	8008e68 <__udivmoddi4+0x230>
 8008cc2:	443b      	add	r3, r7
 8008cc4:	3802      	subs	r0, #2
 8008cc6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008cca:	eba3 030c 	sub.w	r3, r3, ip
 8008cce:	2100      	movs	r1, #0
 8008cd0:	b11d      	cbz	r5, 8008cda <__udivmoddi4+0xa2>
 8008cd2:	40f3      	lsrs	r3, r6
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8008cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cde:	428b      	cmp	r3, r1
 8008ce0:	d905      	bls.n	8008cee <__udivmoddi4+0xb6>
 8008ce2:	b10d      	cbz	r5, 8008ce8 <__udivmoddi4+0xb0>
 8008ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4608      	mov	r0, r1
 8008cec:	e7f5      	b.n	8008cda <__udivmoddi4+0xa2>
 8008cee:	fab3 f183 	clz	r1, r3
 8008cf2:	2900      	cmp	r1, #0
 8008cf4:	d146      	bne.n	8008d84 <__udivmoddi4+0x14c>
 8008cf6:	4573      	cmp	r3, lr
 8008cf8:	d302      	bcc.n	8008d00 <__udivmoddi4+0xc8>
 8008cfa:	4282      	cmp	r2, r0
 8008cfc:	f200 8105 	bhi.w	8008f0a <__udivmoddi4+0x2d2>
 8008d00:	1a84      	subs	r4, r0, r2
 8008d02:	eb6e 0203 	sbc.w	r2, lr, r3
 8008d06:	2001      	movs	r0, #1
 8008d08:	4690      	mov	r8, r2
 8008d0a:	2d00      	cmp	r5, #0
 8008d0c:	d0e5      	beq.n	8008cda <__udivmoddi4+0xa2>
 8008d0e:	e9c5 4800 	strd	r4, r8, [r5]
 8008d12:	e7e2      	b.n	8008cda <__udivmoddi4+0xa2>
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	f000 8090 	beq.w	8008e3a <__udivmoddi4+0x202>
 8008d1a:	fab2 f682 	clz	r6, r2
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	f040 80a4 	bne.w	8008e6c <__udivmoddi4+0x234>
 8008d24:	1a8a      	subs	r2, r1, r2
 8008d26:	0c03      	lsrs	r3, r0, #16
 8008d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d2c:	b280      	uxth	r0, r0
 8008d2e:	b2bc      	uxth	r4, r7
 8008d30:	2101      	movs	r1, #1
 8008d32:	fbb2 fcfe 	udiv	ip, r2, lr
 8008d36:	fb0e 221c 	mls	r2, lr, ip, r2
 8008d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d3e:	fb04 f20c 	mul.w	r2, r4, ip
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d907      	bls.n	8008d56 <__udivmoddi4+0x11e>
 8008d46:	18fb      	adds	r3, r7, r3
 8008d48:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008d4c:	d202      	bcs.n	8008d54 <__udivmoddi4+0x11c>
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	f200 80e0 	bhi.w	8008f14 <__udivmoddi4+0x2dc>
 8008d54:	46c4      	mov	ip, r8
 8008d56:	1a9b      	subs	r3, r3, r2
 8008d58:	fbb3 f2fe 	udiv	r2, r3, lr
 8008d5c:	fb0e 3312 	mls	r3, lr, r2, r3
 8008d60:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008d64:	fb02 f404 	mul.w	r4, r2, r4
 8008d68:	429c      	cmp	r4, r3
 8008d6a:	d907      	bls.n	8008d7c <__udivmoddi4+0x144>
 8008d6c:	18fb      	adds	r3, r7, r3
 8008d6e:	f102 30ff 	add.w	r0, r2, #4294967295
 8008d72:	d202      	bcs.n	8008d7a <__udivmoddi4+0x142>
 8008d74:	429c      	cmp	r4, r3
 8008d76:	f200 80ca 	bhi.w	8008f0e <__udivmoddi4+0x2d6>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	1b1b      	subs	r3, r3, r4
 8008d7e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008d82:	e7a5      	b.n	8008cd0 <__udivmoddi4+0x98>
 8008d84:	f1c1 0620 	rsb	r6, r1, #32
 8008d88:	408b      	lsls	r3, r1
 8008d8a:	fa22 f706 	lsr.w	r7, r2, r6
 8008d8e:	431f      	orrs	r7, r3
 8008d90:	fa0e f401 	lsl.w	r4, lr, r1
 8008d94:	fa20 f306 	lsr.w	r3, r0, r6
 8008d98:	fa2e fe06 	lsr.w	lr, lr, r6
 8008d9c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008da0:	4323      	orrs	r3, r4
 8008da2:	fa00 f801 	lsl.w	r8, r0, r1
 8008da6:	fa1f fc87 	uxth.w	ip, r7
 8008daa:	fbbe f0f9 	udiv	r0, lr, r9
 8008dae:	0c1c      	lsrs	r4, r3, #16
 8008db0:	fb09 ee10 	mls	lr, r9, r0, lr
 8008db4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008db8:	fb00 fe0c 	mul.w	lr, r0, ip
 8008dbc:	45a6      	cmp	lr, r4
 8008dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8008dc2:	d909      	bls.n	8008dd8 <__udivmoddi4+0x1a0>
 8008dc4:	193c      	adds	r4, r7, r4
 8008dc6:	f100 3aff 	add.w	sl, r0, #4294967295
 8008dca:	f080 809c 	bcs.w	8008f06 <__udivmoddi4+0x2ce>
 8008dce:	45a6      	cmp	lr, r4
 8008dd0:	f240 8099 	bls.w	8008f06 <__udivmoddi4+0x2ce>
 8008dd4:	3802      	subs	r0, #2
 8008dd6:	443c      	add	r4, r7
 8008dd8:	eba4 040e 	sub.w	r4, r4, lr
 8008ddc:	fa1f fe83 	uxth.w	lr, r3
 8008de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8008de4:	fb09 4413 	mls	r4, r9, r3, r4
 8008de8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008dec:	fb03 fc0c 	mul.w	ip, r3, ip
 8008df0:	45a4      	cmp	ip, r4
 8008df2:	d908      	bls.n	8008e06 <__udivmoddi4+0x1ce>
 8008df4:	193c      	adds	r4, r7, r4
 8008df6:	f103 3eff 	add.w	lr, r3, #4294967295
 8008dfa:	f080 8082 	bcs.w	8008f02 <__udivmoddi4+0x2ca>
 8008dfe:	45a4      	cmp	ip, r4
 8008e00:	d97f      	bls.n	8008f02 <__udivmoddi4+0x2ca>
 8008e02:	3b02      	subs	r3, #2
 8008e04:	443c      	add	r4, r7
 8008e06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008e0a:	eba4 040c 	sub.w	r4, r4, ip
 8008e0e:	fba0 ec02 	umull	lr, ip, r0, r2
 8008e12:	4564      	cmp	r4, ip
 8008e14:	4673      	mov	r3, lr
 8008e16:	46e1      	mov	r9, ip
 8008e18:	d362      	bcc.n	8008ee0 <__udivmoddi4+0x2a8>
 8008e1a:	d05f      	beq.n	8008edc <__udivmoddi4+0x2a4>
 8008e1c:	b15d      	cbz	r5, 8008e36 <__udivmoddi4+0x1fe>
 8008e1e:	ebb8 0203 	subs.w	r2, r8, r3
 8008e22:	eb64 0409 	sbc.w	r4, r4, r9
 8008e26:	fa04 f606 	lsl.w	r6, r4, r6
 8008e2a:	fa22 f301 	lsr.w	r3, r2, r1
 8008e2e:	431e      	orrs	r6, r3
 8008e30:	40cc      	lsrs	r4, r1
 8008e32:	e9c5 6400 	strd	r6, r4, [r5]
 8008e36:	2100      	movs	r1, #0
 8008e38:	e74f      	b.n	8008cda <__udivmoddi4+0xa2>
 8008e3a:	fbb1 fcf2 	udiv	ip, r1, r2
 8008e3e:	0c01      	lsrs	r1, r0, #16
 8008e40:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008e44:	b280      	uxth	r0, r0
 8008e46:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008e4a:	463b      	mov	r3, r7
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	463c      	mov	r4, r7
 8008e50:	46b8      	mov	r8, r7
 8008e52:	46be      	mov	lr, r7
 8008e54:	2620      	movs	r6, #32
 8008e56:	fbb1 f1f7 	udiv	r1, r1, r7
 8008e5a:	eba2 0208 	sub.w	r2, r2, r8
 8008e5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008e62:	e766      	b.n	8008d32 <__udivmoddi4+0xfa>
 8008e64:	4601      	mov	r1, r0
 8008e66:	e718      	b.n	8008c9a <__udivmoddi4+0x62>
 8008e68:	4610      	mov	r0, r2
 8008e6a:	e72c      	b.n	8008cc6 <__udivmoddi4+0x8e>
 8008e6c:	f1c6 0220 	rsb	r2, r6, #32
 8008e70:	fa2e f302 	lsr.w	r3, lr, r2
 8008e74:	40b7      	lsls	r7, r6
 8008e76:	40b1      	lsls	r1, r6
 8008e78:	fa20 f202 	lsr.w	r2, r0, r2
 8008e7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008e80:	430a      	orrs	r2, r1
 8008e82:	fbb3 f8fe 	udiv	r8, r3, lr
 8008e86:	b2bc      	uxth	r4, r7
 8008e88:	fb0e 3318 	mls	r3, lr, r8, r3
 8008e8c:	0c11      	lsrs	r1, r2, #16
 8008e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008e92:	fb08 f904 	mul.w	r9, r8, r4
 8008e96:	40b0      	lsls	r0, r6
 8008e98:	4589      	cmp	r9, r1
 8008e9a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008e9e:	b280      	uxth	r0, r0
 8008ea0:	d93e      	bls.n	8008f20 <__udivmoddi4+0x2e8>
 8008ea2:	1879      	adds	r1, r7, r1
 8008ea4:	f108 3cff 	add.w	ip, r8, #4294967295
 8008ea8:	d201      	bcs.n	8008eae <__udivmoddi4+0x276>
 8008eaa:	4589      	cmp	r9, r1
 8008eac:	d81f      	bhi.n	8008eee <__udivmoddi4+0x2b6>
 8008eae:	eba1 0109 	sub.w	r1, r1, r9
 8008eb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8008eb6:	fb09 f804 	mul.w	r8, r9, r4
 8008eba:	fb0e 1119 	mls	r1, lr, r9, r1
 8008ebe:	b292      	uxth	r2, r2
 8008ec0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008ec4:	4542      	cmp	r2, r8
 8008ec6:	d229      	bcs.n	8008f1c <__udivmoddi4+0x2e4>
 8008ec8:	18ba      	adds	r2, r7, r2
 8008eca:	f109 31ff 	add.w	r1, r9, #4294967295
 8008ece:	d2c4      	bcs.n	8008e5a <__udivmoddi4+0x222>
 8008ed0:	4542      	cmp	r2, r8
 8008ed2:	d2c2      	bcs.n	8008e5a <__udivmoddi4+0x222>
 8008ed4:	f1a9 0102 	sub.w	r1, r9, #2
 8008ed8:	443a      	add	r2, r7
 8008eda:	e7be      	b.n	8008e5a <__udivmoddi4+0x222>
 8008edc:	45f0      	cmp	r8, lr
 8008ede:	d29d      	bcs.n	8008e1c <__udivmoddi4+0x1e4>
 8008ee0:	ebbe 0302 	subs.w	r3, lr, r2
 8008ee4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008ee8:	3801      	subs	r0, #1
 8008eea:	46e1      	mov	r9, ip
 8008eec:	e796      	b.n	8008e1c <__udivmoddi4+0x1e4>
 8008eee:	eba7 0909 	sub.w	r9, r7, r9
 8008ef2:	4449      	add	r1, r9
 8008ef4:	f1a8 0c02 	sub.w	ip, r8, #2
 8008ef8:	fbb1 f9fe 	udiv	r9, r1, lr
 8008efc:	fb09 f804 	mul.w	r8, r9, r4
 8008f00:	e7db      	b.n	8008eba <__udivmoddi4+0x282>
 8008f02:	4673      	mov	r3, lr
 8008f04:	e77f      	b.n	8008e06 <__udivmoddi4+0x1ce>
 8008f06:	4650      	mov	r0, sl
 8008f08:	e766      	b.n	8008dd8 <__udivmoddi4+0x1a0>
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	e6fd      	b.n	8008d0a <__udivmoddi4+0xd2>
 8008f0e:	443b      	add	r3, r7
 8008f10:	3a02      	subs	r2, #2
 8008f12:	e733      	b.n	8008d7c <__udivmoddi4+0x144>
 8008f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8008f18:	443b      	add	r3, r7
 8008f1a:	e71c      	b.n	8008d56 <__udivmoddi4+0x11e>
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	e79c      	b.n	8008e5a <__udivmoddi4+0x222>
 8008f20:	eba1 0109 	sub.w	r1, r1, r9
 8008f24:	46c4      	mov	ip, r8
 8008f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f2a:	fb09 f804 	mul.w	r8, r9, r4
 8008f2e:	e7c4      	b.n	8008eba <__udivmoddi4+0x282>

08008f30 <__aeabi_idiv0>:
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop

08008f34 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8008f34:	b590      	push	{r4, r7, lr}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af02      	add	r7, sp, #8
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	4611      	mov	r1, r2
 8008f40:	461a      	mov	r2, r3
 8008f42:	4623      	mov	r3, r4
 8008f44:	80fb      	strh	r3, [r7, #6]
 8008f46:	4603      	mov	r3, r0
 8008f48:	80bb      	strh	r3, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	807b      	strh	r3, [r7, #2]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8008f52:	88f8      	ldrh	r0, [r7, #6]
 8008f54:	88b9      	ldrh	r1, [r7, #4]
 8008f56:	887a      	ldrh	r2, [r7, #2]
 8008f58:	883c      	ldrh	r4, [r7, #0]
 8008f5a:	8b3b      	ldrh	r3, [r7, #24]
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	4623      	mov	r3, r4
 8008f60:	f000 fa88 	bl	8009474 <ST7735_FillRectangle>
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd90      	pop	{r4, r7, pc}

08008f6c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	4603      	mov	r3, r0
 8008f74:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8008f76:	4b08      	ldr	r3, [pc, #32]	@ (8008f98 <fillScreen+0x2c>)
 8008f78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008f7c:	4b07      	ldr	r3, [pc, #28]	@ (8008f9c <fillScreen+0x30>)
 8008f7e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008f82:	88fb      	ldrh	r3, [r7, #6]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	460b      	mov	r3, r1
 8008f88:	2100      	movs	r1, #0
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	f7ff ffd2 	bl	8008f34 <fillRect>
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	2000009c 	.word	0x2000009c
 8008f9c:	2000009e 	.word	0x2000009e

08008fa0 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2102      	movs	r1, #2
 8008fa8:	4802      	ldr	r0, [pc, #8]	@ (8008fb4 <ST7735_Select+0x14>)
 8008faa:	f002 ffad 	bl	800bf08 <HAL_GPIO_WritePin>
}
 8008fae:	bf00      	nop
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40020000 	.word	0x40020000

08008fb8 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	2102      	movs	r1, #2
 8008fc0:	4802      	ldr	r0, [pc, #8]	@ (8008fcc <ST7735_Unselect+0x14>)
 8008fc2:	f002 ffa1 	bl	800bf08 <HAL_GPIO_WritePin>
}
 8008fc6:	bf00      	nop
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	40020000 	.word	0x40020000

08008fd0 <ST7735_Reset>:

void ST7735_Reset()
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2110      	movs	r1, #16
 8008fd8:	4806      	ldr	r0, [pc, #24]	@ (8008ff4 <ST7735_Reset+0x24>)
 8008fda:	f002 ff95 	bl	800bf08 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8008fde:	2005      	movs	r0, #5
 8008fe0:	f002 fc4e 	bl	800b880 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	2110      	movs	r1, #16
 8008fe8:	4802      	ldr	r0, [pc, #8]	@ (8008ff4 <ST7735_Reset+0x24>)
 8008fea:	f002 ff8d 	bl	800bf08 <HAL_GPIO_WritePin>
}
 8008fee:	bf00      	nop
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	40020000 	.word	0x40020000

08008ff8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8009002:	2200      	movs	r2, #0
 8009004:	2110      	movs	r1, #16
 8009006:	4807      	ldr	r0, [pc, #28]	@ (8009024 <ST7735_WriteCommand+0x2c>)
 8009008:	f002 ff7e 	bl	800bf08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800900c:	1df9      	adds	r1, r7, #7
 800900e:	f04f 33ff 	mov.w	r3, #4294967295
 8009012:	2201      	movs	r2, #1
 8009014:	4804      	ldr	r0, [pc, #16]	@ (8009028 <ST7735_WriteCommand+0x30>)
 8009016:	f003 fe18 	bl	800cc4a <HAL_SPI_Transmit>
}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40020800 	.word	0x40020800
 8009028:	20000160 	.word	0x20000160

0800902c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8009036:	2201      	movs	r2, #1
 8009038:	2110      	movs	r1, #16
 800903a:	4807      	ldr	r0, [pc, #28]	@ (8009058 <ST7735_WriteData+0x2c>)
 800903c:	f002 ff64 	bl	800bf08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	b29a      	uxth	r2, r3
 8009044:	f04f 33ff 	mov.w	r3, #4294967295
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	4804      	ldr	r0, [pc, #16]	@ (800905c <ST7735_WriteData+0x30>)
 800904c:	f003 fdfd 	bl	800cc4a <HAL_SPI_Transmit>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	40020800 	.word	0x40020800
 800905c:	20000160 	.word	0x20000160

08009060 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	607a      	str	r2, [r7, #4]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8009072:	e034      	b.n	80090de <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	607a      	str	r2, [r7, #4]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800907e:	7afb      	ldrb	r3, [r7, #11]
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff ffb9 	bl	8008ff8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8009090:	7abb      	ldrb	r3, [r7, #10]
 8009092:	b29b      	uxth	r3, r3
 8009094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009098:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800909a:	7abb      	ldrb	r3, [r7, #10]
 800909c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090a0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80090a2:	7abb      	ldrb	r3, [r7, #10]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d008      	beq.n	80090ba <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80090a8:	7abb      	ldrb	r3, [r7, #10]
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7ff ffbd 	bl	800902c <ST7735_WriteData>
            addr += numArgs;
 80090b2:	7abb      	ldrb	r3, [r7, #10]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	4413      	add	r3, r2
 80090b8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80090ba:	89bb      	ldrh	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00e      	beq.n	80090de <DisplayInit+0x7e>
            ms = *addr++;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	607a      	str	r2, [r7, #4]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80090ca:	89bb      	ldrh	r3, [r7, #12]
 80090cc:	2bff      	cmp	r3, #255	@ 0xff
 80090ce:	d102      	bne.n	80090d6 <DisplayInit+0x76>
 80090d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80090d4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80090d6:	89bb      	ldrh	r3, [r7, #12]
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 fbd1 	bl	800b880 <HAL_Delay>
    while(numCommands--) {
 80090de:	7bfb      	ldrb	r3, [r7, #15]
 80090e0:	1e5a      	subs	r2, r3, #1
 80090e2:	73fa      	strb	r2, [r7, #15]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1c5      	bne.n	8009074 <DisplayInit+0x14>
        }
    }
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80090f4:	b590      	push	{r4, r7, lr}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	4611      	mov	r1, r2
 8009100:	461a      	mov	r2, r3
 8009102:	4623      	mov	r3, r4
 8009104:	71fb      	strb	r3, [r7, #7]
 8009106:	4603      	mov	r3, r0
 8009108:	71bb      	strb	r3, [r7, #6]
 800910a:	460b      	mov	r3, r1
 800910c:	717b      	strb	r3, [r7, #5]
 800910e:	4613      	mov	r3, r2
 8009110:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8009112:	202a      	movs	r0, #42	@ 0x2a
 8009114:	f7ff ff70 	bl	8008ff8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8009118:	2300      	movs	r3, #0
 800911a:	733b      	strb	r3, [r7, #12]
 800911c:	4b17      	ldr	r3, [pc, #92]	@ (800917c <ST7735_SetAddressWindow+0x88>)
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	4413      	add	r3, r2
 8009124:	b2db      	uxtb	r3, r3
 8009126:	737b      	strb	r3, [r7, #13]
 8009128:	2300      	movs	r3, #0
 800912a:	73bb      	strb	r3, [r7, #14]
 800912c:	4b13      	ldr	r3, [pc, #76]	@ (800917c <ST7735_SetAddressWindow+0x88>)
 800912e:	781a      	ldrb	r2, [r3, #0]
 8009130:	797b      	ldrb	r3, [r7, #5]
 8009132:	4413      	add	r3, r2
 8009134:	b2db      	uxtb	r3, r3
 8009136:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8009138:	f107 030c 	add.w	r3, r7, #12
 800913c:	2104      	movs	r1, #4
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff ff74 	bl	800902c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8009144:	202b      	movs	r0, #43	@ 0x2b
 8009146:	f7ff ff57 	bl	8008ff8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800914a:	4b0d      	ldr	r3, [pc, #52]	@ (8009180 <ST7735_SetAddressWindow+0x8c>)
 800914c:	781a      	ldrb	r2, [r3, #0]
 800914e:	79bb      	ldrb	r3, [r7, #6]
 8009150:	4413      	add	r3, r2
 8009152:	b2db      	uxtb	r3, r3
 8009154:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8009156:	4b0a      	ldr	r3, [pc, #40]	@ (8009180 <ST7735_SetAddressWindow+0x8c>)
 8009158:	781a      	ldrb	r2, [r3, #0]
 800915a:	793b      	ldrb	r3, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	b2db      	uxtb	r3, r3
 8009160:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8009162:	f107 030c 	add.w	r3, r7, #12
 8009166:	2104      	movs	r1, #4
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff ff5f 	bl	800902c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800916e:	202c      	movs	r0, #44	@ 0x2c
 8009170:	f7ff ff42 	bl	8008ff8 <ST7735_WriteCommand>
}
 8009174:	bf00      	nop
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	bd90      	pop	{r4, r7, pc}
 800917c:	200000a3 	.word	0x200000a3
 8009180:	200000a4 	.word	0x200000a4

08009184 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800918e:	f7ff ff07 	bl	8008fa0 <ST7735_Select>
    ST7735_Reset();
 8009192:	f7ff ff1d 	bl	8008fd0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8009196:	480c      	ldr	r0, [pc, #48]	@ (80091c8 <ST7735_Init+0x44>)
 8009198:	f7ff ff62 	bl	8009060 <DisplayInit>
    DisplayInit(init_cmds2);
 800919c:	480b      	ldr	r0, [pc, #44]	@ (80091cc <ST7735_Init+0x48>)
 800919e:	f7ff ff5f 	bl	8009060 <DisplayInit>
    DisplayInit(init_cmds3);
 80091a2:	480b      	ldr	r0, [pc, #44]	@ (80091d0 <ST7735_Init+0x4c>)
 80091a4:	f7ff ff5c 	bl	8009060 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80091a8:	4b0a      	ldr	r3, [pc, #40]	@ (80091d4 <ST7735_Init+0x50>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80091ae:	4b0a      	ldr	r3, [pc, #40]	@ (80091d8 <ST7735_Init+0x54>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f810 	bl	80091dc <ST7735_SetRotation>
    ST7735_Unselect();
 80091bc:	f7ff fefc 	bl	8008fb8 <ST7735_Unselect>

}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	08013654 	.word	0x08013654
 80091cc:	0801368c 	.word	0x0801368c
 80091d0:	0801369c 	.word	0x0801369c
 80091d4:	200000a1 	.word	0x200000a1
 80091d8:	200000a2 	.word	0x200000a2

080091dc <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	f003 0303 	and.w	r3, r3, #3
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	4b33      	ldr	r3, [pc, #204]	@ (80092c0 <ST7735_SetRotation+0xe4>)
 80091f4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80091f6:	4b32      	ldr	r3, [pc, #200]	@ (80092c0 <ST7735_SetRotation+0xe4>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d84e      	bhi.n	800929c <ST7735_SetRotation+0xc0>
 80091fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009204 <ST7735_SetRotation+0x28>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	08009215 	.word	0x08009215
 8009208:	08009237 	.word	0x08009237
 800920c:	08009259 	.word	0x08009259
 8009210:	0800927b 	.word	0x0800927b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8009214:	23c0      	movs	r3, #192	@ 0xc0
 8009216:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8009218:	4b2a      	ldr	r3, [pc, #168]	@ (80092c4 <ST7735_SetRotation+0xe8>)
 800921a:	22a0      	movs	r2, #160	@ 0xa0
 800921c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800921e:	4b2a      	ldr	r3, [pc, #168]	@ (80092c8 <ST7735_SetRotation+0xec>)
 8009220:	2280      	movs	r2, #128	@ 0x80
 8009222:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8009224:	4b29      	ldr	r3, [pc, #164]	@ (80092cc <ST7735_SetRotation+0xf0>)
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	4b29      	ldr	r3, [pc, #164]	@ (80092d0 <ST7735_SetRotation+0xf4>)
 800922a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800922c:	4b29      	ldr	r3, [pc, #164]	@ (80092d4 <ST7735_SetRotation+0xf8>)
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	4b29      	ldr	r3, [pc, #164]	@ (80092d8 <ST7735_SetRotation+0xfc>)
 8009232:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009234:	e032      	b.n	800929c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8009236:	23a0      	movs	r3, #160	@ 0xa0
 8009238:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800923a:	4b23      	ldr	r3, [pc, #140]	@ (80092c8 <ST7735_SetRotation+0xec>)
 800923c:	22a0      	movs	r2, #160	@ 0xa0
 800923e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8009240:	4b20      	ldr	r3, [pc, #128]	@ (80092c4 <ST7735_SetRotation+0xe8>)
 8009242:	2280      	movs	r2, #128	@ 0x80
 8009244:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8009246:	4b21      	ldr	r3, [pc, #132]	@ (80092cc <ST7735_SetRotation+0xf0>)
 8009248:	781a      	ldrb	r2, [r3, #0]
 800924a:	4b23      	ldr	r3, [pc, #140]	@ (80092d8 <ST7735_SetRotation+0xfc>)
 800924c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800924e:	4b21      	ldr	r3, [pc, #132]	@ (80092d4 <ST7735_SetRotation+0xf8>)
 8009250:	781a      	ldrb	r2, [r3, #0]
 8009252:	4b1f      	ldr	r3, [pc, #124]	@ (80092d0 <ST7735_SetRotation+0xf4>)
 8009254:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009256:	e021      	b.n	800929c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800925c:	4b19      	ldr	r3, [pc, #100]	@ (80092c4 <ST7735_SetRotation+0xe8>)
 800925e:	22a0      	movs	r2, #160	@ 0xa0
 8009260:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8009262:	4b19      	ldr	r3, [pc, #100]	@ (80092c8 <ST7735_SetRotation+0xec>)
 8009264:	2280      	movs	r2, #128	@ 0x80
 8009266:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8009268:	4b18      	ldr	r3, [pc, #96]	@ (80092cc <ST7735_SetRotation+0xf0>)
 800926a:	781a      	ldrb	r2, [r3, #0]
 800926c:	4b18      	ldr	r3, [pc, #96]	@ (80092d0 <ST7735_SetRotation+0xf4>)
 800926e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8009270:	4b18      	ldr	r3, [pc, #96]	@ (80092d4 <ST7735_SetRotation+0xf8>)
 8009272:	781a      	ldrb	r2, [r3, #0]
 8009274:	4b18      	ldr	r3, [pc, #96]	@ (80092d8 <ST7735_SetRotation+0xfc>)
 8009276:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009278:	e010      	b.n	800929c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800927a:	2360      	movs	r3, #96	@ 0x60
 800927c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800927e:	4b12      	ldr	r3, [pc, #72]	@ (80092c8 <ST7735_SetRotation+0xec>)
 8009280:	22a0      	movs	r2, #160	@ 0xa0
 8009282:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8009284:	4b0f      	ldr	r3, [pc, #60]	@ (80092c4 <ST7735_SetRotation+0xe8>)
 8009286:	2280      	movs	r2, #128	@ 0x80
 8009288:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800928a:	4b10      	ldr	r3, [pc, #64]	@ (80092cc <ST7735_SetRotation+0xf0>)
 800928c:	781a      	ldrb	r2, [r3, #0]
 800928e:	4b12      	ldr	r3, [pc, #72]	@ (80092d8 <ST7735_SetRotation+0xfc>)
 8009290:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8009292:	4b10      	ldr	r3, [pc, #64]	@ (80092d4 <ST7735_SetRotation+0xf8>)
 8009294:	781a      	ldrb	r2, [r3, #0]
 8009296:	4b0e      	ldr	r3, [pc, #56]	@ (80092d0 <ST7735_SetRotation+0xf4>)
 8009298:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800929a:	bf00      	nop
  }
  ST7735_Select();
 800929c:	f7ff fe80 	bl	8008fa0 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80092a0:	2036      	movs	r0, #54	@ 0x36
 80092a2:	f7ff fea9 	bl	8008ff8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80092a6:	f107 030f 	add.w	r3, r7, #15
 80092aa:	2101      	movs	r1, #1
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff febd 	bl	800902c <ST7735_WriteData>
  ST7735_Unselect();
 80092b2:	f7ff fe81 	bl	8008fb8 <ST7735_Unselect>
}
 80092b6:	bf00      	nop
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	200000a0 	.word	0x200000a0
 80092c4:	2000009e 	.word	0x2000009e
 80092c8:	2000009c 	.word	0x2000009c
 80092cc:	200000a1 	.word	0x200000a1
 80092d0:	200000a3 	.word	0x200000a3
 80092d4:	200000a2 	.word	0x200000a2
 80092d8:	200000a4 	.word	0x200000a4

080092dc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80092dc:	b082      	sub	sp, #8
 80092de:	b590      	push	{r4, r7, lr}
 80092e0:	b089      	sub	sp, #36	@ 0x24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80092e6:	4603      	mov	r3, r0
 80092e8:	80fb      	strh	r3, [r7, #6]
 80092ea:	460b      	mov	r3, r1
 80092ec:	80bb      	strh	r3, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	b2d8      	uxtb	r0, r3
 80092f6:	88bb      	ldrh	r3, [r7, #4]
 80092f8:	b2d9      	uxtb	r1, r3
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009302:	4413      	add	r3, r2
 8009304:	b2db      	uxtb	r3, r3
 8009306:	3b01      	subs	r3, #1
 8009308:	b2dc      	uxtb	r4, r3
 800930a:	88bb      	ldrh	r3, [r7, #4]
 800930c:	b2da      	uxtb	r2, r3
 800930e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009312:	4413      	add	r3, r2
 8009314:	b2db      	uxtb	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b2db      	uxtb	r3, r3
 800931a:	4622      	mov	r2, r4
 800931c:	f7ff feea 	bl	80090f4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8009320:	2300      	movs	r3, #0
 8009322:	61fb      	str	r3, [r7, #28]
 8009324:	e043      	b.n	80093ae <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8009326:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009328:	78fb      	ldrb	r3, [r7, #3]
 800932a:	3b20      	subs	r3, #32
 800932c:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8009330:	fb01 f303 	mul.w	r3, r1, r3
 8009334:	4619      	mov	r1, r3
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	440b      	add	r3, r1
 800933a:	005b      	lsls	r3, r3, #1
 800933c:	4413      	add	r3, r2
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8009342:	2300      	movs	r3, #0
 8009344:	61bb      	str	r3, [r7, #24]
 8009346:	e029      	b.n	800939c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	fa02 f303 	lsl.w	r3, r2, r3
 8009350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00e      	beq.n	8009376 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8009358:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800935a:	0a1b      	lsrs	r3, r3, #8
 800935c:	b29b      	uxth	r3, r3
 800935e:	b2db      	uxtb	r3, r3
 8009360:	743b      	strb	r3, [r7, #16]
 8009362:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009364:	b2db      	uxtb	r3, r3
 8009366:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8009368:	f107 0310 	add.w	r3, r7, #16
 800936c:	2102      	movs	r1, #2
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff fe5c 	bl	800902c <ST7735_WriteData>
 8009374:	e00f      	b.n	8009396 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8009376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800937a:	0a1b      	lsrs	r3, r3, #8
 800937c:	b29b      	uxth	r3, r3
 800937e:	b2db      	uxtb	r3, r3
 8009380:	733b      	strb	r3, [r7, #12]
 8009382:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009386:	b2db      	uxtb	r3, r3
 8009388:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800938a:	f107 030c 	add.w	r3, r7, #12
 800938e:	2102      	movs	r1, #2
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff fe4b 	bl	800902c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	3301      	adds	r3, #1
 800939a:	61bb      	str	r3, [r7, #24]
 800939c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80093a0:	461a      	mov	r2, r3
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d3cf      	bcc.n	8009348 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	3301      	adds	r3, #1
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80093b2:	461a      	mov	r2, r3
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d3b5      	bcc.n	8009326 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80093ba:	bf00      	nop
 80093bc:	bf00      	nop
 80093be:	3724      	adds	r7, #36	@ 0x24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80093c6:	b002      	add	sp, #8
 80093c8:	4770      	bx	lr
	...

080093cc <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80093cc:	b082      	sub	sp, #8
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b086      	sub	sp, #24
 80093d2:	af04      	add	r7, sp, #16
 80093d4:	603a      	str	r2, [r7, #0]
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	4603      	mov	r3, r0
 80093da:	80fb      	strh	r3, [r7, #6]
 80093dc:	460b      	mov	r3, r1
 80093de:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80093e0:	f7ff fdde 	bl	8008fa0 <ST7735_Select>

    while(*str) {
 80093e4:	e033      	b.n	800944e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	7d3a      	ldrb	r2, [r7, #20]
 80093ea:	4413      	add	r3, r2
 80093ec:	4a1f      	ldr	r2, [pc, #124]	@ (800946c <ST7735_WriteString+0xa0>)
 80093ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80093f2:	4293      	cmp	r3, r2
 80093f4:	db16      	blt.n	8009424 <ST7735_WriteString+0x58>
            x = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80093fa:	7d7b      	ldrb	r3, [r7, #21]
 80093fc:	461a      	mov	r2, r3
 80093fe:	88bb      	ldrh	r3, [r7, #4]
 8009400:	4413      	add	r3, r2
 8009402:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8009404:	88bb      	ldrh	r3, [r7, #4]
 8009406:	7d7a      	ldrb	r2, [r7, #21]
 8009408:	4413      	add	r3, r2
 800940a:	4a19      	ldr	r2, [pc, #100]	@ (8009470 <ST7735_WriteString+0xa4>)
 800940c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009410:	4293      	cmp	r3, r2
 8009412:	da21      	bge.n	8009458 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b20      	cmp	r3, #32
 800941a:	d103      	bne.n	8009424 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	3301      	adds	r3, #1
 8009420:	603b      	str	r3, [r7, #0]
                continue;
 8009422:	e014      	b.n	800944e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	88b9      	ldrh	r1, [r7, #4]
 800942a:	88f8      	ldrh	r0, [r7, #6]
 800942c:	8c3b      	ldrh	r3, [r7, #32]
 800942e:	9302      	str	r3, [sp, #8]
 8009430:	8bbb      	ldrh	r3, [r7, #28]
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f7ff ff4f 	bl	80092dc <ST7735_WriteChar>
        x += font.width;
 800943e:	7d3b      	ldrb	r3, [r7, #20]
 8009440:	461a      	mov	r2, r3
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	4413      	add	r3, r2
 8009446:	80fb      	strh	r3, [r7, #6]
        str++;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	3301      	adds	r3, #1
 800944c:	603b      	str	r3, [r7, #0]
    while(*str) {
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1c7      	bne.n	80093e6 <ST7735_WriteString+0x1a>
 8009456:	e000      	b.n	800945a <ST7735_WriteString+0x8e>
                break;
 8009458:	bf00      	nop
    }

    ST7735_Unselect();
 800945a:	f7ff fdad 	bl	8008fb8 <ST7735_Unselect>
}
 800945e:	bf00      	nop
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009468:	b002      	add	sp, #8
 800946a:	4770      	bx	lr
 800946c:	2000009c 	.word	0x2000009c
 8009470:	2000009e 	.word	0x2000009e

08009474 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8009474:	b590      	push	{r4, r7, lr}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	4611      	mov	r1, r2
 8009480:	461a      	mov	r2, r3
 8009482:	4623      	mov	r3, r4
 8009484:	80fb      	strh	r3, [r7, #6]
 8009486:	4603      	mov	r3, r0
 8009488:	80bb      	strh	r3, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	807b      	strh	r3, [r7, #2]
 800948e:	4613      	mov	r3, r2
 8009490:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8009492:	88fb      	ldrh	r3, [r7, #6]
 8009494:	4a37      	ldr	r2, [pc, #220]	@ (8009574 <ST7735_FillRectangle+0x100>)
 8009496:	f9b2 2000 	ldrsh.w	r2, [r2]
 800949a:	4293      	cmp	r3, r2
 800949c:	da66      	bge.n	800956c <ST7735_FillRectangle+0xf8>
 800949e:	88bb      	ldrh	r3, [r7, #4]
 80094a0:	4a35      	ldr	r2, [pc, #212]	@ (8009578 <ST7735_FillRectangle+0x104>)
 80094a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80094a6:	4293      	cmp	r3, r2
 80094a8:	da60      	bge.n	800956c <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 80094aa:	88fa      	ldrh	r2, [r7, #6]
 80094ac:	887b      	ldrh	r3, [r7, #2]
 80094ae:	4413      	add	r3, r2
 80094b0:	4a30      	ldr	r2, [pc, #192]	@ (8009574 <ST7735_FillRectangle+0x100>)
 80094b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80094b6:	4293      	cmp	r3, r2
 80094b8:	dd06      	ble.n	80094c8 <ST7735_FillRectangle+0x54>
 80094ba:	4b2e      	ldr	r3, [pc, #184]	@ (8009574 <ST7735_FillRectangle+0x100>)
 80094bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	88fb      	ldrh	r3, [r7, #6]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80094c8:	88ba      	ldrh	r2, [r7, #4]
 80094ca:	883b      	ldrh	r3, [r7, #0]
 80094cc:	4413      	add	r3, r2
 80094ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009578 <ST7735_FillRectangle+0x104>)
 80094d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80094d4:	4293      	cmp	r3, r2
 80094d6:	dd06      	ble.n	80094e6 <ST7735_FillRectangle+0x72>
 80094d8:	4b27      	ldr	r3, [pc, #156]	@ (8009578 <ST7735_FillRectangle+0x104>)
 80094da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094de:	b29a      	uxth	r2, r3
 80094e0:	88bb      	ldrh	r3, [r7, #4]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80094e6:	f7ff fd5b 	bl	8008fa0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80094ea:	88fb      	ldrh	r3, [r7, #6]
 80094ec:	b2d8      	uxtb	r0, r3
 80094ee:	88bb      	ldrh	r3, [r7, #4]
 80094f0:	b2d9      	uxtb	r1, r3
 80094f2:	88fb      	ldrh	r3, [r7, #6]
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	887b      	ldrh	r3, [r7, #2]
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	4413      	add	r3, r2
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	b2dc      	uxtb	r4, r3
 8009502:	88bb      	ldrh	r3, [r7, #4]
 8009504:	b2da      	uxtb	r2, r3
 8009506:	883b      	ldrh	r3, [r7, #0]
 8009508:	b2db      	uxtb	r3, r3
 800950a:	4413      	add	r3, r2
 800950c:	b2db      	uxtb	r3, r3
 800950e:	3b01      	subs	r3, #1
 8009510:	b2db      	uxtb	r3, r3
 8009512:	4622      	mov	r2, r4
 8009514:	f7ff fdee 	bl	80090f4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8009518:	8c3b      	ldrh	r3, [r7, #32]
 800951a:	0a1b      	lsrs	r3, r3, #8
 800951c:	b29b      	uxth	r3, r3
 800951e:	b2db      	uxtb	r3, r3
 8009520:	733b      	strb	r3, [r7, #12]
 8009522:	8c3b      	ldrh	r3, [r7, #32]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8009528:	2201      	movs	r2, #1
 800952a:	2110      	movs	r1, #16
 800952c:	4813      	ldr	r0, [pc, #76]	@ (800957c <ST7735_FillRectangle+0x108>)
 800952e:	f002 fceb 	bl	800bf08 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8009532:	883b      	ldrh	r3, [r7, #0]
 8009534:	80bb      	strh	r3, [r7, #4]
 8009536:	e013      	b.n	8009560 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8009538:	887b      	ldrh	r3, [r7, #2]
 800953a:	80fb      	strh	r3, [r7, #6]
 800953c:	e00a      	b.n	8009554 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800953e:	f107 010c 	add.w	r1, r7, #12
 8009542:	f04f 33ff 	mov.w	r3, #4294967295
 8009546:	2202      	movs	r2, #2
 8009548:	480d      	ldr	r0, [pc, #52]	@ (8009580 <ST7735_FillRectangle+0x10c>)
 800954a:	f003 fb7e 	bl	800cc4a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800954e:	88fb      	ldrh	r3, [r7, #6]
 8009550:	3b01      	subs	r3, #1
 8009552:	80fb      	strh	r3, [r7, #6]
 8009554:	88fb      	ldrh	r3, [r7, #6]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1f1      	bne.n	800953e <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 800955a:	88bb      	ldrh	r3, [r7, #4]
 800955c:	3b01      	subs	r3, #1
 800955e:	80bb      	strh	r3, [r7, #4]
 8009560:	88bb      	ldrh	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e8      	bne.n	8009538 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8009566:	f7ff fd27 	bl	8008fb8 <ST7735_Unselect>
 800956a:	e000      	b.n	800956e <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 800956c:	bf00      	nop
}
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	bd90      	pop	{r4, r7, pc}
 8009574:	2000009c 	.word	0x2000009c
 8009578:	2000009e 	.word	0x2000009e
 800957c:	40020800 	.word	0x40020800
 8009580:	20000160 	.word	0x20000160

08009584 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <cJSON_strdup+0x1c>
    {
        return NULL;
 800959c:	2300      	movs	r3, #0
 800959e:	e015      	b.n	80095cc <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7fe fe3f 	bl	8008224 <strlen>
 80095a6:	4603      	mov	r3, r0
 80095a8:	3301      	adds	r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	4798      	blx	r3
 80095b4:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <cJSON_strdup+0x3c>
    {
        return NULL;
 80095bc:	2300      	movs	r3, #0
 80095be:	e005      	b.n	80095cc <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	68b8      	ldr	r0, [r7, #8]
 80095c6:	f008 fc92 	bl	8011eee <memcpy>

    return copy;
 80095ca:	68bb      	ldr	r3, [r7, #8]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2028      	movs	r0, #40	@ 0x28
 80095e2:	4798      	blx	r3
 80095e4:	60f8      	str	r0, [r7, #12]
    if (node)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80095ec:	2228      	movs	r2, #40	@ 0x28
 80095ee:	2100      	movs	r1, #0
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f008 fbdd 	bl	8011db0 <memset>
    }

    return node;
 80095f6:	68fb      	ldr	r3, [r7, #12]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8009608:	2300      	movs	r3, #0
 800960a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800960c:	e03d      	b.n	800968a <cJSON_Delete+0x8a>
    {
        next = item->next;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800961c:	2b00      	cmp	r3, #0
 800961e:	d108      	bne.n	8009632 <cJSON_Delete+0x32>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d004      	beq.n	8009632 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff ffe7 	bl	8009600 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10c      	bne.n	8009658 <cJSON_Delete+0x58>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d008      	beq.n	8009658 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8009646:	4b15      	ldr	r3, [pc, #84]	@ (800969c <cJSON_Delete+0x9c>)
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	6912      	ldr	r2, [r2, #16]
 800964e:	4610      	mov	r0, r2
 8009650:	4798      	blx	r3
            item->valuestring = NULL;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10c      	bne.n	800967e <cJSON_Delete+0x7e>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d008      	beq.n	800967e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800966c:	4b0b      	ldr	r3, [pc, #44]	@ (800969c <cJSON_Delete+0x9c>)
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	6a12      	ldr	r2, [r2, #32]
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
            item->string = NULL;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800967e:	4b07      	ldr	r3, [pc, #28]	@ (800969c <cJSON_Delete+0x9c>)
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	4798      	blx	r3
        item = next;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1be      	bne.n	800960e <cJSON_Delete+0xe>
    }
}
 8009690:	bf00      	nop
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20000000 	.word	0x20000000

080096a0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80096a4:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d003      	beq.n	80096d0 <ensure+0x20>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <ensure+0x24>
    {
        return NULL;
 80096d0:	2300      	movs	r3, #0
 80096d2:	e083      	b.n	80097dc <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d007      	beq.n	80096ec <ensure+0x3c>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689a      	ldr	r2, [r3, #8]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d301      	bcc.n	80096ec <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 80096e8:	2300      	movs	r3, #0
 80096ea:	e077      	b.n	80097dc <ensure+0x12c>
    }

    if (needed > INT_MAX)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	da01      	bge.n	80096f6 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	e072      	b.n	80097dc <ensure+0x12c>
    }

    needed += p->offset + 1;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	689a      	ldr	r2, [r3, #8]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	4413      	add	r3, r2
 80096fe:	3301      	adds	r3, #1
 8009700:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	429a      	cmp	r2, r3
 800970a:	d805      	bhi.n	8009718 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	4413      	add	r3, r2
 8009716:	e061      	b.n	80097dc <ensure+0x12c>
    }

    if (p->noalloc) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <ensure+0x74>
        return NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	e05b      	b.n	80097dc <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800972a:	d308      	bcc.n	800973e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	db03      	blt.n	800973a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8009732:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009736:	60bb      	str	r3, [r7, #8]
 8009738:	e004      	b.n	8009744 <ensure+0x94>
        }
        else
        {
            return NULL;
 800973a:	2300      	movs	r3, #0
 800973c:	e04e      	b.n	80097dc <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d018      	beq.n	800977e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6812      	ldr	r2, [r2, #0]
 8009754:	68b9      	ldr	r1, [r7, #8]
 8009756:	4610      	mov	r0, r2
 8009758:	4798      	blx	r3
 800975a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d132      	bne.n	80097c8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	4610      	mov	r0, r2
 800976c:	4798      	blx	r3
            p->length = 0;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]

            return NULL;
 800977a:	2300      	movs	r3, #0
 800977c:	e02e      	b.n	80097dc <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	68b8      	ldr	r0, [r7, #8]
 8009784:	4798      	blx	r3
 8009786:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10d      	bne.n	80097aa <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	6812      	ldr	r2, [r2, #0]
 8009796:	4610      	mov	r0, r2
 8009798:	4798      	blx	r3
            p->length = 0;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]

            return NULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	e018      	b.n	80097dc <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6819      	ldr	r1, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	3301      	adds	r3, #1
 80097b4:	461a      	mov	r2, r3
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f008 fb99 	bl	8011eee <memcpy>
        p->hooks.deallocate(p->buffer);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6812      	ldr	r2, [r2, #0]
 80097c4:	4610      	mov	r0, r2
 80097c6:	4798      	blx	r3
    }
    p->length = newsize;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	4413      	add	r3, r2
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80097e4:	b590      	push	{r4, r7, lr}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d013      	beq.n	800981e <update_offset+0x3a>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00f      	beq.n	800981e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	4413      	add	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	689c      	ldr	r4, [r3, #8]
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7fe fd08 	bl	8008224 <strlen>
 8009814:	4603      	mov	r3, r0
 8009816:	18e2      	adds	r2, r4, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	609a      	str	r2, [r3, #8]
 800981c:	e000      	b.n	8009820 <update_offset+0x3c>
        return;
 800981e:	bf00      	nop
}
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	bd90      	pop	{r4, r7, pc}
	...

08009828 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8009828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800982c:	b087      	sub	sp, #28
 800982e:	af00      	add	r7, sp, #0
 8009830:	ed87 0b02 	vstr	d0, [r7, #8]
 8009834:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8009838:	68b8      	ldr	r0, [r7, #8]
 800983a:	68fe      	ldr	r6, [r7, #12]
 800983c:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	687e      	ldr	r6, [r7, #4]
 8009844:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009848:	f7ff f996 	bl	8008b78 <__aeabi_dcmpgt>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d004      	beq.n	800985c <compare_double+0x34>
 8009852:	68bc      	ldr	r4, [r7, #8]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800985a:	e003      	b.n	8009864 <compare_double+0x3c>
 800985c:	683c      	ldr	r4, [r7, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8009864:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8009868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800986c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009870:	f7fe fd3a 	bl	80082e8 <__aeabi_dsub>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4690      	mov	r8, r2
 800987a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800987e:	f04f 0200 	mov.w	r2, #0
 8009882:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <compare_double+0x8c>)
 8009884:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009888:	f7fe fee6 	bl	8008658 <__aeabi_dmul>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	2101      	movs	r1, #1
 8009892:	460c      	mov	r4, r1
 8009894:	4640      	mov	r0, r8
 8009896:	4649      	mov	r1, r9
 8009898:	f7ff f95a 	bl	8008b50 <__aeabi_dcmple>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <compare_double+0x7e>
 80098a2:	2300      	movs	r3, #0
 80098a4:	461c      	mov	r4, r3
 80098a6:	b2e3      	uxtb	r3, r4
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	371c      	adds	r7, #28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098b2:	bf00      	nop
 80098b4:	3cb00000 	.word	0x3cb00000

080098b8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80098b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ba:	b093      	sub	sp, #76	@ 0x4c
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80098c2:	2300      	movs	r3, #0
 80098c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80098cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80098d8:	f107 0314 	add.w	r3, r7, #20
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	605a      	str	r2, [r3, #4]
 80098e2:	609a      	str	r2, [r3, #8]
 80098e4:	60da      	str	r2, [r3, #12]
 80098e6:	611a      	str	r2, [r3, #16]
 80098e8:	615a      	str	r2, [r3, #20]
 80098ea:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 80098ec:	f7ff fed8 	bl	80096a0 <get_decimal_point>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	f04f 0300 	mov.w	r3, #0
 80098fe:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <print_number+0x54>
    {
        return false;
 8009908:	2300      	movs	r3, #0
 800990a:	e0b4      	b.n	8009a76 <print_number+0x1be>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800990c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009910:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009914:	f7ff f93a 	bl	8008b8c <__aeabi_dcmpun>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d121      	bne.n	8009962 <print_number+0xaa>
 800991e:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8009920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009922:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8009926:	2301      	movs	r3, #1
 8009928:	461e      	mov	r6, r3
 800992a:	f04f 32ff 	mov.w	r2, #4294967295
 800992e:	4b54      	ldr	r3, [pc, #336]	@ (8009a80 <print_number+0x1c8>)
 8009930:	4620      	mov	r0, r4
 8009932:	4629      	mov	r1, r5
 8009934:	f7ff f92a 	bl	8008b8c <__aeabi_dcmpun>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10b      	bne.n	8009956 <print_number+0x9e>
 800993e:	f04f 32ff 	mov.w	r2, #4294967295
 8009942:	4b4f      	ldr	r3, [pc, #316]	@ (8009a80 <print_number+0x1c8>)
 8009944:	4620      	mov	r0, r4
 8009946:	4629      	mov	r1, r5
 8009948:	f7ff f902 	bl	8008b50 <__aeabi_dcmple>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <print_number+0x9e>
 8009952:	2300      	movs	r3, #0
 8009954:	461e      	mov	r6, r3
 8009956:	b2f3      	uxtb	r3, r6
 8009958:	f083 0301 	eor.w	r3, r3, #1
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d007      	beq.n	8009972 <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 8009962:	f107 0314 	add.w	r3, r7, #20
 8009966:	4947      	ldr	r1, [pc, #284]	@ (8009a84 <print_number+0x1cc>)
 8009968:	4618      	mov	r0, r3
 800996a:	f008 f8d9 	bl	8011b20 <siprintf>
 800996e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009970:	e03f      	b.n	80099f2 <print_number+0x13a>
    }
    else if(d == (double)item->valueint)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fe04 	bl	8008584 <__aeabi_i2d>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009984:	f7ff f8d0 	bl	8008b28 <__aeabi_dcmpeq>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d009      	beq.n	80099a2 <print_number+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695a      	ldr	r2, [r3, #20]
 8009992:	f107 0314 	add.w	r3, r7, #20
 8009996:	493c      	ldr	r1, [pc, #240]	@ (8009a88 <print_number+0x1d0>)
 8009998:	4618      	mov	r0, r3
 800999a:	f008 f8c1 	bl	8011b20 <siprintf>
 800999e:	6478      	str	r0, [r7, #68]	@ 0x44
 80099a0:	e027      	b.n	80099f2 <print_number+0x13a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80099a2:	f107 0014 	add.w	r0, r7, #20
 80099a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80099aa:	4938      	ldr	r1, [pc, #224]	@ (8009a8c <print_number+0x1d4>)
 80099ac:	f008 f8b8 	bl	8011b20 <siprintf>
 80099b0:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80099b2:	f107 0208 	add.w	r2, r7, #8
 80099b6:	f107 0314 	add.w	r3, r7, #20
 80099ba:	4935      	ldr	r1, [pc, #212]	@ (8009a90 <print_number+0x1d8>)
 80099bc:	4618      	mov	r0, r3
 80099be:	f008 f8d1 	bl	8011b64 <siscanf>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d10c      	bne.n	80099e2 <print_number+0x12a>
 80099c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80099cc:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 80099d0:	eeb0 0a47 	vmov.f32	s0, s14
 80099d4:	eef0 0a67 	vmov.f32	s1, s15
 80099d8:	f7ff ff26 	bl	8009828 <compare_double>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d107      	bne.n	80099f2 <print_number+0x13a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80099e2:	f107 0014 	add.w	r0, r7, #20
 80099e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80099ea:	492a      	ldr	r1, [pc, #168]	@ (8009a94 <print_number+0x1dc>)
 80099ec:	f008 f898 	bl	8011b20 <siprintf>
 80099f0:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80099f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	db02      	blt.n	80099fe <print_number+0x146>
 80099f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099fa:	2b19      	cmp	r3, #25
 80099fc:	dd01      	ble.n	8009a02 <print_number+0x14a>
    {
        return false;
 80099fe:	2300      	movs	r3, #0
 8009a00:	e039      	b.n	8009a76 <print_number+0x1be>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8009a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a04:	3301      	adds	r3, #1
 8009a06:	4619      	mov	r1, r3
 8009a08:	6838      	ldr	r0, [r7, #0]
 8009a0a:	f7ff fe51 	bl	80096b0 <ensure>
 8009a0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8009a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <print_number+0x162>
    {
        return false;
 8009a16:	2300      	movs	r3, #0
 8009a18:	e02d      	b.n	8009a76 <print_number+0x1be>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a1e:	e01a      	b.n	8009a56 <print_number+0x19e>
    {
        if (number_buffer[i] == decimal_point)
 8009a20:	f107 0214 	add.w	r2, r7, #20
 8009a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a26:	4413      	add	r3, r2
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d105      	bne.n	8009a3e <print_number+0x186>
        {
            output_pointer[i] = '.';
 8009a32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a36:	4413      	add	r3, r2
 8009a38:	222e      	movs	r2, #46	@ 0x2e
 8009a3a:	701a      	strb	r2, [r3, #0]
            continue;
 8009a3c:	e008      	b.n	8009a50 <print_number+0x198>
        }

        output_pointer[i] = number_buffer[i];
 8009a3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a42:	4413      	add	r3, r2
 8009a44:	f107 0114 	add.w	r1, r7, #20
 8009a48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a4a:	440a      	add	r2, r1
 8009a4c:	7812      	ldrb	r2, [r2, #0]
 8009a4e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8009a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a52:	3301      	adds	r3, #1
 8009a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d3e0      	bcc.n	8009a20 <print_number+0x168>
    }
    output_pointer[i] = '\0';
 8009a5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a62:	4413      	add	r3, r2
 8009a64:	2200      	movs	r2, #0
 8009a66:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a6e:	441a      	add	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	609a      	str	r2, [r3, #8]

    return true;
 8009a74:	2301      	movs	r3, #1
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	374c      	adds	r7, #76	@ 0x4c
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	7fefffff 	.word	0x7fefffff
 8009a84:	080133cc 	.word	0x080133cc
 8009a88:	080133d4 	.word	0x080133d4
 8009a8c:	080133d8 	.word	0x080133d8
 8009a90:	080133e0 	.word	0x080133e0
 8009a94:	080133e4 	.word	0x080133e4

08009a98 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <print_string_ptr+0x28>
    {
        return false;
 8009abc:	2300      	movs	r3, #0
 8009abe:	e110      	b.n	8009ce2 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d111      	bne.n	8009aea <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8009ac6:	2103      	movs	r1, #3
 8009ac8:	6838      	ldr	r0, [r7, #0]
 8009aca:	f7ff fdf1 	bl	80096b0 <ensure>
 8009ace:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <print_string_ptr+0x42>
        {
            return false;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	e103      	b.n	8009ce2 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	4a83      	ldr	r2, [pc, #524]	@ (8009cec <print_string_ptr+0x254>)
 8009ade:	8811      	ldrh	r1, [r2, #0]
 8009ae0:	7892      	ldrb	r2, [r2, #2]
 8009ae2:	8019      	strh	r1, [r3, #0]
 8009ae4:	709a      	strb	r2, [r3, #2]

        return true;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e0fb      	b.n	8009ce2 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	61fb      	str	r3, [r7, #28]
 8009aee:	e024      	b.n	8009b3a <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b22      	cmp	r3, #34	@ 0x22
 8009af6:	dc0f      	bgt.n	8009b18 <print_string_ptr+0x80>
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	db13      	blt.n	8009b24 <print_string_ptr+0x8c>
 8009afc:	3b08      	subs	r3, #8
 8009afe:	4a7c      	ldr	r2, [pc, #496]	@ (8009cf0 <print_string_ptr+0x258>)
 8009b00:	fa22 f303 	lsr.w	r3, r2, r3
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bf14      	ite	ne
 8009b0c:	2301      	movne	r3, #1
 8009b0e:	2300      	moveq	r3, #0
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <print_string_ptr+0x84>
 8009b16:	e005      	b.n	8009b24 <print_string_ptr+0x8c>
 8009b18:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b1a:	d103      	bne.n	8009b24 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	617b      	str	r3, [r7, #20]
                break;
 8009b22:	e007      	b.n	8009b34 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b1f      	cmp	r3, #31
 8009b2a:	d802      	bhi.n	8009b32 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	3305      	adds	r3, #5
 8009b30:	617b      	str	r3, [r7, #20]
                }
                break;
 8009b32:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	3301      	adds	r3, #1
 8009b38:	61fb      	str	r3, [r7, #28]
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1d6      	bne.n	8009af0 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8009b42:	69fa      	ldr	r2, [r7, #28]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	461a      	mov	r2, r3
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3303      	adds	r3, #3
 8009b54:	4619      	mov	r1, r3
 8009b56:	6838      	ldr	r0, [r7, #0]
 8009b58:	f7ff fdaa 	bl	80096b0 <ensure>
 8009b5c:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <print_string_ptr+0xd0>
    {
        return false;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e0bc      	b.n	8009ce2 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d117      	bne.n	8009b9e <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2222      	movs	r2, #34	@ 0x22
 8009b72:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	3301      	adds	r3, #1
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f008 f9b6 	bl	8011eee <memcpy>
        output[output_length + 1] = '\"';
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3301      	adds	r3, #1
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	4413      	add	r3, r2
 8009b8a:	2222      	movs	r2, #34	@ 0x22
 8009b8c:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3302      	adds	r3, #2
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4413      	add	r3, r2
 8009b96:	2200      	movs	r2, #0
 8009b98:	701a      	strb	r2, [r3, #0]

        return true;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e0a1      	b.n	8009ce2 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2222      	movs	r2, #34	@ 0x22
 8009ba2:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	e086      	b.n	8009cbe <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b1f      	cmp	r3, #31
 8009bb6:	d90c      	bls.n	8009bd2 <print_string_ptr+0x13a>
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b22      	cmp	r3, #34	@ 0x22
 8009bbe:	d008      	beq.n	8009bd2 <print_string_ptr+0x13a>
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8009bc6:	d004      	beq.n	8009bd2 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	781a      	ldrb	r2, [r3, #0]
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	701a      	strb	r2, [r3, #0]
 8009bd0:	e06f      	b.n	8009cb2 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	61ba      	str	r2, [r7, #24]
 8009bd8:	225c      	movs	r2, #92	@ 0x5c
 8009bda:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	2b22      	cmp	r3, #34	@ 0x22
 8009be2:	dc3d      	bgt.n	8009c60 <print_string_ptr+0x1c8>
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	db59      	blt.n	8009c9c <print_string_ptr+0x204>
 8009be8:	3b08      	subs	r3, #8
 8009bea:	2b1a      	cmp	r3, #26
 8009bec:	d856      	bhi.n	8009c9c <print_string_ptr+0x204>
 8009bee:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf4 <print_string_ptr+0x15c>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c75 	.word	0x08009c75
 8009bf8:	08009c95 	.word	0x08009c95
 8009bfc:	08009c85 	.word	0x08009c85
 8009c00:	08009c9d 	.word	0x08009c9d
 8009c04:	08009c7d 	.word	0x08009c7d
 8009c08:	08009c8d 	.word	0x08009c8d
 8009c0c:	08009c9d 	.word	0x08009c9d
 8009c10:	08009c9d 	.word	0x08009c9d
 8009c14:	08009c9d 	.word	0x08009c9d
 8009c18:	08009c9d 	.word	0x08009c9d
 8009c1c:	08009c9d 	.word	0x08009c9d
 8009c20:	08009c9d 	.word	0x08009c9d
 8009c24:	08009c9d 	.word	0x08009c9d
 8009c28:	08009c9d 	.word	0x08009c9d
 8009c2c:	08009c9d 	.word	0x08009c9d
 8009c30:	08009c9d 	.word	0x08009c9d
 8009c34:	08009c9d 	.word	0x08009c9d
 8009c38:	08009c9d 	.word	0x08009c9d
 8009c3c:	08009c9d 	.word	0x08009c9d
 8009c40:	08009c9d 	.word	0x08009c9d
 8009c44:	08009c9d 	.word	0x08009c9d
 8009c48:	08009c9d 	.word	0x08009c9d
 8009c4c:	08009c9d 	.word	0x08009c9d
 8009c50:	08009c9d 	.word	0x08009c9d
 8009c54:	08009c9d 	.word	0x08009c9d
 8009c58:	08009c9d 	.word	0x08009c9d
 8009c5c:	08009c6d 	.word	0x08009c6d
 8009c60:	2b5c      	cmp	r3, #92	@ 0x5c
 8009c62:	d11b      	bne.n	8009c9c <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	225c      	movs	r2, #92	@ 0x5c
 8009c68:	701a      	strb	r2, [r3, #0]
                    break;
 8009c6a:	e022      	b.n	8009cb2 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	2222      	movs	r2, #34	@ 0x22
 8009c70:	701a      	strb	r2, [r3, #0]
                    break;
 8009c72:	e01e      	b.n	8009cb2 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	2262      	movs	r2, #98	@ 0x62
 8009c78:	701a      	strb	r2, [r3, #0]
                    break;
 8009c7a:	e01a      	b.n	8009cb2 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	2266      	movs	r2, #102	@ 0x66
 8009c80:	701a      	strb	r2, [r3, #0]
                    break;
 8009c82:	e016      	b.n	8009cb2 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	226e      	movs	r2, #110	@ 0x6e
 8009c88:	701a      	strb	r2, [r3, #0]
                    break;
 8009c8a:	e012      	b.n	8009cb2 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	2272      	movs	r2, #114	@ 0x72
 8009c90:	701a      	strb	r2, [r3, #0]
                    break;
 8009c92:	e00e      	b.n	8009cb2 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	2274      	movs	r2, #116	@ 0x74
 8009c98:	701a      	strb	r2, [r3, #0]
                    break;
 8009c9a:	e00a      	b.n	8009cb2 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4914      	ldr	r1, [pc, #80]	@ (8009cf4 <print_string_ptr+0x25c>)
 8009ca4:	69b8      	ldr	r0, [r7, #24]
 8009ca6:	f007 ff3b 	bl	8011b20 <siprintf>
                    output_pointer += 4;
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	3304      	adds	r3, #4
 8009cae:	61bb      	str	r3, [r7, #24]
                    break;
 8009cb0:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	61fb      	str	r3, [r7, #28]
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	61bb      	str	r3, [r7, #24]
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f47f af74 	bne.w	8009bb0 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	4413      	add	r3, r2
 8009cd0:	2222      	movs	r2, #34	@ 0x22
 8009cd2:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	4413      	add	r3, r2
 8009cdc:	2200      	movs	r2, #0
 8009cde:	701a      	strb	r2, [r3, #0]

    return true;
 8009ce0:	2301      	movs	r3, #1
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	080133ec 	.word	0x080133ec
 8009cf0:	04000037 	.word	0x04000037
 8009cf4:	080133f0 	.word	0x080133f0

08009cf8 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7ff fec5 	bl	8009a98 <print_string_ptr>
 8009d0e:	4603      	mov	r3, r0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08e      	sub	sp, #56	@ 0x38
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8009d24:	2300      	movs	r3, #0
 8009d26:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 8009d28:	f107 0310 	add.w	r3, r7, #16
 8009d2c:	2224      	movs	r2, #36	@ 0x24
 8009d2e:	2100      	movs	r1, #0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f008 f83d 	bl	8011db0 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8009e28 <print+0x110>)
 8009d3c:	6812      	ldr	r2, [r2, #0]
 8009d3e:	4610      	mov	r0, r2
 8009d40:	4798      	blx	r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8009d46:	4b38      	ldr	r3, [pc, #224]	@ (8009e28 <print+0x110>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009d56:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d042      	beq.n	8009de8 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8009d62:	f107 0310 	add.w	r3, r7, #16
 8009d66:	4619      	mov	r1, r3
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 f86f 	bl	8009e4c <print_value>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d03b      	beq.n	8009dec <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8009d74:	f107 0310 	add.w	r3, r7, #16
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff fd33 	bl	80097e4 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00d      	beq.n	8009da2 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	6938      	ldr	r0, [r7, #16]
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	3201      	adds	r2, #1
 8009d90:	4611      	mov	r1, r2
 8009d92:	4798      	blx	r3
 8009d94:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8009d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d029      	beq.n	8009df0 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	613b      	str	r3, [r7, #16]
 8009da0:	e020      	b.n	8009de4 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	3201      	adds	r2, #1
 8009daa:	4610      	mov	r0, r2
 8009dac:	4798      	blx	r3
 8009dae:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8009db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d01e      	beq.n	8009df4 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8009db6:	6939      	ldr	r1, [r7, #16]
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	bf28      	it	cs
 8009dc2:	4613      	movcs	r3, r2
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009dc8:	f008 f891 	bl	8011eee <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009dd0:	4413      	add	r3, r2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
        buffer->buffer = NULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	613b      	str	r3, [r7, #16]
    }

    return printed;
 8009de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de6:	e01a      	b.n	8009e1e <print+0x106>
        goto fail;
 8009de8:	bf00      	nop
 8009dea:	e004      	b.n	8009df6 <print+0xde>
        goto fail;
 8009dec:	bf00      	nop
 8009dee:	e002      	b.n	8009df6 <print+0xde>
            goto fail;
 8009df0:	bf00      	nop
 8009df2:	e000      	b.n	8009df6 <print+0xde>
            goto fail;
 8009df4:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d006      	beq.n	8009e0a <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	4610      	mov	r0, r2
 8009e04:	4798      	blx	r3
        buffer->buffer = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d005      	beq.n	8009e1c <print+0x104>
    {
        hooks->deallocate(printed);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009e16:	4798      	blx	r3
        printed = NULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3738      	adds	r7, #56	@ 0x38
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	080136c8 	.word	0x080136c8

08009e2c <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8009e34:	4a04      	ldr	r2, [pc, #16]	@ (8009e48 <cJSON_PrintUnformatted+0x1c>)
 8009e36:	2100      	movs	r1, #0
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff ff6d 	bl	8009d18 <print>
 8009e3e:	4603      	mov	r3, r0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	20000000 	.word	0x20000000

08009e4c <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <print_value+0x1a>
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <print_value+0x1e>
    {
        return false;
 8009e66:	2300      	movs	r3, #0
 8009e68:	e0c9      	b.n	8009ffe <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b80      	cmp	r3, #128	@ 0x80
 8009e72:	f000 808e 	beq.w	8009f92 <print_value+0x146>
 8009e76:	2b80      	cmp	r3, #128	@ 0x80
 8009e78:	f300 80c0 	bgt.w	8009ffc <print_value+0x1b0>
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	dc49      	bgt.n	8009f14 <print_value+0xc8>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f340 80bb 	ble.w	8009ffc <print_value+0x1b0>
 8009e86:	3b01      	subs	r3, #1
 8009e88:	2b1f      	cmp	r3, #31
 8009e8a:	f200 80b7 	bhi.w	8009ffc <print_value+0x1b0>
 8009e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <print_value+0x48>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009f3f 	.word	0x08009f3f
 8009e98:	08009f63 	.word	0x08009f63
 8009e9c:	08009ffd 	.word	0x08009ffd
 8009ea0:	08009f1b 	.word	0x08009f1b
 8009ea4:	08009ffd 	.word	0x08009ffd
 8009ea8:	08009ffd 	.word	0x08009ffd
 8009eac:	08009ffd 	.word	0x08009ffd
 8009eb0:	08009f87 	.word	0x08009f87
 8009eb4:	08009ffd 	.word	0x08009ffd
 8009eb8:	08009ffd 	.word	0x08009ffd
 8009ebc:	08009ffd 	.word	0x08009ffd
 8009ec0:	08009ffd 	.word	0x08009ffd
 8009ec4:	08009ffd 	.word	0x08009ffd
 8009ec8:	08009ffd 	.word	0x08009ffd
 8009ecc:	08009ffd 	.word	0x08009ffd
 8009ed0:	08009fd9 	.word	0x08009fd9
 8009ed4:	08009ffd 	.word	0x08009ffd
 8009ed8:	08009ffd 	.word	0x08009ffd
 8009edc:	08009ffd 	.word	0x08009ffd
 8009ee0:	08009ffd 	.word	0x08009ffd
 8009ee4:	08009ffd 	.word	0x08009ffd
 8009ee8:	08009ffd 	.word	0x08009ffd
 8009eec:	08009ffd 	.word	0x08009ffd
 8009ef0:	08009ffd 	.word	0x08009ffd
 8009ef4:	08009ffd 	.word	0x08009ffd
 8009ef8:	08009ffd 	.word	0x08009ffd
 8009efc:	08009ffd 	.word	0x08009ffd
 8009f00:	08009ffd 	.word	0x08009ffd
 8009f04:	08009ffd 	.word	0x08009ffd
 8009f08:	08009ffd 	.word	0x08009ffd
 8009f0c:	08009ffd 	.word	0x08009ffd
 8009f10:	08009fe5 	.word	0x08009fe5
 8009f14:	2b40      	cmp	r3, #64	@ 0x40
 8009f16:	d06b      	beq.n	8009ff0 <print_value+0x1a4>
 8009f18:	e070      	b.n	8009ffc <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8009f1a:	2105      	movs	r1, #5
 8009f1c:	6838      	ldr	r0, [r7, #0]
 8009f1e:	f7ff fbc7 	bl	80096b0 <ensure>
 8009f22:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <print_value+0xe2>
            {
                return false;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e067      	b.n	8009ffe <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	4a35      	ldr	r2, [pc, #212]	@ (800a008 <print_value+0x1bc>)
 8009f32:	6810      	ldr	r0, [r2, #0]
 8009f34:	6018      	str	r0, [r3, #0]
 8009f36:	7912      	ldrb	r2, [r2, #4]
 8009f38:	711a      	strb	r2, [r3, #4]
            return true;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e05f      	b.n	8009ffe <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8009f3e:	2106      	movs	r1, #6
 8009f40:	6838      	ldr	r0, [r7, #0]
 8009f42:	f7ff fbb5 	bl	80096b0 <ensure>
 8009f46:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <print_value+0x106>
            {
                return false;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e055      	b.n	8009ffe <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4a2d      	ldr	r2, [pc, #180]	@ (800a00c <print_value+0x1c0>)
 8009f56:	6810      	ldr	r0, [r2, #0]
 8009f58:	6018      	str	r0, [r3, #0]
 8009f5a:	8892      	ldrh	r2, [r2, #4]
 8009f5c:	809a      	strh	r2, [r3, #4]
            return true;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e04d      	b.n	8009ffe <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8009f62:	2105      	movs	r1, #5
 8009f64:	6838      	ldr	r0, [r7, #0]
 8009f66:	f7ff fba3 	bl	80096b0 <ensure>
 8009f6a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <print_value+0x12a>
            {
                return false;
 8009f72:	2300      	movs	r3, #0
 8009f74:	e043      	b.n	8009ffe <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4a25      	ldr	r2, [pc, #148]	@ (800a010 <print_value+0x1c4>)
 8009f7a:	6810      	ldr	r0, [r2, #0]
 8009f7c:	6018      	str	r0, [r3, #0]
 8009f7e:	7912      	ldrb	r2, [r2, #4]
 8009f80:	711a      	strb	r2, [r3, #4]
            return true;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e03b      	b.n	8009ffe <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff fc95 	bl	80098b8 <print_number>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	e035      	b.n	8009ffe <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <print_value+0x156>
            {
                return false;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	e02d      	b.n	8009ffe <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe f93c 	bl	8008224 <strlen>
 8009fac:	4603      	mov	r3, r0
 8009fae:	3301      	adds	r3, #1
 8009fb0:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	6838      	ldr	r0, [r7, #0]
 8009fb6:	f7ff fb7b 	bl	80096b0 <ensure>
 8009fba:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <print_value+0x17a>
            {
                return false;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	e01b      	b.n	8009ffe <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f007 ff8d 	bl	8011eee <memcpy>
            return true;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e012      	b.n	8009ffe <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff fe8c 	bl	8009cf8 <print_string>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	e00c      	b.n	8009ffe <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f814 	bl	800a014 <print_array>
 8009fec:	4603      	mov	r3, r0
 8009fee:	e006      	b.n	8009ffe <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f894 	bl	800a120 <print_object>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	e000      	b.n	8009ffe <print_value+0x1b2>

        default:
            return false;
 8009ffc:	2300      	movs	r3, #0
    }
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	080133cc 	.word	0x080133cc
 800a00c:	080133fc 	.word	0x080133fc
 800a010:	08013404 	.word	0x08013404

0800a014 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <print_array+0x22>
    {
        return false;
 800a032:	2300      	movs	r3, #0
 800a034:	e070      	b.n	800a118 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800a036:	2101      	movs	r1, #1
 800a038:	6838      	ldr	r0, [r7, #0]
 800a03a:	f7ff fb39 	bl	80096b0 <ensure>
 800a03e:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <print_array+0x36>
    {
        return false;
 800a046:	2300      	movs	r3, #0
 800a048:	e066      	b.n	800a118 <print_array+0x104>
    }

    *output_pointer = '[';
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	225b      	movs	r2, #91	@ 0x5b
 800a04e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800a064:	e03d      	b.n	800a0e2 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6938      	ldr	r0, [r7, #16]
 800a06a:	f7ff feef 	bl	8009e4c <print_value>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <print_array+0x64>
        {
            return false;
 800a074:	2300      	movs	r3, #0
 800a076:	e04f      	b.n	800a118 <print_array+0x104>
        }
        update_offset(output_buffer);
 800a078:	6838      	ldr	r0, [r7, #0]
 800a07a:	f7ff fbb3 	bl	80097e4 <update_offset>
        if (current_element->next)
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d02a      	beq.n	800a0dc <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <print_array+0x7e>
 800a08e:	2302      	movs	r3, #2
 800a090:	e000      	b.n	800a094 <print_array+0x80>
 800a092:	2301      	movs	r3, #1
 800a094:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3301      	adds	r3, #1
 800a09a:	4619      	mov	r1, r3
 800a09c:	6838      	ldr	r0, [r7, #0]
 800a09e:	f7ff fb07 	bl	80096b0 <ensure>
 800a0a2:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <print_array+0x9a>
            {
                return false;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	e034      	b.n	800a118 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	617a      	str	r2, [r7, #20]
 800a0b4:	222c      	movs	r2, #44	@ 0x2c
 800a0b6:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d004      	beq.n	800a0ca <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	617a      	str	r2, [r7, #20]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	441a      	add	r2, r3
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1be      	bne.n	800a066 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800a0e8:	2102      	movs	r1, #2
 800a0ea:	6838      	ldr	r0, [r7, #0]
 800a0ec:	f7ff fae0 	bl	80096b0 <ensure>
 800a0f0:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <print_array+0xe8>
    {
        return false;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	e00d      	b.n	800a118 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	617a      	str	r2, [r7, #20]
 800a102:	225d      	movs	r2, #93	@ 0x5d
 800a104:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2200      	movs	r2, #0
 800a10a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	1e5a      	subs	r2, r3, #1
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	60da      	str	r2, [r3, #12]

    return true;
 800a116:	2301      	movs	r3, #1
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <print_object+0x22>
    {
        return false;
 800a13e:	2300      	movs	r3, #0
 800a140:	e108      	b.n	800a354 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <print_object+0x2e>
 800a14a:	2302      	movs	r3, #2
 800a14c:	e000      	b.n	800a150 <print_object+0x30>
 800a14e:	2301      	movs	r3, #1
 800a150:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3301      	adds	r3, #1
 800a156:	4619      	mov	r1, r3
 800a158:	6838      	ldr	r0, [r7, #0]
 800a15a:	f7ff faa9 	bl	80096b0 <ensure>
 800a15e:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <print_object+0x4a>
    {
        return false;
 800a166:	2300      	movs	r3, #0
 800a168:	e0f4      	b.n	800a354 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	61fa      	str	r2, [r7, #28]
 800a170:	227b      	movs	r2, #123	@ 0x7b
 800a172:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d004      	beq.n	800a190 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	61fa      	str	r2, [r7, #28]
 800a18c:	220a      	movs	r2, #10
 800a18e:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	689a      	ldr	r2, [r3, #8]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	441a      	add	r2, r3
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	609a      	str	r2, [r3, #8]

    while (current_item)
 800a19c:	e0a0      	b.n	800a2e0 <print_object+0x1c0>
    {
        if (output_buffer->format)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d022      	beq.n	800a1ec <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6838      	ldr	r0, [r7, #0]
 800a1ae:	f7ff fa7f 	bl	80096b0 <ensure>
 800a1b2:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <print_object+0x9e>
            {
                return false;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e0ca      	b.n	800a354 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]
 800a1c2:	e007      	b.n	800a1d4 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	61fa      	str	r2, [r7, #28]
 800a1ca:	2209      	movs	r2, #9
 800a1cc:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d3f2      	bcc.n	800a1c4 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	689a      	ldr	r2, [r3, #8]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	441a      	add	r2, r3
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff fc50 	bl	8009a98 <print_string_ptr>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d101      	bne.n	800a202 <print_object+0xe2>
        {
            return false;
 800a1fe:	2300      	movs	r3, #0
 800a200:	e0a8      	b.n	800a354 <print_object+0x234>
        }
        update_offset(output_buffer);
 800a202:	6838      	ldr	r0, [r7, #0]
 800a204:	f7ff faee 	bl	80097e4 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <print_object+0xf4>
 800a210:	2302      	movs	r3, #2
 800a212:	e000      	b.n	800a216 <print_object+0xf6>
 800a214:	2301      	movs	r3, #1
 800a216:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800a218:	68f9      	ldr	r1, [r7, #12]
 800a21a:	6838      	ldr	r0, [r7, #0]
 800a21c:	f7ff fa48 	bl	80096b0 <ensure>
 800a220:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <print_object+0x10c>
        {
            return false;
 800a228:	2300      	movs	r3, #0
 800a22a:	e093      	b.n	800a354 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	61fa      	str	r2, [r7, #28]
 800a232:	223a      	movs	r2, #58	@ 0x3a
 800a234:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d004      	beq.n	800a248 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	61fa      	str	r2, [r7, #28]
 800a244:	2209      	movs	r2, #9
 800a246:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	441a      	add	r2, r3
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	69b8      	ldr	r0, [r7, #24]
 800a258:	f7ff fdf8 	bl	8009e4c <print_value>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <print_object+0x146>
        {
            return false;
 800a262:	2300      	movs	r3, #0
 800a264:	e076      	b.n	800a354 <print_object+0x234>
        }
        update_offset(output_buffer);
 800a266:	6838      	ldr	r0, [r7, #0]
 800a268:	f7ff fabc 	bl	80097e4 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <print_object+0x158>
 800a274:	2201      	movs	r2, #1
 800a276:	e000      	b.n	800a27a <print_object+0x15a>
 800a278:	2200      	movs	r2, #0
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <print_object+0x166>
 800a282:	2301      	movs	r3, #1
 800a284:	e000      	b.n	800a288 <print_object+0x168>
 800a286:	2300      	movs	r3, #0
 800a288:	4413      	add	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	3301      	adds	r3, #1
 800a290:	4619      	mov	r1, r3
 800a292:	6838      	ldr	r0, [r7, #0]
 800a294:	f7ff fa0c 	bl	80096b0 <ensure>
 800a298:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <print_object+0x184>
        {
            return false;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e057      	b.n	800a354 <print_object+0x234>
        }
        if (current_item->next)
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <print_object+0x196>
        {
            *output_pointer++ = ',';
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	61fa      	str	r2, [r7, #28]
 800a2b2:	222c      	movs	r2, #44	@ 0x2c
 800a2b4:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d004      	beq.n	800a2c8 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	61fa      	str	r2, [r7, #28]
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	689a      	ldr	r2, [r3, #8]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	441a      	add	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f47f af5b 	bne.w	800a19e <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <print_object+0x1d8>
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	e000      	b.n	800a2fa <print_object+0x1da>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6838      	ldr	r0, [r7, #0]
 800a2fe:	f7ff f9d7 	bl	80096b0 <ensure>
 800a302:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <print_object+0x1ee>
    {
        return false;
 800a30a:	2300      	movs	r3, #0
 800a30c:	e022      	b.n	800a354 <print_object+0x234>
    }
    if (output_buffer->format)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d010      	beq.n	800a338 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800a316:	2300      	movs	r3, #0
 800a318:	613b      	str	r3, [r7, #16]
 800a31a:	e007      	b.n	800a32c <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	1c5a      	adds	r2, r3, #1
 800a320:	61fa      	str	r2, [r7, #28]
 800a322:	2209      	movs	r2, #9
 800a324:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3301      	adds	r3, #1
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	3b01      	subs	r3, #1
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	429a      	cmp	r2, r3
 800a336:	d3f1      	bcc.n	800a31c <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	61fa      	str	r2, [r7, #28]
 800a33e:	227d      	movs	r2, #125	@ 0x7d
 800a340:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2200      	movs	r2, #0
 800a346:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	1e5a      	subs	r2, r3, #1
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	60da      	str	r2, [r3, #12]

    return true;
 800a352:	2301      	movs	r3, #1
}
 800a354:	4618      	mov	r0, r3
 800a356:	3720      	adds	r7, #32
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	605a      	str	r2, [r3, #4]
}
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d006      	beq.n	800a3a0 <add_item_to_array+0x22>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <add_item_to_array+0x22>
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d101      	bne.n	800a3a4 <add_item_to_array+0x26>
    {
        return false;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e01e      	b.n	800a3e2 <add_item_to_array+0x64>
    }

    child = array->child;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d109      	bne.n	800a3c4 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	e00d      	b.n	800a3e0 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d009      	beq.n	800a3e0 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff ffc2 	bl	800a35c <suffix_object>
            array->child->prev = item;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800a3e0:	2301      	movs	r3, #1
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800a3f2:	687b      	ldr	r3, [r7, #4]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800a412:	2300      	movs	r3, #0
 800a414:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d009      	beq.n	800a430 <add_item_to_object+0x30>
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d006      	beq.n	800a430 <add_item_to_object+0x30>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d003      	beq.n	800a430 <add_item_to_object+0x30>
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d101      	bne.n	800a434 <add_item_to_object+0x34>
    {
        return false;
 800a430:	2300      	movs	r3, #0
 800a432:	e036      	b.n	800a4a2 <add_item_to_object+0xa2>
    }

    if (constant_key)
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d009      	beq.n	800a44e <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800a43a:	68b8      	ldr	r0, [r7, #8]
 800a43c:	f7ff ffd5 	bl	800a3ea <cast_away_const>
 800a440:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a44a:	613b      	str	r3, [r7, #16]
 800a44c:	e00e      	b.n	800a46c <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	68b8      	ldr	r0, [r7, #8]
 800a452:	f7ff f897 	bl	8009584 <cJSON_strdup>
 800a456:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <add_item_to_object+0x62>
        {
            return false;
 800a45e:	2300      	movs	r3, #0
 800a460:	e01f      	b.n	800a4a2 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a46a:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a474:	2b00      	cmp	r3, #0
 800a476:	d109      	bne.n	800a48c <add_item_to_object+0x8c>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a1b      	ldr	r3, [r3, #32]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6a12      	ldr	r2, [r2, #32]
 800a488:	4610      	mov	r0, r2
 800a48a:	4798      	blx	r3
    }

    item->string = new_key;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800a498:	6879      	ldr	r1, [r7, #4]
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f7ff ff6f 	bl	800a37e <add_item_to_array>
 800a4a0:	4603      	mov	r3, r0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800a4ba:	ed97 0b00 	vldr	d0, [r7]
 800a4be:	f000 f81b 	bl	800a4f8 <cJSON_CreateNumber>
 800a4c2:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	4b09      	ldr	r3, [pc, #36]	@ (800a4f0 <cJSON_AddNumberToObject+0x44>)
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff ff96 	bl	800a400 <add_item_to_object>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	e003      	b.n	800a4e6 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800a4de:	6978      	ldr	r0, [r7, #20]
 800a4e0:	f7ff f88e 	bl	8009600 <cJSON_Delete>
    return NULL;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3718      	adds	r7, #24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20000000 	.word	0x20000000
 800a4f4:	00000000 	.word	0x00000000

0800a4f8 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800a502:	481f      	ldr	r0, [pc, #124]	@ (800a580 <cJSON_CreateNumber+0x88>)
 800a504:	f7ff f866 	bl	80095d4 <cJSON_New_Item>
 800a508:	60f8      	str	r0, [r7, #12]
    if(item)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d02c      	beq.n	800a56a <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2208      	movs	r2, #8
 800a514:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800a516:	68f9      	ldr	r1, [r7, #12]
 800a518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a51c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800a520:	a315      	add	r3, pc, #84	@ (adr r3, 800a578 <cJSON_CreateNumber+0x80>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a52a:	f7fe fb1b 	bl	8008b64 <__aeabi_dcmpge>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d004      	beq.n	800a53e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a53a:	615a      	str	r2, [r3, #20]
 800a53c:	e015      	b.n	800a56a <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800a53e:	f04f 0200 	mov.w	r2, #0
 800a542:	4b10      	ldr	r3, [pc, #64]	@ (800a584 <cJSON_CreateNumber+0x8c>)
 800a544:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a548:	f7fe fb02 	bl	8008b50 <__aeabi_dcmple>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d004      	beq.n	800a55c <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a558:	615a      	str	r2, [r3, #20]
 800a55a:	e006      	b.n	800a56a <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800a55c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a560:	f7fe fb2a 	bl	8008bb8 <__aeabi_d2iz>
 800a564:	4602      	mov	r2, r0
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800a56a:	68fb      	ldr	r3, [r7, #12]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	f3af 8000 	nop.w
 800a578:	ffc00000 	.word	0xffc00000
 800a57c:	41dfffff 	.word	0x41dfffff
 800a580:	20000000 	.word	0x20000000
 800a584:	c1e00000 	.word	0xc1e00000

0800a588 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800a58e:	4807      	ldr	r0, [pc, #28]	@ (800a5ac <cJSON_CreateObject+0x24>)
 800a590:	f7ff f820 	bl	80095d4 <cJSON_New_Item>
 800a594:	6078      	str	r0, [r7, #4]
    if (item)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2240      	movs	r2, #64	@ 0x40
 800a5a0:	60da      	str	r2, [r3, #12]
    }

    return item;
 800a5a2:	687b      	ldr	r3, [r7, #4]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	20000000 	.word	0x20000000

0800a5b0 <InitializeDisplay>:

uint8_t current_line = 0;
char display_buffer[MAX_DISPLAY_LINES][23];

void InitializeDisplay(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af04      	add	r7, sp, #16
	printf("Application started\n");
 800a5b6:	4825      	ldr	r0, [pc, #148]	@ (800a64c <InitializeDisplay+0x9c>)
 800a5b8:	f007 faaa 	bl	8011b10 <puts>
	printf("Touch application running\n");
 800a5bc:	4824      	ldr	r0, [pc, #144]	@ (800a650 <InitializeDisplay+0xa0>)
 800a5be:	f007 faa7 	bl	8011b10 <puts>
    ST7735_Init(0);
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	f7fe fdde 	bl	8009184 <ST7735_Init>
    fillScreen(BLACK);
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	f7fe fccf 	bl	8008f6c <fillScreen>
    ST7735_SetRotation(1);
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	f7fe fe04 	bl	80091dc <ST7735_SetRotation>
    // Clear display buffer
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	607b      	str	r3, [r7, #4]
 800a5d8:	e00f      	b.n	800a5fa <InitializeDisplay+0x4a>
        memset(display_buffer[i], 0, 23);
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	4413      	add	r3, r2
 800a5e2:	00db      	lsls	r3, r3, #3
 800a5e4:	1a9b      	subs	r3, r3, r2
 800a5e6:	4a1b      	ldr	r2, [pc, #108]	@ (800a654 <InitializeDisplay+0xa4>)
 800a5e8:	4413      	add	r3, r2
 800a5ea:	2217      	movs	r2, #23
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f007 fbde 	bl	8011db0 <memset>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	607b      	str	r3, [r7, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b07      	cmp	r3, #7
 800a5fe:	ddec      	ble.n	800a5da <InitializeDisplay+0x2a>
    }
    current_line = 0;
 800a600:	4b15      	ldr	r3, [pc, #84]	@ (800a658 <InitializeDisplay+0xa8>)
 800a602:	2200      	movs	r2, #0
 800a604:	701a      	strb	r2, [r3, #0]

    // Display header
    ST7735_WriteString(5, 5, "Application v3.0", Font_7x10, GREEN, BLACK);
 800a606:	4b15      	ldr	r3, [pc, #84]	@ (800a65c <InitializeDisplay+0xac>)
 800a608:	2200      	movs	r2, #0
 800a60a:	9202      	str	r2, [sp, #8]
 800a60c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800a610:	9201      	str	r2, [sp, #4]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	9200      	str	r2, [sp, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a11      	ldr	r2, [pc, #68]	@ (800a660 <InitializeDisplay+0xb0>)
 800a61a:	2105      	movs	r1, #5
 800a61c:	2005      	movs	r0, #5
 800a61e:	f7fe fed5 	bl	80093cc <ST7735_WriteString>
    ST7735_WriteString(5, 18, "----TOUCH APP----", Font_7x10, YELLOW, BLACK);
 800a622:	4b0e      	ldr	r3, [pc, #56]	@ (800a65c <InitializeDisplay+0xac>)
 800a624:	2200      	movs	r2, #0
 800a626:	9202      	str	r2, [sp, #8]
 800a628:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800a62c:	9201      	str	r2, [sp, #4]
 800a62e:	685a      	ldr	r2, [r3, #4]
 800a630:	9200      	str	r2, [sp, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a0b      	ldr	r2, [pc, #44]	@ (800a664 <InitializeDisplay+0xb4>)
 800a636:	2112      	movs	r1, #18
 800a638:	2005      	movs	r0, #5
 800a63a:	f7fe fec7 	bl	80093cc <ST7735_WriteString>
    printf("Touch application running\n");
 800a63e:	4804      	ldr	r0, [pc, #16]	@ (800a650 <InitializeDisplay+0xa0>)
 800a640:	f007 fa66 	bl	8011b10 <puts>
}
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	0801340c 	.word	0x0801340c
 800a650:	08013420 	.word	0x08013420
 800a654:	200000a8 	.word	0x200000a8
 800a658:	200000a5 	.word	0x200000a5
 800a65c:	2000000c 	.word	0x2000000c
 800a660:	0801343c 	.word	0x0801343c
 800a664:	08013450 	.word	0x08013450

0800a668 <ClearDisplay>:


void ClearDisplay(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af04      	add	r7, sp, #16
    fillScreen(BLACK);
 800a66e:	2000      	movs	r0, #0
 800a670:	f7fe fc7c 	bl	8008f6c <fillScreen>
    current_line = 0;
 800a674:	4b1c      	ldr	r3, [pc, #112]	@ (800a6e8 <ClearDisplay+0x80>)
 800a676:	2200      	movs	r2, #0
 800a678:	701a      	strb	r2, [r3, #0]

    // Redraw header
    ST7735_WriteString(5, 5, "Application v3.0", Font_7x10, GREEN, BLACK);
 800a67a:	4b1c      	ldr	r3, [pc, #112]	@ (800a6ec <ClearDisplay+0x84>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	9202      	str	r2, [sp, #8]
 800a680:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800a684:	9201      	str	r2, [sp, #4]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	9200      	str	r2, [sp, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a18      	ldr	r2, [pc, #96]	@ (800a6f0 <ClearDisplay+0x88>)
 800a68e:	2105      	movs	r1, #5
 800a690:	2005      	movs	r0, #5
 800a692:	f7fe fe9b 	bl	80093cc <ST7735_WriteString>
    ST7735_WriteString(5, 18, "----TOUCH APP----", Font_7x10, YELLOW, BLACK);
 800a696:	4b15      	ldr	r3, [pc, #84]	@ (800a6ec <ClearDisplay+0x84>)
 800a698:	2200      	movs	r2, #0
 800a69a:	9202      	str	r2, [sp, #8]
 800a69c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800a6a0:	9201      	str	r2, [sp, #4]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	9200      	str	r2, [sp, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a12      	ldr	r2, [pc, #72]	@ (800a6f4 <ClearDisplay+0x8c>)
 800a6aa:	2112      	movs	r1, #18
 800a6ac:	2005      	movs	r0, #5
 800a6ae:	f7fe fe8d 	bl	80093cc <ST7735_WriteString>

    // Clear display buffer
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	607b      	str	r3, [r7, #4]
 800a6b6:	e00f      	b.n	800a6d8 <ClearDisplay+0x70>
        memset(display_buffer[i], 0, 23);
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	4413      	add	r3, r2
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	4a0c      	ldr	r2, [pc, #48]	@ (800a6f8 <ClearDisplay+0x90>)
 800a6c6:	4413      	add	r3, r2
 800a6c8:	2217      	movs	r2, #23
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f007 fb6f 	bl	8011db0 <memset>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	607b      	str	r3, [r7, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b07      	cmp	r3, #7
 800a6dc:	ddec      	ble.n	800a6b8 <ClearDisplay+0x50>
    }
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	200000a5 	.word	0x200000a5
 800a6ec:	2000000c 	.word	0x2000000c
 800a6f0:	0801343c 	.word	0x0801343c
 800a6f4:	08013450 	.word	0x08013450
 800a6f8:	200000a8 	.word	0x200000a8

0800a6fc <DisplayMessage>:
    }
}


void DisplayMessage(const char* message)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af04      	add	r7, sp, #16
 800a702:	6078      	str	r0, [r7, #4]
    if(!message) return;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d04b      	beq.n	800a7a2 <DisplayMessage+0xa6>

    // If we've reached the bottom, scroll up
    if(current_line >= MAX_DISPLAY_LINES) {
 800a70a:	4b28      	ldr	r3, [pc, #160]	@ (800a7ac <DisplayMessage+0xb0>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b07      	cmp	r3, #7
 800a710:	d904      	bls.n	800a71c <DisplayMessage+0x20>
        ClearDisplay();
 800a712:	f7ff ffa9 	bl	800a668 <ClearDisplay>
        //current_line = MAX_DISPLAY_LINES - 1;
        current_line = 0;
 800a716:	4b25      	ldr	r3, [pc, #148]	@ (800a7ac <DisplayMessage+0xb0>)
 800a718:	2200      	movs	r2, #0
 800a71a:	701a      	strb	r2, [r3, #0]
    }

    strncpy(display_buffer[current_line], message, 22);
 800a71c:	4b23      	ldr	r3, [pc, #140]	@ (800a7ac <DisplayMessage+0xb0>)
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
 800a722:	4613      	mov	r3, r2
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	4413      	add	r3, r2
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	1a9b      	subs	r3, r3, r2
 800a72c:	4a20      	ldr	r2, [pc, #128]	@ (800a7b0 <DisplayMessage+0xb4>)
 800a72e:	4413      	add	r3, r2
 800a730:	2216      	movs	r2, #22
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	4618      	mov	r0, r3
 800a736:	f007 fb43 	bl	8011dc0 <strncpy>
    display_buffer[current_line][22] = '\0';
 800a73a:	4b1c      	ldr	r3, [pc, #112]	@ (800a7ac <DisplayMessage+0xb0>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	491b      	ldr	r1, [pc, #108]	@ (800a7b0 <DisplayMessage+0xb4>)
 800a742:	4613      	mov	r3, r2
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	4413      	add	r3, r2
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	1a9b      	subs	r3, r3, r2
 800a74c:	440b      	add	r3, r1
 800a74e:	3316      	adds	r3, #22
 800a750:	2200      	movs	r2, #0
 800a752:	701a      	strb	r2, [r3, #0]

    // Display the message
    ST7735_WriteString(5, 30 + (current_line * LINE_HEIGHT), display_buffer[current_line], Font_7x10, WHITE, BLACK);
 800a754:	4b15      	ldr	r3, [pc, #84]	@ (800a7ac <DisplayMessage+0xb0>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	461a      	mov	r2, r3
 800a75a:	0052      	lsls	r2, r2, #1
 800a75c:	4413      	add	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	b29b      	uxth	r3, r3
 800a762:	331e      	adds	r3, #30
 800a764:	b299      	uxth	r1, r3
 800a766:	4b11      	ldr	r3, [pc, #68]	@ (800a7ac <DisplayMessage+0xb0>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	4613      	mov	r3, r2
 800a76e:	005b      	lsls	r3, r3, #1
 800a770:	4413      	add	r3, r2
 800a772:	00db      	lsls	r3, r3, #3
 800a774:	1a9b      	subs	r3, r3, r2
 800a776:	4a0e      	ldr	r2, [pc, #56]	@ (800a7b0 <DisplayMessage+0xb4>)
 800a778:	1898      	adds	r0, r3, r2
 800a77a:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b4 <DisplayMessage+0xb8>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	9202      	str	r2, [sp, #8]
 800a780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a784:	9201      	str	r2, [sp, #4]
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	9200      	str	r2, [sp, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4602      	mov	r2, r0
 800a78e:	2005      	movs	r0, #5
 800a790:	f7fe fe1c 	bl	80093cc <ST7735_WriteString>

    current_line++;
 800a794:	4b05      	ldr	r3, [pc, #20]	@ (800a7ac <DisplayMessage+0xb0>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	3301      	adds	r3, #1
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	4b03      	ldr	r3, [pc, #12]	@ (800a7ac <DisplayMessage+0xb0>)
 800a79e:	701a      	strb	r2, [r3, #0]
 800a7a0:	e000      	b.n	800a7a4 <DisplayMessage+0xa8>
    if(!message) return;
 800a7a2:	bf00      	nop
}
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200000a5 	.word	0x200000a5
 800a7b0:	200000a8 	.word	0x200000a8
 800a7b4:	2000000c 	.word	0x2000000c

0800a7b8 <print_To_display>:

void print_To_display(char *format,...)
{
 800a7b8:	b40f      	push	{r0, r1, r2, r3}
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b096      	sub	sp, #88	@ 0x58
 800a7be:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 800a7c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a7c4:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 800a7c6:	f107 0308 	add.w	r3, r7, #8
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f007 fa50 	bl	8011c74 <vsiprintf>
	// Also display on screen
	DisplayMessage(str);
 800a7d4:	f107 0308 	add.w	r3, r7, #8
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff ff8f 	bl	800a6fc <DisplayMessage>
    va_start(args, format);
    vsprintf(str, format, args);
    DisplayMessage(str);
    va_end(args);
#endif
}
 800a7de:	bf00      	nop
 800a7e0:	3758      	adds	r7, #88	@ 0x58
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7e8:	b004      	add	sp, #16
 800a7ea:	4770      	bx	lr

0800a7ec <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800a7f4:	1d39      	adds	r1, r7, #4
 800a7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	4803      	ldr	r0, [pc, #12]	@ (800a80c <__io_putchar+0x20>)
 800a7fe:	f003 fba1 	bl	800df44 <HAL_UART_Transmit>
	return ch;
 800a802:	687b      	ldr	r3, [r7, #4]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20000210 	.word	0x20000210

0800a810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a814:	f000 fff2 	bl	800b7fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a818:	f000 f810 	bl	800a83c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a81c:	f000 f940 	bl	800aaa0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800a820:	f000 f87e 	bl	800a920 <MX_SPI1_Init>
  MX_SPI2_Init();
 800a824:	f000 f8b4 	bl	800a990 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800a828:	f000 f8e6 	bl	800a9f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800a82c:	f000 f90e 	bl	800aa4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  InitializeDisplay();
 800a830:	f7ff febe 	bl	800a5b0 <InitializeDisplay>
  setup_freeRTOS();
 800a834:	f000 fc90 	bl	800b158 <setup_freeRTOS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a838:	bf00      	nop
 800a83a:	e7fd      	b.n	800a838 <main+0x28>

0800a83c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b094      	sub	sp, #80	@ 0x50
 800a840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a842:	f107 031c 	add.w	r3, r7, #28
 800a846:	2234      	movs	r2, #52	@ 0x34
 800a848:	2100      	movs	r1, #0
 800a84a:	4618      	mov	r0, r3
 800a84c:	f007 fab0 	bl	8011db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a850:	f107 0308 	add.w	r3, r7, #8
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]
 800a858:	605a      	str	r2, [r3, #4]
 800a85a:	609a      	str	r2, [r3, #8]
 800a85c:	60da      	str	r2, [r3, #12]
 800a85e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a860:	2300      	movs	r3, #0
 800a862:	607b      	str	r3, [r7, #4]
 800a864:	4b2c      	ldr	r3, [pc, #176]	@ (800a918 <SystemClock_Config+0xdc>)
 800a866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a868:	4a2b      	ldr	r2, [pc, #172]	@ (800a918 <SystemClock_Config+0xdc>)
 800a86a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a86e:	6413      	str	r3, [r2, #64]	@ 0x40
 800a870:	4b29      	ldr	r3, [pc, #164]	@ (800a918 <SystemClock_Config+0xdc>)
 800a872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a878:	607b      	str	r3, [r7, #4]
 800a87a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a87c:	2300      	movs	r3, #0
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	4b26      	ldr	r3, [pc, #152]	@ (800a91c <SystemClock_Config+0xe0>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a25      	ldr	r2, [pc, #148]	@ (800a91c <SystemClock_Config+0xe0>)
 800a886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a88a:	6013      	str	r3, [r2, #0]
 800a88c:	4b23      	ldr	r3, [pc, #140]	@ (800a91c <SystemClock_Config+0xe0>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a894:	603b      	str	r3, [r7, #0]
 800a896:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a898:	2302      	movs	r3, #2
 800a89a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a89c:	2301      	movs	r3, #1
 800a89e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a8a0:	2310      	movs	r3, #16
 800a8a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a8ac:	2308      	movs	r3, #8
 800a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800a8b0:	23b4      	movs	r3, #180	@ 0xb4
 800a8b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a8bc:	2302      	movs	r3, #2
 800a8be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a8c0:	f107 031c 	add.w	r3, r7, #28
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f001 fe99 	bl	800c5fc <HAL_RCC_OscConfig>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800a8d0:	f000 f980 	bl	800abd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a8d4:	f001 fb4c 	bl	800bf70 <HAL_PWREx_EnableOverDrive>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800a8de:	f000 f979 	bl	800abd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a8e2:	230f      	movs	r3, #15
 800a8e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a8ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800a8f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a8f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a8fa:	f107 0308 	add.w	r3, r7, #8
 800a8fe:	2105      	movs	r1, #5
 800a900:	4618      	mov	r0, r3
 800a902:	f001 fb85 	bl	800c010 <HAL_RCC_ClockConfig>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800a90c:	f000 f962 	bl	800abd4 <Error_Handler>
  }
}
 800a910:	bf00      	nop
 800a912:	3750      	adds	r7, #80	@ 0x50
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	40023800 	.word	0x40023800
 800a91c:	40007000 	.word	0x40007000

0800a920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a924:	4b18      	ldr	r3, [pc, #96]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a926:	4a19      	ldr	r2, [pc, #100]	@ (800a98c <MX_SPI1_Init+0x6c>)
 800a928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a92a:	4b17      	ldr	r3, [pc, #92]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a92c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800a932:	4b15      	ldr	r3, [pc, #84]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a934:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a938:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a93a:	4b13      	ldr	r3, [pc, #76]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a940:	4b11      	ldr	r3, [pc, #68]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a942:	2200      	movs	r2, #0
 800a944:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a946:	4b10      	ldr	r3, [pc, #64]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a948:	2200      	movs	r2, #0
 800a94a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a94c:	4b0e      	ldr	r3, [pc, #56]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a94e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a952:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a954:	4b0c      	ldr	r3, [pc, #48]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a956:	2200      	movs	r2, #0
 800a958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a95a:	4b0b      	ldr	r3, [pc, #44]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a960:	4b09      	ldr	r3, [pc, #36]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a962:	2200      	movs	r2, #0
 800a964:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a966:	4b08      	ldr	r3, [pc, #32]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a968:	2200      	movs	r2, #0
 800a96a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a96c:	4b06      	ldr	r3, [pc, #24]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a96e:	220a      	movs	r2, #10
 800a970:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a972:	4805      	ldr	r0, [pc, #20]	@ (800a988 <MX_SPI1_Init+0x68>)
 800a974:	f002 f8e0 	bl	800cb38 <HAL_SPI_Init>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800a97e:	f000 f929 	bl	800abd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a982:	bf00      	nop
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20000160 	.word	0x20000160
 800a98c:	40013000 	.word	0x40013000

0800a990 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a994:	4b16      	ldr	r3, [pc, #88]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a996:	4a17      	ldr	r2, [pc, #92]	@ (800a9f4 <MX_SPI2_Init+0x64>)
 800a998:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800a99a:	4b15      	ldr	r3, [pc, #84]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800a9a0:	4b13      	ldr	r3, [pc, #76]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a9a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a9a8:	4b11      	ldr	r3, [pc, #68]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a9ae:	4b10      	ldr	r3, [pc, #64]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a9b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800a9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a9c8:	4b09      	ldr	r3, [pc, #36]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9ce:	4b08      	ldr	r3, [pc, #32]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800a9d4:	4b06      	ldr	r3, [pc, #24]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9d6:	220a      	movs	r2, #10
 800a9d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a9da:	4805      	ldr	r0, [pc, #20]	@ (800a9f0 <MX_SPI2_Init+0x60>)
 800a9dc:	f002 f8ac 	bl	800cb38 <HAL_SPI_Init>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 800a9e6:	f000 f8f5 	bl	800abd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a9ea:	bf00      	nop
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	200001b8 	.word	0x200001b8
 800a9f4:	40003800 	.word	0x40003800

0800a9f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a9fc:	4b11      	ldr	r3, [pc, #68]	@ (800aa44 <MX_USART2_UART_Init+0x4c>)
 800a9fe:	4a12      	ldr	r2, [pc, #72]	@ (800aa48 <MX_USART2_UART_Init+0x50>)
 800aa00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800aa02:	4b10      	ldr	r3, [pc, #64]	@ (800aa44 <MX_USART2_UART_Init+0x4c>)
 800aa04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800aa08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800aa0a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa44 <MX_USART2_UART_Init+0x4c>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800aa10:	4b0c      	ldr	r3, [pc, #48]	@ (800aa44 <MX_USART2_UART_Init+0x4c>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800aa16:	4b0b      	ldr	r3, [pc, #44]	@ (800aa44 <MX_USART2_UART_Init+0x4c>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800aa1c:	4b09      	ldr	r3, [pc, #36]	@ (800aa44 <MX_USART2_UART_Init+0x4c>)
 800aa1e:	220c      	movs	r2, #12
 800aa20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa22:	4b08      	ldr	r3, [pc, #32]	@ (800aa44 <MX_USART2_UART_Init+0x4c>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa28:	4b06      	ldr	r3, [pc, #24]	@ (800aa44 <MX_USART2_UART_Init+0x4c>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800aa2e:	4805      	ldr	r0, [pc, #20]	@ (800aa44 <MX_USART2_UART_Init+0x4c>)
 800aa30:	f003 fa38 	bl	800dea4 <HAL_UART_Init>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800aa3a:	f000 f8cb 	bl	800abd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800aa3e:	bf00      	nop
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000210 	.word	0x20000210
 800aa48:	40004400 	.word	0x40004400

0800aa4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800aa50:	4b11      	ldr	r3, [pc, #68]	@ (800aa98 <MX_USART3_UART_Init+0x4c>)
 800aa52:	4a12      	ldr	r2, [pc, #72]	@ (800aa9c <MX_USART3_UART_Init+0x50>)
 800aa54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800aa56:	4b10      	ldr	r3, [pc, #64]	@ (800aa98 <MX_USART3_UART_Init+0x4c>)
 800aa58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800aa5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa98 <MX_USART3_UART_Init+0x4c>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800aa64:	4b0c      	ldr	r3, [pc, #48]	@ (800aa98 <MX_USART3_UART_Init+0x4c>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa98 <MX_USART3_UART_Init+0x4c>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800aa70:	4b09      	ldr	r3, [pc, #36]	@ (800aa98 <MX_USART3_UART_Init+0x4c>)
 800aa72:	220c      	movs	r2, #12
 800aa74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa76:	4b08      	ldr	r3, [pc, #32]	@ (800aa98 <MX_USART3_UART_Init+0x4c>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa7c:	4b06      	ldr	r3, [pc, #24]	@ (800aa98 <MX_USART3_UART_Init+0x4c>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800aa82:	4805      	ldr	r0, [pc, #20]	@ (800aa98 <MX_USART3_UART_Init+0x4c>)
 800aa84:	f003 fa0e 	bl	800dea4 <HAL_UART_Init>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800aa8e:	f000 f8a1 	bl	800abd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800aa92:	bf00      	nop
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	20000258 	.word	0x20000258
 800aa9c:	40004800 	.word	0x40004800

0800aaa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08a      	sub	sp, #40	@ 0x28
 800aaa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaa6:	f107 0314 	add.w	r3, r7, #20
 800aaaa:	2200      	movs	r2, #0
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	605a      	str	r2, [r3, #4]
 800aab0:	609a      	str	r2, [r3, #8]
 800aab2:	60da      	str	r2, [r3, #12]
 800aab4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aab6:	2300      	movs	r3, #0
 800aab8:	613b      	str	r3, [r7, #16]
 800aaba:	4b39      	ldr	r3, [pc, #228]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800aabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aabe:	4a38      	ldr	r2, [pc, #224]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800aac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac4:	6313      	str	r3, [r2, #48]	@ 0x30
 800aac6:	4b36      	ldr	r3, [pc, #216]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aace:	613b      	str	r3, [r7, #16]
 800aad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aad2:	2300      	movs	r3, #0
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	4b32      	ldr	r3, [pc, #200]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800aad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aada:	4a31      	ldr	r2, [pc, #196]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800aadc:	f043 0304 	orr.w	r3, r3, #4
 800aae0:	6313      	str	r3, [r2, #48]	@ 0x30
 800aae2:	4b2f      	ldr	r3, [pc, #188]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800aae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae6:	f003 0304 	and.w	r3, r3, #4
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60bb      	str	r3, [r7, #8]
 800aaf2:	4b2b      	ldr	r3, [pc, #172]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800aaf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaf6:	4a2a      	ldr	r2, [pc, #168]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800aaf8:	f043 0301 	orr.w	r3, r3, #1
 800aafc:	6313      	str	r3, [r2, #48]	@ 0x30
 800aafe:	4b28      	ldr	r3, [pc, #160]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800ab00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	60bb      	str	r3, [r7, #8]
 800ab08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	607b      	str	r3, [r7, #4]
 800ab0e:	4b24      	ldr	r3, [pc, #144]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800ab10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab12:	4a23      	ldr	r2, [pc, #140]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800ab14:	f043 0302 	orr.w	r3, r3, #2
 800ab18:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab1a:	4b21      	ldr	r3, [pc, #132]	@ (800aba0 <MX_GPIO_Init+0x100>)
 800ab1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab1e:	f003 0302 	and.w	r3, r3, #2
 800ab22:	607b      	str	r3, [r7, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 800ab26:	2200      	movs	r2, #0
 800ab28:	2102      	movs	r1, #2
 800ab2a:	481e      	ldr	r0, [pc, #120]	@ (800aba4 <MX_GPIO_Init+0x104>)
 800ab2c:	f001 f9ec 	bl	800bf08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED4_Pin|TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800ab30:	2200      	movs	r2, #0
 800ab32:	211d      	movs	r1, #29
 800ab34:	481c      	ldr	r0, [pc, #112]	@ (800aba8 <MX_GPIO_Init+0x108>)
 800ab36:	f001 f9e7 	bl	800bf08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	2112      	movs	r1, #18
 800ab3e:	481b      	ldr	r0, [pc, #108]	@ (800abac <MX_GPIO_Init+0x10c>)
 800ab40:	f001 f9e2 	bl	800bf08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 800ab44:	2302      	movs	r3, #2
 800ab46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab50:	2300      	movs	r3, #0
 800ab52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 800ab54:	f107 0314 	add.w	r3, r7, #20
 800ab58:	4619      	mov	r1, r3
 800ab5a:	4812      	ldr	r0, [pc, #72]	@ (800aba4 <MX_GPIO_Init+0x104>)
 800ab5c:	f001 f828 	bl	800bbb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED4_Pin TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 */
  GPIO_InitStruct.Pin = TOUCH_LED4_Pin|TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4;
 800ab60:	231d      	movs	r3, #29
 800ab62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab64:	2301      	movs	r3, #1
 800ab66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab70:	f107 0314 	add.w	r3, r7, #20
 800ab74:	4619      	mov	r1, r3
 800ab76:	480c      	ldr	r0, [pc, #48]	@ (800aba8 <MX_GPIO_Init+0x108>)
 800ab78:	f001 f81a 	bl	800bbb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800ab7c:	2312      	movs	r3, #18
 800ab7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab80:	2301      	movs	r3, #1
 800ab82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab84:	2300      	movs	r3, #0
 800ab86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab8c:	f107 0314 	add.w	r3, r7, #20
 800ab90:	4619      	mov	r1, r3
 800ab92:	4806      	ldr	r0, [pc, #24]	@ (800abac <MX_GPIO_Init+0x10c>)
 800ab94:	f001 f80c 	bl	800bbb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800ab98:	bf00      	nop
 800ab9a:	3728      	adds	r7, #40	@ 0x28
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	40023800 	.word	0x40023800
 800aba4:	40021c00 	.word	0x40021c00
 800aba8:	40020800 	.word	0x40020800
 800abac:	40020000 	.word	0x40020000

0800abb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a04      	ldr	r2, [pc, #16]	@ (800abd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d101      	bne.n	800abc6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800abc2:	f000 fe3d 	bl	800b840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800abc6:	bf00      	nop
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	40010000 	.word	0x40010000

0800abd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800abd4:	b480      	push	{r7}
 800abd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800abd8:	b672      	cpsid	i
}
 800abda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800abdc:	bf00      	nop
 800abde:	e7fd      	b.n	800abdc <Error_Handler+0x8>

0800abe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abe6:	2300      	movs	r3, #0
 800abe8:	607b      	str	r3, [r7, #4]
 800abea:	4b10      	ldr	r3, [pc, #64]	@ (800ac2c <HAL_MspInit+0x4c>)
 800abec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abee:	4a0f      	ldr	r2, [pc, #60]	@ (800ac2c <HAL_MspInit+0x4c>)
 800abf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800abf4:	6453      	str	r3, [r2, #68]	@ 0x44
 800abf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ac2c <HAL_MspInit+0x4c>)
 800abf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abfe:	607b      	str	r3, [r7, #4]
 800ac00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac02:	2300      	movs	r3, #0
 800ac04:	603b      	str	r3, [r7, #0]
 800ac06:	4b09      	ldr	r3, [pc, #36]	@ (800ac2c <HAL_MspInit+0x4c>)
 800ac08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac0a:	4a08      	ldr	r2, [pc, #32]	@ (800ac2c <HAL_MspInit+0x4c>)
 800ac0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac10:	6413      	str	r3, [r2, #64]	@ 0x40
 800ac12:	4b06      	ldr	r3, [pc, #24]	@ (800ac2c <HAL_MspInit+0x4c>)
 800ac14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	40023800 	.word	0x40023800

0800ac30 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08c      	sub	sp, #48	@ 0x30
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac38:	f107 031c 	add.w	r3, r7, #28
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	605a      	str	r2, [r3, #4]
 800ac42:	609a      	str	r2, [r3, #8]
 800ac44:	60da      	str	r2, [r3, #12]
 800ac46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a45      	ldr	r2, [pc, #276]	@ (800ad64 <HAL_SPI_MspInit+0x134>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d12c      	bne.n	800acac <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ac52:	2300      	movs	r3, #0
 800ac54:	61bb      	str	r3, [r7, #24]
 800ac56:	4b44      	ldr	r3, [pc, #272]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800ac58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac5a:	4a43      	ldr	r2, [pc, #268]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800ac5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ac60:	6453      	str	r3, [r2, #68]	@ 0x44
 800ac62:	4b41      	ldr	r3, [pc, #260]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800ac64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ac6a:	61bb      	str	r3, [r7, #24]
 800ac6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac6e:	2300      	movs	r3, #0
 800ac70:	617b      	str	r3, [r7, #20]
 800ac72:	4b3d      	ldr	r3, [pc, #244]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800ac74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac76:	4a3c      	ldr	r2, [pc, #240]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800ac78:	f043 0301 	orr.w	r3, r3, #1
 800ac7c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac7e:	4b3a      	ldr	r3, [pc, #232]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800ac80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800ac8a:	23a0      	movs	r3, #160	@ 0xa0
 800ac8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac8e:	2302      	movs	r3, #2
 800ac90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac96:	2303      	movs	r3, #3
 800ac98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ac9a:	2305      	movs	r3, #5
 800ac9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac9e:	f107 031c 	add.w	r3, r7, #28
 800aca2:	4619      	mov	r1, r3
 800aca4:	4831      	ldr	r0, [pc, #196]	@ (800ad6c <HAL_SPI_MspInit+0x13c>)
 800aca6:	f000 ff83 	bl	800bbb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800acaa:	e057      	b.n	800ad5c <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a2f      	ldr	r2, [pc, #188]	@ (800ad70 <HAL_SPI_MspInit+0x140>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d152      	bne.n	800ad5c <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800acb6:	2300      	movs	r3, #0
 800acb8:	613b      	str	r3, [r7, #16]
 800acba:	4b2b      	ldr	r3, [pc, #172]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800acbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbe:	4a2a      	ldr	r2, [pc, #168]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800acc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800acc4:	6413      	str	r3, [r2, #64]	@ 0x40
 800acc6:	4b28      	ldr	r3, [pc, #160]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800acc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acce:	613b      	str	r3, [r7, #16]
 800acd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800acd2:	2300      	movs	r3, #0
 800acd4:	60fb      	str	r3, [r7, #12]
 800acd6:	4b24      	ldr	r3, [pc, #144]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800acd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acda:	4a23      	ldr	r2, [pc, #140]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800acdc:	f043 0304 	orr.w	r3, r3, #4
 800ace0:	6313      	str	r3, [r2, #48]	@ 0x30
 800ace2:	4b21      	ldr	r3, [pc, #132]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800ace4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace6:	f003 0304 	and.w	r3, r3, #4
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800acee:	2300      	movs	r3, #0
 800acf0:	60bb      	str	r3, [r7, #8]
 800acf2:	4b1d      	ldr	r3, [pc, #116]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800acf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acf6:	4a1c      	ldr	r2, [pc, #112]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800acf8:	f043 0302 	orr.w	r3, r3, #2
 800acfc:	6313      	str	r3, [r2, #48]	@ 0x30
 800acfe:	4b1a      	ldr	r3, [pc, #104]	@ (800ad68 <HAL_SPI_MspInit+0x138>)
 800ad00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	60bb      	str	r3, [r7, #8]
 800ad08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad0e:	2302      	movs	r3, #2
 800ad10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad16:	2303      	movs	r3, #3
 800ad18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800ad1a:	2307      	movs	r3, #7
 800ad1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad1e:	f107 031c 	add.w	r3, r7, #28
 800ad22:	4619      	mov	r1, r3
 800ad24:	4813      	ldr	r0, [pc, #76]	@ (800ad74 <HAL_SPI_MspInit+0x144>)
 800ad26:	f000 ff43 	bl	800bbb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ad2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ad2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad30:	2302      	movs	r3, #2
 800ad32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ad3c:	2305      	movs	r3, #5
 800ad3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad40:	f107 031c 	add.w	r3, r7, #28
 800ad44:	4619      	mov	r1, r3
 800ad46:	480c      	ldr	r0, [pc, #48]	@ (800ad78 <HAL_SPI_MspInit+0x148>)
 800ad48:	f000 ff32 	bl	800bbb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	2105      	movs	r1, #5
 800ad50:	2024      	movs	r0, #36	@ 0x24
 800ad52:	f000 fe71 	bl	800ba38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800ad56:	2024      	movs	r0, #36	@ 0x24
 800ad58:	f000 fe8a 	bl	800ba70 <HAL_NVIC_EnableIRQ>
}
 800ad5c:	bf00      	nop
 800ad5e:	3730      	adds	r7, #48	@ 0x30
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	40013000 	.word	0x40013000
 800ad68:	40023800 	.word	0x40023800
 800ad6c:	40020000 	.word	0x40020000
 800ad70:	40003800 	.word	0x40003800
 800ad74:	40020800 	.word	0x40020800
 800ad78:	40020400 	.word	0x40020400

0800ad7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08c      	sub	sp, #48	@ 0x30
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad84:	f107 031c 	add.w	r3, r7, #28
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]
 800ad8c:	605a      	str	r2, [r3, #4]
 800ad8e:	609a      	str	r2, [r3, #8]
 800ad90:	60da      	str	r2, [r3, #12]
 800ad92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a45      	ldr	r2, [pc, #276]	@ (800aeb0 <HAL_UART_MspInit+0x134>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d12c      	bne.n	800adf8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ad9e:	2300      	movs	r3, #0
 800ada0:	61bb      	str	r3, [r7, #24]
 800ada2:	4b44      	ldr	r3, [pc, #272]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ada4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada6:	4a43      	ldr	r2, [pc, #268]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ada8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adac:	6413      	str	r3, [r2, #64]	@ 0x40
 800adae:	4b41      	ldr	r3, [pc, #260]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800adb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adb6:	61bb      	str	r3, [r7, #24]
 800adb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]
 800adbe:	4b3d      	ldr	r3, [pc, #244]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc2:	4a3c      	ldr	r2, [pc, #240]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800adc4:	f043 0301 	orr.w	r3, r3, #1
 800adc8:	6313      	str	r3, [r2, #48]	@ 0x30
 800adca:	4b3a      	ldr	r3, [pc, #232]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800adcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800add6:	230c      	movs	r3, #12
 800add8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adda:	2302      	movs	r3, #2
 800addc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ade2:	2303      	movs	r3, #3
 800ade4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ade6:	2307      	movs	r3, #7
 800ade8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adea:	f107 031c 	add.w	r3, r7, #28
 800adee:	4619      	mov	r1, r3
 800adf0:	4831      	ldr	r0, [pc, #196]	@ (800aeb8 <HAL_UART_MspInit+0x13c>)
 800adf2:	f000 fedd 	bl	800bbb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800adf6:	e057      	b.n	800aea8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a2f      	ldr	r2, [pc, #188]	@ (800aebc <HAL_UART_MspInit+0x140>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d152      	bne.n	800aea8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ae02:	2300      	movs	r3, #0
 800ae04:	613b      	str	r3, [r7, #16]
 800ae06:	4b2b      	ldr	r3, [pc, #172]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ae08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae0a:	4a2a      	ldr	r2, [pc, #168]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ae0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ae10:	6413      	str	r3, [r2, #64]	@ 0x40
 800ae12:	4b28      	ldr	r3, [pc, #160]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ae14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae1a:	613b      	str	r3, [r7, #16]
 800ae1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	4b24      	ldr	r3, [pc, #144]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ae24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae26:	4a23      	ldr	r2, [pc, #140]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ae28:	f043 0304 	orr.w	r3, r3, #4
 800ae2c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae2e:	4b21      	ldr	r3, [pc, #132]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ae30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae32:	f003 0304 	and.w	r3, r3, #4
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60bb      	str	r3, [r7, #8]
 800ae3e:	4b1d      	ldr	r3, [pc, #116]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ae40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae42:	4a1c      	ldr	r2, [pc, #112]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ae44:	f043 0302 	orr.w	r3, r3, #2
 800ae48:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae4a:	4b1a      	ldr	r3, [pc, #104]	@ (800aeb4 <HAL_UART_MspInit+0x138>)
 800ae4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae4e:	f003 0302 	and.w	r3, r3, #2
 800ae52:	60bb      	str	r3, [r7, #8]
 800ae54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ae56:	2320      	movs	r3, #32
 800ae58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae62:	2303      	movs	r3, #3
 800ae64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ae66:	2307      	movs	r3, #7
 800ae68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae6a:	f107 031c 	add.w	r3, r7, #28
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4813      	ldr	r0, [pc, #76]	@ (800aec0 <HAL_UART_MspInit+0x144>)
 800ae72:	f000 fe9d 	bl	800bbb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ae76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae80:	2300      	movs	r3, #0
 800ae82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae84:	2303      	movs	r3, #3
 800ae86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ae88:	2307      	movs	r3, #7
 800ae8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae8c:	f107 031c 	add.w	r3, r7, #28
 800ae90:	4619      	mov	r1, r3
 800ae92:	480c      	ldr	r0, [pc, #48]	@ (800aec4 <HAL_UART_MspInit+0x148>)
 800ae94:	f000 fe8c 	bl	800bbb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2106      	movs	r1, #6
 800ae9c:	2027      	movs	r0, #39	@ 0x27
 800ae9e:	f000 fdcb 	bl	800ba38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800aea2:	2027      	movs	r0, #39	@ 0x27
 800aea4:	f000 fde4 	bl	800ba70 <HAL_NVIC_EnableIRQ>
}
 800aea8:	bf00      	nop
 800aeaa:	3730      	adds	r7, #48	@ 0x30
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	40004400 	.word	0x40004400
 800aeb4:	40023800 	.word	0x40023800
 800aeb8:	40020000 	.word	0x40020000
 800aebc:	40004800 	.word	0x40004800
 800aec0:	40020800 	.word	0x40020800
 800aec4:	40020400 	.word	0x40020400

0800aec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08c      	sub	sp, #48	@ 0x30
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800aed4:	2300      	movs	r3, #0
 800aed6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800aed8:	2300      	movs	r3, #0
 800aeda:	60bb      	str	r3, [r7, #8]
 800aedc:	4b2f      	ldr	r3, [pc, #188]	@ (800af9c <HAL_InitTick+0xd4>)
 800aede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aee0:	4a2e      	ldr	r2, [pc, #184]	@ (800af9c <HAL_InitTick+0xd4>)
 800aee2:	f043 0301 	orr.w	r3, r3, #1
 800aee6:	6453      	str	r3, [r2, #68]	@ 0x44
 800aee8:	4b2c      	ldr	r3, [pc, #176]	@ (800af9c <HAL_InitTick+0xd4>)
 800aeea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	60bb      	str	r3, [r7, #8]
 800aef2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800aef4:	f107 020c 	add.w	r2, r7, #12
 800aef8:	f107 0310 	add.w	r3, r7, #16
 800aefc:	4611      	mov	r1, r2
 800aefe:	4618      	mov	r0, r3
 800af00:	f001 f9a0 	bl	800c244 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800af04:	f001 f98a 	bl	800c21c <HAL_RCC_GetPCLK2Freq>
 800af08:	4603      	mov	r3, r0
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800af0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af10:	4a23      	ldr	r2, [pc, #140]	@ (800afa0 <HAL_InitTick+0xd8>)
 800af12:	fba2 2303 	umull	r2, r3, r2, r3
 800af16:	0c9b      	lsrs	r3, r3, #18
 800af18:	3b01      	subs	r3, #1
 800af1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800af1c:	4b21      	ldr	r3, [pc, #132]	@ (800afa4 <HAL_InitTick+0xdc>)
 800af1e:	4a22      	ldr	r2, [pc, #136]	@ (800afa8 <HAL_InitTick+0xe0>)
 800af20:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800af22:	4b20      	ldr	r3, [pc, #128]	@ (800afa4 <HAL_InitTick+0xdc>)
 800af24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800af28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800af2a:	4a1e      	ldr	r2, [pc, #120]	@ (800afa4 <HAL_InitTick+0xdc>)
 800af2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800af30:	4b1c      	ldr	r3, [pc, #112]	@ (800afa4 <HAL_InitTick+0xdc>)
 800af32:	2200      	movs	r2, #0
 800af34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af36:	4b1b      	ldr	r3, [pc, #108]	@ (800afa4 <HAL_InitTick+0xdc>)
 800af38:	2200      	movs	r2, #0
 800af3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af3c:	4b19      	ldr	r3, [pc, #100]	@ (800afa4 <HAL_InitTick+0xdc>)
 800af3e:	2200      	movs	r2, #0
 800af40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800af42:	4818      	ldr	r0, [pc, #96]	@ (800afa4 <HAL_InitTick+0xdc>)
 800af44:	f002 fd13 	bl	800d96e <HAL_TIM_Base_Init>
 800af48:	4603      	mov	r3, r0
 800af4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800af4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af52:	2b00      	cmp	r3, #0
 800af54:	d11b      	bne.n	800af8e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800af56:	4813      	ldr	r0, [pc, #76]	@ (800afa4 <HAL_InitTick+0xdc>)
 800af58:	f002 fd62 	bl	800da20 <HAL_TIM_Base_Start_IT>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800af62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af66:	2b00      	cmp	r3, #0
 800af68:	d111      	bne.n	800af8e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800af6a:	2019      	movs	r0, #25
 800af6c:	f000 fd80 	bl	800ba70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b0f      	cmp	r3, #15
 800af74:	d808      	bhi.n	800af88 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800af76:	2200      	movs	r2, #0
 800af78:	6879      	ldr	r1, [r7, #4]
 800af7a:	2019      	movs	r0, #25
 800af7c:	f000 fd5c 	bl	800ba38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800af80:	4a0a      	ldr	r2, [pc, #40]	@ (800afac <HAL_InitTick+0xe4>)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	e002      	b.n	800af8e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800af8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800af92:	4618      	mov	r0, r3
 800af94:	3730      	adds	r7, #48	@ 0x30
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	40023800 	.word	0x40023800
 800afa0:	431bde83 	.word	0x431bde83
 800afa4:	200002a0 	.word	0x200002a0
 800afa8:	40010000 	.word	0x40010000
 800afac:	20000018 	.word	0x20000018

0800afb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800afb0:	b480      	push	{r7}
 800afb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800afb4:	bf00      	nop
 800afb6:	e7fd      	b.n	800afb4 <NMI_Handler+0x4>

0800afb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800afb8:	b480      	push	{r7}
 800afba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800afbc:	bf00      	nop
 800afbe:	e7fd      	b.n	800afbc <HardFault_Handler+0x4>

0800afc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800afc0:	b480      	push	{r7}
 800afc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800afc4:	bf00      	nop
 800afc6:	e7fd      	b.n	800afc4 <MemManage_Handler+0x4>

0800afc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800afc8:	b480      	push	{r7}
 800afca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800afcc:	bf00      	nop
 800afce:	e7fd      	b.n	800afcc <BusFault_Handler+0x4>

0800afd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800afd0:	b480      	push	{r7}
 800afd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800afd4:	bf00      	nop
 800afd6:	e7fd      	b.n	800afd4 <UsageFault_Handler+0x4>

0800afd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800afd8:	b480      	push	{r7}
 800afda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800afdc:	bf00      	nop
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
	...

0800afe8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800afec:	4802      	ldr	r0, [pc, #8]	@ (800aff8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800afee:	f002 fd87 	bl	800db00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800aff2:	bf00      	nop
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	200002a0 	.word	0x200002a0

0800affc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800b000:	4802      	ldr	r0, [pc, #8]	@ (800b00c <SPI2_IRQHandler+0x10>)
 800b002:	f002 f88d 	bl	800d120 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800b006:	bf00      	nop
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	200001b8 	.word	0x200001b8

0800b010 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b014:	4802      	ldr	r0, [pc, #8]	@ (800b020 <USART3_IRQHandler+0x10>)
 800b016:	f003 f845 	bl	800e0a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b01a:	bf00      	nop
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20000258 	.word	0x20000258

0800b024 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b030:	2300      	movs	r3, #0
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	e00a      	b.n	800b04c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b036:	f3af 8000 	nop.w
 800b03a:	4601      	mov	r1, r0
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	60ba      	str	r2, [r7, #8]
 800b042:	b2ca      	uxtb	r2, r1
 800b044:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	3301      	adds	r3, #1
 800b04a:	617b      	str	r3, [r7, #20]
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	dbf0      	blt.n	800b036 <_read+0x12>
  }

  return len;
 800b054:	687b      	ldr	r3, [r7, #4]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b086      	sub	sp, #24
 800b062:	af00      	add	r7, sp, #0
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	60b9      	str	r1, [r7, #8]
 800b068:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
 800b06e:	e009      	b.n	800b084 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	60ba      	str	r2, [r7, #8]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7ff fbb7 	bl	800a7ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	3301      	adds	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	429a      	cmp	r2, r3
 800b08a:	dbf1      	blt.n	800b070 <_write+0x12>
  }
  return len;
 800b08c:	687b      	ldr	r3, [r7, #4]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <_close>:

int _close(int file)
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b09e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b083      	sub	sp, #12
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b0be:	605a      	str	r2, [r3, #4]
  return 0;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <_isatty>:

int _isatty(int file)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b0d6:	2301      	movs	r3, #1
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
	...

0800b100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b100:	b480      	push	{r7}
 800b102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b104:	4b07      	ldr	r3, [pc, #28]	@ (800b124 <SystemInit+0x24>)
 800b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b10a:	4a06      	ldr	r2, [pc, #24]	@ (800b124 <SystemInit+0x24>)
 800b10c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800b114:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <SystemInit+0x24>)
 800b116:	4a04      	ldr	r2, [pc, #16]	@ (800b128 <SystemInit+0x28>)
 800b118:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b11a:	bf00      	nop
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	e000ed00 	.word	0xe000ed00
 800b128:	08008000 	.word	0x08008000

0800b12c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b12c:	b480      	push	{r7}
 800b12e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b130:	f3bf 8f4f 	dsb	sy
}
 800b134:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b136:	4b06      	ldr	r3, [pc, #24]	@ (800b150 <__NVIC_SystemReset+0x24>)
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b13e:	4904      	ldr	r1, [pc, #16]	@ (800b150 <__NVIC_SystemReset+0x24>)
 800b140:	4b04      	ldr	r3, [pc, #16]	@ (800b154 <__NVIC_SystemReset+0x28>)
 800b142:	4313      	orrs	r3, r2
 800b144:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b146:	f3bf 8f4f 	dsb	sy
}
 800b14a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b14c:	bf00      	nop
 800b14e:	e7fd      	b.n	800b14c <__NVIC_SystemReset+0x20>
 800b150:	e000ed00 	.word	0xe000ed00
 800b154:	05fa0004 	.word	0x05fa0004

0800b158 <setup_freeRTOS>:
volatile uint8_t light2State;
volatile uint8_t light3State;
volatile uint8_t light4State;

void setup_freeRTOS(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af02      	add	r7, sp, #8
	spiQueue = xQueueCreate(10, sizeof(spiRxBuffer));
 800b15e:	2200      	movs	r2, #0
 800b160:	2102      	movs	r1, #2
 800b162:	200a      	movs	r0, #10
 800b164:	f004 f828 	bl	800f1b8 <xQueueGenericCreate>
 800b168:	4603      	mov	r3, r0
 800b16a:	4a3a      	ldr	r2, [pc, #232]	@ (800b254 <setup_freeRTOS+0xfc>)
 800b16c:	6013      	str	r3, [r2, #0]
	uartQueue = xQueueCreate(10, sizeof(uartRxBuffer));
 800b16e:	2200      	movs	r2, #0
 800b170:	2101      	movs	r1, #1
 800b172:	200a      	movs	r0, #10
 800b174:	f004 f820 	bl	800f1b8 <xQueueGenericCreate>
 800b178:	4603      	mov	r3, r0
 800b17a:	4a37      	ldr	r2, [pc, #220]	@ (800b258 <setup_freeRTOS+0x100>)
 800b17c:	6013      	str	r3, [r2, #0]
	configASSERT(spiQueue != NULL && uartQueue != NULL);
 800b17e:	4b35      	ldr	r3, [pc, #212]	@ (800b254 <setup_freeRTOS+0xfc>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d005      	beq.n	800b192 <setup_freeRTOS+0x3a>
 800b186:	4b34      	ldr	r3, [pc, #208]	@ (800b258 <setup_freeRTOS+0x100>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <setup_freeRTOS+0x3a>
 800b18e:	2301      	movs	r3, #1
 800b190:	e000      	b.n	800b194 <setup_freeRTOS+0x3c>
 800b192:	2300      	movs	r3, #0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10b      	bne.n	800b1b0 <setup_freeRTOS+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800b1aa:	bf00      	nop
 800b1ac:	bf00      	nop
 800b1ae:	e7fd      	b.n	800b1ac <setup_freeRTOS+0x54>

	// Start SPI and UART interrupt-based reception
	HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	492a      	ldr	r1, [pc, #168]	@ (800b25c <setup_freeRTOS+0x104>)
 800b1b4:	482a      	ldr	r0, [pc, #168]	@ (800b260 <setup_freeRTOS+0x108>)
 800b1b6:	f001 fe8d 	bl	800ced4 <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, sizeof(uartRxBuffer));
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	4929      	ldr	r1, [pc, #164]	@ (800b264 <setup_freeRTOS+0x10c>)
 800b1be:	482a      	ldr	r0, [pc, #168]	@ (800b268 <setup_freeRTOS+0x110>)
 800b1c0:	f002 ff4b 	bl	800e05a <HAL_UART_Receive_IT>

	xUartMutex = xSemaphoreCreateMutex();
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	f004 f896 	bl	800f2f6 <xQueueCreateMutex>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	4a27      	ldr	r2, [pc, #156]	@ (800b26c <setup_freeRTOS+0x114>)
 800b1ce:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(SPI_handler, "SPIHandler", 512, NULL, 5, NULL);
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	9301      	str	r3, [sp, #4]
 800b1d4:	2305      	movs	r3, #5
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1de:	4924      	ldr	r1, [pc, #144]	@ (800b270 <setup_freeRTOS+0x118>)
 800b1e0:	4824      	ldr	r0, [pc, #144]	@ (800b274 <setup_freeRTOS+0x11c>)
 800b1e2:	f004 fca1 	bl	800fb28 <xTaskCreate>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	4a23      	ldr	r2, [pc, #140]	@ (800b278 <setup_freeRTOS+0x120>)
 800b1ea:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b1ec:	4b22      	ldr	r3, [pc, #136]	@ (800b278 <setup_freeRTOS+0x120>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d00b      	beq.n	800b20c <setup_freeRTOS+0xb4>
        __asm volatile
 800b1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	60bb      	str	r3, [r7, #8]
    }
 800b206:	bf00      	nop
 800b208:	bf00      	nop
 800b20a:	e7fd      	b.n	800b208 <setup_freeRTOS+0xb0>

	status = xTaskCreate(UART_handler, "UARTHandler", 256, NULL, 4, NULL);
 800b20c:	2300      	movs	r3, #0
 800b20e:	9301      	str	r3, [sp, #4]
 800b210:	2304      	movs	r3, #4
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	2300      	movs	r3, #0
 800b216:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b21a:	4918      	ldr	r1, [pc, #96]	@ (800b27c <setup_freeRTOS+0x124>)
 800b21c:	4818      	ldr	r0, [pc, #96]	@ (800b280 <setup_freeRTOS+0x128>)
 800b21e:	f004 fc83 	bl	800fb28 <xTaskCreate>
 800b222:	4603      	mov	r3, r0
 800b224:	4a14      	ldr	r2, [pc, #80]	@ (800b278 <setup_freeRTOS+0x120>)
 800b226:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b228:	4b13      	ldr	r3, [pc, #76]	@ (800b278 <setup_freeRTOS+0x120>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d00b      	beq.n	800b248 <setup_freeRTOS+0xf0>
        __asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	607b      	str	r3, [r7, #4]
    }
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	e7fd      	b.n	800b244 <setup_freeRTOS+0xec>

	vTaskStartScheduler();
 800b248:	f004 fdb4 	bl	800fdb4 <vTaskStartScheduler>
}
 800b24c:	bf00      	nop
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	200002e8 	.word	0x200002e8
 800b258:	200002ec 	.word	0x200002ec
 800b25c:	200002fc 	.word	0x200002fc
 800b260:	200001b8 	.word	0x200001b8
 800b264:	200002f8 	.word	0x200002f8
 800b268:	20000258 	.word	0x20000258
 800b26c:	200002f4 	.word	0x200002f4
 800b270:	08013464 	.word	0x08013464
 800b274:	0800b285 	.word	0x0800b285
 800b278:	200002f0 	.word	0x200002f0
 800b27c:	08013470 	.word	0x08013470
 800b280:	0800b5e5 	.word	0x0800b5e5

0800b284 <SPI_handler>:

void SPI_handler(void *param)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b08c      	sub	sp, #48	@ 0x30
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
    uint8_t localSpiRxBuffer[3] = {0};
 800b28c:	f107 0308 	add.w	r3, r7, #8
 800b290:	2100      	movs	r1, #0
 800b292:	460a      	mov	r2, r1
 800b294:	801a      	strh	r2, [r3, #0]
 800b296:	460a      	mov	r2, r1
 800b298:	709a      	strb	r2, [r3, #2]
    uint8_t deviceState;
    GPIO_PinState state;

    while (1) {
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 800b29a:	4bb8      	ldr	r3, [pc, #736]	@ (800b57c <SPI_handler+0x2f8>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f107 0108 	add.w	r1, r7, #8
 800b2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f004 f9ee 	bl	800f688 <xQueueReceive>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d1f3      	bne.n	800b29a <SPI_handler+0x16>
        {
            printf("SPI Data Received: %s\n", localSpiRxBuffer);
 800b2b2:	f107 0308 	add.w	r3, r7, #8
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	48b1      	ldr	r0, [pc, #708]	@ (800b580 <SPI_handler+0x2fc>)
 800b2ba:	f006 fbc1 	bl	8011a40 <iprintf>
            if (strcmp((char *)localSpiRxBuffer, "L1") == 0)
 800b2be:	f107 0308 	add.w	r3, r7, #8
 800b2c2:	49b0      	ldr	r1, [pc, #704]	@ (800b584 <SPI_handler+0x300>)
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fc ffa3 	bl	8008210 <strcmp>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d14e      	bne.n	800b36e <SPI_handler+0xea>
            {
            	print_To_display("Device 1 operation");
 800b2d0:	48ad      	ldr	r0, [pc, #692]	@ (800b588 <SPI_handler+0x304>)
 800b2d2:	f7ff fa71 	bl	800a7b8 <print_To_display>
                HAL_GPIO_TogglePin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800b2d6:	2108      	movs	r1, #8
 800b2d8:	48ac      	ldr	r0, [pc, #688]	@ (800b58c <SPI_handler+0x308>)
 800b2da:	f000 fe2e 	bl	800bf3a <HAL_GPIO_TogglePin>
                state = HAL_GPIO_ReadPin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800b2de:	2108      	movs	r1, #8
 800b2e0:	48aa      	ldr	r0, [pc, #680]	@ (800b58c <SPI_handler+0x308>)
 800b2e2:	f000 fdf9 	bl	800bed8 <HAL_GPIO_ReadPin>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800b2ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	bf0c      	ite	eq
 800b2f4:	2301      	moveq	r3, #1
 800b2f6:	2300      	movne	r3, #0
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                cJSON *jsonObj = cJSON_CreateObject();
 800b2fe:	f7ff f943 	bl	800a588 <cJSON_CreateObject>
 800b302:	6138      	str	r0, [r7, #16]
				if (jsonObj != NULL)
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	2b00      	cmp	r3, #0
 800b308:	f000 8161 	beq.w	800b5ce <SPI_handler+0x34a>
				{
					cJSON_AddNumberToObject(jsonObj, "device1", deviceState);
 800b30c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b310:	4618      	mov	r0, r3
 800b312:	f7fd f927 	bl	8008564 <__aeabi_ui2d>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	ec43 2b10 	vmov	d0, r2, r3
 800b31e:	499c      	ldr	r1, [pc, #624]	@ (800b590 <SPI_handler+0x30c>)
 800b320:	6938      	ldr	r0, [r7, #16]
 800b322:	f7ff f8c3 	bl	800a4ac <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800b326:	6938      	ldr	r0, [r7, #16]
 800b328:	f7fe fd80 	bl	8009e2c <cJSON_PrintUnformatted>
 800b32c:	60f8      	str	r0, [r7, #12]
					if (jsonStr != NULL)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d018      	beq.n	800b366 <SPI_handler+0xe2>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f7fc ff75 	bl	8008224 <strlen>
 800b33a:	4603      	mov	r3, r0
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	f04f 33ff 	mov.w	r3, #4294967295
 800b342:	68f9      	ldr	r1, [r7, #12]
 800b344:	4893      	ldr	r0, [pc, #588]	@ (800b594 <SPI_handler+0x310>)
 800b346:	f002 fdfd 	bl	800df44 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800b34a:	f04f 33ff 	mov.w	r3, #4294967295
 800b34e:	2201      	movs	r2, #1
 800b350:	4991      	ldr	r1, [pc, #580]	@ (800b598 <SPI_handler+0x314>)
 800b352:	4890      	ldr	r0, [pc, #576]	@ (800b594 <SPI_handler+0x310>)
 800b354:	f002 fdf6 	bl	800df44 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800b358:	68f9      	ldr	r1, [r7, #12]
 800b35a:	4890      	ldr	r0, [pc, #576]	@ (800b59c <SPI_handler+0x318>)
 800b35c:	f006 fb70 	bl	8011a40 <iprintf>
						free(jsonStr);
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f006 f9bf 	bl	80116e4 <free>
					}

					cJSON_Delete(jsonObj);
 800b366:	6938      	ldr	r0, [r7, #16]
 800b368:	f7fe f94a 	bl	8009600 <cJSON_Delete>
 800b36c:	e12f      	b.n	800b5ce <SPI_handler+0x34a>
				}
            }
            else if(strcmp((char *)localSpiRxBuffer, "L2") == 0)
 800b36e:	f107 0308 	add.w	r3, r7, #8
 800b372:	498b      	ldr	r1, [pc, #556]	@ (800b5a0 <SPI_handler+0x31c>)
 800b374:	4618      	mov	r0, r3
 800b376:	f7fc ff4b 	bl	8008210 <strcmp>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d14e      	bne.n	800b41e <SPI_handler+0x19a>
            {
            	print_To_display("Device 2 operation");
 800b380:	4888      	ldr	r0, [pc, #544]	@ (800b5a4 <SPI_handler+0x320>)
 800b382:	f7ff fa19 	bl	800a7b8 <print_To_display>
            	HAL_GPIO_TogglePin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 800b386:	2104      	movs	r1, #4
 800b388:	4880      	ldr	r0, [pc, #512]	@ (800b58c <SPI_handler+0x308>)
 800b38a:	f000 fdd6 	bl	800bf3a <HAL_GPIO_TogglePin>
            	state = HAL_GPIO_ReadPin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 800b38e:	2104      	movs	r1, #4
 800b390:	487e      	ldr	r0, [pc, #504]	@ (800b58c <SPI_handler+0x308>)
 800b392:	f000 fda1 	bl	800bed8 <HAL_GPIO_ReadPin>
 800b396:	4603      	mov	r3, r0
 800b398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800b39c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	bf0c      	ite	eq
 800b3a4:	2301      	moveq	r3, #1
 800b3a6:	2300      	movne	r3, #0
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

				cJSON *jsonObj = cJSON_CreateObject();
 800b3ae:	f7ff f8eb 	bl	800a588 <cJSON_CreateObject>
 800b3b2:	61b8      	str	r0, [r7, #24]
				if (jsonObj != NULL)
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f000 8109 	beq.w	800b5ce <SPI_handler+0x34a>
				{
					cJSON_AddNumberToObject(jsonObj, "device2", deviceState);
 800b3bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fd f8cf 	bl	8008564 <__aeabi_ui2d>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	ec43 2b10 	vmov	d0, r2, r3
 800b3ce:	4976      	ldr	r1, [pc, #472]	@ (800b5a8 <SPI_handler+0x324>)
 800b3d0:	69b8      	ldr	r0, [r7, #24]
 800b3d2:	f7ff f86b 	bl	800a4ac <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800b3d6:	69b8      	ldr	r0, [r7, #24]
 800b3d8:	f7fe fd28 	bl	8009e2c <cJSON_PrintUnformatted>
 800b3dc:	6178      	str	r0, [r7, #20]
					if (jsonStr != NULL)
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d018      	beq.n	800b416 <SPI_handler+0x192>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800b3e4:	6978      	ldr	r0, [r7, #20]
 800b3e6:	f7fc ff1d 	bl	8008224 <strlen>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f2:	6979      	ldr	r1, [r7, #20]
 800b3f4:	4867      	ldr	r0, [pc, #412]	@ (800b594 <SPI_handler+0x310>)
 800b3f6:	f002 fda5 	bl	800df44 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800b3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fe:	2201      	movs	r2, #1
 800b400:	4965      	ldr	r1, [pc, #404]	@ (800b598 <SPI_handler+0x314>)
 800b402:	4864      	ldr	r0, [pc, #400]	@ (800b594 <SPI_handler+0x310>)
 800b404:	f002 fd9e 	bl	800df44 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800b408:	6979      	ldr	r1, [r7, #20]
 800b40a:	4864      	ldr	r0, [pc, #400]	@ (800b59c <SPI_handler+0x318>)
 800b40c:	f006 fb18 	bl	8011a40 <iprintf>
						free(jsonStr);
 800b410:	6978      	ldr	r0, [r7, #20]
 800b412:	f006 f967 	bl	80116e4 <free>
					}

					cJSON_Delete(jsonObj);
 800b416:	69b8      	ldr	r0, [r7, #24]
 800b418:	f7fe f8f2 	bl	8009600 <cJSON_Delete>
 800b41c:	e0d7      	b.n	800b5ce <SPI_handler+0x34a>
				}
            }
            else if(strcmp((char *)localSpiRxBuffer, "L3") == 0)
 800b41e:	f107 0308 	add.w	r3, r7, #8
 800b422:	4962      	ldr	r1, [pc, #392]	@ (800b5ac <SPI_handler+0x328>)
 800b424:	4618      	mov	r0, r3
 800b426:	f7fc fef3 	bl	8008210 <strcmp>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d14e      	bne.n	800b4ce <SPI_handler+0x24a>
            {
            	print_To_display("Device 3 operation");
 800b430:	485f      	ldr	r0, [pc, #380]	@ (800b5b0 <SPI_handler+0x32c>)
 800b432:	f7ff f9c1 	bl	800a7b8 <print_To_display>
				HAL_GPIO_TogglePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 800b436:	2102      	movs	r1, #2
 800b438:	485e      	ldr	r0, [pc, #376]	@ (800b5b4 <SPI_handler+0x330>)
 800b43a:	f000 fd7e 	bl	800bf3a <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 800b43e:	2102      	movs	r1, #2
 800b440:	485c      	ldr	r0, [pc, #368]	@ (800b5b4 <SPI_handler+0x330>)
 800b442:	f000 fd49 	bl	800bed8 <HAL_GPIO_ReadPin>
 800b446:	4603      	mov	r3, r0
 800b448:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800b44c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b450:	2b01      	cmp	r3, #1
 800b452:	bf0c      	ite	eq
 800b454:	2301      	moveq	r3, #1
 800b456:	2300      	movne	r3, #0
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

				cJSON *jsonObj = cJSON_CreateObject();
 800b45e:	f7ff f893 	bl	800a588 <cJSON_CreateObject>
 800b462:	6238      	str	r0, [r7, #32]
				if (jsonObj != NULL)
 800b464:	6a3b      	ldr	r3, [r7, #32]
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 80b1 	beq.w	800b5ce <SPI_handler+0x34a>
				{
					cJSON_AddNumberToObject(jsonObj, "device3", deviceState);
 800b46c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b470:	4618      	mov	r0, r3
 800b472:	f7fd f877 	bl	8008564 <__aeabi_ui2d>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	ec43 2b10 	vmov	d0, r2, r3
 800b47e:	494e      	ldr	r1, [pc, #312]	@ (800b5b8 <SPI_handler+0x334>)
 800b480:	6a38      	ldr	r0, [r7, #32]
 800b482:	f7ff f813 	bl	800a4ac <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800b486:	6a38      	ldr	r0, [r7, #32]
 800b488:	f7fe fcd0 	bl	8009e2c <cJSON_PrintUnformatted>
 800b48c:	61f8      	str	r0, [r7, #28]
					if (jsonStr != NULL)
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d018      	beq.n	800b4c6 <SPI_handler+0x242>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800b494:	69f8      	ldr	r0, [r7, #28]
 800b496:	f7fc fec5 	bl	8008224 <strlen>
 800b49a:	4603      	mov	r3, r0
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a2:	69f9      	ldr	r1, [r7, #28]
 800b4a4:	483b      	ldr	r0, [pc, #236]	@ (800b594 <SPI_handler+0x310>)
 800b4a6:	f002 fd4d 	bl	800df44 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800b4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4939      	ldr	r1, [pc, #228]	@ (800b598 <SPI_handler+0x314>)
 800b4b2:	4838      	ldr	r0, [pc, #224]	@ (800b594 <SPI_handler+0x310>)
 800b4b4:	f002 fd46 	bl	800df44 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800b4b8:	69f9      	ldr	r1, [r7, #28]
 800b4ba:	4838      	ldr	r0, [pc, #224]	@ (800b59c <SPI_handler+0x318>)
 800b4bc:	f006 fac0 	bl	8011a40 <iprintf>
						free(jsonStr);
 800b4c0:	69f8      	ldr	r0, [r7, #28]
 800b4c2:	f006 f90f 	bl	80116e4 <free>
					}

					cJSON_Delete(jsonObj);
 800b4c6:	6a38      	ldr	r0, [r7, #32]
 800b4c8:	f7fe f89a 	bl	8009600 <cJSON_Delete>
 800b4cc:	e07f      	b.n	800b5ce <SPI_handler+0x34a>
				}
			}
            else if(strcmp((char *)localSpiRxBuffer, "L4") == 0)
 800b4ce:	f107 0308 	add.w	r3, r7, #8
 800b4d2:	493a      	ldr	r1, [pc, #232]	@ (800b5bc <SPI_handler+0x338>)
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fc fe9b 	bl	8008210 <strcmp>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d173      	bne.n	800b5c8 <SPI_handler+0x344>
            {
            	print_To_display("Device 4 operation");
 800b4e0:	4837      	ldr	r0, [pc, #220]	@ (800b5c0 <SPI_handler+0x33c>)
 800b4e2:	f7ff f969 	bl	800a7b8 <print_To_display>
				HAL_GPIO_TogglePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	4828      	ldr	r0, [pc, #160]	@ (800b58c <SPI_handler+0x308>)
 800b4ea:	f000 fd26 	bl	800bf3a <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	4826      	ldr	r0, [pc, #152]	@ (800b58c <SPI_handler+0x308>)
 800b4f2:	f000 fcf1 	bl	800bed8 <HAL_GPIO_ReadPin>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800b4fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b500:	2b01      	cmp	r3, #1
 800b502:	bf0c      	ite	eq
 800b504:	2301      	moveq	r3, #1
 800b506:	2300      	movne	r3, #0
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

				cJSON *jsonObj = cJSON_CreateObject();
 800b50e:	f7ff f83b 	bl	800a588 <cJSON_CreateObject>
 800b512:	62b8      	str	r0, [r7, #40]	@ 0x28
				if (jsonObj != NULL)
 800b514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b516:	2b00      	cmp	r3, #0
 800b518:	d059      	beq.n	800b5ce <SPI_handler+0x34a>
				{
					cJSON_AddNumberToObject(jsonObj, "device4", deviceState);
 800b51a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fd f820 	bl	8008564 <__aeabi_ui2d>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	ec43 2b10 	vmov	d0, r2, r3
 800b52c:	4925      	ldr	r1, [pc, #148]	@ (800b5c4 <SPI_handler+0x340>)
 800b52e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b530:	f7fe ffbc 	bl	800a4ac <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800b534:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b536:	f7fe fc79 	bl	8009e2c <cJSON_PrintUnformatted>
 800b53a:	6278      	str	r0, [r7, #36]	@ 0x24
					if (jsonStr != NULL)
 800b53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d018      	beq.n	800b574 <SPI_handler+0x2f0>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800b542:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b544:	f7fc fe6e 	bl	8008224 <strlen>
 800b548:	4603      	mov	r3, r0
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295
 800b550:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b552:	4810      	ldr	r0, [pc, #64]	@ (800b594 <SPI_handler+0x310>)
 800b554:	f002 fcf6 	bl	800df44 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	2201      	movs	r2, #1
 800b55e:	490e      	ldr	r1, [pc, #56]	@ (800b598 <SPI_handler+0x314>)
 800b560:	480c      	ldr	r0, [pc, #48]	@ (800b594 <SPI_handler+0x310>)
 800b562:	f002 fcef 	bl	800df44 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800b566:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b568:	480c      	ldr	r0, [pc, #48]	@ (800b59c <SPI_handler+0x318>)
 800b56a:	f006 fa69 	bl	8011a40 <iprintf>
						free(jsonStr);
 800b56e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b570:	f006 f8b8 	bl	80116e4 <free>
					}

					cJSON_Delete(jsonObj);
 800b574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b576:	f7fe f843 	bl	8009600 <cJSON_Delete>
 800b57a:	e028      	b.n	800b5ce <SPI_handler+0x34a>
 800b57c:	200002e8 	.word	0x200002e8
 800b580:	0801347c 	.word	0x0801347c
 800b584:	08013494 	.word	0x08013494
 800b588:	08013498 	.word	0x08013498
 800b58c:	40020800 	.word	0x40020800
 800b590:	080134ac 	.word	0x080134ac
 800b594:	20000258 	.word	0x20000258
 800b598:	080134b4 	.word	0x080134b4
 800b59c:	080134b8 	.word	0x080134b8
 800b5a0:	080134d0 	.word	0x080134d0
 800b5a4:	080134d4 	.word	0x080134d4
 800b5a8:	080134e8 	.word	0x080134e8
 800b5ac:	080134f0 	.word	0x080134f0
 800b5b0:	080134f4 	.word	0x080134f4
 800b5b4:	40021c00 	.word	0x40021c00
 800b5b8:	08013508 	.word	0x08013508
 800b5bc:	08013510 	.word	0x08013510
 800b5c0:	08013514 	.word	0x08013514
 800b5c4:	08013528 	.word	0x08013528
				}
			}
            else
            {
            	printf("junk data received on SPI\r\n");
 800b5c8:	4805      	ldr	r0, [pc, #20]	@ (800b5e0 <SPI_handler+0x35c>)
 800b5ca:	f006 faa1 	bl	8011b10 <puts>
            }
            memset(localSpiRxBuffer, 0, sizeof(localSpiRxBuffer));
 800b5ce:	f107 0308 	add.w	r3, r7, #8
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f006 fbea 	bl	8011db0 <memset>
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 800b5dc:	e65d      	b.n	800b29a <SPI_handler+0x16>
 800b5de:	bf00      	nop
 800b5e0:	08013530 	.word	0x08013530

0800b5e4 <UART_handler>:
    }
}


void UART_handler(void *param)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
    while (1) {
        if (xQueueReceive(uartQueue, uartRxBuffer, portMAX_DELAY) == pdTRUE) {
 800b5ec:	4b24      	ldr	r3, [pc, #144]	@ (800b680 <UART_handler+0x9c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f4:	4923      	ldr	r1, [pc, #140]	@ (800b684 <UART_handler+0xa0>)
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f004 f846 	bl	800f688 <xQueueReceive>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d1f4      	bne.n	800b5ec <UART_handler+0x8>
            printf("UART Data Received: %s\n", uartRxBuffer);
 800b602:	4920      	ldr	r1, [pc, #128]	@ (800b684 <UART_handler+0xa0>)
 800b604:	4820      	ldr	r0, [pc, #128]	@ (800b688 <UART_handler+0xa4>)
 800b606:	f006 fa1b 	bl	8011a40 <iprintf>
            if(uartRxBuffer[0] == BOOT_CMD)
 800b60a:	4b1e      	ldr	r3, [pc, #120]	@ (800b684 <UART_handler+0xa0>)
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b50      	cmp	r3, #80	@ 0x50
 800b610:	d101      	bne.n	800b616 <UART_handler+0x32>
            {
            	NVIC_SystemReset();
 800b612:	f7ff fd8b 	bl	800b12c <__NVIC_SystemReset>
            }
            else if (uartRxBuffer[0] == DEVICE_1)
 800b616:	4b1b      	ldr	r3, [pc, #108]	@ (800b684 <UART_handler+0xa0>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b55      	cmp	r3, #85	@ 0x55
 800b61c:	d107      	bne.n	800b62e <UART_handler+0x4a>
            {
            	HAL_GPIO_TogglePin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800b61e:	2108      	movs	r1, #8
 800b620:	481a      	ldr	r0, [pc, #104]	@ (800b68c <UART_handler+0xa8>)
 800b622:	f000 fc8a 	bl	800bf3a <HAL_GPIO_TogglePin>
            	printf("command L processed\r\n");
 800b626:	481a      	ldr	r0, [pc, #104]	@ (800b690 <UART_handler+0xac>)
 800b628:	f006 fa72 	bl	8011b10 <puts>
 800b62c:	e7de      	b.n	800b5ec <UART_handler+0x8>
            }
            else if(uartRxBuffer[0] == DEVICE_2)
 800b62e:	4b15      	ldr	r3, [pc, #84]	@ (800b684 <UART_handler+0xa0>)
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	2b56      	cmp	r3, #86	@ 0x56
 800b634:	d107      	bne.n	800b646 <UART_handler+0x62>
            {
            	HAL_GPIO_TogglePin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 800b636:	2104      	movs	r1, #4
 800b638:	4814      	ldr	r0, [pc, #80]	@ (800b68c <UART_handler+0xa8>)
 800b63a:	f000 fc7e 	bl	800bf3a <HAL_GPIO_TogglePin>
            	printf("command M processed\r\n");
 800b63e:	4815      	ldr	r0, [pc, #84]	@ (800b694 <UART_handler+0xb0>)
 800b640:	f006 fa66 	bl	8011b10 <puts>
 800b644:	e7d2      	b.n	800b5ec <UART_handler+0x8>
            }
            else if(uartRxBuffer[0] == DEVICE_3)
 800b646:	4b0f      	ldr	r3, [pc, #60]	@ (800b684 <UART_handler+0xa0>)
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	2b57      	cmp	r3, #87	@ 0x57
 800b64c:	d107      	bne.n	800b65e <UART_handler+0x7a>
            {
				HAL_GPIO_TogglePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 800b64e:	2102      	movs	r1, #2
 800b650:	4811      	ldr	r0, [pc, #68]	@ (800b698 <UART_handler+0xb4>)
 800b652:	f000 fc72 	bl	800bf3a <HAL_GPIO_TogglePin>
				printf("command N processed \r\n");
 800b656:	4811      	ldr	r0, [pc, #68]	@ (800b69c <UART_handler+0xb8>)
 800b658:	f006 fa5a 	bl	8011b10 <puts>
 800b65c:	e7c6      	b.n	800b5ec <UART_handler+0x8>
			}
            else if(uartRxBuffer[0] == DEVICE_4)
 800b65e:	4b09      	ldr	r3, [pc, #36]	@ (800b684 <UART_handler+0xa0>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b58      	cmp	r3, #88	@ 0x58
 800b664:	d107      	bne.n	800b676 <UART_handler+0x92>
            {
				HAL_GPIO_TogglePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 800b666:	2101      	movs	r1, #1
 800b668:	4808      	ldr	r0, [pc, #32]	@ (800b68c <UART_handler+0xa8>)
 800b66a:	f000 fc66 	bl	800bf3a <HAL_GPIO_TogglePin>
				printf("command O processed\r\n");
 800b66e:	480c      	ldr	r0, [pc, #48]	@ (800b6a0 <UART_handler+0xbc>)
 800b670:	f006 fa4e 	bl	8011b10 <puts>
 800b674:	e7ba      	b.n	800b5ec <UART_handler+0x8>
			}
            else
            {
            	printf("command does not found , Junk data received on UART\r\n");
 800b676:	480b      	ldr	r0, [pc, #44]	@ (800b6a4 <UART_handler+0xc0>)
 800b678:	f006 fa4a 	bl	8011b10 <puts>
        if (xQueueReceive(uartQueue, uartRxBuffer, portMAX_DELAY) == pdTRUE) {
 800b67c:	e7b6      	b.n	800b5ec <UART_handler+0x8>
 800b67e:	bf00      	nop
 800b680:	200002ec 	.word	0x200002ec
 800b684:	200002f8 	.word	0x200002f8
 800b688:	0801354c 	.word	0x0801354c
 800b68c:	40020800 	.word	0x40020800
 800b690:	08013564 	.word	0x08013564
 800b694:	0801357c 	.word	0x0801357c
 800b698:	40021c00 	.word	0x40021c00
 800b69c:	08013594 	.word	0x08013594
 800b6a0:	080135ac 	.word	0x080135ac
 800b6a4:	080135c4 	.word	0x080135c4

0800b6a8 <HAL_SPI_RxCpltCallback>:
        }
    }
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a19      	ldr	r2, [pc, #100]	@ (800b71c <HAL_SPI_RxCpltCallback+0x74>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d121      	bne.n	800b6fe <HAL_SPI_RxCpltCallback+0x56>
    	printf("SPI Interrupt Triggered\n");
 800b6ba:	4819      	ldr	r0, [pc, #100]	@ (800b720 <HAL_SPI_RxCpltCallback+0x78>)
 800b6bc:	f006 fa28 	bl	8011b10 <puts>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(spiQueue, spiRxBuffer, &xHigherPriorityTaskWoken);
 800b6c4:	4b17      	ldr	r3, [pc, #92]	@ (800b724 <HAL_SPI_RxCpltCallback+0x7c>)
 800b6c6:	6818      	ldr	r0, [r3, #0]
 800b6c8:	f107 020c 	add.w	r2, r7, #12
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4916      	ldr	r1, [pc, #88]	@ (800b728 <HAL_SPI_RxCpltCallback+0x80>)
 800b6d0:	f003 ff2c 	bl	800f52c <xQueueGenericSendFromISR>
        memset(spiRxBuffer, 0, sizeof(spiRxBuffer));
 800b6d4:	2202      	movs	r2, #2
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	4813      	ldr	r0, [pc, #76]	@ (800b728 <HAL_SPI_RxCpltCallback+0x80>)
 800b6da:	f006 fb69 	bl	8011db0 <memset>
        HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 800b6de:	2202      	movs	r2, #2
 800b6e0:	4911      	ldr	r1, [pc, #68]	@ (800b728 <HAL_SPI_RxCpltCallback+0x80>)
 800b6e2:	4812      	ldr	r0, [pc, #72]	@ (800b72c <HAL_SPI_RxCpltCallback+0x84>)
 800b6e4:	f001 fbf6 	bl	800ced4 <HAL_SPI_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d007      	beq.n	800b6fe <HAL_SPI_RxCpltCallback+0x56>
 800b6ee:	4b10      	ldr	r3, [pc, #64]	@ (800b730 <HAL_SPI_RxCpltCallback+0x88>)
 800b6f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	f3bf 8f6f 	isb	sy
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b6fe:	2300      	movs	r3, #0
 800b700:	60bb      	str	r3, [r7, #8]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	60bb      	str	r3, [r7, #8]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	60bb      	str	r3, [r7, #8]
 800b712:	68bb      	ldr	r3, [r7, #8]
}
 800b714:	bf00      	nop
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	40003800 	.word	0x40003800
 800b720:	080135fc 	.word	0x080135fc
 800b724:	200002e8 	.word	0x200002e8
 800b728:	200002fc 	.word	0x200002fc
 800b72c:	200001b8 	.word	0x200001b8
 800b730:	e000ed04 	.word	0xe000ed04

0800b734 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a13      	ldr	r2, [pc, #76]	@ (800b790 <HAL_UART_RxCpltCallback+0x5c>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d11f      	bne.n	800b786 <HAL_UART_RxCpltCallback+0x52>
    	printf("UART Interrupt Triggered\n");
 800b746:	4813      	ldr	r0, [pc, #76]	@ (800b794 <HAL_UART_RxCpltCallback+0x60>)
 800b748:	f006 f9e2 	bl	8011b10 <puts>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b74c:	2300      	movs	r3, #0
 800b74e:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(uartQueue, uartRxBuffer, &xHigherPriorityTaskWoken);
 800b750:	4b11      	ldr	r3, [pc, #68]	@ (800b798 <HAL_UART_RxCpltCallback+0x64>)
 800b752:	6818      	ldr	r0, [r3, #0]
 800b754:	f107 020c 	add.w	r2, r7, #12
 800b758:	2300      	movs	r3, #0
 800b75a:	4910      	ldr	r1, [pc, #64]	@ (800b79c <HAL_UART_RxCpltCallback+0x68>)
 800b75c:	f003 fee6 	bl	800f52c <xQueueGenericSendFromISR>
        memset(uartRxBuffer, 0, sizeof(uartRxBuffer));
 800b760:	4b0e      	ldr	r3, [pc, #56]	@ (800b79c <HAL_UART_RxCpltCallback+0x68>)
 800b762:	2200      	movs	r2, #0
 800b764:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3, uartRxBuffer, sizeof(uartRxBuffer));
 800b766:	2201      	movs	r2, #1
 800b768:	490c      	ldr	r1, [pc, #48]	@ (800b79c <HAL_UART_RxCpltCallback+0x68>)
 800b76a:	480d      	ldr	r0, [pc, #52]	@ (800b7a0 <HAL_UART_RxCpltCallback+0x6c>)
 800b76c:	f002 fc75 	bl	800e05a <HAL_UART_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d007      	beq.n	800b786 <HAL_UART_RxCpltCallback+0x52>
 800b776:	4b0b      	ldr	r3, [pc, #44]	@ (800b7a4 <HAL_UART_RxCpltCallback+0x70>)
 800b778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b77c:	601a      	str	r2, [r3, #0]
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	f3bf 8f6f 	isb	sy
    }
}
 800b786:	bf00      	nop
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	40004800 	.word	0x40004800
 800b794:	08013614 	.word	0x08013614
 800b798:	200002ec 	.word	0x200002ec
 800b79c:	200002f8 	.word	0x200002f8
 800b7a0:	20000258 	.word	0x20000258
 800b7a4:	e000ed04 	.word	0xe000ed04

0800b7a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b7a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800b7e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800b7ac:	f7ff fca8 	bl	800b100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b7b0:	480c      	ldr	r0, [pc, #48]	@ (800b7e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b7b2:	490d      	ldr	r1, [pc, #52]	@ (800b7e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b7b4:	4a0d      	ldr	r2, [pc, #52]	@ (800b7ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b7b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b7b8:	e002      	b.n	800b7c0 <LoopCopyDataInit>

0800b7ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b7ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b7bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b7be:	3304      	adds	r3, #4

0800b7c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b7c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b7c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b7c4:	d3f9      	bcc.n	800b7ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b7c6:	4a0a      	ldr	r2, [pc, #40]	@ (800b7f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b7c8:	4c0a      	ldr	r4, [pc, #40]	@ (800b7f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b7ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b7cc:	e001      	b.n	800b7d2 <LoopFillZerobss>

0800b7ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b7ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b7d0:	3204      	adds	r2, #4

0800b7d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b7d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b7d4:	d3fb      	bcc.n	800b7ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800b7d6:	f006 fb63 	bl	8011ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b7da:	f7ff f819 	bl	800a810 <main>
  bx  lr    
 800b7de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b7e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b7e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b7e8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800b7ec:	08013fb4 	.word	0x08013fb4
  ldr r2, =_sbss
 800b7f0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800b7f4:	200131fc 	.word	0x200131fc

0800b7f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b7f8:	e7fe      	b.n	800b7f8 <ADC_IRQHandler>
	...

0800b7fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b800:	4b0e      	ldr	r3, [pc, #56]	@ (800b83c <HAL_Init+0x40>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a0d      	ldr	r2, [pc, #52]	@ (800b83c <HAL_Init+0x40>)
 800b806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b80a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b80c:	4b0b      	ldr	r3, [pc, #44]	@ (800b83c <HAL_Init+0x40>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a0a      	ldr	r2, [pc, #40]	@ (800b83c <HAL_Init+0x40>)
 800b812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b818:	4b08      	ldr	r3, [pc, #32]	@ (800b83c <HAL_Init+0x40>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a07      	ldr	r2, [pc, #28]	@ (800b83c <HAL_Init+0x40>)
 800b81e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b824:	2003      	movs	r0, #3
 800b826:	f000 f8fc 	bl	800ba22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b82a:	200f      	movs	r0, #15
 800b82c:	f7ff fb4c 	bl	800aec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b830:	f7ff f9d6 	bl	800abe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	40023c00 	.word	0x40023c00

0800b840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b840:	b480      	push	{r7}
 800b842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b844:	4b06      	ldr	r3, [pc, #24]	@ (800b860 <HAL_IncTick+0x20>)
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	461a      	mov	r2, r3
 800b84a:	4b06      	ldr	r3, [pc, #24]	@ (800b864 <HAL_IncTick+0x24>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4413      	add	r3, r2
 800b850:	4a04      	ldr	r2, [pc, #16]	@ (800b864 <HAL_IncTick+0x24>)
 800b852:	6013      	str	r3, [r2, #0]
}
 800b854:	bf00      	nop
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	2000001c 	.word	0x2000001c
 800b864:	20000300 	.word	0x20000300

0800b868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b868:	b480      	push	{r7}
 800b86a:	af00      	add	r7, sp, #0
  return uwTick;
 800b86c:	4b03      	ldr	r3, [pc, #12]	@ (800b87c <HAL_GetTick+0x14>)
 800b86e:	681b      	ldr	r3, [r3, #0]
}
 800b870:	4618      	mov	r0, r3
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	20000300 	.word	0x20000300

0800b880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b888:	f7ff ffee 	bl	800b868 <HAL_GetTick>
 800b88c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b898:	d005      	beq.n	800b8a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b89a:	4b0a      	ldr	r3, [pc, #40]	@ (800b8c4 <HAL_Delay+0x44>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b8a6:	bf00      	nop
 800b8a8:	f7ff ffde 	bl	800b868 <HAL_GetTick>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d8f7      	bhi.n	800b8a8 <HAL_Delay+0x28>
  {
  }
}
 800b8b8:	bf00      	nop
 800b8ba:	bf00      	nop
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	2000001c 	.word	0x2000001c

0800b8c8 <__NVIC_SetPriorityGrouping>:
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b8d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b90c <__NVIC_SetPriorityGrouping+0x44>)
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b8f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b8f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b8fa:	4a04      	ldr	r2, [pc, #16]	@ (800b90c <__NVIC_SetPriorityGrouping+0x44>)
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	60d3      	str	r3, [r2, #12]
}
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	e000ed00 	.word	0xe000ed00

0800b910 <__NVIC_GetPriorityGrouping>:
{
 800b910:	b480      	push	{r7}
 800b912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b914:	4b04      	ldr	r3, [pc, #16]	@ (800b928 <__NVIC_GetPriorityGrouping+0x18>)
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	0a1b      	lsrs	r3, r3, #8
 800b91a:	f003 0307 	and.w	r3, r3, #7
}
 800b91e:	4618      	mov	r0, r3
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	e000ed00 	.word	0xe000ed00

0800b92c <__NVIC_EnableIRQ>:
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	db0b      	blt.n	800b956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b93e:	79fb      	ldrb	r3, [r7, #7]
 800b940:	f003 021f 	and.w	r2, r3, #31
 800b944:	4907      	ldr	r1, [pc, #28]	@ (800b964 <__NVIC_EnableIRQ+0x38>)
 800b946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b94a:	095b      	lsrs	r3, r3, #5
 800b94c:	2001      	movs	r0, #1
 800b94e:	fa00 f202 	lsl.w	r2, r0, r2
 800b952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b956:	bf00      	nop
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	e000e100 	.word	0xe000e100

0800b968 <__NVIC_SetPriority>:
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	4603      	mov	r3, r0
 800b970:	6039      	str	r1, [r7, #0]
 800b972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	db0a      	blt.n	800b992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	490c      	ldr	r1, [pc, #48]	@ (800b9b4 <__NVIC_SetPriority+0x4c>)
 800b982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b986:	0112      	lsls	r2, r2, #4
 800b988:	b2d2      	uxtb	r2, r2
 800b98a:	440b      	add	r3, r1
 800b98c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b990:	e00a      	b.n	800b9a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	b2da      	uxtb	r2, r3
 800b996:	4908      	ldr	r1, [pc, #32]	@ (800b9b8 <__NVIC_SetPriority+0x50>)
 800b998:	79fb      	ldrb	r3, [r7, #7]
 800b99a:	f003 030f 	and.w	r3, r3, #15
 800b99e:	3b04      	subs	r3, #4
 800b9a0:	0112      	lsls	r2, r2, #4
 800b9a2:	b2d2      	uxtb	r2, r2
 800b9a4:	440b      	add	r3, r1
 800b9a6:	761a      	strb	r2, [r3, #24]
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	e000e100 	.word	0xe000e100
 800b9b8:	e000ed00 	.word	0xe000ed00

0800b9bc <NVIC_EncodePriority>:
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b089      	sub	sp, #36	@ 0x24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f003 0307 	and.w	r3, r3, #7
 800b9ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	f1c3 0307 	rsb	r3, r3, #7
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	bf28      	it	cs
 800b9da:	2304      	movcs	r3, #4
 800b9dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	2b06      	cmp	r3, #6
 800b9e4:	d902      	bls.n	800b9ec <NVIC_EncodePriority+0x30>
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	3b03      	subs	r3, #3
 800b9ea:	e000      	b.n	800b9ee <NVIC_EncodePriority+0x32>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fa:	43da      	mvns	r2, r3
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	401a      	ands	r2, r3
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ba04:	f04f 31ff 	mov.w	r1, #4294967295
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba0e:	43d9      	mvns	r1, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba14:	4313      	orrs	r3, r2
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3724      	adds	r7, #36	@ 0x24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b082      	sub	sp, #8
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7ff ff4c 	bl	800b8c8 <__NVIC_SetPriorityGrouping>
}
 800ba30:	bf00      	nop
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ba4a:	f7ff ff61 	bl	800b910 <__NVIC_GetPriorityGrouping>
 800ba4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	68b9      	ldr	r1, [r7, #8]
 800ba54:	6978      	ldr	r0, [r7, #20]
 800ba56:	f7ff ffb1 	bl	800b9bc <NVIC_EncodePriority>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff ff80 	bl	800b968 <__NVIC_SetPriority>
}
 800ba68:	bf00      	nop
 800ba6a:	3718      	adds	r7, #24
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	4603      	mov	r3, r0
 800ba78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ba7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7ff ff54 	bl	800b92c <__NVIC_EnableIRQ>
}
 800ba84:	bf00      	nop
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ba9a:	f7ff fee5 	bl	800b868 <HAL_GetTick>
 800ba9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d008      	beq.n	800babe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2280      	movs	r2, #128	@ 0x80
 800bab0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e052      	b.n	800bb64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f022 0216 	bic.w	r2, r2, #22
 800bacc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	695a      	ldr	r2, [r3, #20]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800badc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d103      	bne.n	800baee <HAL_DMA_Abort+0x62>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800baea:	2b00      	cmp	r3, #0
 800baec:	d007      	beq.n	800bafe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f022 0208 	bic.w	r2, r2, #8
 800bafc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f022 0201 	bic.w	r2, r2, #1
 800bb0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb0e:	e013      	b.n	800bb38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bb10:	f7ff feaa 	bl	800b868 <HAL_GetTick>
 800bb14:	4602      	mov	r2, r0
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	2b05      	cmp	r3, #5
 800bb1c:	d90c      	bls.n	800bb38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2220      	movs	r2, #32
 800bb22:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2203      	movs	r2, #3
 800bb28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e015      	b.n	800bb64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 0301 	and.w	r3, r3, #1
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e4      	bne.n	800bb10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb4a:	223f      	movs	r2, #63	@ 0x3f
 800bb4c:	409a      	lsls	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d004      	beq.n	800bb8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2280      	movs	r2, #128	@ 0x80
 800bb84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e00c      	b.n	800bba4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2205      	movs	r2, #5
 800bb8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f022 0201 	bic.w	r2, r2, #1
 800bba0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b089      	sub	sp, #36	@ 0x24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	61fb      	str	r3, [r7, #28]
 800bbca:	e165      	b.n	800be98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bbcc:	2201      	movs	r2, #1
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	4013      	ands	r3, r2
 800bbde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	f040 8154 	bne.w	800be92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f003 0303 	and.w	r3, r3, #3
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d005      	beq.n	800bc02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d130      	bne.n	800bc64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	2203      	movs	r2, #3
 800bc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc12:	43db      	mvns	r3, r3
 800bc14:	69ba      	ldr	r2, [r7, #24]
 800bc16:	4013      	ands	r3, r2
 800bc18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	68da      	ldr	r2, [r3, #12]
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	005b      	lsls	r3, r3, #1
 800bc22:	fa02 f303 	lsl.w	r3, r2, r3
 800bc26:	69ba      	ldr	r2, [r7, #24]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	69ba      	ldr	r2, [r7, #24]
 800bc30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bc38:	2201      	movs	r2, #1
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc40:	43db      	mvns	r3, r3
 800bc42:	69ba      	ldr	r2, [r7, #24]
 800bc44:	4013      	ands	r3, r2
 800bc46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	091b      	lsrs	r3, r3, #4
 800bc4e:	f003 0201 	and.w	r2, r3, #1
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	fa02 f303 	lsl.w	r3, r2, r3
 800bc58:	69ba      	ldr	r2, [r7, #24]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	f003 0303 	and.w	r3, r3, #3
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d017      	beq.n	800bca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	2203      	movs	r2, #3
 800bc7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc80:	43db      	mvns	r3, r3
 800bc82:	69ba      	ldr	r2, [r7, #24]
 800bc84:	4013      	ands	r3, r2
 800bc86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	689a      	ldr	r2, [r3, #8]
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	fa02 f303 	lsl.w	r3, r2, r3
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	f003 0303 	and.w	r3, r3, #3
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d123      	bne.n	800bcf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	08da      	lsrs	r2, r3, #3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3208      	adds	r2, #8
 800bcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	f003 0307 	and.w	r3, r3, #7
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	220f      	movs	r2, #15
 800bcc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc8:	43db      	mvns	r3, r3
 800bcca:	69ba      	ldr	r2, [r7, #24]
 800bccc:	4013      	ands	r3, r2
 800bcce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	691a      	ldr	r2, [r3, #16]
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	f003 0307 	and.w	r3, r3, #7
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	08da      	lsrs	r2, r3, #3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3208      	adds	r2, #8
 800bcee:	69b9      	ldr	r1, [r7, #24]
 800bcf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	2203      	movs	r2, #3
 800bd00:	fa02 f303 	lsl.w	r3, r2, r3
 800bd04:	43db      	mvns	r3, r3
 800bd06:	69ba      	ldr	r2, [r7, #24]
 800bd08:	4013      	ands	r3, r2
 800bd0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	f003 0203 	and.w	r2, r3, #3
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	005b      	lsls	r3, r3, #1
 800bd18:	fa02 f303 	lsl.w	r3, r2, r3
 800bd1c:	69ba      	ldr	r2, [r7, #24]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	69ba      	ldr	r2, [r7, #24]
 800bd26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 80ae 	beq.w	800be92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd36:	2300      	movs	r3, #0
 800bd38:	60fb      	str	r3, [r7, #12]
 800bd3a:	4b5d      	ldr	r3, [pc, #372]	@ (800beb0 <HAL_GPIO_Init+0x300>)
 800bd3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd3e:	4a5c      	ldr	r2, [pc, #368]	@ (800beb0 <HAL_GPIO_Init+0x300>)
 800bd40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bd44:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd46:	4b5a      	ldr	r3, [pc, #360]	@ (800beb0 <HAL_GPIO_Init+0x300>)
 800bd48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bd52:	4a58      	ldr	r2, [pc, #352]	@ (800beb4 <HAL_GPIO_Init+0x304>)
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	089b      	lsrs	r3, r3, #2
 800bd58:	3302      	adds	r3, #2
 800bd5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	f003 0303 	and.w	r3, r3, #3
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	220f      	movs	r2, #15
 800bd6a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd6e:	43db      	mvns	r3, r3
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	4013      	ands	r3, r2
 800bd74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a4f      	ldr	r2, [pc, #316]	@ (800beb8 <HAL_GPIO_Init+0x308>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d025      	beq.n	800bdca <HAL_GPIO_Init+0x21a>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a4e      	ldr	r2, [pc, #312]	@ (800bebc <HAL_GPIO_Init+0x30c>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d01f      	beq.n	800bdc6 <HAL_GPIO_Init+0x216>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a4d      	ldr	r2, [pc, #308]	@ (800bec0 <HAL_GPIO_Init+0x310>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d019      	beq.n	800bdc2 <HAL_GPIO_Init+0x212>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4a4c      	ldr	r2, [pc, #304]	@ (800bec4 <HAL_GPIO_Init+0x314>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d013      	beq.n	800bdbe <HAL_GPIO_Init+0x20e>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a4b      	ldr	r2, [pc, #300]	@ (800bec8 <HAL_GPIO_Init+0x318>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d00d      	beq.n	800bdba <HAL_GPIO_Init+0x20a>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a4a      	ldr	r2, [pc, #296]	@ (800becc <HAL_GPIO_Init+0x31c>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d007      	beq.n	800bdb6 <HAL_GPIO_Init+0x206>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4a49      	ldr	r2, [pc, #292]	@ (800bed0 <HAL_GPIO_Init+0x320>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d101      	bne.n	800bdb2 <HAL_GPIO_Init+0x202>
 800bdae:	2306      	movs	r3, #6
 800bdb0:	e00c      	b.n	800bdcc <HAL_GPIO_Init+0x21c>
 800bdb2:	2307      	movs	r3, #7
 800bdb4:	e00a      	b.n	800bdcc <HAL_GPIO_Init+0x21c>
 800bdb6:	2305      	movs	r3, #5
 800bdb8:	e008      	b.n	800bdcc <HAL_GPIO_Init+0x21c>
 800bdba:	2304      	movs	r3, #4
 800bdbc:	e006      	b.n	800bdcc <HAL_GPIO_Init+0x21c>
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	e004      	b.n	800bdcc <HAL_GPIO_Init+0x21c>
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	e002      	b.n	800bdcc <HAL_GPIO_Init+0x21c>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e000      	b.n	800bdcc <HAL_GPIO_Init+0x21c>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	69fa      	ldr	r2, [r7, #28]
 800bdce:	f002 0203 	and.w	r2, r2, #3
 800bdd2:	0092      	lsls	r2, r2, #2
 800bdd4:	4093      	lsls	r3, r2
 800bdd6:	69ba      	ldr	r2, [r7, #24]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bddc:	4935      	ldr	r1, [pc, #212]	@ (800beb4 <HAL_GPIO_Init+0x304>)
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	089b      	lsrs	r3, r3, #2
 800bde2:	3302      	adds	r3, #2
 800bde4:	69ba      	ldr	r2, [r7, #24]
 800bde6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bdea:	4b3a      	ldr	r3, [pc, #232]	@ (800bed4 <HAL_GPIO_Init+0x324>)
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	43db      	mvns	r3, r3
 800bdf4:	69ba      	ldr	r2, [r7, #24]
 800bdf6:	4013      	ands	r3, r2
 800bdf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d003      	beq.n	800be0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800be0e:	4a31      	ldr	r2, [pc, #196]	@ (800bed4 <HAL_GPIO_Init+0x324>)
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800be14:	4b2f      	ldr	r3, [pc, #188]	@ (800bed4 <HAL_GPIO_Init+0x324>)
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	43db      	mvns	r3, r3
 800be1e:	69ba      	ldr	r2, [r7, #24]
 800be20:	4013      	ands	r3, r2
 800be22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d003      	beq.n	800be38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	4313      	orrs	r3, r2
 800be36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800be38:	4a26      	ldr	r2, [pc, #152]	@ (800bed4 <HAL_GPIO_Init+0x324>)
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800be3e:	4b25      	ldr	r3, [pc, #148]	@ (800bed4 <HAL_GPIO_Init+0x324>)
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	43db      	mvns	r3, r3
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	4013      	ands	r3, r2
 800be4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	4313      	orrs	r3, r2
 800be60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800be62:	4a1c      	ldr	r2, [pc, #112]	@ (800bed4 <HAL_GPIO_Init+0x324>)
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800be68:	4b1a      	ldr	r3, [pc, #104]	@ (800bed4 <HAL_GPIO_Init+0x324>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	43db      	mvns	r3, r3
 800be72:	69ba      	ldr	r2, [r7, #24]
 800be74:	4013      	ands	r3, r2
 800be76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be80:	2b00      	cmp	r3, #0
 800be82:	d003      	beq.n	800be8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800be84:	69ba      	ldr	r2, [r7, #24]
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	4313      	orrs	r3, r2
 800be8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800be8c:	4a11      	ldr	r2, [pc, #68]	@ (800bed4 <HAL_GPIO_Init+0x324>)
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	3301      	adds	r3, #1
 800be96:	61fb      	str	r3, [r7, #28]
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	2b0f      	cmp	r3, #15
 800be9c:	f67f ae96 	bls.w	800bbcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bea0:	bf00      	nop
 800bea2:	bf00      	nop
 800bea4:	3724      	adds	r7, #36	@ 0x24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	40023800 	.word	0x40023800
 800beb4:	40013800 	.word	0x40013800
 800beb8:	40020000 	.word	0x40020000
 800bebc:	40020400 	.word	0x40020400
 800bec0:	40020800 	.word	0x40020800
 800bec4:	40020c00 	.word	0x40020c00
 800bec8:	40021000 	.word	0x40021000
 800becc:	40021400 	.word	0x40021400
 800bed0:	40021800 	.word	0x40021800
 800bed4:	40013c00 	.word	0x40013c00

0800bed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	460b      	mov	r3, r1
 800bee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	691a      	ldr	r2, [r3, #16]
 800bee8:	887b      	ldrh	r3, [r7, #2]
 800beea:	4013      	ands	r3, r2
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bef0:	2301      	movs	r3, #1
 800bef2:	73fb      	strb	r3, [r7, #15]
 800bef4:	e001      	b.n	800befa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bef6:	2300      	movs	r3, #0
 800bef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800befa:	7bfb      	ldrb	r3, [r7, #15]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	807b      	strh	r3, [r7, #2]
 800bf14:	4613      	mov	r3, r2
 800bf16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bf18:	787b      	ldrb	r3, [r7, #1]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bf1e:	887a      	ldrh	r2, [r7, #2]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bf24:	e003      	b.n	800bf2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bf26:	887b      	ldrh	r3, [r7, #2]
 800bf28:	041a      	lsls	r2, r3, #16
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	619a      	str	r2, [r3, #24]
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b085      	sub	sp, #20
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	460b      	mov	r3, r1
 800bf44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	695b      	ldr	r3, [r3, #20]
 800bf4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bf4c:	887a      	ldrh	r2, [r7, #2]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	4013      	ands	r3, r2
 800bf52:	041a      	lsls	r2, r3, #16
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	43d9      	mvns	r1, r3
 800bf58:	887b      	ldrh	r3, [r7, #2]
 800bf5a:	400b      	ands	r3, r1
 800bf5c:	431a      	orrs	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	619a      	str	r2, [r3, #24]
}
 800bf62:	bf00      	nop
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
	...

0800bf70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	603b      	str	r3, [r7, #0]
 800bf7e:	4b20      	ldr	r3, [pc, #128]	@ (800c000 <HAL_PWREx_EnableOverDrive+0x90>)
 800bf80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf82:	4a1f      	ldr	r2, [pc, #124]	@ (800c000 <HAL_PWREx_EnableOverDrive+0x90>)
 800bf84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf88:	6413      	str	r3, [r2, #64]	@ 0x40
 800bf8a:	4b1d      	ldr	r3, [pc, #116]	@ (800c000 <HAL_PWREx_EnableOverDrive+0x90>)
 800bf8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf92:	603b      	str	r3, [r7, #0]
 800bf94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bf96:	4b1b      	ldr	r3, [pc, #108]	@ (800c004 <HAL_PWREx_EnableOverDrive+0x94>)
 800bf98:	2201      	movs	r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bf9c:	f7ff fc64 	bl	800b868 <HAL_GetTick>
 800bfa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bfa2:	e009      	b.n	800bfb8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bfa4:	f7ff fc60 	bl	800b868 <HAL_GetTick>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bfb2:	d901      	bls.n	800bfb8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e01f      	b.n	800bff8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bfb8:	4b13      	ldr	r3, [pc, #76]	@ (800c008 <HAL_PWREx_EnableOverDrive+0x98>)
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bfc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfc4:	d1ee      	bne.n	800bfa4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bfc6:	4b11      	ldr	r3, [pc, #68]	@ (800c00c <HAL_PWREx_EnableOverDrive+0x9c>)
 800bfc8:	2201      	movs	r2, #1
 800bfca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bfcc:	f7ff fc4c 	bl	800b868 <HAL_GetTick>
 800bfd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bfd2:	e009      	b.n	800bfe8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bfd4:	f7ff fc48 	bl	800b868 <HAL_GetTick>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bfe2:	d901      	bls.n	800bfe8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	e007      	b.n	800bff8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bfe8:	4b07      	ldr	r3, [pc, #28]	@ (800c008 <HAL_PWREx_EnableOverDrive+0x98>)
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bff4:	d1ee      	bne.n	800bfd4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	40023800 	.word	0x40023800
 800c004:	420e0040 	.word	0x420e0040
 800c008:	40007000 	.word	0x40007000
 800c00c:	420e0044 	.word	0x420e0044

0800c010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e0cc      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c024:	4b68      	ldr	r3, [pc, #416]	@ (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 030f 	and.w	r3, r3, #15
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d90c      	bls.n	800c04c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c032:	4b65      	ldr	r3, [pc, #404]	@ (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	b2d2      	uxtb	r2, r2
 800c038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c03a:	4b63      	ldr	r3, [pc, #396]	@ (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	429a      	cmp	r2, r3
 800c046:	d001      	beq.n	800c04c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	e0b8      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d020      	beq.n	800c09a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	2b00      	cmp	r3, #0
 800c062:	d005      	beq.n	800c070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c064:	4b59      	ldr	r3, [pc, #356]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	4a58      	ldr	r2, [pc, #352]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c06a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c06e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 0308 	and.w	r3, r3, #8
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c07c:	4b53      	ldr	r3, [pc, #332]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	4a52      	ldr	r2, [pc, #328]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c088:	4b50      	ldr	r3, [pc, #320]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	494d      	ldr	r1, [pc, #308]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c096:	4313      	orrs	r3, r2
 800c098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d044      	beq.n	800c130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d107      	bne.n	800c0be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0ae:	4b47      	ldr	r3, [pc, #284]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d119      	bne.n	800c0ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e07f      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d003      	beq.n	800c0ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d107      	bne.n	800c0de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0ce:	4b3f      	ldr	r3, [pc, #252]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d109      	bne.n	800c0ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e06f      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0de:	4b3b      	ldr	r3, [pc, #236]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 0302 	and.w	r3, r3, #2
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e067      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c0ee:	4b37      	ldr	r3, [pc, #220]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	f023 0203 	bic.w	r2, r3, #3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	4934      	ldr	r1, [pc, #208]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c100:	f7ff fbb2 	bl	800b868 <HAL_GetTick>
 800c104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c106:	e00a      	b.n	800c11e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c108:	f7ff fbae 	bl	800b868 <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c116:	4293      	cmp	r3, r2
 800c118:	d901      	bls.n	800c11e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c11a:	2303      	movs	r3, #3
 800c11c:	e04f      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c11e:	4b2b      	ldr	r3, [pc, #172]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	f003 020c 	and.w	r2, r3, #12
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d1eb      	bne.n	800c108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c130:	4b25      	ldr	r3, [pc, #148]	@ (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 030f 	and.w	r3, r3, #15
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d20c      	bcs.n	800c158 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c13e:	4b22      	ldr	r3, [pc, #136]	@ (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	b2d2      	uxtb	r2, r2
 800c144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c146:	4b20      	ldr	r3, [pc, #128]	@ (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 030f 	and.w	r3, r3, #15
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d001      	beq.n	800c158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	e032      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0304 	and.w	r3, r3, #4
 800c160:	2b00      	cmp	r3, #0
 800c162:	d008      	beq.n	800c176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c164:	4b19      	ldr	r3, [pc, #100]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	4916      	ldr	r1, [pc, #88]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c172:	4313      	orrs	r3, r2
 800c174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 0308 	and.w	r3, r3, #8
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d009      	beq.n	800c196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c182:	4b12      	ldr	r3, [pc, #72]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	490e      	ldr	r1, [pc, #56]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c192:	4313      	orrs	r3, r2
 800c194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c196:	f000 f887 	bl	800c2a8 <HAL_RCC_GetSysClockFreq>
 800c19a:	4602      	mov	r2, r0
 800c19c:	4b0b      	ldr	r3, [pc, #44]	@ (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	091b      	lsrs	r3, r3, #4
 800c1a2:	f003 030f 	and.w	r3, r3, #15
 800c1a6:	490a      	ldr	r1, [pc, #40]	@ (800c1d0 <HAL_RCC_ClockConfig+0x1c0>)
 800c1a8:	5ccb      	ldrb	r3, [r1, r3]
 800c1aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ae:	4a09      	ldr	r2, [pc, #36]	@ (800c1d4 <HAL_RCC_ClockConfig+0x1c4>)
 800c1b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c1b2:	4b09      	ldr	r3, [pc, #36]	@ (800c1d8 <HAL_RCC_ClockConfig+0x1c8>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe fe86 	bl	800aec8 <HAL_InitTick>

  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	40023c00 	.word	0x40023c00
 800c1cc:	40023800 	.word	0x40023800
 800c1d0:	08013e38 	.word	0x08013e38
 800c1d4:	20000014 	.word	0x20000014
 800c1d8:	20000018 	.word	0x20000018

0800c1dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c1e0:	4b03      	ldr	r3, [pc, #12]	@ (800c1f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	20000014 	.word	0x20000014

0800c1f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c1f8:	f7ff fff0 	bl	800c1dc <HAL_RCC_GetHCLKFreq>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	4b05      	ldr	r3, [pc, #20]	@ (800c214 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	0a9b      	lsrs	r3, r3, #10
 800c204:	f003 0307 	and.w	r3, r3, #7
 800c208:	4903      	ldr	r1, [pc, #12]	@ (800c218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c20a:	5ccb      	ldrb	r3, [r1, r3]
 800c20c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c210:	4618      	mov	r0, r3
 800c212:	bd80      	pop	{r7, pc}
 800c214:	40023800 	.word	0x40023800
 800c218:	08013e48 	.word	0x08013e48

0800c21c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c220:	f7ff ffdc 	bl	800c1dc <HAL_RCC_GetHCLKFreq>
 800c224:	4602      	mov	r2, r0
 800c226:	4b05      	ldr	r3, [pc, #20]	@ (800c23c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	0b5b      	lsrs	r3, r3, #13
 800c22c:	f003 0307 	and.w	r3, r3, #7
 800c230:	4903      	ldr	r1, [pc, #12]	@ (800c240 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c232:	5ccb      	ldrb	r3, [r1, r3]
 800c234:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c238:	4618      	mov	r0, r3
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	40023800 	.word	0x40023800
 800c240:	08013e48 	.word	0x08013e48

0800c244 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	220f      	movs	r2, #15
 800c252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c254:	4b12      	ldr	r3, [pc, #72]	@ (800c2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f003 0203 	and.w	r2, r3, #3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c260:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c26c:	4b0c      	ldr	r3, [pc, #48]	@ (800c2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c278:	4b09      	ldr	r3, [pc, #36]	@ (800c2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	08db      	lsrs	r3, r3, #3
 800c27e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c286:	4b07      	ldr	r3, [pc, #28]	@ (800c2a4 <HAL_RCC_GetClockConfig+0x60>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 020f 	and.w	r2, r3, #15
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	601a      	str	r2, [r3, #0]
}
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	40023800 	.word	0x40023800
 800c2a4:	40023c00 	.word	0x40023c00

0800c2a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2ac:	b0a6      	sub	sp, #152	@ 0x98
 800c2ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c2ce:	4bc8      	ldr	r3, [pc, #800]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f003 030c 	and.w	r3, r3, #12
 800c2d6:	2b0c      	cmp	r3, #12
 800c2d8:	f200 817e 	bhi.w	800c5d8 <HAL_RCC_GetSysClockFreq+0x330>
 800c2dc:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e2:	bf00      	nop
 800c2e4:	0800c319 	.word	0x0800c319
 800c2e8:	0800c5d9 	.word	0x0800c5d9
 800c2ec:	0800c5d9 	.word	0x0800c5d9
 800c2f0:	0800c5d9 	.word	0x0800c5d9
 800c2f4:	0800c321 	.word	0x0800c321
 800c2f8:	0800c5d9 	.word	0x0800c5d9
 800c2fc:	0800c5d9 	.word	0x0800c5d9
 800c300:	0800c5d9 	.word	0x0800c5d9
 800c304:	0800c329 	.word	0x0800c329
 800c308:	0800c5d9 	.word	0x0800c5d9
 800c30c:	0800c5d9 	.word	0x0800c5d9
 800c310:	0800c5d9 	.word	0x0800c5d9
 800c314:	0800c493 	.word	0x0800c493
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c318:	4bb6      	ldr	r3, [pc, #728]	@ (800c5f4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800c31a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800c31e:	e15f      	b.n	800c5e0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c320:	4bb5      	ldr	r3, [pc, #724]	@ (800c5f8 <HAL_RCC_GetSysClockFreq+0x350>)
 800c322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800c326:	e15b      	b.n	800c5e0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c328:	4bb1      	ldr	r3, [pc, #708]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c330:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c334:	4bae      	ldr	r3, [pc, #696]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d031      	beq.n	800c3a4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c340:	4bab      	ldr	r3, [pc, #684]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	099b      	lsrs	r3, r3, #6
 800c346:	2200      	movs	r2, #0
 800c348:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c34a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c34c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c352:	663b      	str	r3, [r7, #96]	@ 0x60
 800c354:	2300      	movs	r3, #0
 800c356:	667b      	str	r3, [r7, #100]	@ 0x64
 800c358:	4ba7      	ldr	r3, [pc, #668]	@ (800c5f8 <HAL_RCC_GetSysClockFreq+0x350>)
 800c35a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c35e:	462a      	mov	r2, r5
 800c360:	fb03 f202 	mul.w	r2, r3, r2
 800c364:	2300      	movs	r3, #0
 800c366:	4621      	mov	r1, r4
 800c368:	fb01 f303 	mul.w	r3, r1, r3
 800c36c:	4413      	add	r3, r2
 800c36e:	4aa2      	ldr	r2, [pc, #648]	@ (800c5f8 <HAL_RCC_GetSysClockFreq+0x350>)
 800c370:	4621      	mov	r1, r4
 800c372:	fba1 1202 	umull	r1, r2, r1, r2
 800c376:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c378:	460a      	mov	r2, r1
 800c37a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c37c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c37e:	4413      	add	r3, r2
 800c380:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c386:	2200      	movs	r2, #0
 800c388:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c38a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800c38c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c390:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800c394:	f7fc fc38 	bl	8008c08 <__aeabi_uldivmod>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4613      	mov	r3, r2
 800c39e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c3a2:	e064      	b.n	800c46e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3a4:	4b92      	ldr	r3, [pc, #584]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	099b      	lsrs	r3, r3, #6
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3ae:	657a      	str	r2, [r7, #84]	@ 0x54
 800c3b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800c3c0:	4622      	mov	r2, r4
 800c3c2:	462b      	mov	r3, r5
 800c3c4:	f04f 0000 	mov.w	r0, #0
 800c3c8:	f04f 0100 	mov.w	r1, #0
 800c3cc:	0159      	lsls	r1, r3, #5
 800c3ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c3d2:	0150      	lsls	r0, r2, #5
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4621      	mov	r1, r4
 800c3da:	1a51      	subs	r1, r2, r1
 800c3dc:	6139      	str	r1, [r7, #16]
 800c3de:	4629      	mov	r1, r5
 800c3e0:	eb63 0301 	sbc.w	r3, r3, r1
 800c3e4:	617b      	str	r3, [r7, #20]
 800c3e6:	f04f 0200 	mov.w	r2, #0
 800c3ea:	f04f 0300 	mov.w	r3, #0
 800c3ee:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c3f2:	4659      	mov	r1, fp
 800c3f4:	018b      	lsls	r3, r1, #6
 800c3f6:	4651      	mov	r1, sl
 800c3f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c3fc:	4651      	mov	r1, sl
 800c3fe:	018a      	lsls	r2, r1, #6
 800c400:	4651      	mov	r1, sl
 800c402:	ebb2 0801 	subs.w	r8, r2, r1
 800c406:	4659      	mov	r1, fp
 800c408:	eb63 0901 	sbc.w	r9, r3, r1
 800c40c:	f04f 0200 	mov.w	r2, #0
 800c410:	f04f 0300 	mov.w	r3, #0
 800c414:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c418:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c41c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c420:	4690      	mov	r8, r2
 800c422:	4699      	mov	r9, r3
 800c424:	4623      	mov	r3, r4
 800c426:	eb18 0303 	adds.w	r3, r8, r3
 800c42a:	60bb      	str	r3, [r7, #8]
 800c42c:	462b      	mov	r3, r5
 800c42e:	eb49 0303 	adc.w	r3, r9, r3
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	f04f 0200 	mov.w	r2, #0
 800c438:	f04f 0300 	mov.w	r3, #0
 800c43c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c440:	4629      	mov	r1, r5
 800c442:	028b      	lsls	r3, r1, #10
 800c444:	4621      	mov	r1, r4
 800c446:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c44a:	4621      	mov	r1, r4
 800c44c:	028a      	lsls	r2, r1, #10
 800c44e:	4610      	mov	r0, r2
 800c450:	4619      	mov	r1, r3
 800c452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c456:	2200      	movs	r2, #0
 800c458:	643b      	str	r3, [r7, #64]	@ 0x40
 800c45a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c45c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c460:	f7fc fbd2 	bl	8008c08 <__aeabi_uldivmod>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	4613      	mov	r3, r2
 800c46a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c46e:	4b60      	ldr	r3, [pc, #384]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	0c1b      	lsrs	r3, r3, #16
 800c474:	f003 0303 	and.w	r3, r3, #3
 800c478:	3301      	adds	r3, #1
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800c480:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c484:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c488:	fbb2 f3f3 	udiv	r3, r2, r3
 800c48c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800c490:	e0a6      	b.n	800c5e0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c492:	4b57      	ldr	r3, [pc, #348]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c49a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c49e:	4b54      	ldr	r3, [pc, #336]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d02a      	beq.n	800c500 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4aa:	4b51      	ldr	r3, [pc, #324]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	099b      	lsrs	r3, r3, #6
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c4bc:	2100      	movs	r1, #0
 800c4be:	4b4e      	ldr	r3, [pc, #312]	@ (800c5f8 <HAL_RCC_GetSysClockFreq+0x350>)
 800c4c0:	fb03 f201 	mul.w	r2, r3, r1
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	fb00 f303 	mul.w	r3, r0, r3
 800c4ca:	4413      	add	r3, r2
 800c4cc:	4a4a      	ldr	r2, [pc, #296]	@ (800c5f8 <HAL_RCC_GetSysClockFreq+0x350>)
 800c4ce:	fba0 1202 	umull	r1, r2, r0, r2
 800c4d2:	677a      	str	r2, [r7, #116]	@ 0x74
 800c4d4:	460a      	mov	r2, r1
 800c4d6:	673a      	str	r2, [r7, #112]	@ 0x70
 800c4d8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c4da:	4413      	add	r3, r2
 800c4dc:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4e6:	637a      	str	r2, [r7, #52]	@ 0x34
 800c4e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c4ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800c4f0:	f7fc fb8a 	bl	8008c08 <__aeabi_uldivmod>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c4fe:	e05b      	b.n	800c5b8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c500:	4b3b      	ldr	r3, [pc, #236]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	099b      	lsrs	r3, r3, #6
 800c506:	2200      	movs	r2, #0
 800c508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c50a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c512:	623b      	str	r3, [r7, #32]
 800c514:	2300      	movs	r3, #0
 800c516:	627b      	str	r3, [r7, #36]	@ 0x24
 800c518:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c51c:	4642      	mov	r2, r8
 800c51e:	464b      	mov	r3, r9
 800c520:	f04f 0000 	mov.w	r0, #0
 800c524:	f04f 0100 	mov.w	r1, #0
 800c528:	0159      	lsls	r1, r3, #5
 800c52a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c52e:	0150      	lsls	r0, r2, #5
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	4641      	mov	r1, r8
 800c536:	ebb2 0a01 	subs.w	sl, r2, r1
 800c53a:	4649      	mov	r1, r9
 800c53c:	eb63 0b01 	sbc.w	fp, r3, r1
 800c540:	f04f 0200 	mov.w	r2, #0
 800c544:	f04f 0300 	mov.w	r3, #0
 800c548:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c54c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c550:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c554:	ebb2 040a 	subs.w	r4, r2, sl
 800c558:	eb63 050b 	sbc.w	r5, r3, fp
 800c55c:	f04f 0200 	mov.w	r2, #0
 800c560:	f04f 0300 	mov.w	r3, #0
 800c564:	00eb      	lsls	r3, r5, #3
 800c566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c56a:	00e2      	lsls	r2, r4, #3
 800c56c:	4614      	mov	r4, r2
 800c56e:	461d      	mov	r5, r3
 800c570:	4643      	mov	r3, r8
 800c572:	18e3      	adds	r3, r4, r3
 800c574:	603b      	str	r3, [r7, #0]
 800c576:	464b      	mov	r3, r9
 800c578:	eb45 0303 	adc.w	r3, r5, r3
 800c57c:	607b      	str	r3, [r7, #4]
 800c57e:	f04f 0200 	mov.w	r2, #0
 800c582:	f04f 0300 	mov.w	r3, #0
 800c586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c58a:	4629      	mov	r1, r5
 800c58c:	028b      	lsls	r3, r1, #10
 800c58e:	4621      	mov	r1, r4
 800c590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c594:	4621      	mov	r1, r4
 800c596:	028a      	lsls	r2, r1, #10
 800c598:	4610      	mov	r0, r2
 800c59a:	4619      	mov	r1, r3
 800c59c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	61bb      	str	r3, [r7, #24]
 800c5a4:	61fa      	str	r2, [r7, #28]
 800c5a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c5aa:	f7fc fb2d 	bl	8008c08 <__aeabi_uldivmod>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c5b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	0f1b      	lsrs	r3, r3, #28
 800c5be:	f003 0307 	and.w	r3, r3, #7
 800c5c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800c5c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c5ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800c5d6:	e003      	b.n	800c5e0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c5d8:	4b06      	ldr	r3, [pc, #24]	@ (800c5f4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800c5da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800c5de:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c5e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3798      	adds	r7, #152	@ 0x98
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5ee:	bf00      	nop
 800c5f0:	40023800 	.word	0x40023800
 800c5f4:	00f42400 	.word	0x00f42400
 800c5f8:	017d7840 	.word	0x017d7840

0800c5fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e28d      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	2b00      	cmp	r3, #0
 800c618:	f000 8083 	beq.w	800c722 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c61c:	4b94      	ldr	r3, [pc, #592]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	f003 030c 	and.w	r3, r3, #12
 800c624:	2b04      	cmp	r3, #4
 800c626:	d019      	beq.n	800c65c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800c628:	4b91      	ldr	r3, [pc, #580]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	f003 030c 	and.w	r3, r3, #12
        || \
 800c630:	2b08      	cmp	r3, #8
 800c632:	d106      	bne.n	800c642 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800c634:	4b8e      	ldr	r3, [pc, #568]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c63c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c640:	d00c      	beq.n	800c65c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c642:	4b8b      	ldr	r3, [pc, #556]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800c64a:	2b0c      	cmp	r3, #12
 800c64c:	d112      	bne.n	800c674 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c64e:	4b88      	ldr	r3, [pc, #544]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c65a:	d10b      	bne.n	800c674 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c65c:	4b84      	ldr	r3, [pc, #528]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c664:	2b00      	cmp	r3, #0
 800c666:	d05b      	beq.n	800c720 <HAL_RCC_OscConfig+0x124>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d157      	bne.n	800c720 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	e25a      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c67c:	d106      	bne.n	800c68c <HAL_RCC_OscConfig+0x90>
 800c67e:	4b7c      	ldr	r3, [pc, #496]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a7b      	ldr	r2, [pc, #492]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c688:	6013      	str	r3, [r2, #0]
 800c68a:	e01d      	b.n	800c6c8 <HAL_RCC_OscConfig+0xcc>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c694:	d10c      	bne.n	800c6b0 <HAL_RCC_OscConfig+0xb4>
 800c696:	4b76      	ldr	r3, [pc, #472]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a75      	ldr	r2, [pc, #468]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c69c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c6a0:	6013      	str	r3, [r2, #0]
 800c6a2:	4b73      	ldr	r3, [pc, #460]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a72      	ldr	r2, [pc, #456]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c6a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	e00b      	b.n	800c6c8 <HAL_RCC_OscConfig+0xcc>
 800c6b0:	4b6f      	ldr	r3, [pc, #444]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a6e      	ldr	r2, [pc, #440]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c6b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6ba:	6013      	str	r3, [r2, #0]
 800c6bc:	4b6c      	ldr	r3, [pc, #432]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a6b      	ldr	r2, [pc, #428]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c6c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d013      	beq.n	800c6f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6d0:	f7ff f8ca 	bl	800b868 <HAL_GetTick>
 800c6d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6d6:	e008      	b.n	800c6ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c6d8:	f7ff f8c6 	bl	800b868 <HAL_GetTick>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	2b64      	cmp	r3, #100	@ 0x64
 800c6e4:	d901      	bls.n	800c6ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e21f      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6ea:	4b61      	ldr	r3, [pc, #388]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0f0      	beq.n	800c6d8 <HAL_RCC_OscConfig+0xdc>
 800c6f6:	e014      	b.n	800c722 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6f8:	f7ff f8b6 	bl	800b868 <HAL_GetTick>
 800c6fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c6fe:	e008      	b.n	800c712 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c700:	f7ff f8b2 	bl	800b868 <HAL_GetTick>
 800c704:	4602      	mov	r2, r0
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	2b64      	cmp	r3, #100	@ 0x64
 800c70c:	d901      	bls.n	800c712 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c70e:	2303      	movs	r3, #3
 800c710:	e20b      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c712:	4b57      	ldr	r3, [pc, #348]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1f0      	bne.n	800c700 <HAL_RCC_OscConfig+0x104>
 800c71e:	e000      	b.n	800c722 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f003 0302 	and.w	r3, r3, #2
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d06f      	beq.n	800c80e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c72e:	4b50      	ldr	r3, [pc, #320]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	f003 030c 	and.w	r3, r3, #12
 800c736:	2b00      	cmp	r3, #0
 800c738:	d017      	beq.n	800c76a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800c73a:	4b4d      	ldr	r3, [pc, #308]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	f003 030c 	and.w	r3, r3, #12
        || \
 800c742:	2b08      	cmp	r3, #8
 800c744:	d105      	bne.n	800c752 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800c746:	4b4a      	ldr	r3, [pc, #296]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00b      	beq.n	800c76a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c752:	4b47      	ldr	r3, [pc, #284]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800c75a:	2b0c      	cmp	r3, #12
 800c75c:	d11c      	bne.n	800c798 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c75e:	4b44      	ldr	r3, [pc, #272]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c766:	2b00      	cmp	r3, #0
 800c768:	d116      	bne.n	800c798 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c76a:	4b41      	ldr	r3, [pc, #260]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 0302 	and.w	r3, r3, #2
 800c772:	2b00      	cmp	r3, #0
 800c774:	d005      	beq.n	800c782 <HAL_RCC_OscConfig+0x186>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d001      	beq.n	800c782 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	e1d3      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c782:	4b3b      	ldr	r3, [pc, #236]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	00db      	lsls	r3, r3, #3
 800c790:	4937      	ldr	r1, [pc, #220]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c792:	4313      	orrs	r3, r2
 800c794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c796:	e03a      	b.n	800c80e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d020      	beq.n	800c7e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7a0:	4b34      	ldr	r3, [pc, #208]	@ (800c874 <HAL_RCC_OscConfig+0x278>)
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7a6:	f7ff f85f 	bl	800b868 <HAL_GetTick>
 800c7aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7ac:	e008      	b.n	800c7c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7ae:	f7ff f85b 	bl	800b868 <HAL_GetTick>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	d901      	bls.n	800c7c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e1b4      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7c0:	4b2b      	ldr	r3, [pc, #172]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 0302 	and.w	r3, r3, #2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d0f0      	beq.n	800c7ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7cc:	4b28      	ldr	r3, [pc, #160]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	4925      	ldr	r1, [pc, #148]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	600b      	str	r3, [r1, #0]
 800c7e0:	e015      	b.n	800c80e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7e2:	4b24      	ldr	r3, [pc, #144]	@ (800c874 <HAL_RCC_OscConfig+0x278>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7e8:	f7ff f83e 	bl	800b868 <HAL_GetTick>
 800c7ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c7ee:	e008      	b.n	800c802 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7f0:	f7ff f83a 	bl	800b868 <HAL_GetTick>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	2b02      	cmp	r3, #2
 800c7fc:	d901      	bls.n	800c802 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c7fe:	2303      	movs	r3, #3
 800c800:	e193      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c802:	4b1b      	ldr	r3, [pc, #108]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 0302 	and.w	r3, r3, #2
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1f0      	bne.n	800c7f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 0308 	and.w	r3, r3, #8
 800c816:	2b00      	cmp	r3, #0
 800c818:	d036      	beq.n	800c888 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	695b      	ldr	r3, [r3, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d016      	beq.n	800c850 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c822:	4b15      	ldr	r3, [pc, #84]	@ (800c878 <HAL_RCC_OscConfig+0x27c>)
 800c824:	2201      	movs	r2, #1
 800c826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c828:	f7ff f81e 	bl	800b868 <HAL_GetTick>
 800c82c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c82e:	e008      	b.n	800c842 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c830:	f7ff f81a 	bl	800b868 <HAL_GetTick>
 800c834:	4602      	mov	r2, r0
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d901      	bls.n	800c842 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c83e:	2303      	movs	r3, #3
 800c840:	e173      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c842:	4b0b      	ldr	r3, [pc, #44]	@ (800c870 <HAL_RCC_OscConfig+0x274>)
 800c844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c846:	f003 0302 	and.w	r3, r3, #2
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0f0      	beq.n	800c830 <HAL_RCC_OscConfig+0x234>
 800c84e:	e01b      	b.n	800c888 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c850:	4b09      	ldr	r3, [pc, #36]	@ (800c878 <HAL_RCC_OscConfig+0x27c>)
 800c852:	2200      	movs	r2, #0
 800c854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c856:	f7ff f807 	bl	800b868 <HAL_GetTick>
 800c85a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c85c:	e00e      	b.n	800c87c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c85e:	f7ff f803 	bl	800b868 <HAL_GetTick>
 800c862:	4602      	mov	r2, r0
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d907      	bls.n	800c87c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c86c:	2303      	movs	r3, #3
 800c86e:	e15c      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
 800c870:	40023800 	.word	0x40023800
 800c874:	42470000 	.word	0x42470000
 800c878:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c87c:	4b8a      	ldr	r3, [pc, #552]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c87e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c880:	f003 0302 	and.w	r3, r3, #2
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1ea      	bne.n	800c85e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	2b00      	cmp	r3, #0
 800c892:	f000 8097 	beq.w	800c9c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c896:	2300      	movs	r3, #0
 800c898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c89a:	4b83      	ldr	r3, [pc, #524]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c89e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10f      	bne.n	800c8c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60bb      	str	r3, [r7, #8]
 800c8aa:	4b7f      	ldr	r3, [pc, #508]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ae:	4a7e      	ldr	r2, [pc, #504]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c8b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8b4:	6413      	str	r3, [r2, #64]	@ 0x40
 800c8b6:	4b7c      	ldr	r3, [pc, #496]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8be:	60bb      	str	r3, [r7, #8]
 800c8c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8c6:	4b79      	ldr	r3, [pc, #484]	@ (800caac <HAL_RCC_OscConfig+0x4b0>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d118      	bne.n	800c904 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c8d2:	4b76      	ldr	r3, [pc, #472]	@ (800caac <HAL_RCC_OscConfig+0x4b0>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a75      	ldr	r2, [pc, #468]	@ (800caac <HAL_RCC_OscConfig+0x4b0>)
 800c8d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8de:	f7fe ffc3 	bl	800b868 <HAL_GetTick>
 800c8e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8e4:	e008      	b.n	800c8f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8e6:	f7fe ffbf 	bl	800b868 <HAL_GetTick>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d901      	bls.n	800c8f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c8f4:	2303      	movs	r3, #3
 800c8f6:	e118      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8f8:	4b6c      	ldr	r3, [pc, #432]	@ (800caac <HAL_RCC_OscConfig+0x4b0>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c900:	2b00      	cmp	r3, #0
 800c902:	d0f0      	beq.n	800c8e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d106      	bne.n	800c91a <HAL_RCC_OscConfig+0x31e>
 800c90c:	4b66      	ldr	r3, [pc, #408]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c90e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c910:	4a65      	ldr	r2, [pc, #404]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c912:	f043 0301 	orr.w	r3, r3, #1
 800c916:	6713      	str	r3, [r2, #112]	@ 0x70
 800c918:	e01c      	b.n	800c954 <HAL_RCC_OscConfig+0x358>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	2b05      	cmp	r3, #5
 800c920:	d10c      	bne.n	800c93c <HAL_RCC_OscConfig+0x340>
 800c922:	4b61      	ldr	r3, [pc, #388]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c926:	4a60      	ldr	r2, [pc, #384]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c928:	f043 0304 	orr.w	r3, r3, #4
 800c92c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c92e:	4b5e      	ldr	r3, [pc, #376]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c932:	4a5d      	ldr	r2, [pc, #372]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c934:	f043 0301 	orr.w	r3, r3, #1
 800c938:	6713      	str	r3, [r2, #112]	@ 0x70
 800c93a:	e00b      	b.n	800c954 <HAL_RCC_OscConfig+0x358>
 800c93c:	4b5a      	ldr	r3, [pc, #360]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c93e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c940:	4a59      	ldr	r2, [pc, #356]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c942:	f023 0301 	bic.w	r3, r3, #1
 800c946:	6713      	str	r3, [r2, #112]	@ 0x70
 800c948:	4b57      	ldr	r3, [pc, #348]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c94a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c94c:	4a56      	ldr	r2, [pc, #344]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c94e:	f023 0304 	bic.w	r3, r3, #4
 800c952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d015      	beq.n	800c988 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c95c:	f7fe ff84 	bl	800b868 <HAL_GetTick>
 800c960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c962:	e00a      	b.n	800c97a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c964:	f7fe ff80 	bl	800b868 <HAL_GetTick>
 800c968:	4602      	mov	r2, r0
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c972:	4293      	cmp	r3, r2
 800c974:	d901      	bls.n	800c97a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c976:	2303      	movs	r3, #3
 800c978:	e0d7      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c97a:	4b4b      	ldr	r3, [pc, #300]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c97c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c97e:	f003 0302 	and.w	r3, r3, #2
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0ee      	beq.n	800c964 <HAL_RCC_OscConfig+0x368>
 800c986:	e014      	b.n	800c9b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c988:	f7fe ff6e 	bl	800b868 <HAL_GetTick>
 800c98c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c98e:	e00a      	b.n	800c9a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c990:	f7fe ff6a 	bl	800b868 <HAL_GetTick>
 800c994:	4602      	mov	r2, r0
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d901      	bls.n	800c9a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	e0c1      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9a6:	4b40      	ldr	r3, [pc, #256]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9aa:	f003 0302 	and.w	r3, r3, #2
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1ee      	bne.n	800c990 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d105      	bne.n	800c9c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9b8:	4b3b      	ldr	r3, [pc, #236]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c9ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9bc:	4a3a      	ldr	r2, [pc, #232]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c9be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 80ad 	beq.w	800cb28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c9ce:	4b36      	ldr	r3, [pc, #216]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	f003 030c 	and.w	r3, r3, #12
 800c9d6:	2b08      	cmp	r3, #8
 800c9d8:	d060      	beq.n	800ca9c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d145      	bne.n	800ca6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9e2:	4b33      	ldr	r3, [pc, #204]	@ (800cab0 <HAL_RCC_OscConfig+0x4b4>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9e8:	f7fe ff3e 	bl	800b868 <HAL_GetTick>
 800c9ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9ee:	e008      	b.n	800ca02 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9f0:	f7fe ff3a 	bl	800b868 <HAL_GetTick>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d901      	bls.n	800ca02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	e093      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca02:	4b29      	ldr	r3, [pc, #164]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1f0      	bne.n	800c9f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	69da      	ldr	r2, [r3, #28]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	431a      	orrs	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1c:	019b      	lsls	r3, r3, #6
 800ca1e:	431a      	orrs	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca24:	085b      	lsrs	r3, r3, #1
 800ca26:	3b01      	subs	r3, #1
 800ca28:	041b      	lsls	r3, r3, #16
 800ca2a:	431a      	orrs	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca30:	061b      	lsls	r3, r3, #24
 800ca32:	431a      	orrs	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca38:	071b      	lsls	r3, r3, #28
 800ca3a:	491b      	ldr	r1, [pc, #108]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca40:	4b1b      	ldr	r3, [pc, #108]	@ (800cab0 <HAL_RCC_OscConfig+0x4b4>)
 800ca42:	2201      	movs	r2, #1
 800ca44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca46:	f7fe ff0f 	bl	800b868 <HAL_GetTick>
 800ca4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca4c:	e008      	b.n	800ca60 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca4e:	f7fe ff0b 	bl	800b868 <HAL_GetTick>
 800ca52:	4602      	mov	r2, r0
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d901      	bls.n	800ca60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e064      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca60:	4b11      	ldr	r3, [pc, #68]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d0f0      	beq.n	800ca4e <HAL_RCC_OscConfig+0x452>
 800ca6c:	e05c      	b.n	800cb28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca6e:	4b10      	ldr	r3, [pc, #64]	@ (800cab0 <HAL_RCC_OscConfig+0x4b4>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca74:	f7fe fef8 	bl	800b868 <HAL_GetTick>
 800ca78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca7a:	e008      	b.n	800ca8e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca7c:	f7fe fef4 	bl	800b868 <HAL_GetTick>
 800ca80:	4602      	mov	r2, r0
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d901      	bls.n	800ca8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e04d      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca8e:	4b06      	ldr	r3, [pc, #24]	@ (800caa8 <HAL_RCC_OscConfig+0x4ac>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1f0      	bne.n	800ca7c <HAL_RCC_OscConfig+0x480>
 800ca9a:	e045      	b.n	800cb28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d107      	bne.n	800cab4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	e040      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
 800caa8:	40023800 	.word	0x40023800
 800caac:	40007000 	.word	0x40007000
 800cab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cab4:	4b1f      	ldr	r3, [pc, #124]	@ (800cb34 <HAL_RCC_OscConfig+0x538>)
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	699b      	ldr	r3, [r3, #24]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d030      	beq.n	800cb24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cacc:	429a      	cmp	r2, r3
 800cace:	d129      	bne.n	800cb24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cada:	429a      	cmp	r2, r3
 800cadc:	d122      	bne.n	800cb24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cae4:	4013      	ands	r3, r2
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800caea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800caec:	4293      	cmp	r3, r2
 800caee:	d119      	bne.n	800cb24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cafa:	085b      	lsrs	r3, r3, #1
 800cafc:	3b01      	subs	r3, #1
 800cafe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d10f      	bne.n	800cb24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d107      	bne.n	800cb24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d001      	beq.n	800cb28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800cb24:	2301      	movs	r3, #1
 800cb26:	e000      	b.n	800cb2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3718      	adds	r7, #24
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	40023800 	.word	0x40023800

0800cb38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d101      	bne.n	800cb4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e07b      	b.n	800cc42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d108      	bne.n	800cb64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cb5a:	d009      	beq.n	800cb70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	61da      	str	r2, [r3, #28]
 800cb62:	e005      	b.n	800cb70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d106      	bne.n	800cb90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7fe f850 	bl	800ac30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2202      	movs	r2, #2
 800cb94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cba6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800cbb8:	431a      	orrs	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cbc2:	431a      	orrs	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	f003 0302 	and.w	r3, r3, #2
 800cbcc:	431a      	orrs	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	f003 0301 	and.w	r3, r3, #1
 800cbd6:	431a      	orrs	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	699b      	ldr	r3, [r3, #24]
 800cbdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cbe0:	431a      	orrs	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	69db      	ldr	r3, [r3, #28]
 800cbe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cbea:	431a      	orrs	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbf4:	ea42 0103 	orr.w	r1, r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbfc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	430a      	orrs	r2, r1
 800cc06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	0c1b      	lsrs	r3, r3, #16
 800cc0e:	f003 0104 	and.w	r1, r3, #4
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc16:	f003 0210 	and.w	r2, r3, #16
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	430a      	orrs	r2, r1
 800cc20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	69da      	ldr	r2, [r3, #28]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cc30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b088      	sub	sp, #32
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	60f8      	str	r0, [r7, #12]
 800cc52:	60b9      	str	r1, [r7, #8]
 800cc54:	603b      	str	r3, [r7, #0]
 800cc56:	4613      	mov	r3, r2
 800cc58:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc5a:	f7fe fe05 	bl	800b868 <HAL_GetTick>
 800cc5e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800cc60:	88fb      	ldrh	r3, [r7, #6]
 800cc62:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d001      	beq.n	800cc74 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800cc70:	2302      	movs	r3, #2
 800cc72:	e12a      	b.n	800ceca <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d002      	beq.n	800cc80 <HAL_SPI_Transmit+0x36>
 800cc7a:	88fb      	ldrh	r3, [r7, #6]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d101      	bne.n	800cc84 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e122      	b.n	800ceca <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d101      	bne.n	800cc92 <HAL_SPI_Transmit+0x48>
 800cc8e:	2302      	movs	r3, #2
 800cc90:	e11b      	b.n	800ceca <HAL_SPI_Transmit+0x280>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2201      	movs	r2, #1
 800cc96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2203      	movs	r2, #3
 800cc9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	88fa      	ldrh	r2, [r7, #6]
 800ccb2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	88fa      	ldrh	r2, [r7, #6]
 800ccb8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cce0:	d10f      	bne.n	800cd02 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ccf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cd00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd0c:	2b40      	cmp	r3, #64	@ 0x40
 800cd0e:	d007      	beq.n	800cd20 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd28:	d152      	bne.n	800cdd0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d002      	beq.n	800cd38 <HAL_SPI_Transmit+0xee>
 800cd32:	8b7b      	ldrh	r3, [r7, #26]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d145      	bne.n	800cdc4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd3c:	881a      	ldrh	r2, [r3, #0]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd48:	1c9a      	adds	r2, r3, #2
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	3b01      	subs	r3, #1
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cd5c:	e032      	b.n	800cdc4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	f003 0302 	and.w	r3, r3, #2
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d112      	bne.n	800cd92 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd70:	881a      	ldrh	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd7c:	1c9a      	adds	r2, r3, #2
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800cd90:	e018      	b.n	800cdc4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd92:	f7fe fd69 	bl	800b868 <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	683a      	ldr	r2, [r7, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d803      	bhi.n	800cdaa <HAL_SPI_Transmit+0x160>
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda8:	d102      	bne.n	800cdb0 <HAL_SPI_Transmit+0x166>
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d109      	bne.n	800cdc4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	e082      	b.n	800ceca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1c7      	bne.n	800cd5e <HAL_SPI_Transmit+0x114>
 800cdce:	e053      	b.n	800ce78 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <HAL_SPI_Transmit+0x194>
 800cdd8:	8b7b      	ldrh	r3, [r7, #26]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d147      	bne.n	800ce6e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	330c      	adds	r3, #12
 800cde8:	7812      	ldrb	r2, [r2, #0]
 800cdea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdf0:	1c5a      	adds	r2, r3, #1
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ce04:	e033      	b.n	800ce6e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	f003 0302 	and.w	r3, r3, #2
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d113      	bne.n	800ce3c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	330c      	adds	r3, #12
 800ce1e:	7812      	ldrb	r2, [r2, #0]
 800ce20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	3b01      	subs	r3, #1
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ce3a:	e018      	b.n	800ce6e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce3c:	f7fe fd14 	bl	800b868 <HAL_GetTick>
 800ce40:	4602      	mov	r2, r0
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	683a      	ldr	r2, [r7, #0]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d803      	bhi.n	800ce54 <HAL_SPI_Transmit+0x20a>
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce52:	d102      	bne.n	800ce5a <HAL_SPI_Transmit+0x210>
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d109      	bne.n	800ce6e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	e02d      	b.n	800ceca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1c6      	bne.n	800ce06 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ce78:	69fa      	ldr	r2, [r7, #28]
 800ce7a:	6839      	ldr	r1, [r7, #0]
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f000 fc6f 	bl	800d760 <SPI_EndRxTxTransaction>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d002      	beq.n	800ce8e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2220      	movs	r2, #32
 800ce8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10a      	bne.n	800ceac <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce96:	2300      	movs	r3, #0
 800ce98:	617b      	str	r3, [r7, #20]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	617b      	str	r3, [r7, #20]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e000      	b.n	800ceca <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800cec8:	2300      	movs	r3, #0
  }
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3720      	adds	r7, #32
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
	...

0800ced4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	4613      	mov	r3, r2
 800cee0:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d001      	beq.n	800cef2 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800ceee:	2302      	movs	r3, #2
 800cef0:	e07f      	b.n	800cff2 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <HAL_SPI_Receive_IT+0x2a>
 800cef8:	88fb      	ldrh	r3, [r7, #6]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e077      	b.n	800cff2 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d110      	bne.n	800cf2c <HAL_SPI_Receive_IT+0x58>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cf12:	d10b      	bne.n	800cf2c <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2204      	movs	r2, #4
 800cf18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800cf1c:	88fb      	ldrh	r3, [r7, #6]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	68b9      	ldr	r1, [r7, #8]
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f000 f86e 	bl	800d004 <HAL_SPI_TransmitReceive_IT>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	e062      	b.n	800cff2 <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d101      	bne.n	800cf3a <HAL_SPI_Receive_IT+0x66>
 800cf36:	2302      	movs	r3, #2
 800cf38:	e05b      	b.n	800cff2 <HAL_SPI_Receive_IT+0x11e>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2204      	movs	r2, #4
 800cf46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	88fa      	ldrh	r2, [r7, #6]
 800cf5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	88fa      	ldrh	r2, [r7, #6]
 800cf60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2200      	movs	r2, #0
 800cf72:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2200      	movs	r2, #0
 800cf78:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d003      	beq.n	800cf8a <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	4a1d      	ldr	r2, [pc, #116]	@ (800cffc <HAL_SPI_Receive_IT+0x128>)
 800cf86:	641a      	str	r2, [r3, #64]	@ 0x40
 800cf88:	e002      	b.n	800cf90 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	4a1c      	ldr	r2, [pc, #112]	@ (800d000 <HAL_SPI_Receive_IT+0x12c>)
 800cf8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf98:	d10f      	bne.n	800cfba <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cfa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cfb8:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfc4:	2b40      	cmp	r3, #64	@ 0x40
 800cfc6:	d007      	beq.n	800cfd8 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cfd6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	685a      	ldr	r2, [r3, #4]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cfee:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	0800d53d 	.word	0x0800d53d
 800d000:	0800d4f3 	.word	0x0800d4f3

0800d004 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800d004:	b480      	push	{r7}
 800d006:	b087      	sub	sp, #28
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
 800d010:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d018:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d020:	7dfb      	ldrb	r3, [r7, #23]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d00c      	beq.n	800d040 <HAL_SPI_TransmitReceive_IT+0x3c>
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d02c:	d106      	bne.n	800d03c <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d102      	bne.n	800d03c <HAL_SPI_TransmitReceive_IT+0x38>
 800d036:	7dfb      	ldrb	r3, [r7, #23]
 800d038:	2b04      	cmp	r3, #4
 800d03a:	d001      	beq.n	800d040 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d03c:	2302      	movs	r3, #2
 800d03e:	e061      	b.n	800d104 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d005      	beq.n	800d052 <HAL_SPI_TransmitReceive_IT+0x4e>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <HAL_SPI_TransmitReceive_IT+0x4e>
 800d04c:	887b      	ldrh	r3, [r7, #2]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d101      	bne.n	800d056 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	e056      	b.n	800d104 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d101      	bne.n	800d064 <HAL_SPI_TransmitReceive_IT+0x60>
 800d060:	2302      	movs	r3, #2
 800d062:	e04f      	b.n	800d104 <HAL_SPI_TransmitReceive_IT+0x100>
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d072:	b2db      	uxtb	r3, r3
 800d074:	2b04      	cmp	r3, #4
 800d076:	d003      	beq.n	800d080 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2205      	movs	r2, #5
 800d07c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2200      	movs	r2, #0
 800d084:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	887a      	ldrh	r2, [r7, #2]
 800d090:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	887a      	ldrh	r2, [r7, #2]
 800d096:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	887a      	ldrh	r2, [r7, #2]
 800d0a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	887a      	ldrh	r2, [r7, #2]
 800d0a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d006      	beq.n	800d0c0 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	4a16      	ldr	r2, [pc, #88]	@ (800d110 <HAL_SPI_TransmitReceive_IT+0x10c>)
 800d0b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	4a16      	ldr	r2, [pc, #88]	@ (800d114 <HAL_SPI_TransmitReceive_IT+0x110>)
 800d0bc:	645a      	str	r2, [r3, #68]	@ 0x44
 800d0be:	e005      	b.n	800d0cc <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4a15      	ldr	r2, [pc, #84]	@ (800d118 <HAL_SPI_TransmitReceive_IT+0x114>)
 800d0c4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4a14      	ldr	r2, [pc, #80]	@ (800d11c <HAL_SPI_TransmitReceive_IT+0x118>)
 800d0ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0d6:	2b40      	cmp	r3, #64	@ 0x40
 800d0d8:	d007      	beq.n	800d0ea <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0e8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800d100:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	371c      	adds	r7, #28
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	0800d435 	.word	0x0800d435
 800d114:	0800d495 	.word	0x0800d495
 800d118:	0800d371 	.word	0x0800d371
 800d11c:	0800d3d5 	.word	0x0800d3d5

0800d120 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	099b      	lsrs	r3, r3, #6
 800d13c:	f003 0301 	and.w	r3, r3, #1
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10f      	bne.n	800d164 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00a      	beq.n	800d164 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	099b      	lsrs	r3, r3, #6
 800d152:	f003 0301 	and.w	r3, r3, #1
 800d156:	2b00      	cmp	r3, #0
 800d158:	d004      	beq.n	800d164 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	4798      	blx	r3
    return;
 800d162:	e0d7      	b.n	800d314 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	085b      	lsrs	r3, r3, #1
 800d168:	f003 0301 	and.w	r3, r3, #1
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00a      	beq.n	800d186 <HAL_SPI_IRQHandler+0x66>
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	09db      	lsrs	r3, r3, #7
 800d174:	f003 0301 	and.w	r3, r3, #1
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d004      	beq.n	800d186 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	4798      	blx	r3
    return;
 800d184:	e0c6      	b.n	800d314 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	095b      	lsrs	r3, r3, #5
 800d18a:	f003 0301 	and.w	r3, r3, #1
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10c      	bne.n	800d1ac <HAL_SPI_IRQHandler+0x8c>
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	099b      	lsrs	r3, r3, #6
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d106      	bne.n	800d1ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	0a1b      	lsrs	r3, r3, #8
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f000 80b4 	beq.w	800d314 <HAL_SPI_IRQHandler+0x1f4>
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	095b      	lsrs	r3, r3, #5
 800d1b0:	f003 0301 	and.w	r3, r3, #1
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 80ad 	beq.w	800d314 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	099b      	lsrs	r3, r3, #6
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d023      	beq.n	800d20e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b03      	cmp	r3, #3
 800d1d0:	d011      	beq.n	800d1f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1d6:	f043 0204 	orr.w	r2, r3, #4
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1de:	2300      	movs	r3, #0
 800d1e0:	617b      	str	r3, [r7, #20]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	617b      	str	r3, [r7, #20]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	617b      	str	r3, [r7, #20]
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	e00b      	b.n	800d20e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	613b      	str	r3, [r7, #16]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	613b      	str	r3, [r7, #16]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	613b      	str	r3, [r7, #16]
 800d20a:	693b      	ldr	r3, [r7, #16]
        return;
 800d20c:	e082      	b.n	800d314 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	095b      	lsrs	r3, r3, #5
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d014      	beq.n	800d244 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d21e:	f043 0201 	orr.w	r2, r3, #1
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d226:	2300      	movs	r3, #0
 800d228:	60fb      	str	r3, [r7, #12]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	60fb      	str	r3, [r7, #12]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d240:	601a      	str	r2, [r3, #0]
 800d242:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	0a1b      	lsrs	r3, r3, #8
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00c      	beq.n	800d26a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d254:	f043 0208 	orr.w	r2, r3, #8
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d25c:	2300      	movs	r3, #0
 800d25e:	60bb      	str	r3, [r7, #8]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	60bb      	str	r3, [r7, #8]
 800d268:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d04f      	beq.n	800d312 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	685a      	ldr	r2, [r3, #4]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d280:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	f003 0302 	and.w	r3, r3, #2
 800d290:	2b00      	cmp	r3, #0
 800d292:	d104      	bne.n	800d29e <HAL_SPI_IRQHandler+0x17e>
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	f003 0301 	and.w	r3, r3, #1
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d034      	beq.n	800d308 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	685a      	ldr	r2, [r3, #4]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f022 0203 	bic.w	r2, r2, #3
 800d2ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d011      	beq.n	800d2da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2ba:	4a18      	ldr	r2, [pc, #96]	@ (800d31c <HAL_SPI_IRQHandler+0x1fc>)
 800d2bc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fe fc52 	bl	800bb6c <HAL_DMA_Abort_IT>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d005      	beq.n	800d2da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d016      	beq.n	800d310 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2e6:	4a0d      	ldr	r2, [pc, #52]	@ (800d31c <HAL_SPI_IRQHandler+0x1fc>)
 800d2e8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe fc3c 	bl	800bb6c <HAL_DMA_Abort_IT>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00a      	beq.n	800d310 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800d306:	e003      	b.n	800d310 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f813 	bl	800d334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d30e:	e000      	b.n	800d312 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800d310:	bf00      	nop
    return;
 800d312:	bf00      	nop
  }
}
 800d314:	3720      	adds	r7, #32
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	0800d349 	.word	0x0800d349

0800d320 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d354:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f7ff ffe6 	bl	800d334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d368:	bf00      	nop
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f103 020c 	add.w	r2, r3, #12
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d384:	7812      	ldrb	r2, [r2, #0]
 800d386:	b2d2      	uxtb	r2, r2
 800d388:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d38e:	1c5a      	adds	r2, r3, #1
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d398:	b29b      	uxth	r3, r3
 800d39a:	3b01      	subs	r3, #1
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10f      	bne.n	800d3cc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800d3ba:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d102      	bne.n	800d3cc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fa1e 	bl	800d808 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	330c      	adds	r3, #12
 800d3e6:	7812      	ldrb	r2, [r2, #0]
 800d3e8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3ee:	1c5a      	adds	r2, r3, #1
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d406:	b29b      	uxth	r3, r3
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10f      	bne.n	800d42c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d41a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d420:	b29b      	uxth	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d102      	bne.n	800d42c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 f9ee 	bl	800d808 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d42c:	bf00      	nop
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68da      	ldr	r2, [r3, #12]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d446:	b292      	uxth	r2, r2
 800d448:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d44e:	1c9a      	adds	r2, r3, #2
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d458:	b29b      	uxth	r3, r3
 800d45a:	3b01      	subs	r3, #1
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d466:	b29b      	uxth	r3, r3
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10f      	bne.n	800d48c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d47a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d480:	b29b      	uxth	r3, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	d102      	bne.n	800d48c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 f9be 	bl	800d808 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d48c:	bf00      	nop
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4a0:	881a      	ldrh	r2, [r3, #0]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4ac:	1c9a      	adds	r2, r3, #2
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10f      	bne.n	800d4ea <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d4d8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d102      	bne.n	800d4ea <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f98f 	bl	800d808 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d4ea:	bf00      	nop
 800d4ec:	3708      	adds	r7, #8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b082      	sub	sp, #8
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f103 020c 	add.w	r2, r3, #12
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d506:	7812      	ldrb	r2, [r2, #0]
 800d508:	b2d2      	uxtb	r2, r2
 800d50a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d510:	1c5a      	adds	r2, r3, #1
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	3b01      	subs	r3, #1
 800d51e:	b29a      	uxth	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d528:	b29b      	uxth	r3, r3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d102      	bne.n	800d534 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 f9de 	bl	800d8f0 <SPI_CloseRx_ISR>
  }
}
 800d534:	bf00      	nop
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68da      	ldr	r2, [r3, #12]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d54e:	b292      	uxth	r2, r2
 800d550:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d556:	1c9a      	adds	r2, r3, #2
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d560:	b29b      	uxth	r3, r3
 800d562:	3b01      	subs	r3, #1
 800d564:	b29a      	uxth	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d56e:	b29b      	uxth	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f9bb 	bl	800d8f0 <SPI_CloseRx_ISR>
  }
}
 800d57a:	bf00      	nop
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
	...

0800d584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b088      	sub	sp, #32
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	4613      	mov	r3, r2
 800d592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d594:	f7fe f968 	bl	800b868 <HAL_GetTick>
 800d598:	4602      	mov	r2, r0
 800d59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59c:	1a9b      	subs	r3, r3, r2
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d5a4:	f7fe f960 	bl	800b868 <HAL_GetTick>
 800d5a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d5aa:	4b39      	ldr	r3, [pc, #228]	@ (800d690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	015b      	lsls	r3, r3, #5
 800d5b0:	0d1b      	lsrs	r3, r3, #20
 800d5b2:	69fa      	ldr	r2, [r7, #28]
 800d5b4:	fb02 f303 	mul.w	r3, r2, r3
 800d5b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d5ba:	e055      	b.n	800d668 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c2:	d051      	beq.n	800d668 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d5c4:	f7fe f950 	bl	800b868 <HAL_GetTick>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	69fa      	ldr	r2, [r7, #28]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d902      	bls.n	800d5da <SPI_WaitFlagStateUntilTimeout+0x56>
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d13d      	bne.n	800d656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	685a      	ldr	r2, [r3, #4]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d5e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d5f2:	d111      	bne.n	800d618 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d5fc:	d004      	beq.n	800d608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d606:	d107      	bne.n	800d618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d61c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d620:	d10f      	bne.n	800d642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d630:	601a      	str	r2, [r3, #0]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2201      	movs	r2, #1
 800d646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2200      	movs	r2, #0
 800d64e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800d652:	2303      	movs	r3, #3
 800d654:	e018      	b.n	800d688 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d102      	bne.n	800d662 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800d65c:	2300      	movs	r3, #0
 800d65e:	61fb      	str	r3, [r7, #28]
 800d660:	e002      	b.n	800d668 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	3b01      	subs	r3, #1
 800d666:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	689a      	ldr	r2, [r3, #8]
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	4013      	ands	r3, r2
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	429a      	cmp	r2, r3
 800d676:	bf0c      	ite	eq
 800d678:	2301      	moveq	r3, #1
 800d67a:	2300      	movne	r3, #0
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	461a      	mov	r2, r3
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	429a      	cmp	r2, r3
 800d684:	d19a      	bne.n	800d5bc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3720      	adds	r7, #32
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	20000014 	.word	0x20000014

0800d694 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af02      	add	r7, sp, #8
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d6a8:	d111      	bne.n	800d6ce <SPI_EndRxTransaction+0x3a>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6b2:	d004      	beq.n	800d6be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6bc:	d107      	bne.n	800d6ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d6cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d6d6:	d12a      	bne.n	800d72e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6e0:	d012      	beq.n	800d708 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	9300      	str	r3, [sp, #0]
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	2180      	movs	r1, #128	@ 0x80
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f7ff ff49 	bl	800d584 <SPI_WaitFlagStateUntilTimeout>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d02d      	beq.n	800d754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6fc:	f043 0220 	orr.w	r2, r3, #32
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800d704:	2303      	movs	r3, #3
 800d706:	e026      	b.n	800d756 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2200      	movs	r2, #0
 800d710:	2101      	movs	r1, #1
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f7ff ff36 	bl	800d584 <SPI_WaitFlagStateUntilTimeout>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d01a      	beq.n	800d754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d722:	f043 0220 	orr.w	r2, r3, #32
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800d72a:	2303      	movs	r3, #3
 800d72c:	e013      	b.n	800d756 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2200      	movs	r2, #0
 800d736:	2101      	movs	r1, #1
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f7ff ff23 	bl	800d584 <SPI_WaitFlagStateUntilTimeout>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d007      	beq.n	800d754 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d748:	f043 0220 	orr.w	r2, r3, #32
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800d750:	2303      	movs	r3, #3
 800d752:	e000      	b.n	800d756 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
	...

0800d760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b088      	sub	sp, #32
 800d764:	af02      	add	r7, sp, #8
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	2201      	movs	r2, #1
 800d774:	2102      	movs	r1, #2
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f7ff ff04 	bl	800d584 <SPI_WaitFlagStateUntilTimeout>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d007      	beq.n	800d792 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d786:	f043 0220 	orr.w	r2, r3, #32
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800d78e:	2303      	movs	r3, #3
 800d790:	e032      	b.n	800d7f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d792:	4b1b      	ldr	r3, [pc, #108]	@ (800d800 <SPI_EndRxTxTransaction+0xa0>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a1b      	ldr	r2, [pc, #108]	@ (800d804 <SPI_EndRxTxTransaction+0xa4>)
 800d798:	fba2 2303 	umull	r2, r3, r2, r3
 800d79c:	0d5b      	lsrs	r3, r3, #21
 800d79e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d7a2:	fb02 f303 	mul.w	r3, r2, r3
 800d7a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d7b0:	d112      	bne.n	800d7d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2180      	movs	r1, #128	@ 0x80
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f7ff fee1 	bl	800d584 <SPI_WaitFlagStateUntilTimeout>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d016      	beq.n	800d7f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7cc:	f043 0220 	orr.w	r2, r3, #32
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	e00f      	b.n	800d7f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00a      	beq.n	800d7f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7ee:	2b80      	cmp	r3, #128	@ 0x80
 800d7f0:	d0f2      	beq.n	800d7d8 <SPI_EndRxTxTransaction+0x78>
 800d7f2:	e000      	b.n	800d7f6 <SPI_EndRxTxTransaction+0x96>
        break;
 800d7f4:	bf00      	nop
  }

  return HAL_OK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3718      	adds	r7, #24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	20000014 	.word	0x20000014
 800d804:	165e9f81 	.word	0x165e9f81

0800d808 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800d810:	4b35      	ldr	r3, [pc, #212]	@ (800d8e8 <SPI_CloseRxTx_ISR+0xe0>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a35      	ldr	r2, [pc, #212]	@ (800d8ec <SPI_CloseRxTx_ISR+0xe4>)
 800d816:	fba2 2303 	umull	r2, r3, r2, r3
 800d81a:	0a5b      	lsrs	r3, r3, #9
 800d81c:	2264      	movs	r2, #100	@ 0x64
 800d81e:	fb02 f303 	mul.w	r3, r2, r3
 800d822:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d824:	f7fe f820 	bl	800b868 <HAL_GetTick>
 800d828:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	685a      	ldr	r2, [r3, #4]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f022 0220 	bic.w	r2, r2, #32
 800d838:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d106      	bne.n	800d84e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d844:	f043 0220 	orr.w	r2, r3, #32
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d84c:	e009      	b.n	800d862 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	3b01      	subs	r3, #1
 800d852:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	f003 0302 	and.w	r3, r3, #2
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d0eb      	beq.n	800d83a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d862:	697a      	ldr	r2, [r7, #20]
 800d864:	2164      	movs	r1, #100	@ 0x64
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7ff ff7a 	bl	800d760 <SPI_EndRxTxTransaction>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d005      	beq.n	800d87e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d876:	f043 0220 	orr.w	r2, r3, #32
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10a      	bne.n	800d89c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d886:	2300      	movs	r3, #0
 800d888:	60fb      	str	r3, [r7, #12]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	60fb      	str	r3, [r7, #12]
 800d89a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d115      	bne.n	800d8d0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b04      	cmp	r3, #4
 800d8ae:	d107      	bne.n	800d8c0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7fd fef5 	bl	800b6a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800d8be:	e00e      	b.n	800d8de <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7ff fd29 	bl	800d320 <HAL_SPI_TxRxCpltCallback>
}
 800d8ce:	e006      	b.n	800d8de <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f7ff fd2b 	bl	800d334 <HAL_SPI_ErrorCallback>
}
 800d8de:	bf00      	nop
 800d8e0:	3718      	adds	r7, #24
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20000014 	.word	0x20000014
 800d8ec:	057619f1 	.word	0x057619f1

0800d8f0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800d906:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800d908:	f7fd ffae 	bl	800b868 <HAL_GetTick>
 800d90c:	4603      	mov	r3, r0
 800d90e:	461a      	mov	r2, r3
 800d910:	2164      	movs	r1, #100	@ 0x64
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7ff febe 	bl	800d694 <SPI_EndRxTransaction>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d005      	beq.n	800d92a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d922:	f043 0220 	orr.w	r2, r3, #32
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10a      	bne.n	800d948 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d932:	2300      	movs	r3, #0
 800d934:	60fb      	str	r3, [r7, #12]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	60fb      	str	r3, [r7, #12]
 800d946:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d954:	2b00      	cmp	r3, #0
 800d956:	d103      	bne.n	800d960 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7fd fea5 	bl	800b6a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800d95e:	e002      	b.n	800d966 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7ff fce7 	bl	800d334 <HAL_SPI_ErrorCallback>
}
 800d966:	bf00      	nop
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b082      	sub	sp, #8
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d101      	bne.n	800d980 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d97c:	2301      	movs	r3, #1
 800d97e:	e041      	b.n	800da04 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d986:	b2db      	uxtb	r3, r3
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 f839 	bl	800da0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2202      	movs	r2, #2
 800d99e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	f000 f9bf 	bl	800dd30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800da02:	2300      	movs	r3, #0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800da14:	bf00      	nop
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b01      	cmp	r3, #1
 800da32:	d001      	beq.n	800da38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800da34:	2301      	movs	r3, #1
 800da36:	e04e      	b.n	800dad6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2202      	movs	r2, #2
 800da3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	68da      	ldr	r2, [r3, #12]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f042 0201 	orr.w	r2, r2, #1
 800da4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a23      	ldr	r2, [pc, #140]	@ (800dae4 <HAL_TIM_Base_Start_IT+0xc4>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d022      	beq.n	800daa0 <HAL_TIM_Base_Start_IT+0x80>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da62:	d01d      	beq.n	800daa0 <HAL_TIM_Base_Start_IT+0x80>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a1f      	ldr	r2, [pc, #124]	@ (800dae8 <HAL_TIM_Base_Start_IT+0xc8>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d018      	beq.n	800daa0 <HAL_TIM_Base_Start_IT+0x80>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4a1e      	ldr	r2, [pc, #120]	@ (800daec <HAL_TIM_Base_Start_IT+0xcc>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d013      	beq.n	800daa0 <HAL_TIM_Base_Start_IT+0x80>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a1c      	ldr	r2, [pc, #112]	@ (800daf0 <HAL_TIM_Base_Start_IT+0xd0>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d00e      	beq.n	800daa0 <HAL_TIM_Base_Start_IT+0x80>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a1b      	ldr	r2, [pc, #108]	@ (800daf4 <HAL_TIM_Base_Start_IT+0xd4>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d009      	beq.n	800daa0 <HAL_TIM_Base_Start_IT+0x80>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a19      	ldr	r2, [pc, #100]	@ (800daf8 <HAL_TIM_Base_Start_IT+0xd8>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d004      	beq.n	800daa0 <HAL_TIM_Base_Start_IT+0x80>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a18      	ldr	r2, [pc, #96]	@ (800dafc <HAL_TIM_Base_Start_IT+0xdc>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d111      	bne.n	800dac4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	f003 0307 	and.w	r3, r3, #7
 800daaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2b06      	cmp	r3, #6
 800dab0:	d010      	beq.n	800dad4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f042 0201 	orr.w	r2, r2, #1
 800dac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dac2:	e007      	b.n	800dad4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f042 0201 	orr.w	r2, r2, #1
 800dad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3714      	adds	r7, #20
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	40010000 	.word	0x40010000
 800dae8:	40000400 	.word	0x40000400
 800daec:	40000800 	.word	0x40000800
 800daf0:	40000c00 	.word	0x40000c00
 800daf4:	40010400 	.word	0x40010400
 800daf8:	40014000 	.word	0x40014000
 800dafc:	40001800 	.word	0x40001800

0800db00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	f003 0302 	and.w	r3, r3, #2
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d020      	beq.n	800db64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f003 0302 	and.w	r3, r3, #2
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d01b      	beq.n	800db64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f06f 0202 	mvn.w	r2, #2
 800db34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	f003 0303 	and.w	r3, r3, #3
 800db46:	2b00      	cmp	r3, #0
 800db48:	d003      	beq.n	800db52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 f8d2 	bl	800dcf4 <HAL_TIM_IC_CaptureCallback>
 800db50:	e005      	b.n	800db5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f8c4 	bl	800dce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 f8d5 	bl	800dd08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	f003 0304 	and.w	r3, r3, #4
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d020      	beq.n	800dbb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f003 0304 	and.w	r3, r3, #4
 800db74:	2b00      	cmp	r3, #0
 800db76:	d01b      	beq.n	800dbb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f06f 0204 	mvn.w	r2, #4
 800db80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2202      	movs	r2, #2
 800db86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 f8ac 	bl	800dcf4 <HAL_TIM_IC_CaptureCallback>
 800db9c:	e005      	b.n	800dbaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f89e 	bl	800dce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 f8af 	bl	800dd08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	f003 0308 	and.w	r3, r3, #8
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d020      	beq.n	800dbfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f003 0308 	and.w	r3, r3, #8
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d01b      	beq.n	800dbfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f06f 0208 	mvn.w	r2, #8
 800dbcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2204      	movs	r2, #4
 800dbd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	f003 0303 	and.w	r3, r3, #3
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d003      	beq.n	800dbea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 f886 	bl	800dcf4 <HAL_TIM_IC_CaptureCallback>
 800dbe8:	e005      	b.n	800dbf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 f878 	bl	800dce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f889 	bl	800dd08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f003 0310 	and.w	r3, r3, #16
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d020      	beq.n	800dc48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f003 0310 	and.w	r3, r3, #16
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d01b      	beq.n	800dc48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f06f 0210 	mvn.w	r2, #16
 800dc18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2208      	movs	r2, #8
 800dc1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	69db      	ldr	r3, [r3, #28]
 800dc26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d003      	beq.n	800dc36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f860 	bl	800dcf4 <HAL_TIM_IC_CaptureCallback>
 800dc34:	e005      	b.n	800dc42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 f852 	bl	800dce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 f863 	bl	800dd08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00c      	beq.n	800dc6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f003 0301 	and.w	r3, r3, #1
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d007      	beq.n	800dc6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f06f 0201 	mvn.w	r2, #1
 800dc64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7fc ffa2 	bl	800abb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00c      	beq.n	800dc90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d007      	beq.n	800dc90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800dc88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f900 	bl	800de90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00c      	beq.n	800dcb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d007      	beq.n	800dcb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dcac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f834 	bl	800dd1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	f003 0320 	and.w	r3, r3, #32
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00c      	beq.n	800dcd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f003 0320 	and.w	r3, r3, #32
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d007      	beq.n	800dcd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f06f 0220 	mvn.w	r2, #32
 800dcd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f8d2 	bl	800de7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcd8:	bf00      	nop
 800dcda:	3710      	adds	r7, #16
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dcfc:	bf00      	nop
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4a43      	ldr	r2, [pc, #268]	@ (800de50 <TIM_Base_SetConfig+0x120>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d013      	beq.n	800dd70 <TIM_Base_SetConfig+0x40>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd4e:	d00f      	beq.n	800dd70 <TIM_Base_SetConfig+0x40>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a40      	ldr	r2, [pc, #256]	@ (800de54 <TIM_Base_SetConfig+0x124>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d00b      	beq.n	800dd70 <TIM_Base_SetConfig+0x40>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a3f      	ldr	r2, [pc, #252]	@ (800de58 <TIM_Base_SetConfig+0x128>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d007      	beq.n	800dd70 <TIM_Base_SetConfig+0x40>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a3e      	ldr	r2, [pc, #248]	@ (800de5c <TIM_Base_SetConfig+0x12c>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d003      	beq.n	800dd70 <TIM_Base_SetConfig+0x40>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4a3d      	ldr	r2, [pc, #244]	@ (800de60 <TIM_Base_SetConfig+0x130>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d108      	bne.n	800dd82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4a32      	ldr	r2, [pc, #200]	@ (800de50 <TIM_Base_SetConfig+0x120>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d02b      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd90:	d027      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4a2f      	ldr	r2, [pc, #188]	@ (800de54 <TIM_Base_SetConfig+0x124>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d023      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4a2e      	ldr	r2, [pc, #184]	@ (800de58 <TIM_Base_SetConfig+0x128>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d01f      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4a2d      	ldr	r2, [pc, #180]	@ (800de5c <TIM_Base_SetConfig+0x12c>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d01b      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4a2c      	ldr	r2, [pc, #176]	@ (800de60 <TIM_Base_SetConfig+0x130>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d017      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4a2b      	ldr	r2, [pc, #172]	@ (800de64 <TIM_Base_SetConfig+0x134>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d013      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4a2a      	ldr	r2, [pc, #168]	@ (800de68 <TIM_Base_SetConfig+0x138>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d00f      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a29      	ldr	r2, [pc, #164]	@ (800de6c <TIM_Base_SetConfig+0x13c>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d00b      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a28      	ldr	r2, [pc, #160]	@ (800de70 <TIM_Base_SetConfig+0x140>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d007      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4a27      	ldr	r2, [pc, #156]	@ (800de74 <TIM_Base_SetConfig+0x144>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d003      	beq.n	800dde2 <TIM_Base_SetConfig+0xb2>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4a26      	ldr	r2, [pc, #152]	@ (800de78 <TIM_Base_SetConfig+0x148>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d108      	bne.n	800ddf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dde8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	4313      	orrs	r3, r2
 800de00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	689a      	ldr	r2, [r3, #8]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a0e      	ldr	r2, [pc, #56]	@ (800de50 <TIM_Base_SetConfig+0x120>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d003      	beq.n	800de22 <TIM_Base_SetConfig+0xf2>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a10      	ldr	r2, [pc, #64]	@ (800de60 <TIM_Base_SetConfig+0x130>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d103      	bne.n	800de2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	691a      	ldr	r2, [r3, #16]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f043 0204 	orr.w	r2, r3, #4
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2201      	movs	r2, #1
 800de3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	601a      	str	r2, [r3, #0]
}
 800de42:	bf00      	nop
 800de44:	3714      	adds	r7, #20
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	40010000 	.word	0x40010000
 800de54:	40000400 	.word	0x40000400
 800de58:	40000800 	.word	0x40000800
 800de5c:	40000c00 	.word	0x40000c00
 800de60:	40010400 	.word	0x40010400
 800de64:	40014000 	.word	0x40014000
 800de68:	40014400 	.word	0x40014400
 800de6c:	40014800 	.word	0x40014800
 800de70:	40001800 	.word	0x40001800
 800de74:	40001c00 	.word	0x40001c00
 800de78:	40002000 	.word	0x40002000

0800de7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de84:	bf00      	nop
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de98:	bf00      	nop
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	e042      	b.n	800df3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800debc:	b2db      	uxtb	r3, r3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7fc ff56 	bl	800ad7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2224      	movs	r2, #36	@ 0x24
 800ded4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68da      	ldr	r2, [r3, #12]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fdd3 	bl	800ea94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	691a      	ldr	r2, [r3, #16]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800defc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	695a      	ldr	r2, [r3, #20]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800df0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68da      	ldr	r2, [r3, #12]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800df1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2220      	movs	r2, #32
 800df28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2220      	movs	r2, #32
 800df30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2200      	movs	r2, #0
 800df38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800df3a:	2300      	movs	r3, #0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b08a      	sub	sp, #40	@ 0x28
 800df48:	af02      	add	r7, sp, #8
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	603b      	str	r3, [r7, #0]
 800df50:	4613      	mov	r3, r2
 800df52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800df54:	2300      	movs	r3, #0
 800df56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	2b20      	cmp	r3, #32
 800df62:	d175      	bne.n	800e050 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d002      	beq.n	800df70 <HAL_UART_Transmit+0x2c>
 800df6a:	88fb      	ldrh	r3, [r7, #6]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d101      	bne.n	800df74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	e06e      	b.n	800e052 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2200      	movs	r2, #0
 800df78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2221      	movs	r2, #33	@ 0x21
 800df7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800df82:	f7fd fc71 	bl	800b868 <HAL_GetTick>
 800df86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	88fa      	ldrh	r2, [r7, #6]
 800df8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	88fa      	ldrh	r2, [r7, #6]
 800df92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df9c:	d108      	bne.n	800dfb0 <HAL_UART_Transmit+0x6c>
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	691b      	ldr	r3, [r3, #16]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d104      	bne.n	800dfb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	61bb      	str	r3, [r7, #24]
 800dfae:	e003      	b.n	800dfb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dfb8:	e02e      	b.n	800e018 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	2180      	movs	r1, #128	@ 0x80
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 fb37 	bl	800e638 <UART_WaitOnFlagUntilTimeout>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d005      	beq.n	800dfdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2220      	movs	r2, #32
 800dfd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800dfd8:	2303      	movs	r3, #3
 800dfda:	e03a      	b.n	800e052 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10b      	bne.n	800dffa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800dff2:	69bb      	ldr	r3, [r7, #24]
 800dff4:	3302      	adds	r3, #2
 800dff6:	61bb      	str	r3, [r7, #24]
 800dff8:	e007      	b.n	800e00a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	781a      	ldrb	r2, [r3, #0]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	3301      	adds	r3, #1
 800e008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e00e:	b29b      	uxth	r3, r3
 800e010:	3b01      	subs	r3, #1
 800e012:	b29a      	uxth	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1cb      	bne.n	800dfba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2200      	movs	r2, #0
 800e02a:	2140      	movs	r1, #64	@ 0x40
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f000 fb03 	bl	800e638 <UART_WaitOnFlagUntilTimeout>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d005      	beq.n	800e044 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2220      	movs	r2, #32
 800e03c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800e040:	2303      	movs	r3, #3
 800e042:	e006      	b.n	800e052 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2220      	movs	r2, #32
 800e048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800e04c:	2300      	movs	r3, #0
 800e04e:	e000      	b.n	800e052 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800e050:	2302      	movs	r3, #2
  }
}
 800e052:	4618      	mov	r0, r3
 800e054:	3720      	adds	r7, #32
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b084      	sub	sp, #16
 800e05e:	af00      	add	r7, sp, #0
 800e060:	60f8      	str	r0, [r7, #12]
 800e062:	60b9      	str	r1, [r7, #8]
 800e064:	4613      	mov	r3, r2
 800e066:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	2b20      	cmp	r3, #32
 800e072:	d112      	bne.n	800e09a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <HAL_UART_Receive_IT+0x26>
 800e07a:	88fb      	ldrh	r3, [r7, #6]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	e00b      	b.n	800e09c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e08a:	88fb      	ldrh	r3, [r7, #6]
 800e08c:	461a      	mov	r2, r3
 800e08e:	68b9      	ldr	r1, [r7, #8]
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f000 fb2a 	bl	800e6ea <UART_Start_Receive_IT>
 800e096:	4603      	mov	r3, r0
 800e098:	e000      	b.n	800e09c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800e09a:	2302      	movs	r3, #2
  }
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3710      	adds	r7, #16
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b0ba      	sub	sp, #232	@ 0xe8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0da:	f003 030f 	and.w	r3, r3, #15
 800e0de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800e0e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10f      	bne.n	800e10a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0ee:	f003 0320 	and.w	r3, r3, #32
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d009      	beq.n	800e10a <HAL_UART_IRQHandler+0x66>
 800e0f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0fa:	f003 0320 	and.w	r3, r3, #32
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d003      	beq.n	800e10a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 fc07 	bl	800e916 <UART_Receive_IT>
      return;
 800e108:	e273      	b.n	800e5f2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e10a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f000 80de 	beq.w	800e2d0 <HAL_UART_IRQHandler+0x22c>
 800e114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d106      	bne.n	800e12e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e124:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f000 80d1 	beq.w	800e2d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00b      	beq.n	800e152 <HAL_UART_IRQHandler+0xae>
 800e13a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e13e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e142:	2b00      	cmp	r3, #0
 800e144:	d005      	beq.n	800e152 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e14a:	f043 0201 	orr.w	r2, r3, #1
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e156:	f003 0304 	and.w	r3, r3, #4
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00b      	beq.n	800e176 <HAL_UART_IRQHandler+0xd2>
 800e15e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e162:	f003 0301 	and.w	r3, r3, #1
 800e166:	2b00      	cmp	r3, #0
 800e168:	d005      	beq.n	800e176 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e16e:	f043 0202 	orr.w	r2, r3, #2
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e17a:	f003 0302 	and.w	r3, r3, #2
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00b      	beq.n	800e19a <HAL_UART_IRQHandler+0xf6>
 800e182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d005      	beq.n	800e19a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e192:	f043 0204 	orr.w	r2, r3, #4
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e19e:	f003 0308 	and.w	r3, r3, #8
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d011      	beq.n	800e1ca <HAL_UART_IRQHandler+0x126>
 800e1a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1aa:	f003 0320 	and.w	r3, r3, #32
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d105      	bne.n	800e1be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e1b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e1b6:	f003 0301 	and.w	r3, r3, #1
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d005      	beq.n	800e1ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1c2:	f043 0208 	orr.w	r2, r3, #8
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f000 820a 	beq.w	800e5e8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1d8:	f003 0320 	and.w	r3, r3, #32
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d008      	beq.n	800e1f2 <HAL_UART_IRQHandler+0x14e>
 800e1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1e4:	f003 0320 	and.w	r3, r3, #32
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fb92 	bl	800e916 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1fc:	2b40      	cmp	r3, #64	@ 0x40
 800e1fe:	bf0c      	ite	eq
 800e200:	2301      	moveq	r3, #1
 800e202:	2300      	movne	r3, #0
 800e204:	b2db      	uxtb	r3, r3
 800e206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e20e:	f003 0308 	and.w	r3, r3, #8
 800e212:	2b00      	cmp	r3, #0
 800e214:	d103      	bne.n	800e21e <HAL_UART_IRQHandler+0x17a>
 800e216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d04f      	beq.n	800e2be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 fa9d 	bl	800e75e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e22e:	2b40      	cmp	r3, #64	@ 0x40
 800e230:	d141      	bne.n	800e2b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3314      	adds	r3, #20
 800e238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e240:	e853 3f00 	ldrex	r3, [r3]
 800e244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e248:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e24c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e250:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3314      	adds	r3, #20
 800e25a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e25e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e262:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e266:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e26a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e26e:	e841 2300 	strex	r3, r2, [r1]
 800e272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1d9      	bne.n	800e232 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e282:	2b00      	cmp	r3, #0
 800e284:	d013      	beq.n	800e2ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e28a:	4a8a      	ldr	r2, [pc, #552]	@ (800e4b4 <HAL_UART_IRQHandler+0x410>)
 800e28c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e292:	4618      	mov	r0, r3
 800e294:	f7fd fc6a 	bl	800bb6c <HAL_DMA_Abort_IT>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d016      	beq.n	800e2cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2ac:	e00e      	b.n	800e2cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 f9ac 	bl	800e60c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2b4:	e00a      	b.n	800e2cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f000 f9a8 	bl	800e60c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2bc:	e006      	b.n	800e2cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 f9a4 	bl	800e60c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800e2ca:	e18d      	b.n	800e5e8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2cc:	bf00      	nop
    return;
 800e2ce:	e18b      	b.n	800e5e8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	f040 8167 	bne.w	800e5a8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2de:	f003 0310 	and.w	r3, r3, #16
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f000 8160 	beq.w	800e5a8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800e2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2ec:	f003 0310 	and.w	r3, r3, #16
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 8159 	beq.w	800e5a8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	60bb      	str	r3, [r7, #8]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	60bb      	str	r3, [r7, #8]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	60bb      	str	r3, [r7, #8]
 800e30a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	695b      	ldr	r3, [r3, #20]
 800e312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e316:	2b40      	cmp	r3, #64	@ 0x40
 800e318:	f040 80ce 	bne.w	800e4b8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e328:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f000 80a9 	beq.w	800e484 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e33a:	429a      	cmp	r2, r3
 800e33c:	f080 80a2 	bcs.w	800e484 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e346:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e34c:	69db      	ldr	r3, [r3, #28]
 800e34e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e352:	f000 8088 	beq.w	800e466 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	330c      	adds	r3, #12
 800e35c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e360:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e364:	e853 3f00 	ldrex	r3, [r3]
 800e368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e36c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	330c      	adds	r3, #12
 800e37e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e382:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e38a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e38e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e392:	e841 2300 	strex	r3, r2, [r1]
 800e396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e39a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1d9      	bne.n	800e356 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	3314      	adds	r3, #20
 800e3a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e3ac:	e853 3f00 	ldrex	r3, [r3]
 800e3b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e3b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e3b4:	f023 0301 	bic.w	r3, r3, #1
 800e3b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	3314      	adds	r3, #20
 800e3c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e3c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e3ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e3ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e3d2:	e841 2300 	strex	r3, r2, [r1]
 800e3d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e3d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1e1      	bne.n	800e3a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3314      	adds	r3, #20
 800e3e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e3e8:	e853 3f00 	ldrex	r3, [r3]
 800e3ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e3ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	3314      	adds	r3, #20
 800e3fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e402:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e404:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e406:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e408:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e40a:	e841 2300 	strex	r3, r2, [r1]
 800e40e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e410:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e412:	2b00      	cmp	r3, #0
 800e414:	d1e3      	bne.n	800e3de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2220      	movs	r2, #32
 800e41a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	330c      	adds	r3, #12
 800e42a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e42e:	e853 3f00 	ldrex	r3, [r3]
 800e432:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e436:	f023 0310 	bic.w	r3, r3, #16
 800e43a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	330c      	adds	r3, #12
 800e444:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e448:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e44a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e44e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e450:	e841 2300 	strex	r3, r2, [r1]
 800e454:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1e3      	bne.n	800e424 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e460:	4618      	mov	r0, r3
 800e462:	f7fd fb13 	bl	800ba8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2202      	movs	r2, #2
 800e46a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e474:	b29b      	uxth	r3, r3
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	b29b      	uxth	r3, r3
 800e47a:	4619      	mov	r1, r3
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 f8cf 	bl	800e620 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e482:	e0b3      	b.n	800e5ec <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e488:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e48c:	429a      	cmp	r2, r3
 800e48e:	f040 80ad 	bne.w	800e5ec <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e496:	69db      	ldr	r3, [r3, #28]
 800e498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e49c:	f040 80a6 	bne.w	800e5ec <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f8b7 	bl	800e620 <HAL_UARTEx_RxEventCallback>
      return;
 800e4b2:	e09b      	b.n	800e5ec <HAL_UART_IRQHandler+0x548>
 800e4b4:	0800e825 	.word	0x0800e825
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f000 808e 	beq.w	800e5f0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800e4d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 8089 	beq.w	800e5f0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	330c      	adds	r3, #12
 800e4e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e8:	e853 3f00 	ldrex	r3, [r3]
 800e4ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e4f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	330c      	adds	r3, #12
 800e4fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800e502:	647a      	str	r2, [r7, #68]	@ 0x44
 800e504:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e506:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e508:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e50a:	e841 2300 	strex	r3, r2, [r1]
 800e50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e512:	2b00      	cmp	r3, #0
 800e514:	d1e3      	bne.n	800e4de <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	3314      	adds	r3, #20
 800e51c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e520:	e853 3f00 	ldrex	r3, [r3]
 800e524:	623b      	str	r3, [r7, #32]
   return(result);
 800e526:	6a3b      	ldr	r3, [r7, #32]
 800e528:	f023 0301 	bic.w	r3, r3, #1
 800e52c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	3314      	adds	r3, #20
 800e536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e53a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e53e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e542:	e841 2300 	strex	r3, r2, [r1]
 800e546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1e3      	bne.n	800e516 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2220      	movs	r2, #32
 800e552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	330c      	adds	r3, #12
 800e562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	e853 3f00 	ldrex	r3, [r3]
 800e56a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f023 0310 	bic.w	r3, r3, #16
 800e572:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	330c      	adds	r3, #12
 800e57c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e580:	61fa      	str	r2, [r7, #28]
 800e582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e584:	69b9      	ldr	r1, [r7, #24]
 800e586:	69fa      	ldr	r2, [r7, #28]
 800e588:	e841 2300 	strex	r3, r2, [r1]
 800e58c:	617b      	str	r3, [r7, #20]
   return(result);
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d1e3      	bne.n	800e55c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2202      	movs	r2, #2
 800e598:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e59a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f83d 	bl	800e620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e5a6:	e023      	b.n	800e5f0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d009      	beq.n	800e5c8 <HAL_UART_IRQHandler+0x524>
 800e5b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d003      	beq.n	800e5c8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 f940 	bl	800e846 <UART_Transmit_IT>
    return;
 800e5c6:	e014      	b.n	800e5f2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00e      	beq.n	800e5f2 <HAL_UART_IRQHandler+0x54e>
 800e5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d008      	beq.n	800e5f2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f980 	bl	800e8e6 <UART_EndTransmit_IT>
    return;
 800e5e6:	e004      	b.n	800e5f2 <HAL_UART_IRQHandler+0x54e>
    return;
 800e5e8:	bf00      	nop
 800e5ea:	e002      	b.n	800e5f2 <HAL_UART_IRQHandler+0x54e>
      return;
 800e5ec:	bf00      	nop
 800e5ee:	e000      	b.n	800e5f2 <HAL_UART_IRQHandler+0x54e>
      return;
 800e5f0:	bf00      	nop
  }
}
 800e5f2:	37e8      	adds	r7, #232	@ 0xe8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e614:	bf00      	nop
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	460b      	mov	r3, r1
 800e62a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e62c:	bf00      	nop
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	603b      	str	r3, [r7, #0]
 800e644:	4613      	mov	r3, r2
 800e646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e648:	e03b      	b.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e64a:	6a3b      	ldr	r3, [r7, #32]
 800e64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e650:	d037      	beq.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e652:	f7fd f909 	bl	800b868 <HAL_GetTick>
 800e656:	4602      	mov	r2, r0
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	1ad3      	subs	r3, r2, r3
 800e65c:	6a3a      	ldr	r2, [r7, #32]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d302      	bcc.n	800e668 <UART_WaitOnFlagUntilTimeout+0x30>
 800e662:	6a3b      	ldr	r3, [r7, #32]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d101      	bne.n	800e66c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e668:	2303      	movs	r3, #3
 800e66a:	e03a      	b.n	800e6e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	f003 0304 	and.w	r3, r3, #4
 800e676:	2b00      	cmp	r3, #0
 800e678:	d023      	beq.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	2b80      	cmp	r3, #128	@ 0x80
 800e67e:	d020      	beq.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	2b40      	cmp	r3, #64	@ 0x40
 800e684:	d01d      	beq.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f003 0308 	and.w	r3, r3, #8
 800e690:	2b08      	cmp	r3, #8
 800e692:	d116      	bne.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e694:	2300      	movs	r3, #0
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	617b      	str	r3, [r7, #20]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	617b      	str	r3, [r7, #20]
 800e6a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f000 f857 	bl	800e75e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2208      	movs	r2, #8
 800e6b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e00f      	b.n	800e6e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	4013      	ands	r3, r2
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	bf0c      	ite	eq
 800e6d2:	2301      	moveq	r3, #1
 800e6d4:	2300      	movne	r3, #0
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	461a      	mov	r2, r3
 800e6da:	79fb      	ldrb	r3, [r7, #7]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d0b4      	beq.n	800e64a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3718      	adds	r7, #24
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b085      	sub	sp, #20
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	88fa      	ldrh	r2, [r7, #6]
 800e702:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	88fa      	ldrh	r2, [r7, #6]
 800e708:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2222      	movs	r2, #34	@ 0x22
 800e714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d007      	beq.n	800e730 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	68da      	ldr	r2, [r3, #12]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e72e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	695a      	ldr	r2, [r3, #20]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f042 0201 	orr.w	r2, r2, #1
 800e73e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	68da      	ldr	r2, [r3, #12]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f042 0220 	orr.w	r2, r2, #32
 800e74e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3714      	adds	r7, #20
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e75e:	b480      	push	{r7}
 800e760:	b095      	sub	sp, #84	@ 0x54
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	330c      	adds	r3, #12
 800e76c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e770:	e853 3f00 	ldrex	r3, [r3]
 800e774:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e77c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	330c      	adds	r3, #12
 800e784:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e786:	643a      	str	r2, [r7, #64]	@ 0x40
 800e788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e78a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e78c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e78e:	e841 2300 	strex	r3, r2, [r1]
 800e792:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1e5      	bne.n	800e766 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	3314      	adds	r3, #20
 800e7a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	e853 3f00 	ldrex	r3, [r3]
 800e7a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	f023 0301 	bic.w	r3, r3, #1
 800e7b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3314      	adds	r3, #20
 800e7b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e7ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7c2:	e841 2300 	strex	r3, r2, [r1]
 800e7c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d1e5      	bne.n	800e79a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d119      	bne.n	800e80a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	330c      	adds	r3, #12
 800e7dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	e853 3f00 	ldrex	r3, [r3]
 800e7e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	f023 0310 	bic.w	r3, r3, #16
 800e7ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	330c      	adds	r3, #12
 800e7f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7f6:	61ba      	str	r2, [r7, #24]
 800e7f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fa:	6979      	ldr	r1, [r7, #20]
 800e7fc:	69ba      	ldr	r2, [r7, #24]
 800e7fe:	e841 2300 	strex	r3, r2, [r1]
 800e802:	613b      	str	r3, [r7, #16]
   return(result);
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1e5      	bne.n	800e7d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2220      	movs	r2, #32
 800e80e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e818:	bf00      	nop
 800e81a:	3754      	adds	r7, #84	@ 0x54
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f7ff fee7 	bl	800e60c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e83e:	bf00      	nop
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e846:	b480      	push	{r7}
 800e848:	b085      	sub	sp, #20
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e854:	b2db      	uxtb	r3, r3
 800e856:	2b21      	cmp	r3, #33	@ 0x21
 800e858:	d13e      	bne.n	800e8d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e862:	d114      	bne.n	800e88e <UART_Transmit_IT+0x48>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	691b      	ldr	r3, [r3, #16]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d110      	bne.n	800e88e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a1b      	ldr	r3, [r3, #32]
 800e870:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	881b      	ldrh	r3, [r3, #0]
 800e876:	461a      	mov	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e880:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6a1b      	ldr	r3, [r3, #32]
 800e886:	1c9a      	adds	r2, r3, #2
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	621a      	str	r2, [r3, #32]
 800e88c:	e008      	b.n	800e8a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	1c59      	adds	r1, r3, #1
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	6211      	str	r1, [r2, #32]
 800e898:	781a      	ldrb	r2, [r3, #0]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	3b01      	subs	r3, #1
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10f      	bne.n	800e8d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	68da      	ldr	r2, [r3, #12]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e8c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68da      	ldr	r2, [r3, #12]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e8d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	e000      	b.n	800e8da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e8d8:	2302      	movs	r3, #2
  }
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3714      	adds	r7, #20
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr

0800e8e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b082      	sub	sp, #8
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	68da      	ldr	r2, [r3, #12]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e8fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2220      	movs	r2, #32
 800e902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7ff fe76 	bl	800e5f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b08c      	sub	sp, #48	@ 0x30
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800e91e:	2300      	movs	r3, #0
 800e920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800e922:	2300      	movs	r3, #0
 800e924:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	2b22      	cmp	r3, #34	@ 0x22
 800e930:	f040 80aa 	bne.w	800ea88 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e93c:	d115      	bne.n	800e96a <UART_Receive_IT+0x54>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d111      	bne.n	800e96a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e94a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	b29b      	uxth	r3, r3
 800e954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e958:	b29a      	uxth	r2, r3
 800e95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e95c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e962:	1c9a      	adds	r2, r3, #2
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	629a      	str	r2, [r3, #40]	@ 0x28
 800e968:	e024      	b.n	800e9b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e96e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e978:	d007      	beq.n	800e98a <UART_Receive_IT+0x74>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d10a      	bne.n	800e998 <UART_Receive_IT+0x82>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	691b      	ldr	r3, [r3, #16]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	b2da      	uxtb	r2, r3
 800e992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e994:	701a      	strb	r2, [r3, #0]
 800e996:	e008      	b.n	800e9aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9ae:	1c5a      	adds	r2, r3, #1
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d15d      	bne.n	800ea84 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68da      	ldr	r2, [r3, #12]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f022 0220 	bic.w	r2, r2, #32
 800e9d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68da      	ldr	r2, [r3, #12]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e9e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	695a      	ldr	r2, [r3, #20]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f022 0201 	bic.w	r2, r2, #1
 800e9f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2220      	movs	r2, #32
 800e9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d135      	bne.n	800ea7a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	330c      	adds	r3, #12
 800ea1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	e853 3f00 	ldrex	r3, [r3]
 800ea22:	613b      	str	r3, [r7, #16]
   return(result);
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	f023 0310 	bic.w	r3, r3, #16
 800ea2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	330c      	adds	r3, #12
 800ea32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea34:	623a      	str	r2, [r7, #32]
 800ea36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea38:	69f9      	ldr	r1, [r7, #28]
 800ea3a:	6a3a      	ldr	r2, [r7, #32]
 800ea3c:	e841 2300 	strex	r3, r2, [r1]
 800ea40:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d1e5      	bne.n	800ea14 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f003 0310 	and.w	r3, r3, #16
 800ea52:	2b10      	cmp	r3, #16
 800ea54:	d10a      	bne.n	800ea6c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ea56:	2300      	movs	r3, #0
 800ea58:	60fb      	str	r3, [r7, #12]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	60fb      	str	r3, [r7, #12]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	60fb      	str	r3, [r7, #12]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ea70:	4619      	mov	r1, r3
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7ff fdd4 	bl	800e620 <HAL_UARTEx_RxEventCallback>
 800ea78:	e002      	b.n	800ea80 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7fc fe5a 	bl	800b734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ea80:	2300      	movs	r3, #0
 800ea82:	e002      	b.n	800ea8a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ea84:	2300      	movs	r3, #0
 800ea86:	e000      	b.n	800ea8a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ea88:	2302      	movs	r3, #2
  }
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3730      	adds	r7, #48	@ 0x30
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
	...

0800ea94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ea94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ea98:	b0c0      	sub	sp, #256	@ 0x100
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eaa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800eaac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eab0:	68d9      	ldr	r1, [r3, #12]
 800eab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	ea40 0301 	orr.w	r3, r0, r1
 800eabc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eac2:	689a      	ldr	r2, [r3, #8]
 800eac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	431a      	orrs	r2, r3
 800eacc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ead0:	695b      	ldr	r3, [r3, #20]
 800ead2:	431a      	orrs	r2, r3
 800ead4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ead8:	69db      	ldr	r3, [r3, #28]
 800eada:	4313      	orrs	r3, r2
 800eadc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800eae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800eaec:	f021 010c 	bic.w	r1, r1, #12
 800eaf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eafa:	430b      	orrs	r3, r1
 800eafc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800eafe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800eb0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb0e:	6999      	ldr	r1, [r3, #24]
 800eb10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	ea40 0301 	orr.w	r3, r0, r1
 800eb1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800eb1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	4b8f      	ldr	r3, [pc, #572]	@ (800ed60 <UART_SetConfig+0x2cc>)
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d005      	beq.n	800eb34 <UART_SetConfig+0xa0>
 800eb28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	4b8d      	ldr	r3, [pc, #564]	@ (800ed64 <UART_SetConfig+0x2d0>)
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d104      	bne.n	800eb3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800eb34:	f7fd fb72 	bl	800c21c <HAL_RCC_GetPCLK2Freq>
 800eb38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800eb3c:	e003      	b.n	800eb46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eb3e:	f7fd fb59 	bl	800c1f4 <HAL_RCC_GetPCLK1Freq>
 800eb42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb4a:	69db      	ldr	r3, [r3, #28]
 800eb4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb50:	f040 810c 	bne.w	800ed6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eb54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800eb5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800eb62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800eb66:	4622      	mov	r2, r4
 800eb68:	462b      	mov	r3, r5
 800eb6a:	1891      	adds	r1, r2, r2
 800eb6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800eb6e:	415b      	adcs	r3, r3
 800eb70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eb72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800eb76:	4621      	mov	r1, r4
 800eb78:	eb12 0801 	adds.w	r8, r2, r1
 800eb7c:	4629      	mov	r1, r5
 800eb7e:	eb43 0901 	adc.w	r9, r3, r1
 800eb82:	f04f 0200 	mov.w	r2, #0
 800eb86:	f04f 0300 	mov.w	r3, #0
 800eb8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800eb8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eb92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800eb96:	4690      	mov	r8, r2
 800eb98:	4699      	mov	r9, r3
 800eb9a:	4623      	mov	r3, r4
 800eb9c:	eb18 0303 	adds.w	r3, r8, r3
 800eba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800eba4:	462b      	mov	r3, r5
 800eba6:	eb49 0303 	adc.w	r3, r9, r3
 800ebaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ebae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ebba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ebbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	18db      	adds	r3, r3, r3
 800ebc6:	653b      	str	r3, [r7, #80]	@ 0x50
 800ebc8:	4613      	mov	r3, r2
 800ebca:	eb42 0303 	adc.w	r3, r2, r3
 800ebce:	657b      	str	r3, [r7, #84]	@ 0x54
 800ebd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ebd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ebd8:	f7fa f816 	bl	8008c08 <__aeabi_uldivmod>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	460b      	mov	r3, r1
 800ebe0:	4b61      	ldr	r3, [pc, #388]	@ (800ed68 <UART_SetConfig+0x2d4>)
 800ebe2:	fba3 2302 	umull	r2, r3, r3, r2
 800ebe6:	095b      	lsrs	r3, r3, #5
 800ebe8:	011c      	lsls	r4, r3, #4
 800ebea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ebf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ebf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ebfc:	4642      	mov	r2, r8
 800ebfe:	464b      	mov	r3, r9
 800ec00:	1891      	adds	r1, r2, r2
 800ec02:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ec04:	415b      	adcs	r3, r3
 800ec06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ec08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ec0c:	4641      	mov	r1, r8
 800ec0e:	eb12 0a01 	adds.w	sl, r2, r1
 800ec12:	4649      	mov	r1, r9
 800ec14:	eb43 0b01 	adc.w	fp, r3, r1
 800ec18:	f04f 0200 	mov.w	r2, #0
 800ec1c:	f04f 0300 	mov.w	r3, #0
 800ec20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ec24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ec28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ec2c:	4692      	mov	sl, r2
 800ec2e:	469b      	mov	fp, r3
 800ec30:	4643      	mov	r3, r8
 800ec32:	eb1a 0303 	adds.w	r3, sl, r3
 800ec36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ec3a:	464b      	mov	r3, r9
 800ec3c:	eb4b 0303 	adc.w	r3, fp, r3
 800ec40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ec44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ec50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ec54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ec58:	460b      	mov	r3, r1
 800ec5a:	18db      	adds	r3, r3, r3
 800ec5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec5e:	4613      	mov	r3, r2
 800ec60:	eb42 0303 	adc.w	r3, r2, r3
 800ec64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ec6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ec6e:	f7f9 ffcb 	bl	8008c08 <__aeabi_uldivmod>
 800ec72:	4602      	mov	r2, r0
 800ec74:	460b      	mov	r3, r1
 800ec76:	4611      	mov	r1, r2
 800ec78:	4b3b      	ldr	r3, [pc, #236]	@ (800ed68 <UART_SetConfig+0x2d4>)
 800ec7a:	fba3 2301 	umull	r2, r3, r3, r1
 800ec7e:	095b      	lsrs	r3, r3, #5
 800ec80:	2264      	movs	r2, #100	@ 0x64
 800ec82:	fb02 f303 	mul.w	r3, r2, r3
 800ec86:	1acb      	subs	r3, r1, r3
 800ec88:	00db      	lsls	r3, r3, #3
 800ec8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ec8e:	4b36      	ldr	r3, [pc, #216]	@ (800ed68 <UART_SetConfig+0x2d4>)
 800ec90:	fba3 2302 	umull	r2, r3, r3, r2
 800ec94:	095b      	lsrs	r3, r3, #5
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ec9c:	441c      	add	r4, r3
 800ec9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eca2:	2200      	movs	r2, #0
 800eca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eca8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ecac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ecb0:	4642      	mov	r2, r8
 800ecb2:	464b      	mov	r3, r9
 800ecb4:	1891      	adds	r1, r2, r2
 800ecb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ecb8:	415b      	adcs	r3, r3
 800ecba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ecc0:	4641      	mov	r1, r8
 800ecc2:	1851      	adds	r1, r2, r1
 800ecc4:	6339      	str	r1, [r7, #48]	@ 0x30
 800ecc6:	4649      	mov	r1, r9
 800ecc8:	414b      	adcs	r3, r1
 800ecca:	637b      	str	r3, [r7, #52]	@ 0x34
 800eccc:	f04f 0200 	mov.w	r2, #0
 800ecd0:	f04f 0300 	mov.w	r3, #0
 800ecd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ecd8:	4659      	mov	r1, fp
 800ecda:	00cb      	lsls	r3, r1, #3
 800ecdc:	4651      	mov	r1, sl
 800ecde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ece2:	4651      	mov	r1, sl
 800ece4:	00ca      	lsls	r2, r1, #3
 800ece6:	4610      	mov	r0, r2
 800ece8:	4619      	mov	r1, r3
 800ecea:	4603      	mov	r3, r0
 800ecec:	4642      	mov	r2, r8
 800ecee:	189b      	adds	r3, r3, r2
 800ecf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ecf4:	464b      	mov	r3, r9
 800ecf6:	460a      	mov	r2, r1
 800ecf8:	eb42 0303 	adc.w	r3, r2, r3
 800ecfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ed00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ed0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ed10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ed14:	460b      	mov	r3, r1
 800ed16:	18db      	adds	r3, r3, r3
 800ed18:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	eb42 0303 	adc.w	r3, r2, r3
 800ed20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ed26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ed2a:	f7f9 ff6d 	bl	8008c08 <__aeabi_uldivmod>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	4b0d      	ldr	r3, [pc, #52]	@ (800ed68 <UART_SetConfig+0x2d4>)
 800ed34:	fba3 1302 	umull	r1, r3, r3, r2
 800ed38:	095b      	lsrs	r3, r3, #5
 800ed3a:	2164      	movs	r1, #100	@ 0x64
 800ed3c:	fb01 f303 	mul.w	r3, r1, r3
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	00db      	lsls	r3, r3, #3
 800ed44:	3332      	adds	r3, #50	@ 0x32
 800ed46:	4a08      	ldr	r2, [pc, #32]	@ (800ed68 <UART_SetConfig+0x2d4>)
 800ed48:	fba2 2303 	umull	r2, r3, r2, r3
 800ed4c:	095b      	lsrs	r3, r3, #5
 800ed4e:	f003 0207 	and.w	r2, r3, #7
 800ed52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4422      	add	r2, r4
 800ed5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ed5c:	e106      	b.n	800ef6c <UART_SetConfig+0x4d8>
 800ed5e:	bf00      	nop
 800ed60:	40011000 	.word	0x40011000
 800ed64:	40011400 	.word	0x40011400
 800ed68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ed6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ed70:	2200      	movs	r2, #0
 800ed72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ed7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ed7e:	4642      	mov	r2, r8
 800ed80:	464b      	mov	r3, r9
 800ed82:	1891      	adds	r1, r2, r2
 800ed84:	6239      	str	r1, [r7, #32]
 800ed86:	415b      	adcs	r3, r3
 800ed88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ed8e:	4641      	mov	r1, r8
 800ed90:	1854      	adds	r4, r2, r1
 800ed92:	4649      	mov	r1, r9
 800ed94:	eb43 0501 	adc.w	r5, r3, r1
 800ed98:	f04f 0200 	mov.w	r2, #0
 800ed9c:	f04f 0300 	mov.w	r3, #0
 800eda0:	00eb      	lsls	r3, r5, #3
 800eda2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800eda6:	00e2      	lsls	r2, r4, #3
 800eda8:	4614      	mov	r4, r2
 800edaa:	461d      	mov	r5, r3
 800edac:	4643      	mov	r3, r8
 800edae:	18e3      	adds	r3, r4, r3
 800edb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800edb4:	464b      	mov	r3, r9
 800edb6:	eb45 0303 	adc.w	r3, r5, r3
 800edba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800edbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800edca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800edce:	f04f 0200 	mov.w	r2, #0
 800edd2:	f04f 0300 	mov.w	r3, #0
 800edd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800edda:	4629      	mov	r1, r5
 800eddc:	008b      	lsls	r3, r1, #2
 800edde:	4621      	mov	r1, r4
 800ede0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ede4:	4621      	mov	r1, r4
 800ede6:	008a      	lsls	r2, r1, #2
 800ede8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800edec:	f7f9 ff0c 	bl	8008c08 <__aeabi_uldivmod>
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	4b60      	ldr	r3, [pc, #384]	@ (800ef78 <UART_SetConfig+0x4e4>)
 800edf6:	fba3 2302 	umull	r2, r3, r3, r2
 800edfa:	095b      	lsrs	r3, r3, #5
 800edfc:	011c      	lsls	r4, r3, #4
 800edfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ee02:	2200      	movs	r2, #0
 800ee04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ee08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ee0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ee10:	4642      	mov	r2, r8
 800ee12:	464b      	mov	r3, r9
 800ee14:	1891      	adds	r1, r2, r2
 800ee16:	61b9      	str	r1, [r7, #24]
 800ee18:	415b      	adcs	r3, r3
 800ee1a:	61fb      	str	r3, [r7, #28]
 800ee1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ee20:	4641      	mov	r1, r8
 800ee22:	1851      	adds	r1, r2, r1
 800ee24:	6139      	str	r1, [r7, #16]
 800ee26:	4649      	mov	r1, r9
 800ee28:	414b      	adcs	r3, r1
 800ee2a:	617b      	str	r3, [r7, #20]
 800ee2c:	f04f 0200 	mov.w	r2, #0
 800ee30:	f04f 0300 	mov.w	r3, #0
 800ee34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ee38:	4659      	mov	r1, fp
 800ee3a:	00cb      	lsls	r3, r1, #3
 800ee3c:	4651      	mov	r1, sl
 800ee3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ee42:	4651      	mov	r1, sl
 800ee44:	00ca      	lsls	r2, r1, #3
 800ee46:	4610      	mov	r0, r2
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	4642      	mov	r2, r8
 800ee4e:	189b      	adds	r3, r3, r2
 800ee50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ee54:	464b      	mov	r3, r9
 800ee56:	460a      	mov	r2, r1
 800ee58:	eb42 0303 	adc.w	r3, r2, r3
 800ee5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ee60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ee6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ee6c:	f04f 0200 	mov.w	r2, #0
 800ee70:	f04f 0300 	mov.w	r3, #0
 800ee74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ee78:	4649      	mov	r1, r9
 800ee7a:	008b      	lsls	r3, r1, #2
 800ee7c:	4641      	mov	r1, r8
 800ee7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ee82:	4641      	mov	r1, r8
 800ee84:	008a      	lsls	r2, r1, #2
 800ee86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ee8a:	f7f9 febd 	bl	8008c08 <__aeabi_uldivmod>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
 800ee92:	4611      	mov	r1, r2
 800ee94:	4b38      	ldr	r3, [pc, #224]	@ (800ef78 <UART_SetConfig+0x4e4>)
 800ee96:	fba3 2301 	umull	r2, r3, r3, r1
 800ee9a:	095b      	lsrs	r3, r3, #5
 800ee9c:	2264      	movs	r2, #100	@ 0x64
 800ee9e:	fb02 f303 	mul.w	r3, r2, r3
 800eea2:	1acb      	subs	r3, r1, r3
 800eea4:	011b      	lsls	r3, r3, #4
 800eea6:	3332      	adds	r3, #50	@ 0x32
 800eea8:	4a33      	ldr	r2, [pc, #204]	@ (800ef78 <UART_SetConfig+0x4e4>)
 800eeaa:	fba2 2303 	umull	r2, r3, r2, r3
 800eeae:	095b      	lsrs	r3, r3, #5
 800eeb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eeb4:	441c      	add	r4, r3
 800eeb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eeba:	2200      	movs	r2, #0
 800eebc:	673b      	str	r3, [r7, #112]	@ 0x70
 800eebe:	677a      	str	r2, [r7, #116]	@ 0x74
 800eec0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800eec4:	4642      	mov	r2, r8
 800eec6:	464b      	mov	r3, r9
 800eec8:	1891      	adds	r1, r2, r2
 800eeca:	60b9      	str	r1, [r7, #8]
 800eecc:	415b      	adcs	r3, r3
 800eece:	60fb      	str	r3, [r7, #12]
 800eed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eed4:	4641      	mov	r1, r8
 800eed6:	1851      	adds	r1, r2, r1
 800eed8:	6039      	str	r1, [r7, #0]
 800eeda:	4649      	mov	r1, r9
 800eedc:	414b      	adcs	r3, r1
 800eede:	607b      	str	r3, [r7, #4]
 800eee0:	f04f 0200 	mov.w	r2, #0
 800eee4:	f04f 0300 	mov.w	r3, #0
 800eee8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800eeec:	4659      	mov	r1, fp
 800eeee:	00cb      	lsls	r3, r1, #3
 800eef0:	4651      	mov	r1, sl
 800eef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800eef6:	4651      	mov	r1, sl
 800eef8:	00ca      	lsls	r2, r1, #3
 800eefa:	4610      	mov	r0, r2
 800eefc:	4619      	mov	r1, r3
 800eefe:	4603      	mov	r3, r0
 800ef00:	4642      	mov	r2, r8
 800ef02:	189b      	adds	r3, r3, r2
 800ef04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ef06:	464b      	mov	r3, r9
 800ef08:	460a      	mov	r2, r1
 800ef0a:	eb42 0303 	adc.w	r3, r2, r3
 800ef0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ef10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef1a:	667a      	str	r2, [r7, #100]	@ 0x64
 800ef1c:	f04f 0200 	mov.w	r2, #0
 800ef20:	f04f 0300 	mov.w	r3, #0
 800ef24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ef28:	4649      	mov	r1, r9
 800ef2a:	008b      	lsls	r3, r1, #2
 800ef2c:	4641      	mov	r1, r8
 800ef2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ef32:	4641      	mov	r1, r8
 800ef34:	008a      	lsls	r2, r1, #2
 800ef36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ef3a:	f7f9 fe65 	bl	8008c08 <__aeabi_uldivmod>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	460b      	mov	r3, r1
 800ef42:	4b0d      	ldr	r3, [pc, #52]	@ (800ef78 <UART_SetConfig+0x4e4>)
 800ef44:	fba3 1302 	umull	r1, r3, r3, r2
 800ef48:	095b      	lsrs	r3, r3, #5
 800ef4a:	2164      	movs	r1, #100	@ 0x64
 800ef4c:	fb01 f303 	mul.w	r3, r1, r3
 800ef50:	1ad3      	subs	r3, r2, r3
 800ef52:	011b      	lsls	r3, r3, #4
 800ef54:	3332      	adds	r3, #50	@ 0x32
 800ef56:	4a08      	ldr	r2, [pc, #32]	@ (800ef78 <UART_SetConfig+0x4e4>)
 800ef58:	fba2 2303 	umull	r2, r3, r2, r3
 800ef5c:	095b      	lsrs	r3, r3, #5
 800ef5e:	f003 020f 	and.w	r2, r3, #15
 800ef62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4422      	add	r2, r4
 800ef6a:	609a      	str	r2, [r3, #8]
}
 800ef6c:	bf00      	nop
 800ef6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ef72:	46bd      	mov	sp, r7
 800ef74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef78:	51eb851f 	.word	0x51eb851f

0800ef7c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f103 0208 	add.w	r2, r3, #8
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f04f 32ff 	mov.w	r2, #4294967295
 800ef94:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f103 0208 	add.w	r2, r3, #8
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f103 0208 	add.w	r2, r3, #8
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800efb0:	bf00      	nop
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800efca:	bf00      	nop
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr

0800efd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800efd6:	b480      	push	{r7}
 800efd8:	b085      	sub	sp, #20
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
 800efde:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	689a      	ldr	r2, [r3, #8]
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	689b      	ldr	r3, [r3, #8]
 800eff8:	683a      	ldr	r2, [r7, #0]
 800effa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	683a      	ldr	r2, [r7, #0]
 800f000:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	1c5a      	adds	r2, r3, #1
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	601a      	str	r2, [r3, #0]
}
 800f012:	bf00      	nop
 800f014:	3714      	adds	r7, #20
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr

0800f01e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800f01e:	b480      	push	{r7}
 800f020:	b085      	sub	sp, #20
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f034:	d103      	bne.n	800f03e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	691b      	ldr	r3, [r3, #16]
 800f03a:	60fb      	str	r3, [r7, #12]
 800f03c:	e00c      	b.n	800f058 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	3308      	adds	r3, #8
 800f042:	60fb      	str	r3, [r7, #12]
 800f044:	e002      	b.n	800f04c <vListInsert+0x2e>
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	60fb      	str	r3, [r7, #12]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	429a      	cmp	r2, r3
 800f056:	d2f6      	bcs.n	800f046 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	685a      	ldr	r2, [r3, #4]
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	683a      	ldr	r2, [r7, #0]
 800f066:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	683a      	ldr	r2, [r7, #0]
 800f072:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	1c5a      	adds	r2, r3, #1
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	601a      	str	r2, [r3, #0]
}
 800f084:	bf00      	nop
 800f086:	3714      	adds	r7, #20
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f090:	b480      	push	{r7}
 800f092:	b085      	sub	sp, #20
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	691b      	ldr	r3, [r3, #16]
 800f09c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	6892      	ldr	r2, [r2, #8]
 800f0a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	689b      	ldr	r3, [r3, #8]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	6852      	ldr	r2, [r2, #4]
 800f0b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d103      	bne.n	800f0c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	689a      	ldr	r2, [r3, #8]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	1e5a      	subs	r2, r3, #1
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3714      	adds	r7, #20
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d10b      	bne.n	800f110 <xQueueGenericReset+0x2c>
        __asm volatile
 800f0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0fc:	f383 8811 	msr	BASEPRI, r3
 800f100:	f3bf 8f6f 	isb	sy
 800f104:	f3bf 8f4f 	dsb	sy
 800f108:	60bb      	str	r3, [r7, #8]
    }
 800f10a:	bf00      	nop
 800f10c:	bf00      	nop
 800f10e:	e7fd      	b.n	800f10c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800f110:	f001 ffb4 	bl	801107c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f11c:	68f9      	ldr	r1, [r7, #12]
 800f11e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f120:	fb01 f303 	mul.w	r3, r1, r3
 800f124:	441a      	add	r2, r3
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f140:	3b01      	subs	r3, #1
 800f142:	68f9      	ldr	r1, [r7, #12]
 800f144:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f146:	fb01 f303 	mul.w	r3, r1, r3
 800f14a:	441a      	add	r2, r3
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	22ff      	movs	r2, #255	@ 0xff
 800f154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	22ff      	movs	r2, #255	@ 0xff
 800f15c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d114      	bne.n	800f190 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d01a      	beq.n	800f1a4 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	3310      	adds	r3, #16
 800f172:	4618      	mov	r0, r3
 800f174:	f001 f894 	bl	80102a0 <xTaskRemoveFromEventList>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d012      	beq.n	800f1a4 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800f17e:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b4 <xQueueGenericReset+0xd0>)
 800f180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	f3bf 8f6f 	isb	sy
 800f18e:	e009      	b.n	800f1a4 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	3310      	adds	r3, #16
 800f194:	4618      	mov	r0, r3
 800f196:	f7ff fef1 	bl	800ef7c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	3324      	adds	r3, #36	@ 0x24
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7ff feec 	bl	800ef7c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800f1a4:	f001 ff9c 	bl	80110e0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800f1a8:	2301      	movs	r3, #1
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3710      	adds	r7, #16
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	e000ed04 	.word	0xe000ed04

0800f1b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b08c      	sub	sp, #48	@ 0x30
 800f1bc:	af02      	add	r7, sp, #8
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d10b      	bne.n	800f1e4 <xQueueGenericCreate+0x2c>
        __asm volatile
 800f1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
 800f1dc:	61bb      	str	r3, [r7, #24]
    }
 800f1de:	bf00      	nop
 800f1e0:	bf00      	nop
 800f1e2:	e7fd      	b.n	800f1e0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	fb02 f303 	mul.w	r3, r2, r3
 800f1ec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d006      	beq.n	800f202 <xQueueGenericCreate+0x4a>
 800f1f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d101      	bne.n	800f206 <xQueueGenericCreate+0x4e>
 800f202:	2301      	movs	r3, #1
 800f204:	e000      	b.n	800f208 <xQueueGenericCreate+0x50>
 800f206:	2300      	movs	r3, #0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d10b      	bne.n	800f224 <xQueueGenericCreate+0x6c>
        __asm volatile
 800f20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f210:	f383 8811 	msr	BASEPRI, r3
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	f3bf 8f4f 	dsb	sy
 800f21c:	617b      	str	r3, [r7, #20]
    }
 800f21e:	bf00      	nop
 800f220:	bf00      	nop
 800f222:	e7fd      	b.n	800f220 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800f224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f226:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800f22a:	d90b      	bls.n	800f244 <xQueueGenericCreate+0x8c>
        __asm volatile
 800f22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f230:	f383 8811 	msr	BASEPRI, r3
 800f234:	f3bf 8f6f 	isb	sy
 800f238:	f3bf 8f4f 	dsb	sy
 800f23c:	613b      	str	r3, [r7, #16]
    }
 800f23e:	bf00      	nop
 800f240:	bf00      	nop
 800f242:	e7fd      	b.n	800f240 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f246:	3350      	adds	r3, #80	@ 0x50
 800f248:	4618      	mov	r0, r3
 800f24a:	f002 f841 	bl	80112d0 <pvPortMalloc>
 800f24e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800f250:	6a3b      	ldr	r3, [r7, #32]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00d      	beq.n	800f272 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f256:	6a3b      	ldr	r3, [r7, #32]
 800f258:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	3350      	adds	r3, #80	@ 0x50
 800f25e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f260:	79fa      	ldrb	r2, [r7, #7]
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	9300      	str	r3, [sp, #0]
 800f266:	4613      	mov	r3, r2
 800f268:	69fa      	ldr	r2, [r7, #28]
 800f26a:	68b9      	ldr	r1, [r7, #8]
 800f26c:	68f8      	ldr	r0, [r7, #12]
 800f26e:	f000 f805 	bl	800f27c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800f272:	6a3b      	ldr	r3, [r7, #32]
    }
 800f274:	4618      	mov	r0, r3
 800f276:	3728      	adds	r7, #40	@ 0x28
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
 800f288:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d103      	bne.n	800f298 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	69ba      	ldr	r2, [r7, #24]
 800f294:	601a      	str	r2, [r3, #0]
 800f296:	e002      	b.n	800f29e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	68ba      	ldr	r2, [r7, #8]
 800f2a8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f2aa:	2101      	movs	r1, #1
 800f2ac:	69b8      	ldr	r0, [r7, #24]
 800f2ae:	f7ff ff19 	bl	800f0e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	78fa      	ldrb	r2, [r7, #3]
 800f2b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800f2ba:	bf00      	nop
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b082      	sub	sp, #8
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00e      	beq.n	800f2ee <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f81d 	bl	800f328 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800f2ee:	bf00      	nop
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b086      	sub	sp, #24
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f300:	2301      	movs	r3, #1
 800f302:	617b      	str	r3, [r7, #20]
 800f304:	2300      	movs	r3, #0
 800f306:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f308:	79fb      	ldrb	r3, [r7, #7]
 800f30a:	461a      	mov	r2, r3
 800f30c:	6939      	ldr	r1, [r7, #16]
 800f30e:	6978      	ldr	r0, [r7, #20]
 800f310:	f7ff ff52 	bl	800f1b8 <xQueueGenericCreate>
 800f314:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f7ff ffd3 	bl	800f2c2 <prvInitialiseMutex>

        return xNewQueue;
 800f31c:	68fb      	ldr	r3, [r7, #12]
    }
 800f31e:	4618      	mov	r0, r3
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
	...

0800f328 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b08e      	sub	sp, #56	@ 0x38
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	607a      	str	r2, [r7, #4]
 800f334:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f336:	2300      	movs	r3, #0
 800f338:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800f33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10b      	bne.n	800f35c <xQueueGenericSend+0x34>
        __asm volatile
 800f344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800f356:	bf00      	nop
 800f358:	bf00      	nop
 800f35a:	e7fd      	b.n	800f358 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d103      	bne.n	800f36a <xQueueGenericSend+0x42>
 800f362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f366:	2b00      	cmp	r3, #0
 800f368:	d101      	bne.n	800f36e <xQueueGenericSend+0x46>
 800f36a:	2301      	movs	r3, #1
 800f36c:	e000      	b.n	800f370 <xQueueGenericSend+0x48>
 800f36e:	2300      	movs	r3, #0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10b      	bne.n	800f38c <xQueueGenericSend+0x64>
        __asm volatile
 800f374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f378:	f383 8811 	msr	BASEPRI, r3
 800f37c:	f3bf 8f6f 	isb	sy
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800f386:	bf00      	nop
 800f388:	bf00      	nop
 800f38a:	e7fd      	b.n	800f388 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	2b02      	cmp	r3, #2
 800f390:	d103      	bne.n	800f39a <xQueueGenericSend+0x72>
 800f392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f396:	2b01      	cmp	r3, #1
 800f398:	d101      	bne.n	800f39e <xQueueGenericSend+0x76>
 800f39a:	2301      	movs	r3, #1
 800f39c:	e000      	b.n	800f3a0 <xQueueGenericSend+0x78>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d10b      	bne.n	800f3bc <xQueueGenericSend+0x94>
        __asm volatile
 800f3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a8:	f383 8811 	msr	BASEPRI, r3
 800f3ac:	f3bf 8f6f 	isb	sy
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	623b      	str	r3, [r7, #32]
    }
 800f3b6:	bf00      	nop
 800f3b8:	bf00      	nop
 800f3ba:	e7fd      	b.n	800f3b8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3bc:	f001 f910 	bl	80105e0 <xTaskGetSchedulerState>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d102      	bne.n	800f3cc <xQueueGenericSend+0xa4>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <xQueueGenericSend+0xa8>
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e000      	b.n	800f3d2 <xQueueGenericSend+0xaa>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d10b      	bne.n	800f3ee <xQueueGenericSend+0xc6>
        __asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	61fb      	str	r3, [r7, #28]
    }
 800f3e8:	bf00      	nop
 800f3ea:	bf00      	nop
 800f3ec:	e7fd      	b.n	800f3ea <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800f3ee:	f001 fe45 	bl	801107c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d302      	bcc.n	800f404 <xQueueGenericSend+0xdc>
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b02      	cmp	r3, #2
 800f402:	d129      	bne.n	800f458 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f404:	683a      	ldr	r2, [r7, #0]
 800f406:	68b9      	ldr	r1, [r7, #8]
 800f408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f40a:	f000 fa1f 	bl	800f84c <prvCopyDataToQueue>
 800f40e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f414:	2b00      	cmp	r3, #0
 800f416:	d010      	beq.n	800f43a <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f41a:	3324      	adds	r3, #36	@ 0x24
 800f41c:	4618      	mov	r0, r3
 800f41e:	f000 ff3f 	bl	80102a0 <xTaskRemoveFromEventList>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d013      	beq.n	800f450 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800f428:	4b3f      	ldr	r3, [pc, #252]	@ (800f528 <xQueueGenericSend+0x200>)
 800f42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f42e:	601a      	str	r2, [r3, #0]
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	e00a      	b.n	800f450 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800f43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d007      	beq.n	800f450 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800f440:	4b39      	ldr	r3, [pc, #228]	@ (800f528 <xQueueGenericSend+0x200>)
 800f442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f446:	601a      	str	r2, [r3, #0]
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800f450:	f001 fe46 	bl	80110e0 <vPortExitCritical>
                return pdPASS;
 800f454:	2301      	movs	r3, #1
 800f456:	e063      	b.n	800f520 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d103      	bne.n	800f466 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800f45e:	f001 fe3f 	bl	80110e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800f462:	2300      	movs	r3, #0
 800f464:	e05c      	b.n	800f520 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800f466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d106      	bne.n	800f47a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800f46c:	f107 0314 	add.w	r3, r7, #20
 800f470:	4618      	mov	r0, r3
 800f472:	f000 ff79 	bl	8010368 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800f476:	2301      	movs	r3, #1
 800f478:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800f47a:	f001 fe31 	bl	80110e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800f47e:	f000 fceb 	bl	800fe58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800f482:	f001 fdfb 	bl	801107c <vPortEnterCritical>
 800f486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f48c:	b25b      	sxtb	r3, r3
 800f48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f492:	d103      	bne.n	800f49c <xQueueGenericSend+0x174>
 800f494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f496:	2200      	movs	r2, #0
 800f498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f49e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f4a2:	b25b      	sxtb	r3, r3
 800f4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4a8:	d103      	bne.n	800f4b2 <xQueueGenericSend+0x18a>
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f4b2:	f001 fe15 	bl	80110e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4b6:	1d3a      	adds	r2, r7, #4
 800f4b8:	f107 0314 	add.w	r3, r7, #20
 800f4bc:	4611      	mov	r1, r2
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f000 ff68 	bl	8010394 <xTaskCheckForTimeOut>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d124      	bne.n	800f514 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f4ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4cc:	f000 fab6 	bl	800fa3c <prvIsQueueFull>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d018      	beq.n	800f508 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d8:	3310      	adds	r3, #16
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	4611      	mov	r1, r2
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f000 fe8c 	bl	80101fc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800f4e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4e6:	f000 fa41 	bl	800f96c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800f4ea:	f000 fcc3 	bl	800fe74 <xTaskResumeAll>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f47f af7c 	bne.w	800f3ee <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800f4f6:	4b0c      	ldr	r3, [pc, #48]	@ (800f528 <xQueueGenericSend+0x200>)
 800f4f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4fc:	601a      	str	r2, [r3, #0]
 800f4fe:	f3bf 8f4f 	dsb	sy
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	e772      	b.n	800f3ee <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800f508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f50a:	f000 fa2f 	bl	800f96c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800f50e:	f000 fcb1 	bl	800fe74 <xTaskResumeAll>
 800f512:	e76c      	b.n	800f3ee <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800f514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f516:	f000 fa29 	bl	800f96c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800f51a:	f000 fcab 	bl	800fe74 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800f51e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800f520:	4618      	mov	r0, r3
 800f522:	3738      	adds	r7, #56	@ 0x38
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	e000ed04 	.word	0xe000ed04

0800f52c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b090      	sub	sp, #64	@ 0x40
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
 800f538:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800f53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10b      	bne.n	800f55c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800f544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800f556:	bf00      	nop
 800f558:	bf00      	nop
 800f55a:	e7fd      	b.n	800f558 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d103      	bne.n	800f56a <xQueueGenericSendFromISR+0x3e>
 800f562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f566:	2b00      	cmp	r3, #0
 800f568:	d101      	bne.n	800f56e <xQueueGenericSendFromISR+0x42>
 800f56a:	2301      	movs	r3, #1
 800f56c:	e000      	b.n	800f570 <xQueueGenericSendFromISR+0x44>
 800f56e:	2300      	movs	r3, #0
 800f570:	2b00      	cmp	r3, #0
 800f572:	d10b      	bne.n	800f58c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800f574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f578:	f383 8811 	msr	BASEPRI, r3
 800f57c:	f3bf 8f6f 	isb	sy
 800f580:	f3bf 8f4f 	dsb	sy
 800f584:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800f586:	bf00      	nop
 800f588:	bf00      	nop
 800f58a:	e7fd      	b.n	800f588 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	2b02      	cmp	r3, #2
 800f590:	d103      	bne.n	800f59a <xQueueGenericSendFromISR+0x6e>
 800f592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f596:	2b01      	cmp	r3, #1
 800f598:	d101      	bne.n	800f59e <xQueueGenericSendFromISR+0x72>
 800f59a:	2301      	movs	r3, #1
 800f59c:	e000      	b.n	800f5a0 <xQueueGenericSendFromISR+0x74>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d10b      	bne.n	800f5bc <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800f5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a8:	f383 8811 	msr	BASEPRI, r3
 800f5ac:	f3bf 8f6f 	isb	sy
 800f5b0:	f3bf 8f4f 	dsb	sy
 800f5b4:	623b      	str	r3, [r7, #32]
    }
 800f5b6:	bf00      	nop
 800f5b8:	bf00      	nop
 800f5ba:	e7fd      	b.n	800f5b8 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5bc:	f001 fe46 	bl	801124c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800f5c0:	f3ef 8211 	mrs	r2, BASEPRI
 800f5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c8:	f383 8811 	msr	BASEPRI, r3
 800f5cc:	f3bf 8f6f 	isb	sy
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	61fa      	str	r2, [r7, #28]
 800f5d6:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800f5d8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5da:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d302      	bcc.n	800f5ee <xQueueGenericSendFromISR+0xc2>
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d13f      	bne.n	800f66e <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800f5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f5f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f5fe:	683a      	ldr	r2, [r7, #0]
 800f600:	68b9      	ldr	r1, [r7, #8]
 800f602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f604:	f000 f922 	bl	800f84c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800f608:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f610:	d112      	bne.n	800f638 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f616:	2b00      	cmp	r3, #0
 800f618:	d026      	beq.n	800f668 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f61c:	3324      	adds	r3, #36	@ 0x24
 800f61e:	4618      	mov	r0, r3
 800f620:	f000 fe3e 	bl	80102a0 <xTaskRemoveFromEventList>
 800f624:	4603      	mov	r3, r0
 800f626:	2b00      	cmp	r3, #0
 800f628:	d01e      	beq.n	800f668 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01b      	beq.n	800f668 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2201      	movs	r2, #1
 800f634:	601a      	str	r2, [r3, #0]
 800f636:	e017      	b.n	800f668 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800f638:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f63c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f63e:	d10b      	bne.n	800f658 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 800f640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	617b      	str	r3, [r7, #20]
    }
 800f652:	bf00      	nop
 800f654:	bf00      	nop
 800f656:	e7fd      	b.n	800f654 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f658:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f65c:	3301      	adds	r3, #1
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	b25a      	sxtb	r2, r3
 800f662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800f668:	2301      	movs	r3, #1
 800f66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800f66c:	e001      	b.n	800f672 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800f66e:	2300      	movs	r3, #0
 800f670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f674:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800f67c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800f67e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f680:	4618      	mov	r0, r3
 800f682:	3740      	adds	r7, #64	@ 0x40
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b08c      	sub	sp, #48	@ 0x30
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800f694:	2300      	movs	r3, #0
 800f696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800f69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d10b      	bne.n	800f6ba <xQueueReceive+0x32>
        __asm volatile
 800f6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	623b      	str	r3, [r7, #32]
    }
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop
 800f6b8:	e7fd      	b.n	800f6b6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d103      	bne.n	800f6c8 <xQueueReceive+0x40>
 800f6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <xQueueReceive+0x44>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e000      	b.n	800f6ce <xQueueReceive+0x46>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10b      	bne.n	800f6ea <xQueueReceive+0x62>
        __asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d6:	f383 8811 	msr	BASEPRI, r3
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	61fb      	str	r3, [r7, #28]
    }
 800f6e4:	bf00      	nop
 800f6e6:	bf00      	nop
 800f6e8:	e7fd      	b.n	800f6e6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6ea:	f000 ff79 	bl	80105e0 <xTaskGetSchedulerState>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d102      	bne.n	800f6fa <xQueueReceive+0x72>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d101      	bne.n	800f6fe <xQueueReceive+0x76>
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	e000      	b.n	800f700 <xQueueReceive+0x78>
 800f6fe:	2300      	movs	r3, #0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d10b      	bne.n	800f71c <xQueueReceive+0x94>
        __asm volatile
 800f704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f708:	f383 8811 	msr	BASEPRI, r3
 800f70c:	f3bf 8f6f 	isb	sy
 800f710:	f3bf 8f4f 	dsb	sy
 800f714:	61bb      	str	r3, [r7, #24]
    }
 800f716:	bf00      	nop
 800f718:	bf00      	nop
 800f71a:	e7fd      	b.n	800f718 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800f71c:	f001 fcae 	bl	801107c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f724:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d01f      	beq.n	800f76c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f72c:	68b9      	ldr	r1, [r7, #8]
 800f72e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f730:	f000 f8f6 	bl	800f920 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f736:	1e5a      	subs	r2, r3, #1
 800f738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f73a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f73e:	691b      	ldr	r3, [r3, #16]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d00f      	beq.n	800f764 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f746:	3310      	adds	r3, #16
 800f748:	4618      	mov	r0, r3
 800f74a:	f000 fda9 	bl	80102a0 <xTaskRemoveFromEventList>
 800f74e:	4603      	mov	r3, r0
 800f750:	2b00      	cmp	r3, #0
 800f752:	d007      	beq.n	800f764 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800f754:	4b3c      	ldr	r3, [pc, #240]	@ (800f848 <xQueueReceive+0x1c0>)
 800f756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f75a:	601a      	str	r2, [r3, #0]
 800f75c:	f3bf 8f4f 	dsb	sy
 800f760:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800f764:	f001 fcbc 	bl	80110e0 <vPortExitCritical>
                return pdPASS;
 800f768:	2301      	movs	r3, #1
 800f76a:	e069      	b.n	800f840 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d103      	bne.n	800f77a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800f772:	f001 fcb5 	bl	80110e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800f776:	2300      	movs	r3, #0
 800f778:	e062      	b.n	800f840 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800f77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d106      	bne.n	800f78e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800f780:	f107 0310 	add.w	r3, r7, #16
 800f784:	4618      	mov	r0, r3
 800f786:	f000 fdef 	bl	8010368 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800f78a:	2301      	movs	r3, #1
 800f78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800f78e:	f001 fca7 	bl	80110e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800f792:	f000 fb61 	bl	800fe58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800f796:	f001 fc71 	bl	801107c <vPortEnterCritical>
 800f79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f79c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f7a0:	b25b      	sxtb	r3, r3
 800f7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a6:	d103      	bne.n	800f7b0 <xQueueReceive+0x128>
 800f7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7b6:	b25b      	sxtb	r3, r3
 800f7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7bc:	d103      	bne.n	800f7c6 <xQueueReceive+0x13e>
 800f7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f7c6:	f001 fc8b 	bl	80110e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7ca:	1d3a      	adds	r2, r7, #4
 800f7cc:	f107 0310 	add.w	r3, r7, #16
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f000 fdde 	bl	8010394 <xTaskCheckForTimeOut>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d123      	bne.n	800f826 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7e0:	f000 f916 	bl	800fa10 <prvIsQueueEmpty>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d017      	beq.n	800f81a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ec:	3324      	adds	r3, #36	@ 0x24
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	4611      	mov	r1, r2
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f000 fd02 	bl	80101fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800f7f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7fa:	f000 f8b7 	bl	800f96c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800f7fe:	f000 fb39 	bl	800fe74 <xTaskResumeAll>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d189      	bne.n	800f71c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800f808:	4b0f      	ldr	r3, [pc, #60]	@ (800f848 <xQueueReceive+0x1c0>)
 800f80a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f80e:	601a      	str	r2, [r3, #0]
 800f810:	f3bf 8f4f 	dsb	sy
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	e780      	b.n	800f71c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800f81a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f81c:	f000 f8a6 	bl	800f96c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800f820:	f000 fb28 	bl	800fe74 <xTaskResumeAll>
 800f824:	e77a      	b.n	800f71c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800f826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f828:	f000 f8a0 	bl	800f96c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800f82c:	f000 fb22 	bl	800fe74 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f830:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f832:	f000 f8ed 	bl	800fa10 <prvIsQueueEmpty>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f43f af6f 	beq.w	800f71c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800f83e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800f840:	4618      	mov	r0, r3
 800f842:	3730      	adds	r7, #48	@ 0x30
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	e000ed04 	.word	0xe000ed04

0800f84c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800f858:	2300      	movs	r3, #0
 800f85a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f860:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f866:	2b00      	cmp	r3, #0
 800f868:	d10d      	bne.n	800f886 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d14d      	bne.n	800f90e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	4618      	mov	r0, r3
 800f878:	f000 fed0 	bl	801061c <xTaskPriorityDisinherit>
 800f87c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2200      	movs	r2, #0
 800f882:	609a      	str	r2, [r3, #8]
 800f884:	e043      	b.n	800f90e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d119      	bne.n	800f8c0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6858      	ldr	r0, [r3, #4]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f894:	461a      	mov	r2, r3
 800f896:	68b9      	ldr	r1, [r7, #8]
 800f898:	f002 fb29 	bl	8011eee <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	685a      	ldr	r2, [r3, #4]
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8a4:	441a      	add	r2, r3
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	685a      	ldr	r2, [r3, #4]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d32b      	bcc.n	800f90e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	605a      	str	r2, [r3, #4]
 800f8be:	e026      	b.n	800f90e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	68d8      	ldr	r0, [r3, #12]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	68b9      	ldr	r1, [r7, #8]
 800f8cc:	f002 fb0f 	bl	8011eee <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	68da      	ldr	r2, [r3, #12]
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8d8:	425b      	negs	r3, r3
 800f8da:	441a      	add	r2, r3
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	68da      	ldr	r2, [r3, #12]
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d207      	bcs.n	800f8fc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	689a      	ldr	r2, [r3, #8]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8f4:	425b      	negs	r3, r3
 800f8f6:	441a      	add	r2, r3
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b02      	cmp	r3, #2
 800f900:	d105      	bne.n	800f90e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d002      	beq.n	800f90e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	3b01      	subs	r3, #1
 800f90c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	1c5a      	adds	r2, r3, #1
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800f916:	697b      	ldr	r3, [r7, #20]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3718      	adds	r7, #24
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d018      	beq.n	800f964 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	68da      	ldr	r2, [r3, #12]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f93a:	441a      	add	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	68da      	ldr	r2, [r3, #12]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	689b      	ldr	r3, [r3, #8]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d303      	bcc.n	800f954 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	68d9      	ldr	r1, [r3, #12]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f95c:	461a      	mov	r2, r3
 800f95e:	6838      	ldr	r0, [r7, #0]
 800f960:	f002 fac5 	bl	8011eee <memcpy>
    }
}
 800f964:	bf00      	nop
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}

0800f96c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b084      	sub	sp, #16
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800f974:	f001 fb82 	bl	801107c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f97e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800f980:	e011      	b.n	800f9a6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f986:	2b00      	cmp	r3, #0
 800f988:	d012      	beq.n	800f9b0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	3324      	adds	r3, #36	@ 0x24
 800f98e:	4618      	mov	r0, r3
 800f990:	f000 fc86 	bl	80102a0 <xTaskRemoveFromEventList>
 800f994:	4603      	mov	r3, r0
 800f996:	2b00      	cmp	r3, #0
 800f998:	d001      	beq.n	800f99e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800f99a:	f000 fd63 	bl	8010464 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800f99e:	7bfb      	ldrb	r3, [r7, #15]
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800f9a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	dce9      	bgt.n	800f982 <prvUnlockQueue+0x16>
 800f9ae:	e000      	b.n	800f9b2 <prvUnlockQueue+0x46>
                        break;
 800f9b0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	22ff      	movs	r2, #255	@ 0xff
 800f9b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800f9ba:	f001 fb91 	bl	80110e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800f9be:	f001 fb5d 	bl	801107c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f9c8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9ca:	e011      	b.n	800f9f0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	691b      	ldr	r3, [r3, #16]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d012      	beq.n	800f9fa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	3310      	adds	r3, #16
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f000 fc61 	bl	80102a0 <xTaskRemoveFromEventList>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d001      	beq.n	800f9e8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800f9e4:	f000 fd3e 	bl	8010464 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800f9e8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	dce9      	bgt.n	800f9cc <prvUnlockQueue+0x60>
 800f9f8:	e000      	b.n	800f9fc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800f9fa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	22ff      	movs	r2, #255	@ 0xff
 800fa00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800fa04:	f001 fb6c 	bl	80110e0 <vPortExitCritical>
}
 800fa08:	bf00      	nop
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800fa18:	f001 fb30 	bl	801107c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d102      	bne.n	800fa2a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800fa24:	2301      	movs	r3, #1
 800fa26:	60fb      	str	r3, [r7, #12]
 800fa28:	e001      	b.n	800fa2e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800fa2e:	f001 fb57 	bl	80110e0 <vPortExitCritical>

    return xReturn;
 800fa32:	68fb      	ldr	r3, [r7, #12]
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800fa44:	f001 fb1a 	bl	801107c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d102      	bne.n	800fa5a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800fa54:	2301      	movs	r3, #1
 800fa56:	60fb      	str	r3, [r7, #12]
 800fa58:	e001      	b.n	800fa5e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800fa5e:	f001 fb3f 	bl	80110e0 <vPortExitCritical>

    return xReturn;
 800fa62:	68fb      	ldr	r3, [r7, #12]
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3710      	adds	r7, #16
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800fa6c:	b480      	push	{r7}
 800fa6e:	b085      	sub	sp, #20
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa76:	2300      	movs	r3, #0
 800fa78:	60fb      	str	r3, [r7, #12]
 800fa7a:	e014      	b.n	800faa6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fa7c:	4a0f      	ldr	r2, [pc, #60]	@ (800fabc <vQueueAddToRegistry+0x50>)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d10b      	bne.n	800faa0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fa88:	490c      	ldr	r1, [pc, #48]	@ (800fabc <vQueueAddToRegistry+0x50>)
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	683a      	ldr	r2, [r7, #0]
 800fa8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800fa92:	4a0a      	ldr	r2, [pc, #40]	@ (800fabc <vQueueAddToRegistry+0x50>)
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	00db      	lsls	r3, r3, #3
 800fa98:	4413      	add	r3, r2
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800fa9e:	e006      	b.n	800faae <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	3301      	adds	r3, #1
 800faa4:	60fb      	str	r3, [r7, #12]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2b07      	cmp	r3, #7
 800faaa:	d9e7      	bls.n	800fa7c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800faac:	bf00      	nop
 800faae:	bf00      	nop
 800fab0:	3714      	adds	r7, #20
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	20000304 	.word	0x20000304

0800fac0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800fad0:	f001 fad4 	bl	801107c <vPortEnterCritical>
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fada:	b25b      	sxtb	r3, r3
 800fadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae0:	d103      	bne.n	800faea <vQueueWaitForMessageRestricted+0x2a>
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	2200      	movs	r2, #0
 800fae6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800faf0:	b25b      	sxtb	r3, r3
 800faf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf6:	d103      	bne.n	800fb00 <vQueueWaitForMessageRestricted+0x40>
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2200      	movs	r2, #0
 800fafc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb00:	f001 faee 	bl	80110e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d106      	bne.n	800fb1a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	3324      	adds	r3, #36	@ 0x24
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	68b9      	ldr	r1, [r7, #8]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f000 fb97 	bl	8010248 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800fb1a:	6978      	ldr	r0, [r7, #20]
 800fb1c:	f7ff ff26 	bl	800f96c <prvUnlockQueue>
    }
 800fb20:	bf00      	nop
 800fb22:	3718      	adds	r7, #24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08c      	sub	sp, #48	@ 0x30
 800fb2c:	af04      	add	r7, sp, #16
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	603b      	str	r3, [r7, #0]
 800fb34:	4613      	mov	r3, r2
 800fb36:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fb38:	88fb      	ldrh	r3, [r7, #6]
 800fb3a:	009b      	lsls	r3, r3, #2
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f001 fbc7 	bl	80112d0 <pvPortMalloc>
 800fb42:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00e      	beq.n	800fb68 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fb4a:	2058      	movs	r0, #88	@ 0x58
 800fb4c:	f001 fbc0 	bl	80112d0 <pvPortMalloc>
 800fb50:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d003      	beq.n	800fb60 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	697a      	ldr	r2, [r7, #20]
 800fb5c:	631a      	str	r2, [r3, #48]	@ 0x30
 800fb5e:	e005      	b.n	800fb6c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800fb60:	6978      	ldr	r0, [r7, #20]
 800fb62:	f001 fc97 	bl	8011494 <vPortFree>
 800fb66:	e001      	b.n	800fb6c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d013      	beq.n	800fb9a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb72:	88fa      	ldrh	r2, [r7, #6]
 800fb74:	2300      	movs	r3, #0
 800fb76:	9303      	str	r3, [sp, #12]
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	9302      	str	r3, [sp, #8]
 800fb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb7e:	9301      	str	r3, [sp, #4]
 800fb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	68b9      	ldr	r1, [r7, #8]
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f000 f80e 	bl	800fbaa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800fb8e:	69f8      	ldr	r0, [r7, #28]
 800fb90:	f000 f8a2 	bl	800fcd8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800fb94:	2301      	movs	r3, #1
 800fb96:	61bb      	str	r3, [r7, #24]
 800fb98:	e002      	b.n	800fba0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb9e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800fba0:	69bb      	ldr	r3, [r7, #24]
    }
 800fba2:	4618      	mov	r0, r3
 800fba4:	3720      	adds	r7, #32
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b088      	sub	sp, #32
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	60f8      	str	r0, [r7, #12]
 800fbb2:	60b9      	str	r1, [r7, #8]
 800fbb4:	607a      	str	r2, [r7, #4]
 800fbb6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	21a5      	movs	r1, #165	@ 0xa5
 800fbc4:	f002 f8f4 	bl	8011db0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fbd2:	3b01      	subs	r3, #1
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	4413      	add	r3, r2
 800fbd8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	f023 0307 	bic.w	r3, r3, #7
 800fbe0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	f003 0307 	and.w	r3, r3, #7
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00b      	beq.n	800fc04 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800fbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf0:	f383 8811 	msr	BASEPRI, r3
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	f3bf 8f4f 	dsb	sy
 800fbfc:	617b      	str	r3, [r7, #20]
    }
 800fbfe:	bf00      	nop
 800fc00:	bf00      	nop
 800fc02:	e7fd      	b.n	800fc00 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d01f      	beq.n	800fc4a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	61fb      	str	r3, [r7, #28]
 800fc0e:	e012      	b.n	800fc36 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fc10:	68ba      	ldr	r2, [r7, #8]
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	4413      	add	r3, r2
 800fc16:	7819      	ldrb	r1, [r3, #0]
 800fc18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	3334      	adds	r3, #52	@ 0x34
 800fc20:	460a      	mov	r2, r1
 800fc22:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800fc24:	68ba      	ldr	r2, [r7, #8]
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	4413      	add	r3, r2
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d006      	beq.n	800fc3e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	3301      	adds	r3, #1
 800fc34:	61fb      	str	r3, [r7, #28]
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	2b09      	cmp	r3, #9
 800fc3a:	d9e9      	bls.n	800fc10 <prvInitialiseNewTask+0x66>
 800fc3c:	e000      	b.n	800fc40 <prvInitialiseNewTask+0x96>
            {
                break;
 800fc3e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc42:	2200      	movs	r2, #0
 800fc44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800fc48:	e003      	b.n	800fc52 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc54:	2b04      	cmp	r3, #4
 800fc56:	d901      	bls.n	800fc5c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fc58:	2304      	movs	r3, #4
 800fc5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800fc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc60:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800fc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc66:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800fc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc70:	3304      	adds	r3, #4
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7ff f9a2 	bl	800efbc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc7a:	3318      	adds	r3, #24
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7ff f99d 	bl	800efbc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc86:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc8a:	f1c3 0205 	rsb	r2, r3, #5
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc90:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc96:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800fc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc9a:	3350      	adds	r3, #80	@ 0x50
 800fc9c:	2204      	movs	r2, #4
 800fc9e:	2100      	movs	r1, #0
 800fca0:	4618      	mov	r0, r3
 800fca2:	f002 f885 	bl	8011db0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800fca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca8:	3354      	adds	r3, #84	@ 0x54
 800fcaa:	2201      	movs	r2, #1
 800fcac:	2100      	movs	r1, #0
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f002 f87e 	bl	8011db0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	68f9      	ldr	r1, [r7, #12]
 800fcb8:	69b8      	ldr	r0, [r7, #24]
 800fcba:	f001 f8af 	bl	8010e1c <pxPortInitialiseStack>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcc2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800fcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d002      	beq.n	800fcd0 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800fcd0:	bf00      	nop
 800fcd2:	3720      	adds	r7, #32
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800fce0:	f001 f9cc 	bl	801107c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800fce4:	4b2c      	ldr	r3, [pc, #176]	@ (800fd98 <prvAddNewTaskToReadyList+0xc0>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	3301      	adds	r3, #1
 800fcea:	4a2b      	ldr	r2, [pc, #172]	@ (800fd98 <prvAddNewTaskToReadyList+0xc0>)
 800fcec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800fcee:	4b2b      	ldr	r3, [pc, #172]	@ (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d109      	bne.n	800fd0a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800fcf6:	4a29      	ldr	r2, [pc, #164]	@ (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fcfc:	4b26      	ldr	r3, [pc, #152]	@ (800fd98 <prvAddNewTaskToReadyList+0xc0>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d110      	bne.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800fd04:	f000 fbd2 	bl	80104ac <prvInitialiseTaskLists>
 800fd08:	e00d      	b.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800fd0a:	4b25      	ldr	r3, [pc, #148]	@ (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d109      	bne.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fd12:	4b22      	ldr	r3, [pc, #136]	@ (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d802      	bhi.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800fd20:	4a1e      	ldr	r2, [pc, #120]	@ (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800fd26:	4b1f      	ldr	r3, [pc, #124]	@ (800fda4 <prvAddNewTaskToReadyList+0xcc>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	4a1d      	ldr	r2, [pc, #116]	@ (800fda4 <prvAddNewTaskToReadyList+0xcc>)
 800fd2e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fd30:	4b1c      	ldr	r3, [pc, #112]	@ (800fda4 <prvAddNewTaskToReadyList+0xcc>)
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	409a      	lsls	r2, r3
 800fd40:	4b19      	ldr	r3, [pc, #100]	@ (800fda8 <prvAddNewTaskToReadyList+0xd0>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	4313      	orrs	r3, r2
 800fd46:	4a18      	ldr	r2, [pc, #96]	@ (800fda8 <prvAddNewTaskToReadyList+0xd0>)
 800fd48:	6013      	str	r3, [r2, #0]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd4e:	4613      	mov	r3, r2
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	4413      	add	r3, r2
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4a15      	ldr	r2, [pc, #84]	@ (800fdac <prvAddNewTaskToReadyList+0xd4>)
 800fd58:	441a      	add	r2, r3
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	3304      	adds	r3, #4
 800fd5e:	4619      	mov	r1, r3
 800fd60:	4610      	mov	r0, r2
 800fd62:	f7ff f938 	bl	800efd6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800fd66:	f001 f9bb 	bl	80110e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800fd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d00e      	beq.n	800fd90 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fd72:	4b0a      	ldr	r3, [pc, #40]	@ (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d207      	bcs.n	800fd90 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800fd80:	4b0b      	ldr	r3, [pc, #44]	@ (800fdb0 <prvAddNewTaskToReadyList+0xd8>)
 800fd82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd86:	601a      	str	r2, [r3, #0]
 800fd88:	f3bf 8f4f 	dsb	sy
 800fd8c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800fd90:	bf00      	nop
 800fd92:	3708      	adds	r7, #8
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	2000041c 	.word	0x2000041c
 800fd9c:	20000344 	.word	0x20000344
 800fda0:	20000428 	.word	0x20000428
 800fda4:	20000438 	.word	0x20000438
 800fda8:	20000424 	.word	0x20000424
 800fdac:	20000348 	.word	0x20000348
 800fdb0:	e000ed04 	.word	0xe000ed04

0800fdb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b086      	sub	sp, #24
 800fdb8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800fdba:	4b20      	ldr	r3, [pc, #128]	@ (800fe3c <vTaskStartScheduler+0x88>)
 800fdbc:	9301      	str	r3, [sp, #4]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	2282      	movs	r2, #130	@ 0x82
 800fdc6:	491e      	ldr	r1, [pc, #120]	@ (800fe40 <vTaskStartScheduler+0x8c>)
 800fdc8:	481e      	ldr	r0, [pc, #120]	@ (800fe44 <vTaskStartScheduler+0x90>)
 800fdca:	f7ff fead 	bl	800fb28 <xTaskCreate>
 800fdce:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d102      	bne.n	800fddc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800fdd6:	f000 fd03 	bl	80107e0 <xTimerCreateTimerTask>
 800fdda:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d116      	bne.n	800fe10 <vTaskStartScheduler+0x5c>
        __asm volatile
 800fde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde6:	f383 8811 	msr	BASEPRI, r3
 800fdea:	f3bf 8f6f 	isb	sy
 800fdee:	f3bf 8f4f 	dsb	sy
 800fdf2:	60bb      	str	r3, [r7, #8]
    }
 800fdf4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800fdf6:	4b14      	ldr	r3, [pc, #80]	@ (800fe48 <vTaskStartScheduler+0x94>)
 800fdf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fdfc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800fdfe:	4b13      	ldr	r3, [pc, #76]	@ (800fe4c <vTaskStartScheduler+0x98>)
 800fe00:	2201      	movs	r2, #1
 800fe02:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fe04:	4b12      	ldr	r3, [pc, #72]	@ (800fe50 <vTaskStartScheduler+0x9c>)
 800fe06:	2200      	movs	r2, #0
 800fe08:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800fe0a:	f001 f893 	bl	8010f34 <xPortStartScheduler>
 800fe0e:	e00f      	b.n	800fe30 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe16:	d10b      	bne.n	800fe30 <vTaskStartScheduler+0x7c>
        __asm volatile
 800fe18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe1c:	f383 8811 	msr	BASEPRI, r3
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	607b      	str	r3, [r7, #4]
    }
 800fe2a:	bf00      	nop
 800fe2c:	bf00      	nop
 800fe2e:	e7fd      	b.n	800fe2c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800fe30:	4b08      	ldr	r3, [pc, #32]	@ (800fe54 <vTaskStartScheduler+0xa0>)
 800fe32:	681b      	ldr	r3, [r3, #0]
}
 800fe34:	bf00      	nop
 800fe36:	3710      	adds	r7, #16
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	20000440 	.word	0x20000440
 800fe40:	08013630 	.word	0x08013630
 800fe44:	0801047d 	.word	0x0801047d
 800fe48:	2000043c 	.word	0x2000043c
 800fe4c:	20000428 	.word	0x20000428
 800fe50:	20000420 	.word	0x20000420
 800fe54:	08013e50 	.word	0x08013e50

0800fe58 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe58:	b480      	push	{r7}
 800fe5a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800fe5c:	4b04      	ldr	r3, [pc, #16]	@ (800fe70 <vTaskSuspendAll+0x18>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	3301      	adds	r3, #1
 800fe62:	4a03      	ldr	r2, [pc, #12]	@ (800fe70 <vTaskSuspendAll+0x18>)
 800fe64:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800fe66:	bf00      	nop
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr
 800fe70:	20000444 	.word	0x20000444

0800fe74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800fe82:	4b42      	ldr	r3, [pc, #264]	@ (800ff8c <xTaskResumeAll+0x118>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d10b      	bne.n	800fea2 <xTaskResumeAll+0x2e>
        __asm volatile
 800fe8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	603b      	str	r3, [r7, #0]
    }
 800fe9c:	bf00      	nop
 800fe9e:	bf00      	nop
 800fea0:	e7fd      	b.n	800fe9e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800fea2:	f001 f8eb 	bl	801107c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800fea6:	4b39      	ldr	r3, [pc, #228]	@ (800ff8c <xTaskResumeAll+0x118>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	3b01      	subs	r3, #1
 800feac:	4a37      	ldr	r2, [pc, #220]	@ (800ff8c <xTaskResumeAll+0x118>)
 800feae:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800feb0:	4b36      	ldr	r3, [pc, #216]	@ (800ff8c <xTaskResumeAll+0x118>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d161      	bne.n	800ff7c <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800feb8:	4b35      	ldr	r3, [pc, #212]	@ (800ff90 <xTaskResumeAll+0x11c>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d05d      	beq.n	800ff7c <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fec0:	e02e      	b.n	800ff20 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fec2:	4b34      	ldr	r3, [pc, #208]	@ (800ff94 <xTaskResumeAll+0x120>)
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	3318      	adds	r3, #24
 800fece:	4618      	mov	r0, r3
 800fed0:	f7ff f8de 	bl	800f090 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	3304      	adds	r3, #4
 800fed8:	4618      	mov	r0, r3
 800feda:	f7ff f8d9 	bl	800f090 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fee2:	2201      	movs	r2, #1
 800fee4:	409a      	lsls	r2, r3
 800fee6:	4b2c      	ldr	r3, [pc, #176]	@ (800ff98 <xTaskResumeAll+0x124>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	4313      	orrs	r3, r2
 800feec:	4a2a      	ldr	r2, [pc, #168]	@ (800ff98 <xTaskResumeAll+0x124>)
 800feee:	6013      	str	r3, [r2, #0]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fef4:	4613      	mov	r3, r2
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	4413      	add	r3, r2
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	4a27      	ldr	r2, [pc, #156]	@ (800ff9c <xTaskResumeAll+0x128>)
 800fefe:	441a      	add	r2, r3
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	3304      	adds	r3, #4
 800ff04:	4619      	mov	r1, r3
 800ff06:	4610      	mov	r0, r2
 800ff08:	f7ff f865 	bl	800efd6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff10:	4b23      	ldr	r3, [pc, #140]	@ (800ffa0 <xTaskResumeAll+0x12c>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d302      	bcc.n	800ff20 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800ff1a:	4b22      	ldr	r3, [pc, #136]	@ (800ffa4 <xTaskResumeAll+0x130>)
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff20:	4b1c      	ldr	r3, [pc, #112]	@ (800ff94 <xTaskResumeAll+0x120>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d1cc      	bne.n	800fec2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d001      	beq.n	800ff32 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800ff2e:	f000 fb3b 	bl	80105a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ff32:	4b1d      	ldr	r3, [pc, #116]	@ (800ffa8 <xTaskResumeAll+0x134>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d010      	beq.n	800ff60 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800ff3e:	f000 f847 	bl	800ffd0 <xTaskIncrementTick>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d002      	beq.n	800ff4e <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 800ff48:	4b16      	ldr	r3, [pc, #88]	@ (800ffa4 <xTaskResumeAll+0x130>)
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	3b01      	subs	r3, #1
 800ff52:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d1f1      	bne.n	800ff3e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800ff5a:	4b13      	ldr	r3, [pc, #76]	@ (800ffa8 <xTaskResumeAll+0x134>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800ff60:	4b10      	ldr	r3, [pc, #64]	@ (800ffa4 <xTaskResumeAll+0x130>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d009      	beq.n	800ff7c <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800ff6c:	4b0f      	ldr	r3, [pc, #60]	@ (800ffac <xTaskResumeAll+0x138>)
 800ff6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff72:	601a      	str	r2, [r3, #0]
 800ff74:	f3bf 8f4f 	dsb	sy
 800ff78:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800ff7c:	f001 f8b0 	bl	80110e0 <vPortExitCritical>

    return xAlreadyYielded;
 800ff80:	68bb      	ldr	r3, [r7, #8]
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20000444 	.word	0x20000444
 800ff90:	2000041c 	.word	0x2000041c
 800ff94:	200003dc 	.word	0x200003dc
 800ff98:	20000424 	.word	0x20000424
 800ff9c:	20000348 	.word	0x20000348
 800ffa0:	20000344 	.word	0x20000344
 800ffa4:	20000430 	.word	0x20000430
 800ffa8:	2000042c 	.word	0x2000042c
 800ffac:	e000ed04 	.word	0xe000ed04

0800ffb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800ffb6:	4b05      	ldr	r3, [pc, #20]	@ (800ffcc <xTaskGetTickCount+0x1c>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800ffbc:	687b      	ldr	r3, [r7, #4]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	370c      	adds	r7, #12
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr
 800ffca:	bf00      	nop
 800ffcc:	20000420 	.word	0x20000420

0800ffd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffda:	4b4f      	ldr	r3, [pc, #316]	@ (8010118 <xTaskIncrementTick+0x148>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	f040 808f 	bne.w	8010102 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ffe4:	4b4d      	ldr	r3, [pc, #308]	@ (801011c <xTaskIncrementTick+0x14c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800ffec:	4a4b      	ldr	r2, [pc, #300]	@ (801011c <xTaskIncrementTick+0x14c>)
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d121      	bne.n	801003c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800fff8:	4b49      	ldr	r3, [pc, #292]	@ (8010120 <xTaskIncrementTick+0x150>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00b      	beq.n	801001a <xTaskIncrementTick+0x4a>
        __asm volatile
 8010002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010006:	f383 8811 	msr	BASEPRI, r3
 801000a:	f3bf 8f6f 	isb	sy
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	603b      	str	r3, [r7, #0]
    }
 8010014:	bf00      	nop
 8010016:	bf00      	nop
 8010018:	e7fd      	b.n	8010016 <xTaskIncrementTick+0x46>
 801001a:	4b41      	ldr	r3, [pc, #260]	@ (8010120 <xTaskIncrementTick+0x150>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	60fb      	str	r3, [r7, #12]
 8010020:	4b40      	ldr	r3, [pc, #256]	@ (8010124 <xTaskIncrementTick+0x154>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a3e      	ldr	r2, [pc, #248]	@ (8010120 <xTaskIncrementTick+0x150>)
 8010026:	6013      	str	r3, [r2, #0]
 8010028:	4a3e      	ldr	r2, [pc, #248]	@ (8010124 <xTaskIncrementTick+0x154>)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6013      	str	r3, [r2, #0]
 801002e:	4b3e      	ldr	r3, [pc, #248]	@ (8010128 <xTaskIncrementTick+0x158>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	3301      	adds	r3, #1
 8010034:	4a3c      	ldr	r2, [pc, #240]	@ (8010128 <xTaskIncrementTick+0x158>)
 8010036:	6013      	str	r3, [r2, #0]
 8010038:	f000 fab6 	bl	80105a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 801003c:	4b3b      	ldr	r3, [pc, #236]	@ (801012c <xTaskIncrementTick+0x15c>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	693a      	ldr	r2, [r7, #16]
 8010042:	429a      	cmp	r2, r3
 8010044:	d348      	bcc.n	80100d8 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010046:	4b36      	ldr	r3, [pc, #216]	@ (8010120 <xTaskIncrementTick+0x150>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d104      	bne.n	801005a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010050:	4b36      	ldr	r3, [pc, #216]	@ (801012c <xTaskIncrementTick+0x15c>)
 8010052:	f04f 32ff 	mov.w	r2, #4294967295
 8010056:	601a      	str	r2, [r3, #0]
                    break;
 8010058:	e03e      	b.n	80100d8 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801005a:	4b31      	ldr	r3, [pc, #196]	@ (8010120 <xTaskIncrementTick+0x150>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	68db      	ldr	r3, [r3, #12]
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 801006a:	693a      	ldr	r2, [r7, #16]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	429a      	cmp	r2, r3
 8010070:	d203      	bcs.n	801007a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8010072:	4a2e      	ldr	r2, [pc, #184]	@ (801012c <xTaskIncrementTick+0x15c>)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010078:	e02e      	b.n	80100d8 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	3304      	adds	r3, #4
 801007e:	4618      	mov	r0, r3
 8010080:	f7ff f806 	bl	800f090 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010088:	2b00      	cmp	r3, #0
 801008a:	d004      	beq.n	8010096 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	3318      	adds	r3, #24
 8010090:	4618      	mov	r0, r3
 8010092:	f7fe fffd 	bl	800f090 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801009a:	2201      	movs	r2, #1
 801009c:	409a      	lsls	r2, r3
 801009e:	4b24      	ldr	r3, [pc, #144]	@ (8010130 <xTaskIncrementTick+0x160>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	4313      	orrs	r3, r2
 80100a4:	4a22      	ldr	r2, [pc, #136]	@ (8010130 <xTaskIncrementTick+0x160>)
 80100a6:	6013      	str	r3, [r2, #0]
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100ac:	4613      	mov	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	4413      	add	r3, r2
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	4a1f      	ldr	r2, [pc, #124]	@ (8010134 <xTaskIncrementTick+0x164>)
 80100b6:	441a      	add	r2, r3
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	3304      	adds	r3, #4
 80100bc:	4619      	mov	r1, r3
 80100be:	4610      	mov	r0, r2
 80100c0:	f7fe ff89 	bl	800efd6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100c8:	4b1b      	ldr	r3, [pc, #108]	@ (8010138 <xTaskIncrementTick+0x168>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d3b9      	bcc.n	8010046 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80100d2:	2301      	movs	r3, #1
 80100d4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100d6:	e7b6      	b.n	8010046 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80100d8:	4b17      	ldr	r3, [pc, #92]	@ (8010138 <xTaskIncrementTick+0x168>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100de:	4915      	ldr	r1, [pc, #84]	@ (8010134 <xTaskIncrementTick+0x164>)
 80100e0:	4613      	mov	r3, r2
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	4413      	add	r3, r2
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	440b      	add	r3, r1
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d901      	bls.n	80100f4 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 80100f0:	2301      	movs	r3, #1
 80100f2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80100f4:	4b11      	ldr	r3, [pc, #68]	@ (801013c <xTaskIncrementTick+0x16c>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d007      	beq.n	801010c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 80100fc:	2301      	movs	r3, #1
 80100fe:	617b      	str	r3, [r7, #20]
 8010100:	e004      	b.n	801010c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8010102:	4b0f      	ldr	r3, [pc, #60]	@ (8010140 <xTaskIncrementTick+0x170>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	3301      	adds	r3, #1
 8010108:	4a0d      	ldr	r2, [pc, #52]	@ (8010140 <xTaskIncrementTick+0x170>)
 801010a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 801010c:	697b      	ldr	r3, [r7, #20]
}
 801010e:	4618      	mov	r0, r3
 8010110:	3718      	adds	r7, #24
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	20000444 	.word	0x20000444
 801011c:	20000420 	.word	0x20000420
 8010120:	200003d4 	.word	0x200003d4
 8010124:	200003d8 	.word	0x200003d8
 8010128:	20000434 	.word	0x20000434
 801012c:	2000043c 	.word	0x2000043c
 8010130:	20000424 	.word	0x20000424
 8010134:	20000348 	.word	0x20000348
 8010138:	20000344 	.word	0x20000344
 801013c:	20000430 	.word	0x20000430
 8010140:	2000042c 	.word	0x2000042c

08010144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010144:	b480      	push	{r7}
 8010146:	b087      	sub	sp, #28
 8010148:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801014a:	4b27      	ldr	r3, [pc, #156]	@ (80101e8 <vTaskSwitchContext+0xa4>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d003      	beq.n	801015a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8010152:	4b26      	ldr	r3, [pc, #152]	@ (80101ec <vTaskSwitchContext+0xa8>)
 8010154:	2201      	movs	r2, #1
 8010156:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8010158:	e040      	b.n	80101dc <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 801015a:	4b24      	ldr	r3, [pc, #144]	@ (80101ec <vTaskSwitchContext+0xa8>)
 801015c:	2200      	movs	r2, #0
 801015e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010160:	4b23      	ldr	r3, [pc, #140]	@ (80101f0 <vTaskSwitchContext+0xac>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	fab3 f383 	clz	r3, r3
 801016c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 801016e:	7afb      	ldrb	r3, [r7, #11]
 8010170:	f1c3 031f 	rsb	r3, r3, #31
 8010174:	617b      	str	r3, [r7, #20]
 8010176:	491f      	ldr	r1, [pc, #124]	@ (80101f4 <vTaskSwitchContext+0xb0>)
 8010178:	697a      	ldr	r2, [r7, #20]
 801017a:	4613      	mov	r3, r2
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	4413      	add	r3, r2
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	440b      	add	r3, r1
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d10b      	bne.n	80101a2 <vTaskSwitchContext+0x5e>
        __asm volatile
 801018a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801018e:	f383 8811 	msr	BASEPRI, r3
 8010192:	f3bf 8f6f 	isb	sy
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	607b      	str	r3, [r7, #4]
    }
 801019c:	bf00      	nop
 801019e:	bf00      	nop
 80101a0:	e7fd      	b.n	801019e <vTaskSwitchContext+0x5a>
 80101a2:	697a      	ldr	r2, [r7, #20]
 80101a4:	4613      	mov	r3, r2
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	4413      	add	r3, r2
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4a11      	ldr	r2, [pc, #68]	@ (80101f4 <vTaskSwitchContext+0xb0>)
 80101ae:	4413      	add	r3, r2
 80101b0:	613b      	str	r3, [r7, #16]
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	685a      	ldr	r2, [r3, #4]
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	605a      	str	r2, [r3, #4]
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	685a      	ldr	r2, [r3, #4]
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	3308      	adds	r3, #8
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d104      	bne.n	80101d2 <vTaskSwitchContext+0x8e>
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	685a      	ldr	r2, [r3, #4]
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	605a      	str	r2, [r3, #4]
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	68db      	ldr	r3, [r3, #12]
 80101d8:	4a07      	ldr	r2, [pc, #28]	@ (80101f8 <vTaskSwitchContext+0xb4>)
 80101da:	6013      	str	r3, [r2, #0]
}
 80101dc:	bf00      	nop
 80101de:	371c      	adds	r7, #28
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr
 80101e8:	20000444 	.word	0x20000444
 80101ec:	20000430 	.word	0x20000430
 80101f0:	20000424 	.word	0x20000424
 80101f4:	20000348 	.word	0x20000348
 80101f8:	20000344 	.word	0x20000344

080101fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d10b      	bne.n	8010224 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 801020c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010210:	f383 8811 	msr	BASEPRI, r3
 8010214:	f3bf 8f6f 	isb	sy
 8010218:	f3bf 8f4f 	dsb	sy
 801021c:	60fb      	str	r3, [r7, #12]
    }
 801021e:	bf00      	nop
 8010220:	bf00      	nop
 8010222:	e7fd      	b.n	8010220 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010224:	4b07      	ldr	r3, [pc, #28]	@ (8010244 <vTaskPlaceOnEventList+0x48>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	3318      	adds	r3, #24
 801022a:	4619      	mov	r1, r3
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f7fe fef6 	bl	800f01e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010232:	2101      	movs	r1, #1
 8010234:	6838      	ldr	r0, [r7, #0]
 8010236:	f000 fa6d 	bl	8010714 <prvAddCurrentTaskToDelayedList>
}
 801023a:	bf00      	nop
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	20000344 	.word	0x20000344

08010248 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8010248:	b580      	push	{r7, lr}
 801024a:	b086      	sub	sp, #24
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d10b      	bne.n	8010272 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 801025a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	617b      	str	r3, [r7, #20]
    }
 801026c:	bf00      	nop
 801026e:	bf00      	nop
 8010270:	e7fd      	b.n	801026e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010272:	4b0a      	ldr	r3, [pc, #40]	@ (801029c <vTaskPlaceOnEventListRestricted+0x54>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	3318      	adds	r3, #24
 8010278:	4619      	mov	r1, r3
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f7fe feab 	bl	800efd6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d002      	beq.n	801028c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8010286:	f04f 33ff 	mov.w	r3, #4294967295
 801028a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801028c:	6879      	ldr	r1, [r7, #4]
 801028e:	68b8      	ldr	r0, [r7, #8]
 8010290:	f000 fa40 	bl	8010714 <prvAddCurrentTaskToDelayedList>
    }
 8010294:	bf00      	nop
 8010296:	3718      	adds	r7, #24
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	20000344 	.word	0x20000344

080102a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d10b      	bne.n	80102ce <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80102b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	60fb      	str	r3, [r7, #12]
    }
 80102c8:	bf00      	nop
 80102ca:	bf00      	nop
 80102cc:	e7fd      	b.n	80102ca <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	3318      	adds	r3, #24
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe fedc 	bl	800f090 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102d8:	4b1d      	ldr	r3, [pc, #116]	@ (8010350 <xTaskRemoveFromEventList+0xb0>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d11c      	bne.n	801031a <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	3304      	adds	r3, #4
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fe fed3 	bl	800f090 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ee:	2201      	movs	r2, #1
 80102f0:	409a      	lsls	r2, r3
 80102f2:	4b18      	ldr	r3, [pc, #96]	@ (8010354 <xTaskRemoveFromEventList+0xb4>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4313      	orrs	r3, r2
 80102f8:	4a16      	ldr	r2, [pc, #88]	@ (8010354 <xTaskRemoveFromEventList+0xb4>)
 80102fa:	6013      	str	r3, [r2, #0]
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010300:	4613      	mov	r3, r2
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	4413      	add	r3, r2
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	4a13      	ldr	r2, [pc, #76]	@ (8010358 <xTaskRemoveFromEventList+0xb8>)
 801030a:	441a      	add	r2, r3
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	3304      	adds	r3, #4
 8010310:	4619      	mov	r1, r3
 8010312:	4610      	mov	r0, r2
 8010314:	f7fe fe5f 	bl	800efd6 <vListInsertEnd>
 8010318:	e005      	b.n	8010326 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	3318      	adds	r3, #24
 801031e:	4619      	mov	r1, r3
 8010320:	480e      	ldr	r0, [pc, #56]	@ (801035c <xTaskRemoveFromEventList+0xbc>)
 8010322:	f7fe fe58 	bl	800efd6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801032a:	4b0d      	ldr	r3, [pc, #52]	@ (8010360 <xTaskRemoveFromEventList+0xc0>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010330:	429a      	cmp	r2, r3
 8010332:	d905      	bls.n	8010340 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8010334:	2301      	movs	r3, #1
 8010336:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8010338:	4b0a      	ldr	r3, [pc, #40]	@ (8010364 <xTaskRemoveFromEventList+0xc4>)
 801033a:	2201      	movs	r2, #1
 801033c:	601a      	str	r2, [r3, #0]
 801033e:	e001      	b.n	8010344 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8010340:	2300      	movs	r3, #0
 8010342:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8010344:	697b      	ldr	r3, [r7, #20]
}
 8010346:	4618      	mov	r0, r3
 8010348:	3718      	adds	r7, #24
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	20000444 	.word	0x20000444
 8010354:	20000424 	.word	0x20000424
 8010358:	20000348 	.word	0x20000348
 801035c:	200003dc 	.word	0x200003dc
 8010360:	20000344 	.word	0x20000344
 8010364:	20000430 	.word	0x20000430

08010368 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010370:	4b06      	ldr	r3, [pc, #24]	@ (801038c <vTaskInternalSetTimeOutState+0x24>)
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8010378:	4b05      	ldr	r3, [pc, #20]	@ (8010390 <vTaskInternalSetTimeOutState+0x28>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	605a      	str	r2, [r3, #4]
}
 8010380:	bf00      	nop
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr
 801038c:	20000434 	.word	0x20000434
 8010390:	20000420 	.word	0x20000420

08010394 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b088      	sub	sp, #32
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d10b      	bne.n	80103bc <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80103a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103a8:	f383 8811 	msr	BASEPRI, r3
 80103ac:	f3bf 8f6f 	isb	sy
 80103b0:	f3bf 8f4f 	dsb	sy
 80103b4:	613b      	str	r3, [r7, #16]
    }
 80103b6:	bf00      	nop
 80103b8:	bf00      	nop
 80103ba:	e7fd      	b.n	80103b8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d10b      	bne.n	80103da <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80103c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103c6:	f383 8811 	msr	BASEPRI, r3
 80103ca:	f3bf 8f6f 	isb	sy
 80103ce:	f3bf 8f4f 	dsb	sy
 80103d2:	60fb      	str	r3, [r7, #12]
    }
 80103d4:	bf00      	nop
 80103d6:	bf00      	nop
 80103d8:	e7fd      	b.n	80103d6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80103da:	f000 fe4f 	bl	801107c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80103de:	4b1f      	ldr	r3, [pc, #124]	@ (801045c <xTaskCheckForTimeOut+0xc8>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	69ba      	ldr	r2, [r7, #24]
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103f6:	d102      	bne.n	80103fe <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80103f8:	2300      	movs	r3, #0
 80103fa:	61fb      	str	r3, [r7, #28]
 80103fc:	e026      	b.n	801044c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681a      	ldr	r2, [r3, #0]
 8010402:	4b17      	ldr	r3, [pc, #92]	@ (8010460 <xTaskCheckForTimeOut+0xcc>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	429a      	cmp	r2, r3
 8010408:	d00a      	beq.n	8010420 <xTaskCheckForTimeOut+0x8c>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	69ba      	ldr	r2, [r7, #24]
 8010410:	429a      	cmp	r2, r3
 8010412:	d305      	bcc.n	8010420 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8010414:	2301      	movs	r3, #1
 8010416:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	2200      	movs	r2, #0
 801041c:	601a      	str	r2, [r3, #0]
 801041e:	e015      	b.n	801044c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	697a      	ldr	r2, [r7, #20]
 8010426:	429a      	cmp	r2, r3
 8010428:	d20b      	bcs.n	8010442 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	681a      	ldr	r2, [r3, #0]
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	1ad2      	subs	r2, r2, r3
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7ff ff96 	bl	8010368 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 801043c:	2300      	movs	r3, #0
 801043e:	61fb      	str	r3, [r7, #28]
 8010440:	e004      	b.n	801044c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	2200      	movs	r2, #0
 8010446:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8010448:	2301      	movs	r3, #1
 801044a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 801044c:	f000 fe48 	bl	80110e0 <vPortExitCritical>

    return xReturn;
 8010450:	69fb      	ldr	r3, [r7, #28]
}
 8010452:	4618      	mov	r0, r3
 8010454:	3720      	adds	r7, #32
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	20000420 	.word	0x20000420
 8010460:	20000434 	.word	0x20000434

08010464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010464:	b480      	push	{r7}
 8010466:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8010468:	4b03      	ldr	r3, [pc, #12]	@ (8010478 <vTaskMissedYield+0x14>)
 801046a:	2201      	movs	r2, #1
 801046c:	601a      	str	r2, [r3, #0]
}
 801046e:	bf00      	nop
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr
 8010478:	20000430 	.word	0x20000430

0801047c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8010484:	f000 f852 	bl	801052c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010488:	4b06      	ldr	r3, [pc, #24]	@ (80104a4 <prvIdleTask+0x28>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2b01      	cmp	r3, #1
 801048e:	d9f9      	bls.n	8010484 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8010490:	4b05      	ldr	r3, [pc, #20]	@ (80104a8 <prvIdleTask+0x2c>)
 8010492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010496:	601a      	str	r2, [r3, #0]
 8010498:	f3bf 8f4f 	dsb	sy
 801049c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80104a0:	e7f0      	b.n	8010484 <prvIdleTask+0x8>
 80104a2:	bf00      	nop
 80104a4:	20000348 	.word	0x20000348
 80104a8:	e000ed04 	.word	0xe000ed04

080104ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80104b2:	2300      	movs	r3, #0
 80104b4:	607b      	str	r3, [r7, #4]
 80104b6:	e00c      	b.n	80104d2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80104b8:	687a      	ldr	r2, [r7, #4]
 80104ba:	4613      	mov	r3, r2
 80104bc:	009b      	lsls	r3, r3, #2
 80104be:	4413      	add	r3, r2
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	4a12      	ldr	r2, [pc, #72]	@ (801050c <prvInitialiseTaskLists+0x60>)
 80104c4:	4413      	add	r3, r2
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fe fd58 	bl	800ef7c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	3301      	adds	r3, #1
 80104d0:	607b      	str	r3, [r7, #4]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b04      	cmp	r3, #4
 80104d6:	d9ef      	bls.n	80104b8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80104d8:	480d      	ldr	r0, [pc, #52]	@ (8010510 <prvInitialiseTaskLists+0x64>)
 80104da:	f7fe fd4f 	bl	800ef7c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80104de:	480d      	ldr	r0, [pc, #52]	@ (8010514 <prvInitialiseTaskLists+0x68>)
 80104e0:	f7fe fd4c 	bl	800ef7c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80104e4:	480c      	ldr	r0, [pc, #48]	@ (8010518 <prvInitialiseTaskLists+0x6c>)
 80104e6:	f7fe fd49 	bl	800ef7c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80104ea:	480c      	ldr	r0, [pc, #48]	@ (801051c <prvInitialiseTaskLists+0x70>)
 80104ec:	f7fe fd46 	bl	800ef7c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80104f0:	480b      	ldr	r0, [pc, #44]	@ (8010520 <prvInitialiseTaskLists+0x74>)
 80104f2:	f7fe fd43 	bl	800ef7c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80104f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010524 <prvInitialiseTaskLists+0x78>)
 80104f8:	4a05      	ldr	r2, [pc, #20]	@ (8010510 <prvInitialiseTaskLists+0x64>)
 80104fa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80104fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010528 <prvInitialiseTaskLists+0x7c>)
 80104fe:	4a05      	ldr	r2, [pc, #20]	@ (8010514 <prvInitialiseTaskLists+0x68>)
 8010500:	601a      	str	r2, [r3, #0]
}
 8010502:	bf00      	nop
 8010504:	3708      	adds	r7, #8
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}
 801050a:	bf00      	nop
 801050c:	20000348 	.word	0x20000348
 8010510:	200003ac 	.word	0x200003ac
 8010514:	200003c0 	.word	0x200003c0
 8010518:	200003dc 	.word	0x200003dc
 801051c:	200003f0 	.word	0x200003f0
 8010520:	20000408 	.word	0x20000408
 8010524:	200003d4 	.word	0x200003d4
 8010528:	200003d8 	.word	0x200003d8

0801052c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010532:	e019      	b.n	8010568 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8010534:	f000 fda2 	bl	801107c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010538:	4b10      	ldr	r3, [pc, #64]	@ (801057c <prvCheckTasksWaitingTermination+0x50>)
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	68db      	ldr	r3, [r3, #12]
 801053e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	3304      	adds	r3, #4
 8010544:	4618      	mov	r0, r3
 8010546:	f7fe fda3 	bl	800f090 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 801054a:	4b0d      	ldr	r3, [pc, #52]	@ (8010580 <prvCheckTasksWaitingTermination+0x54>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	3b01      	subs	r3, #1
 8010550:	4a0b      	ldr	r2, [pc, #44]	@ (8010580 <prvCheckTasksWaitingTermination+0x54>)
 8010552:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8010554:	4b0b      	ldr	r3, [pc, #44]	@ (8010584 <prvCheckTasksWaitingTermination+0x58>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	3b01      	subs	r3, #1
 801055a:	4a0a      	ldr	r2, [pc, #40]	@ (8010584 <prvCheckTasksWaitingTermination+0x58>)
 801055c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 801055e:	f000 fdbf 	bl	80110e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 f810 	bl	8010588 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010568:	4b06      	ldr	r3, [pc, #24]	@ (8010584 <prvCheckTasksWaitingTermination+0x58>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d1e1      	bne.n	8010534 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8010570:	bf00      	nop
 8010572:	bf00      	nop
 8010574:	3708      	adds	r7, #8
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	200003f0 	.word	0x200003f0
 8010580:	2000041c 	.word	0x2000041c
 8010584:	20000404 	.word	0x20000404

08010588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010594:	4618      	mov	r0, r3
 8010596:	f000 ff7d 	bl	8011494 <vPortFree>
                vPortFree( pxTCB );
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 ff7a 	bl	8011494 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80105a0:	bf00      	nop
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80105a8:	b480      	push	{r7}
 80105aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105ac:	4b0a      	ldr	r3, [pc, #40]	@ (80105d8 <prvResetNextTaskUnblockTime+0x30>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d104      	bne.n	80105c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80105b6:	4b09      	ldr	r3, [pc, #36]	@ (80105dc <prvResetNextTaskUnblockTime+0x34>)
 80105b8:	f04f 32ff 	mov.w	r2, #4294967295
 80105bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80105be:	e005      	b.n	80105cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80105c0:	4b05      	ldr	r3, [pc, #20]	@ (80105d8 <prvResetNextTaskUnblockTime+0x30>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4a04      	ldr	r2, [pc, #16]	@ (80105dc <prvResetNextTaskUnblockTime+0x34>)
 80105ca:	6013      	str	r3, [r2, #0]
}
 80105cc:	bf00      	nop
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop
 80105d8:	200003d4 	.word	0x200003d4
 80105dc:	2000043c 	.word	0x2000043c

080105e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80105e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010614 <xTaskGetSchedulerState+0x34>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d102      	bne.n	80105f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80105ee:	2301      	movs	r3, #1
 80105f0:	607b      	str	r3, [r7, #4]
 80105f2:	e008      	b.n	8010606 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105f4:	4b08      	ldr	r3, [pc, #32]	@ (8010618 <xTaskGetSchedulerState+0x38>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d102      	bne.n	8010602 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80105fc:	2302      	movs	r3, #2
 80105fe:	607b      	str	r3, [r7, #4]
 8010600:	e001      	b.n	8010606 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8010602:	2300      	movs	r3, #0
 8010604:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8010606:	687b      	ldr	r3, [r7, #4]
    }
 8010608:	4618      	mov	r0, r3
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr
 8010614:	20000428 	.word	0x20000428
 8010618:	20000444 	.word	0x20000444

0801061c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 801061c:	b580      	push	{r7, lr}
 801061e:	b086      	sub	sp, #24
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8010628:	2300      	movs	r3, #0
 801062a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d065      	beq.n	80106fe <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8010632:	4b35      	ldr	r3, [pc, #212]	@ (8010708 <xTaskPriorityDisinherit+0xec>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	693a      	ldr	r2, [r7, #16]
 8010638:	429a      	cmp	r2, r3
 801063a:	d00b      	beq.n	8010654 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 801063c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010640:	f383 8811 	msr	BASEPRI, r3
 8010644:	f3bf 8f6f 	isb	sy
 8010648:	f3bf 8f4f 	dsb	sy
 801064c:	60fb      	str	r3, [r7, #12]
    }
 801064e:	bf00      	nop
 8010650:	bf00      	nop
 8010652:	e7fd      	b.n	8010650 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010658:	2b00      	cmp	r3, #0
 801065a:	d10b      	bne.n	8010674 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 801065c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010660:	f383 8811 	msr	BASEPRI, r3
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	60bb      	str	r3, [r7, #8]
    }
 801066e:	bf00      	nop
 8010670:	bf00      	nop
 8010672:	e7fd      	b.n	8010670 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010678:	1e5a      	subs	r2, r3, #1
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010686:	429a      	cmp	r2, r3
 8010688:	d039      	beq.n	80106fe <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801068e:	2b00      	cmp	r3, #0
 8010690:	d135      	bne.n	80106fe <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	3304      	adds	r3, #4
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fcfa 	bl	800f090 <uxListRemove>
 801069c:	4603      	mov	r3, r0
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d10a      	bne.n	80106b8 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106a6:	2201      	movs	r2, #1
 80106a8:	fa02 f303 	lsl.w	r3, r2, r3
 80106ac:	43da      	mvns	r2, r3
 80106ae:	4b17      	ldr	r3, [pc, #92]	@ (801070c <xTaskPriorityDisinherit+0xf0>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4013      	ands	r3, r2
 80106b4:	4a15      	ldr	r2, [pc, #84]	@ (801070c <xTaskPriorityDisinherit+0xf0>)
 80106b6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c4:	f1c3 0205 	rsb	r2, r3, #5
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106d0:	2201      	movs	r2, #1
 80106d2:	409a      	lsls	r2, r3
 80106d4:	4b0d      	ldr	r3, [pc, #52]	@ (801070c <xTaskPriorityDisinherit+0xf0>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4313      	orrs	r3, r2
 80106da:	4a0c      	ldr	r2, [pc, #48]	@ (801070c <xTaskPriorityDisinherit+0xf0>)
 80106dc:	6013      	str	r3, [r2, #0]
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106e2:	4613      	mov	r3, r2
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	4413      	add	r3, r2
 80106e8:	009b      	lsls	r3, r3, #2
 80106ea:	4a09      	ldr	r2, [pc, #36]	@ (8010710 <xTaskPriorityDisinherit+0xf4>)
 80106ec:	441a      	add	r2, r3
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	3304      	adds	r3, #4
 80106f2:	4619      	mov	r1, r3
 80106f4:	4610      	mov	r0, r2
 80106f6:	f7fe fc6e 	bl	800efd6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80106fa:	2301      	movs	r3, #1
 80106fc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80106fe:	697b      	ldr	r3, [r7, #20]
    }
 8010700:	4618      	mov	r0, r3
 8010702:	3718      	adds	r7, #24
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	20000344 	.word	0x20000344
 801070c:	20000424 	.word	0x20000424
 8010710:	20000348 	.word	0x20000348

08010714 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 801071e:	4b29      	ldr	r3, [pc, #164]	@ (80107c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010724:	4b28      	ldr	r3, [pc, #160]	@ (80107c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	3304      	adds	r3, #4
 801072a:	4618      	mov	r0, r3
 801072c:	f7fe fcb0 	bl	800f090 <uxListRemove>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d10b      	bne.n	801074e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010736:	4b24      	ldr	r3, [pc, #144]	@ (80107c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801073c:	2201      	movs	r2, #1
 801073e:	fa02 f303 	lsl.w	r3, r2, r3
 8010742:	43da      	mvns	r2, r3
 8010744:	4b21      	ldr	r3, [pc, #132]	@ (80107cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	4013      	ands	r3, r2
 801074a:	4a20      	ldr	r2, [pc, #128]	@ (80107cc <prvAddCurrentTaskToDelayedList+0xb8>)
 801074c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010754:	d10a      	bne.n	801076c <prvAddCurrentTaskToDelayedList+0x58>
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d007      	beq.n	801076c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801075c:	4b1a      	ldr	r3, [pc, #104]	@ (80107c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	3304      	adds	r3, #4
 8010762:	4619      	mov	r1, r3
 8010764:	481a      	ldr	r0, [pc, #104]	@ (80107d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010766:	f7fe fc36 	bl	800efd6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 801076a:	e026      	b.n	80107ba <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4413      	add	r3, r2
 8010772:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010774:	4b14      	ldr	r3, [pc, #80]	@ (80107c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 801077c:	68ba      	ldr	r2, [r7, #8]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	429a      	cmp	r2, r3
 8010782:	d209      	bcs.n	8010798 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010784:	4b13      	ldr	r3, [pc, #76]	@ (80107d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	4b0f      	ldr	r3, [pc, #60]	@ (80107c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	3304      	adds	r3, #4
 801078e:	4619      	mov	r1, r3
 8010790:	4610      	mov	r0, r2
 8010792:	f7fe fc44 	bl	800f01e <vListInsert>
}
 8010796:	e010      	b.n	80107ba <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010798:	4b0f      	ldr	r3, [pc, #60]	@ (80107d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	4b0a      	ldr	r3, [pc, #40]	@ (80107c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	3304      	adds	r3, #4
 80107a2:	4619      	mov	r1, r3
 80107a4:	4610      	mov	r0, r2
 80107a6:	f7fe fc3a 	bl	800f01e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80107aa:	4b0c      	ldr	r3, [pc, #48]	@ (80107dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	68ba      	ldr	r2, [r7, #8]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d202      	bcs.n	80107ba <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80107b4:	4a09      	ldr	r2, [pc, #36]	@ (80107dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	6013      	str	r3, [r2, #0]
}
 80107ba:	bf00      	nop
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	20000420 	.word	0x20000420
 80107c8:	20000344 	.word	0x20000344
 80107cc:	20000424 	.word	0x20000424
 80107d0:	20000408 	.word	0x20000408
 80107d4:	200003d8 	.word	0x200003d8
 80107d8:	200003d4 	.word	0x200003d4
 80107dc:	2000043c 	.word	0x2000043c

080107e0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80107e6:	2300      	movs	r3, #0
 80107e8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80107ea:	f000 fae1 	bl	8010db0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80107ee:	4b12      	ldr	r3, [pc, #72]	@ (8010838 <xTimerCreateTimerTask+0x58>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d00b      	beq.n	801080e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80107f6:	4b11      	ldr	r3, [pc, #68]	@ (801083c <xTimerCreateTimerTask+0x5c>)
 80107f8:	9301      	str	r3, [sp, #4]
 80107fa:	2302      	movs	r3, #2
 80107fc:	9300      	str	r3, [sp, #0]
 80107fe:	2300      	movs	r3, #0
 8010800:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8010804:	490e      	ldr	r1, [pc, #56]	@ (8010840 <xTimerCreateTimerTask+0x60>)
 8010806:	480f      	ldr	r0, [pc, #60]	@ (8010844 <xTimerCreateTimerTask+0x64>)
 8010808:	f7ff f98e 	bl	800fb28 <xTaskCreate>
 801080c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d10b      	bne.n	801082c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8010814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010818:	f383 8811 	msr	BASEPRI, r3
 801081c:	f3bf 8f6f 	isb	sy
 8010820:	f3bf 8f4f 	dsb	sy
 8010824:	603b      	str	r3, [r7, #0]
    }
 8010826:	bf00      	nop
 8010828:	bf00      	nop
 801082a:	e7fd      	b.n	8010828 <xTimerCreateTimerTask+0x48>
        return xReturn;
 801082c:	687b      	ldr	r3, [r7, #4]
    }
 801082e:	4618      	mov	r0, r3
 8010830:	3708      	adds	r7, #8
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	20000478 	.word	0x20000478
 801083c:	2000047c 	.word	0x2000047c
 8010840:	08013638 	.word	0x08013638
 8010844:	08010981 	.word	0x08010981

08010848 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8010848:	b580      	push	{r7, lr}
 801084a:	b08a      	sub	sp, #40	@ 0x28
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8010856:	2300      	movs	r3, #0
 8010858:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d10b      	bne.n	8010878 <xTimerGenericCommand+0x30>
        __asm volatile
 8010860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010864:	f383 8811 	msr	BASEPRI, r3
 8010868:	f3bf 8f6f 	isb	sy
 801086c:	f3bf 8f4f 	dsb	sy
 8010870:	623b      	str	r3, [r7, #32]
    }
 8010872:	bf00      	nop
 8010874:	bf00      	nop
 8010876:	e7fd      	b.n	8010874 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8010878:	4b19      	ldr	r3, [pc, #100]	@ (80108e0 <xTimerGenericCommand+0x98>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d02a      	beq.n	80108d6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	2b05      	cmp	r3, #5
 8010890:	dc18      	bgt.n	80108c4 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010892:	f7ff fea5 	bl	80105e0 <xTaskGetSchedulerState>
 8010896:	4603      	mov	r3, r0
 8010898:	2b02      	cmp	r3, #2
 801089a:	d109      	bne.n	80108b0 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801089c:	4b10      	ldr	r3, [pc, #64]	@ (80108e0 <xTimerGenericCommand+0x98>)
 801089e:	6818      	ldr	r0, [r3, #0]
 80108a0:	f107 0114 	add.w	r1, r7, #20
 80108a4:	2300      	movs	r3, #0
 80108a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108a8:	f7fe fd3e 	bl	800f328 <xQueueGenericSend>
 80108ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80108ae:	e012      	b.n	80108d6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80108b0:	4b0b      	ldr	r3, [pc, #44]	@ (80108e0 <xTimerGenericCommand+0x98>)
 80108b2:	6818      	ldr	r0, [r3, #0]
 80108b4:	f107 0114 	add.w	r1, r7, #20
 80108b8:	2300      	movs	r3, #0
 80108ba:	2200      	movs	r2, #0
 80108bc:	f7fe fd34 	bl	800f328 <xQueueGenericSend>
 80108c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80108c2:	e008      	b.n	80108d6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80108c4:	4b06      	ldr	r3, [pc, #24]	@ (80108e0 <xTimerGenericCommand+0x98>)
 80108c6:	6818      	ldr	r0, [r3, #0]
 80108c8:	f107 0114 	add.w	r1, r7, #20
 80108cc:	2300      	movs	r3, #0
 80108ce:	683a      	ldr	r2, [r7, #0]
 80108d0:	f7fe fe2c 	bl	800f52c <xQueueGenericSendFromISR>
 80108d4:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80108d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80108d8:	4618      	mov	r0, r3
 80108da:	3728      	adds	r7, #40	@ 0x28
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	20000478 	.word	0x20000478

080108e4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b088      	sub	sp, #32
 80108e8:	af02      	add	r7, sp, #8
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108ee:	4b23      	ldr	r3, [pc, #140]	@ (801097c <prvProcessExpiredTimer+0x98>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	68db      	ldr	r3, [r3, #12]
 80108f4:	68db      	ldr	r3, [r3, #12]
 80108f6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	3304      	adds	r3, #4
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fe fbc7 	bl	800f090 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010908:	f003 0304 	and.w	r3, r3, #4
 801090c:	2b00      	cmp	r3, #0
 801090e:	d023      	beq.n	8010958 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	699a      	ldr	r2, [r3, #24]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	18d1      	adds	r1, r2, r3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	683a      	ldr	r2, [r7, #0]
 801091c:	6978      	ldr	r0, [r7, #20]
 801091e:	f000 f8d5 	bl	8010acc <prvInsertTimerInActiveList>
 8010922:	4603      	mov	r3, r0
 8010924:	2b00      	cmp	r3, #0
 8010926:	d020      	beq.n	801096a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010928:	2300      	movs	r3, #0
 801092a:	9300      	str	r3, [sp, #0]
 801092c:	2300      	movs	r3, #0
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	2100      	movs	r1, #0
 8010932:	6978      	ldr	r0, [r7, #20]
 8010934:	f7ff ff88 	bl	8010848 <xTimerGenericCommand>
 8010938:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d114      	bne.n	801096a <prvProcessExpiredTimer+0x86>
        __asm volatile
 8010940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010944:	f383 8811 	msr	BASEPRI, r3
 8010948:	f3bf 8f6f 	isb	sy
 801094c:	f3bf 8f4f 	dsb	sy
 8010950:	60fb      	str	r3, [r7, #12]
    }
 8010952:	bf00      	nop
 8010954:	bf00      	nop
 8010956:	e7fd      	b.n	8010954 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801095e:	f023 0301 	bic.w	r3, r3, #1
 8010962:	b2da      	uxtb	r2, r3
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	6a1b      	ldr	r3, [r3, #32]
 801096e:	6978      	ldr	r0, [r7, #20]
 8010970:	4798      	blx	r3
    }
 8010972:	bf00      	nop
 8010974:	3718      	adds	r7, #24
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	20000470 	.word	0x20000470

08010980 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010988:	f107 0308 	add.w	r3, r7, #8
 801098c:	4618      	mov	r0, r3
 801098e:	f000 f859 	bl	8010a44 <prvGetNextExpireTime>
 8010992:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	4619      	mov	r1, r3
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	f000 f805 	bl	80109a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 801099e:	f000 f8d7 	bl	8010b50 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109a2:	bf00      	nop
 80109a4:	e7f0      	b.n	8010988 <prvTimerTask+0x8>
	...

080109a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80109b2:	f7ff fa51 	bl	800fe58 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80109b6:	f107 0308 	add.w	r3, r7, #8
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 f866 	bl	8010a8c <prvSampleTimeNow>
 80109c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d130      	bne.n	8010a2a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d10a      	bne.n	80109e4 <prvProcessTimerOrBlockTask+0x3c>
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d806      	bhi.n	80109e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80109d6:	f7ff fa4d 	bl	800fe74 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80109da:	68f9      	ldr	r1, [r7, #12]
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f7ff ff81 	bl	80108e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80109e2:	e024      	b.n	8010a2e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d008      	beq.n	80109fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80109ea:	4b13      	ldr	r3, [pc, #76]	@ (8010a38 <prvProcessTimerOrBlockTask+0x90>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <prvProcessTimerOrBlockTask+0x50>
 80109f4:	2301      	movs	r3, #1
 80109f6:	e000      	b.n	80109fa <prvProcessTimerOrBlockTask+0x52>
 80109f8:	2300      	movs	r3, #0
 80109fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80109fc:	4b0f      	ldr	r3, [pc, #60]	@ (8010a3c <prvProcessTimerOrBlockTask+0x94>)
 80109fe:	6818      	ldr	r0, [r3, #0]
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	1ad3      	subs	r3, r2, r3
 8010a06:	683a      	ldr	r2, [r7, #0]
 8010a08:	4619      	mov	r1, r3
 8010a0a:	f7ff f859 	bl	800fac0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8010a0e:	f7ff fa31 	bl	800fe74 <xTaskResumeAll>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10a      	bne.n	8010a2e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8010a18:	4b09      	ldr	r3, [pc, #36]	@ (8010a40 <prvProcessTimerOrBlockTask+0x98>)
 8010a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a1e:	601a      	str	r2, [r3, #0]
 8010a20:	f3bf 8f4f 	dsb	sy
 8010a24:	f3bf 8f6f 	isb	sy
    }
 8010a28:	e001      	b.n	8010a2e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8010a2a:	f7ff fa23 	bl	800fe74 <xTaskResumeAll>
    }
 8010a2e:	bf00      	nop
 8010a30:	3710      	adds	r7, #16
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	20000474 	.word	0x20000474
 8010a3c:	20000478 	.word	0x20000478
 8010a40:	e000ed04 	.word	0xe000ed04

08010a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8010a44:	b480      	push	{r7}
 8010a46:	b085      	sub	sp, #20
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8010a88 <prvGetNextExpireTime+0x44>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d101      	bne.n	8010a5a <prvGetNextExpireTime+0x16>
 8010a56:	2201      	movs	r2, #1
 8010a58:	e000      	b.n	8010a5c <prvGetNextExpireTime+0x18>
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d105      	bne.n	8010a74 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a68:	4b07      	ldr	r3, [pc, #28]	@ (8010a88 <prvGetNextExpireTime+0x44>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	60fb      	str	r3, [r7, #12]
 8010a72:	e001      	b.n	8010a78 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8010a74:	2300      	movs	r3, #0
 8010a76:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8010a78:	68fb      	ldr	r3, [r7, #12]
    }
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3714      	adds	r7, #20
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr
 8010a86:	bf00      	nop
 8010a88:	20000470 	.word	0x20000470

08010a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8010a94:	f7ff fa8c 	bl	800ffb0 <xTaskGetTickCount>
 8010a98:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8010a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8010ac8 <prvSampleTimeNow+0x3c>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	68fa      	ldr	r2, [r7, #12]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d205      	bcs.n	8010ab0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8010aa4:	f000 f91e 	bl	8010ce4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2201      	movs	r2, #1
 8010aac:	601a      	str	r2, [r3, #0]
 8010aae:	e002      	b.n	8010ab6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8010ab6:	4a04      	ldr	r2, [pc, #16]	@ (8010ac8 <prvSampleTimeNow+0x3c>)
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8010abc:	68fb      	ldr	r3, [r7, #12]
    }
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	20000480 	.word	0x20000480

08010acc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b086      	sub	sp, #24
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	60f8      	str	r0, [r7, #12]
 8010ad4:	60b9      	str	r1, [r7, #8]
 8010ad6:	607a      	str	r2, [r7, #4]
 8010ad8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8010ada:	2300      	movs	r3, #0
 8010adc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	68ba      	ldr	r2, [r7, #8]
 8010ae2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8010aea:	68ba      	ldr	r2, [r7, #8]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d812      	bhi.n	8010b18 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	1ad2      	subs	r2, r2, r3
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	699b      	ldr	r3, [r3, #24]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d302      	bcc.n	8010b06 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8010b00:	2301      	movs	r3, #1
 8010b02:	617b      	str	r3, [r7, #20]
 8010b04:	e01b      	b.n	8010b3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b06:	4b10      	ldr	r3, [pc, #64]	@ (8010b48 <prvInsertTimerInActiveList+0x7c>)
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	3304      	adds	r3, #4
 8010b0e:	4619      	mov	r1, r3
 8010b10:	4610      	mov	r0, r2
 8010b12:	f7fe fa84 	bl	800f01e <vListInsert>
 8010b16:	e012      	b.n	8010b3e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d206      	bcs.n	8010b2e <prvInsertTimerInActiveList+0x62>
 8010b20:	68ba      	ldr	r2, [r7, #8]
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d302      	bcc.n	8010b2e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	617b      	str	r3, [r7, #20]
 8010b2c:	e007      	b.n	8010b3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b2e:	4b07      	ldr	r3, [pc, #28]	@ (8010b4c <prvInsertTimerInActiveList+0x80>)
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	3304      	adds	r3, #4
 8010b36:	4619      	mov	r1, r3
 8010b38:	4610      	mov	r0, r2
 8010b3a:	f7fe fa70 	bl	800f01e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8010b3e:	697b      	ldr	r3, [r7, #20]
    }
 8010b40:	4618      	mov	r0, r3
 8010b42:	3718      	adds	r7, #24
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	20000474 	.word	0x20000474
 8010b4c:	20000470 	.word	0x20000470

08010b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b08c      	sub	sp, #48	@ 0x30
 8010b54:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b56:	e0b2      	b.n	8010cbe <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	f2c0 80af 	blt.w	8010cbe <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b66:	695b      	ldr	r3, [r3, #20]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d004      	beq.n	8010b76 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b6e:	3304      	adds	r3, #4
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7fe fa8d 	bl	800f090 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b76:	1d3b      	adds	r3, r7, #4
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff ff87 	bl	8010a8c <prvSampleTimeNow>
 8010b7e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	2b09      	cmp	r3, #9
 8010b84:	f200 8098 	bhi.w	8010cb8 <prvProcessReceivedCommands+0x168>
 8010b88:	a201      	add	r2, pc, #4	@ (adr r2, 8010b90 <prvProcessReceivedCommands+0x40>)
 8010b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b8e:	bf00      	nop
 8010b90:	08010bb9 	.word	0x08010bb9
 8010b94:	08010bb9 	.word	0x08010bb9
 8010b98:	08010bb9 	.word	0x08010bb9
 8010b9c:	08010c2f 	.word	0x08010c2f
 8010ba0:	08010c43 	.word	0x08010c43
 8010ba4:	08010c8f 	.word	0x08010c8f
 8010ba8:	08010bb9 	.word	0x08010bb9
 8010bac:	08010bb9 	.word	0x08010bb9
 8010bb0:	08010c2f 	.word	0x08010c2f
 8010bb4:	08010c43 	.word	0x08010c43
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010bbe:	f043 0301 	orr.w	r3, r3, #1
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bce:	699b      	ldr	r3, [r3, #24]
 8010bd0:	18d1      	adds	r1, r2, r3
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	6a3a      	ldr	r2, [r7, #32]
 8010bd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010bd8:	f7ff ff78 	bl	8010acc <prvInsertTimerInActiveList>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d06c      	beq.n	8010cbc <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be4:	6a1b      	ldr	r3, [r3, #32]
 8010be6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010be8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010bf0:	f003 0304 	and.w	r3, r3, #4
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d061      	beq.n	8010cbc <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bfc:	699b      	ldr	r3, [r3, #24]
 8010bfe:	441a      	add	r2, r3
 8010c00:	2300      	movs	r3, #0
 8010c02:	9300      	str	r3, [sp, #0]
 8010c04:	2300      	movs	r3, #0
 8010c06:	2100      	movs	r1, #0
 8010c08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010c0a:	f7ff fe1d 	bl	8010848 <xTimerGenericCommand>
 8010c0e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d152      	bne.n	8010cbc <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8010c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c1a:	f383 8811 	msr	BASEPRI, r3
 8010c1e:	f3bf 8f6f 	isb	sy
 8010c22:	f3bf 8f4f 	dsb	sy
 8010c26:	61bb      	str	r3, [r7, #24]
    }
 8010c28:	bf00      	nop
 8010c2a:	bf00      	nop
 8010c2c:	e7fd      	b.n	8010c2a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c34:	f023 0301 	bic.w	r3, r3, #1
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8010c40:	e03d      	b.n	8010cbe <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c48:	f043 0301 	orr.w	r3, r3, #1
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c58:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c5c:	699b      	ldr	r3, [r3, #24]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d10b      	bne.n	8010c7a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8010c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c66:	f383 8811 	msr	BASEPRI, r3
 8010c6a:	f3bf 8f6f 	isb	sy
 8010c6e:	f3bf 8f4f 	dsb	sy
 8010c72:	617b      	str	r3, [r7, #20]
    }
 8010c74:	bf00      	nop
 8010c76:	bf00      	nop
 8010c78:	e7fd      	b.n	8010c76 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7c:	699a      	ldr	r2, [r3, #24]
 8010c7e:	6a3b      	ldr	r3, [r7, #32]
 8010c80:	18d1      	adds	r1, r2, r3
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	6a3a      	ldr	r2, [r7, #32]
 8010c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010c88:	f7ff ff20 	bl	8010acc <prvInsertTimerInActiveList>
                        break;
 8010c8c:	e017      	b.n	8010cbe <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c94:	f003 0302 	and.w	r3, r3, #2
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d103      	bne.n	8010ca4 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8010c9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010c9e:	f000 fbf9 	bl	8011494 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8010ca2:	e00c      	b.n	8010cbe <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010caa:	f023 0301 	bic.w	r3, r3, #1
 8010cae:	b2da      	uxtb	r2, r3
 8010cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8010cb6:	e002      	b.n	8010cbe <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8010cb8:	bf00      	nop
 8010cba:	e000      	b.n	8010cbe <prvProcessReceivedCommands+0x16e>
                        break;
 8010cbc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010cbe:	4b08      	ldr	r3, [pc, #32]	@ (8010ce0 <prvProcessReceivedCommands+0x190>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f107 0108 	add.w	r1, r7, #8
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fe fcdd 	bl	800f688 <xQueueReceive>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f47f af41 	bne.w	8010b58 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8010cd6:	bf00      	nop
 8010cd8:	bf00      	nop
 8010cda:	3728      	adds	r7, #40	@ 0x28
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	20000478 	.word	0x20000478

08010ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b088      	sub	sp, #32
 8010ce8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010cea:	e049      	b.n	8010d80 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010cec:	4b2e      	ldr	r3, [pc, #184]	@ (8010da8 <prvSwitchTimerLists+0xc4>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8010da8 <prvSwitchTimerLists+0xc4>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	68db      	ldr	r3, [r3, #12]
 8010cfe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	3304      	adds	r3, #4
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fe f9c3 	bl	800f090 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6a1b      	ldr	r3, [r3, #32]
 8010d0e:	68f8      	ldr	r0, [r7, #12]
 8010d10:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010d18:	f003 0304 	and.w	r3, r3, #4
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d02f      	beq.n	8010d80 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	699b      	ldr	r3, [r3, #24]
 8010d24:	693a      	ldr	r2, [r7, #16]
 8010d26:	4413      	add	r3, r2
 8010d28:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8010d2a:	68ba      	ldr	r2, [r7, #8]
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d90e      	bls.n	8010d50 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	68ba      	ldr	r2, [r7, #8]
 8010d36:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	68fa      	ldr	r2, [r7, #12]
 8010d3c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8010da8 <prvSwitchTimerLists+0xc4>)
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3304      	adds	r3, #4
 8010d46:	4619      	mov	r1, r3
 8010d48:	4610      	mov	r0, r2
 8010d4a:	f7fe f968 	bl	800f01e <vListInsert>
 8010d4e:	e017      	b.n	8010d80 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010d50:	2300      	movs	r3, #0
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	2300      	movs	r3, #0
 8010d56:	693a      	ldr	r2, [r7, #16]
 8010d58:	2100      	movs	r1, #0
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f7ff fd74 	bl	8010848 <xTimerGenericCommand>
 8010d60:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d10b      	bne.n	8010d80 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8010d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d6c:	f383 8811 	msr	BASEPRI, r3
 8010d70:	f3bf 8f6f 	isb	sy
 8010d74:	f3bf 8f4f 	dsb	sy
 8010d78:	603b      	str	r3, [r7, #0]
    }
 8010d7a:	bf00      	nop
 8010d7c:	bf00      	nop
 8010d7e:	e7fd      	b.n	8010d7c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d80:	4b09      	ldr	r3, [pc, #36]	@ (8010da8 <prvSwitchTimerLists+0xc4>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d1b0      	bne.n	8010cec <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8010d8a:	4b07      	ldr	r3, [pc, #28]	@ (8010da8 <prvSwitchTimerLists+0xc4>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8010d90:	4b06      	ldr	r3, [pc, #24]	@ (8010dac <prvSwitchTimerLists+0xc8>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4a04      	ldr	r2, [pc, #16]	@ (8010da8 <prvSwitchTimerLists+0xc4>)
 8010d96:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8010d98:	4a04      	ldr	r2, [pc, #16]	@ (8010dac <prvSwitchTimerLists+0xc8>)
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	6013      	str	r3, [r2, #0]
    }
 8010d9e:	bf00      	nop
 8010da0:	3718      	adds	r7, #24
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	20000470 	.word	0x20000470
 8010dac:	20000474 	.word	0x20000474

08010db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8010db0:	b580      	push	{r7, lr}
 8010db2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8010db4:	f000 f962 	bl	801107c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8010db8:	4b12      	ldr	r3, [pc, #72]	@ (8010e04 <prvCheckForValidListAndQueue+0x54>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d11d      	bne.n	8010dfc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8010dc0:	4811      	ldr	r0, [pc, #68]	@ (8010e08 <prvCheckForValidListAndQueue+0x58>)
 8010dc2:	f7fe f8db 	bl	800ef7c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8010dc6:	4811      	ldr	r0, [pc, #68]	@ (8010e0c <prvCheckForValidListAndQueue+0x5c>)
 8010dc8:	f7fe f8d8 	bl	800ef7c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8010dcc:	4b10      	ldr	r3, [pc, #64]	@ (8010e10 <prvCheckForValidListAndQueue+0x60>)
 8010dce:	4a0e      	ldr	r2, [pc, #56]	@ (8010e08 <prvCheckForValidListAndQueue+0x58>)
 8010dd0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8010dd2:	4b10      	ldr	r3, [pc, #64]	@ (8010e14 <prvCheckForValidListAndQueue+0x64>)
 8010dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8010e0c <prvCheckForValidListAndQueue+0x5c>)
 8010dd6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010dd8:	2200      	movs	r2, #0
 8010dda:	210c      	movs	r1, #12
 8010ddc:	200a      	movs	r0, #10
 8010dde:	f7fe f9eb 	bl	800f1b8 <xQueueGenericCreate>
 8010de2:	4603      	mov	r3, r0
 8010de4:	4a07      	ldr	r2, [pc, #28]	@ (8010e04 <prvCheckForValidListAndQueue+0x54>)
 8010de6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8010de8:	4b06      	ldr	r3, [pc, #24]	@ (8010e04 <prvCheckForValidListAndQueue+0x54>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d005      	beq.n	8010dfc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010df0:	4b04      	ldr	r3, [pc, #16]	@ (8010e04 <prvCheckForValidListAndQueue+0x54>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	4908      	ldr	r1, [pc, #32]	@ (8010e18 <prvCheckForValidListAndQueue+0x68>)
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7fe fe38 	bl	800fa6c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8010dfc:	f000 f970 	bl	80110e0 <vPortExitCritical>
    }
 8010e00:	bf00      	nop
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	20000478 	.word	0x20000478
 8010e08:	20000448 	.word	0x20000448
 8010e0c:	2000045c 	.word	0x2000045c
 8010e10:	20000470 	.word	0x20000470
 8010e14:	20000474 	.word	0x20000474
 8010e18:	08013640 	.word	0x08013640

08010e1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	3b04      	subs	r3, #4
 8010e2c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010e34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	3b04      	subs	r3, #4
 8010e3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	f023 0201 	bic.w	r2, r3, #1
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	3b04      	subs	r3, #4
 8010e4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8010e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8010e80 <pxPortInitialiseStack+0x64>)
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	3b14      	subs	r3, #20
 8010e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	3b04      	subs	r3, #4
 8010e62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f06f 0202 	mvn.w	r2, #2
 8010e6a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	3b20      	subs	r3, #32
 8010e70:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8010e72:	68fb      	ldr	r3, [r7, #12]
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3714      	adds	r7, #20
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr
 8010e80:	08010e85 	.word	0x08010e85

08010e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010e84:	b480      	push	{r7}
 8010e86:	b085      	sub	sp, #20
 8010e88:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8010e8e:	4b13      	ldr	r3, [pc, #76]	@ (8010edc <prvTaskExitError+0x58>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e96:	d00b      	beq.n	8010eb0 <prvTaskExitError+0x2c>
        __asm volatile
 8010e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e9c:	f383 8811 	msr	BASEPRI, r3
 8010ea0:	f3bf 8f6f 	isb	sy
 8010ea4:	f3bf 8f4f 	dsb	sy
 8010ea8:	60fb      	str	r3, [r7, #12]
    }
 8010eaa:	bf00      	nop
 8010eac:	bf00      	nop
 8010eae:	e7fd      	b.n	8010eac <prvTaskExitError+0x28>
        __asm volatile
 8010eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eb4:	f383 8811 	msr	BASEPRI, r3
 8010eb8:	f3bf 8f6f 	isb	sy
 8010ebc:	f3bf 8f4f 	dsb	sy
 8010ec0:	60bb      	str	r3, [r7, #8]
    }
 8010ec2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8010ec4:	bf00      	nop
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d0fc      	beq.n	8010ec6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8010ecc:	bf00      	nop
 8010ece:	bf00      	nop
 8010ed0:	3714      	adds	r7, #20
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr
 8010eda:	bf00      	nop
 8010edc:	20000020 	.word	0x20000020

08010ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8010ee0:	4b07      	ldr	r3, [pc, #28]	@ (8010f00 <pxCurrentTCBConst2>)
 8010ee2:	6819      	ldr	r1, [r3, #0]
 8010ee4:	6808      	ldr	r0, [r1, #0]
 8010ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eea:	f380 8809 	msr	PSP, r0
 8010eee:	f3bf 8f6f 	isb	sy
 8010ef2:	f04f 0000 	mov.w	r0, #0
 8010ef6:	f380 8811 	msr	BASEPRI, r0
 8010efa:	4770      	bx	lr
 8010efc:	f3af 8000 	nop.w

08010f00 <pxCurrentTCBConst2>:
 8010f00:	20000344 	.word	0x20000344
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8010f04:	bf00      	nop
 8010f06:	bf00      	nop

08010f08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8010f08:	4808      	ldr	r0, [pc, #32]	@ (8010f2c <prvPortStartFirstTask+0x24>)
 8010f0a:	6800      	ldr	r0, [r0, #0]
 8010f0c:	6800      	ldr	r0, [r0, #0]
 8010f0e:	f380 8808 	msr	MSP, r0
 8010f12:	f04f 0000 	mov.w	r0, #0
 8010f16:	f380 8814 	msr	CONTROL, r0
 8010f1a:	b662      	cpsie	i
 8010f1c:	b661      	cpsie	f
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	f3bf 8f6f 	isb	sy
 8010f26:	df00      	svc	0
 8010f28:	bf00      	nop
 8010f2a:	0000      	.short	0x0000
 8010f2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8010f30:	bf00      	nop
 8010f32:	bf00      	nop

08010f34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b086      	sub	sp, #24
 8010f38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010f3a:	4b47      	ldr	r3, [pc, #284]	@ (8011058 <xPortStartScheduler+0x124>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	4a47      	ldr	r2, [pc, #284]	@ (801105c <xPortStartScheduler+0x128>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d10b      	bne.n	8010f5c <xPortStartScheduler+0x28>
        __asm volatile
 8010f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f48:	f383 8811 	msr	BASEPRI, r3
 8010f4c:	f3bf 8f6f 	isb	sy
 8010f50:	f3bf 8f4f 	dsb	sy
 8010f54:	60fb      	str	r3, [r7, #12]
    }
 8010f56:	bf00      	nop
 8010f58:	bf00      	nop
 8010f5a:	e7fd      	b.n	8010f58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8011058 <xPortStartScheduler+0x124>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	4a3f      	ldr	r2, [pc, #252]	@ (8011060 <xPortStartScheduler+0x12c>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d10b      	bne.n	8010f7e <xPortStartScheduler+0x4a>
        __asm volatile
 8010f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f6a:	f383 8811 	msr	BASEPRI, r3
 8010f6e:	f3bf 8f6f 	isb	sy
 8010f72:	f3bf 8f4f 	dsb	sy
 8010f76:	613b      	str	r3, [r7, #16]
    }
 8010f78:	bf00      	nop
 8010f7a:	bf00      	nop
 8010f7c:	e7fd      	b.n	8010f7a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010f7e:	4b39      	ldr	r3, [pc, #228]	@ (8011064 <xPortStartScheduler+0x130>)
 8010f80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	22ff      	movs	r2, #255	@ 0xff
 8010f8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010f98:	78fb      	ldrb	r3, [r7, #3]
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010fa0:	b2da      	uxtb	r2, r3
 8010fa2:	4b31      	ldr	r3, [pc, #196]	@ (8011068 <xPortStartScheduler+0x134>)
 8010fa4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010fa6:	4b31      	ldr	r3, [pc, #196]	@ (801106c <xPortStartScheduler+0x138>)
 8010fa8:	2207      	movs	r2, #7
 8010faa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010fac:	e009      	b.n	8010fc2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8010fae:	4b2f      	ldr	r3, [pc, #188]	@ (801106c <xPortStartScheduler+0x138>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	3b01      	subs	r3, #1
 8010fb4:	4a2d      	ldr	r2, [pc, #180]	@ (801106c <xPortStartScheduler+0x138>)
 8010fb6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010fb8:	78fb      	ldrb	r3, [r7, #3]
 8010fba:	b2db      	uxtb	r3, r3
 8010fbc:	005b      	lsls	r3, r3, #1
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010fc2:	78fb      	ldrb	r3, [r7, #3]
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010fca:	2b80      	cmp	r3, #128	@ 0x80
 8010fcc:	d0ef      	beq.n	8010fae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010fce:	4b27      	ldr	r3, [pc, #156]	@ (801106c <xPortStartScheduler+0x138>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f1c3 0307 	rsb	r3, r3, #7
 8010fd6:	2b04      	cmp	r3, #4
 8010fd8:	d00b      	beq.n	8010ff2 <xPortStartScheduler+0xbe>
        __asm volatile
 8010fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fde:	f383 8811 	msr	BASEPRI, r3
 8010fe2:	f3bf 8f6f 	isb	sy
 8010fe6:	f3bf 8f4f 	dsb	sy
 8010fea:	60bb      	str	r3, [r7, #8]
    }
 8010fec:	bf00      	nop
 8010fee:	bf00      	nop
 8010ff0:	e7fd      	b.n	8010fee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010ff2:	4b1e      	ldr	r3, [pc, #120]	@ (801106c <xPortStartScheduler+0x138>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	021b      	lsls	r3, r3, #8
 8010ff8:	4a1c      	ldr	r2, [pc, #112]	@ (801106c <xPortStartScheduler+0x138>)
 8010ffa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ffc:	4b1b      	ldr	r3, [pc, #108]	@ (801106c <xPortStartScheduler+0x138>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011004:	4a19      	ldr	r2, [pc, #100]	@ (801106c <xPortStartScheduler+0x138>)
 8011006:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	b2da      	uxtb	r2, r3
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8011010:	4b17      	ldr	r3, [pc, #92]	@ (8011070 <xPortStartScheduler+0x13c>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4a16      	ldr	r2, [pc, #88]	@ (8011070 <xPortStartScheduler+0x13c>)
 8011016:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801101a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 801101c:	4b14      	ldr	r3, [pc, #80]	@ (8011070 <xPortStartScheduler+0x13c>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4a13      	ldr	r2, [pc, #76]	@ (8011070 <xPortStartScheduler+0x13c>)
 8011022:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011026:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8011028:	f000 f8e0 	bl	80111ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 801102c:	4b11      	ldr	r3, [pc, #68]	@ (8011074 <xPortStartScheduler+0x140>)
 801102e:	2200      	movs	r2, #0
 8011030:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8011032:	f000 f8ff 	bl	8011234 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011036:	4b10      	ldr	r3, [pc, #64]	@ (8011078 <xPortStartScheduler+0x144>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	4a0f      	ldr	r2, [pc, #60]	@ (8011078 <xPortStartScheduler+0x144>)
 801103c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011040:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8011042:	f7ff ff61 	bl	8010f08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8011046:	f7ff f87d 	bl	8010144 <vTaskSwitchContext>
    prvTaskExitError();
 801104a:	f7ff ff1b 	bl	8010e84 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3718      	adds	r7, #24
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	e000ed00 	.word	0xe000ed00
 801105c:	410fc271 	.word	0x410fc271
 8011060:	410fc270 	.word	0x410fc270
 8011064:	e000e400 	.word	0xe000e400
 8011068:	20000484 	.word	0x20000484
 801106c:	20000488 	.word	0x20000488
 8011070:	e000ed20 	.word	0xe000ed20
 8011074:	20000020 	.word	0x20000020
 8011078:	e000ef34 	.word	0xe000ef34

0801107c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
        __asm volatile
 8011082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011086:	f383 8811 	msr	BASEPRI, r3
 801108a:	f3bf 8f6f 	isb	sy
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	607b      	str	r3, [r7, #4]
    }
 8011094:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8011096:	4b10      	ldr	r3, [pc, #64]	@ (80110d8 <vPortEnterCritical+0x5c>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	3301      	adds	r3, #1
 801109c:	4a0e      	ldr	r2, [pc, #56]	@ (80110d8 <vPortEnterCritical+0x5c>)
 801109e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80110a0:	4b0d      	ldr	r3, [pc, #52]	@ (80110d8 <vPortEnterCritical+0x5c>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d110      	bne.n	80110ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80110a8:	4b0c      	ldr	r3, [pc, #48]	@ (80110dc <vPortEnterCritical+0x60>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d00b      	beq.n	80110ca <vPortEnterCritical+0x4e>
        __asm volatile
 80110b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110b6:	f383 8811 	msr	BASEPRI, r3
 80110ba:	f3bf 8f6f 	isb	sy
 80110be:	f3bf 8f4f 	dsb	sy
 80110c2:	603b      	str	r3, [r7, #0]
    }
 80110c4:	bf00      	nop
 80110c6:	bf00      	nop
 80110c8:	e7fd      	b.n	80110c6 <vPortEnterCritical+0x4a>
    }
}
 80110ca:	bf00      	nop
 80110cc:	370c      	adds	r7, #12
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr
 80110d6:	bf00      	nop
 80110d8:	20000020 	.word	0x20000020
 80110dc:	e000ed04 	.word	0xe000ed04

080110e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80110e6:	4b12      	ldr	r3, [pc, #72]	@ (8011130 <vPortExitCritical+0x50>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d10b      	bne.n	8011106 <vPortExitCritical+0x26>
        __asm volatile
 80110ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110f2:	f383 8811 	msr	BASEPRI, r3
 80110f6:	f3bf 8f6f 	isb	sy
 80110fa:	f3bf 8f4f 	dsb	sy
 80110fe:	607b      	str	r3, [r7, #4]
    }
 8011100:	bf00      	nop
 8011102:	bf00      	nop
 8011104:	e7fd      	b.n	8011102 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8011106:	4b0a      	ldr	r3, [pc, #40]	@ (8011130 <vPortExitCritical+0x50>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	3b01      	subs	r3, #1
 801110c:	4a08      	ldr	r2, [pc, #32]	@ (8011130 <vPortExitCritical+0x50>)
 801110e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8011110:	4b07      	ldr	r3, [pc, #28]	@ (8011130 <vPortExitCritical+0x50>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d105      	bne.n	8011124 <vPortExitCritical+0x44>
 8011118:	2300      	movs	r3, #0
 801111a:	603b      	str	r3, [r7, #0]
        __asm volatile
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	f383 8811 	msr	BASEPRI, r3
    }
 8011122:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8011124:	bf00      	nop
 8011126:	370c      	adds	r7, #12
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr
 8011130:	20000020 	.word	0x20000020
	...

08011140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8011140:	f3ef 8009 	mrs	r0, PSP
 8011144:	f3bf 8f6f 	isb	sy
 8011148:	4b15      	ldr	r3, [pc, #84]	@ (80111a0 <pxCurrentTCBConst>)
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	f01e 0f10 	tst.w	lr, #16
 8011150:	bf08      	it	eq
 8011152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801115a:	6010      	str	r0, [r2, #0]
 801115c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011160:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011164:	f380 8811 	msr	BASEPRI, r0
 8011168:	f3bf 8f4f 	dsb	sy
 801116c:	f3bf 8f6f 	isb	sy
 8011170:	f7fe ffe8 	bl	8010144 <vTaskSwitchContext>
 8011174:	f04f 0000 	mov.w	r0, #0
 8011178:	f380 8811 	msr	BASEPRI, r0
 801117c:	bc09      	pop	{r0, r3}
 801117e:	6819      	ldr	r1, [r3, #0]
 8011180:	6808      	ldr	r0, [r1, #0]
 8011182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011186:	f01e 0f10 	tst.w	lr, #16
 801118a:	bf08      	it	eq
 801118c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011190:	f380 8809 	msr	PSP, r0
 8011194:	f3bf 8f6f 	isb	sy
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	f3af 8000 	nop.w

080111a0 <pxCurrentTCBConst>:
 80111a0:	20000344 	.word	0x20000344
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80111a4:	bf00      	nop
 80111a6:	bf00      	nop

080111a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
        __asm volatile
 80111ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111b2:	f383 8811 	msr	BASEPRI, r3
 80111b6:	f3bf 8f6f 	isb	sy
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	607b      	str	r3, [r7, #4]
    }
 80111c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80111c2:	f7fe ff05 	bl	800ffd0 <xTaskIncrementTick>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d003      	beq.n	80111d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80111cc:	4b06      	ldr	r3, [pc, #24]	@ (80111e8 <SysTick_Handler+0x40>)
 80111ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111d2:	601a      	str	r2, [r3, #0]
 80111d4:	2300      	movs	r3, #0
 80111d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	f383 8811 	msr	BASEPRI, r3
    }
 80111de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80111e0:	bf00      	nop
 80111e2:	3708      	adds	r7, #8
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	e000ed04 	.word	0xe000ed04

080111ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80111ec:	b480      	push	{r7}
 80111ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80111f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011220 <vPortSetupTimerInterrupt+0x34>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80111f6:	4b0b      	ldr	r3, [pc, #44]	@ (8011224 <vPortSetupTimerInterrupt+0x38>)
 80111f8:	2200      	movs	r2, #0
 80111fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80111fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011228 <vPortSetupTimerInterrupt+0x3c>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	4a0a      	ldr	r2, [pc, #40]	@ (801122c <vPortSetupTimerInterrupt+0x40>)
 8011202:	fba2 2303 	umull	r2, r3, r2, r3
 8011206:	099b      	lsrs	r3, r3, #6
 8011208:	4a09      	ldr	r2, [pc, #36]	@ (8011230 <vPortSetupTimerInterrupt+0x44>)
 801120a:	3b01      	subs	r3, #1
 801120c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801120e:	4b04      	ldr	r3, [pc, #16]	@ (8011220 <vPortSetupTimerInterrupt+0x34>)
 8011210:	2207      	movs	r2, #7
 8011212:	601a      	str	r2, [r3, #0]
}
 8011214:	bf00      	nop
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop
 8011220:	e000e010 	.word	0xe000e010
 8011224:	e000e018 	.word	0xe000e018
 8011228:	20000014 	.word	0x20000014
 801122c:	10624dd3 	.word	0x10624dd3
 8011230:	e000e014 	.word	0xe000e014

08011234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8011234:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011244 <vPortEnableVFP+0x10>
 8011238:	6801      	ldr	r1, [r0, #0]
 801123a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801123e:	6001      	str	r1, [r0, #0]
 8011240:	4770      	bx	lr
 8011242:	0000      	.short	0x0000
 8011244:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8011248:	bf00      	nop
 801124a:	bf00      	nop

0801124c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 801124c:	b480      	push	{r7}
 801124e:	b085      	sub	sp, #20
 8011250:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8011252:	f3ef 8305 	mrs	r3, IPSR
 8011256:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2b0f      	cmp	r3, #15
 801125c:	d915      	bls.n	801128a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801125e:	4a18      	ldr	r2, [pc, #96]	@ (80112c0 <vPortValidateInterruptPriority+0x74>)
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	4413      	add	r3, r2
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011268:	4b16      	ldr	r3, [pc, #88]	@ (80112c4 <vPortValidateInterruptPriority+0x78>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	7afa      	ldrb	r2, [r7, #11]
 801126e:	429a      	cmp	r2, r3
 8011270:	d20b      	bcs.n	801128a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8011272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011276:	f383 8811 	msr	BASEPRI, r3
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	f3bf 8f4f 	dsb	sy
 8011282:	607b      	str	r3, [r7, #4]
    }
 8011284:	bf00      	nop
 8011286:	bf00      	nop
 8011288:	e7fd      	b.n	8011286 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801128a:	4b0f      	ldr	r3, [pc, #60]	@ (80112c8 <vPortValidateInterruptPriority+0x7c>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011292:	4b0e      	ldr	r3, [pc, #56]	@ (80112cc <vPortValidateInterruptPriority+0x80>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	429a      	cmp	r2, r3
 8011298:	d90b      	bls.n	80112b2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 801129a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	603b      	str	r3, [r7, #0]
    }
 80112ac:	bf00      	nop
 80112ae:	bf00      	nop
 80112b0:	e7fd      	b.n	80112ae <vPortValidateInterruptPriority+0x62>
    }
 80112b2:	bf00      	nop
 80112b4:	3714      	adds	r7, #20
 80112b6:	46bd      	mov	sp, r7
 80112b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112bc:	4770      	bx	lr
 80112be:	bf00      	nop
 80112c0:	e000e3f0 	.word	0xe000e3f0
 80112c4:	20000484 	.word	0x20000484
 80112c8:	e000ed0c 	.word	0xe000ed0c
 80112cc:	20000488 	.word	0x20000488

080112d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b08a      	sub	sp, #40	@ 0x28
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80112d8:	2300      	movs	r3, #0
 80112da:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80112dc:	f7fe fdbc 	bl	800fe58 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80112e0:	4b66      	ldr	r3, [pc, #408]	@ (801147c <pvPortMalloc+0x1ac>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d101      	bne.n	80112ec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80112e8:	f000 f938 	bl	801155c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80112ec:	4b64      	ldr	r3, [pc, #400]	@ (8011480 <pvPortMalloc+0x1b0>)
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	4013      	ands	r3, r2
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f040 80a9 	bne.w	801144c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d02e      	beq.n	801135e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8011300:	2208      	movs	r2, #8
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	429a      	cmp	r2, r3
 801130a:	d228      	bcs.n	801135e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 801130c:	2208      	movs	r2, #8
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4413      	add	r3, r2
 8011312:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f003 0307 	and.w	r3, r3, #7
 801131a:	2b00      	cmp	r3, #0
 801131c:	d022      	beq.n	8011364 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f023 0307 	bic.w	r3, r3, #7
 8011324:	3308      	adds	r3, #8
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	429a      	cmp	r2, r3
 801132a:	d215      	bcs.n	8011358 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f023 0307 	bic.w	r3, r3, #7
 8011332:	3308      	adds	r3, #8
 8011334:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f003 0307 	and.w	r3, r3, #7
 801133c:	2b00      	cmp	r3, #0
 801133e:	d011      	beq.n	8011364 <pvPortMalloc+0x94>
        __asm volatile
 8011340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011344:	f383 8811 	msr	BASEPRI, r3
 8011348:	f3bf 8f6f 	isb	sy
 801134c:	f3bf 8f4f 	dsb	sy
 8011350:	617b      	str	r3, [r7, #20]
    }
 8011352:	bf00      	nop
 8011354:	bf00      	nop
 8011356:	e7fd      	b.n	8011354 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8011358:	2300      	movs	r3, #0
 801135a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801135c:	e002      	b.n	8011364 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 801135e:	2300      	movs	r3, #0
 8011360:	607b      	str	r3, [r7, #4]
 8011362:	e000      	b.n	8011366 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011364:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d06f      	beq.n	801144c <pvPortMalloc+0x17c>
 801136c:	4b45      	ldr	r3, [pc, #276]	@ (8011484 <pvPortMalloc+0x1b4>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	429a      	cmp	r2, r3
 8011374:	d86a      	bhi.n	801144c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8011376:	4b44      	ldr	r3, [pc, #272]	@ (8011488 <pvPortMalloc+0x1b8>)
 8011378:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 801137a:	4b43      	ldr	r3, [pc, #268]	@ (8011488 <pvPortMalloc+0x1b8>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011380:	e004      	b.n	801138c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8011382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011384:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8011386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	429a      	cmp	r2, r3
 8011394:	d903      	bls.n	801139e <pvPortMalloc+0xce>
 8011396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d1f1      	bne.n	8011382 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 801139e:	4b37      	ldr	r3, [pc, #220]	@ (801147c <pvPortMalloc+0x1ac>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d051      	beq.n	801144c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80113a8:	6a3b      	ldr	r3, [r7, #32]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2208      	movs	r2, #8
 80113ae:	4413      	add	r3, r2
 80113b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80113b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113b4:	681a      	ldr	r2, [r3, #0]
 80113b6:	6a3b      	ldr	r3, [r7, #32]
 80113b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80113ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113bc:	685a      	ldr	r2, [r3, #4]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	1ad2      	subs	r2, r2, r3
 80113c2:	2308      	movs	r3, #8
 80113c4:	005b      	lsls	r3, r3, #1
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d920      	bls.n	801140c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80113ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	4413      	add	r3, r2
 80113d0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	f003 0307 	and.w	r3, r3, #7
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00b      	beq.n	80113f4 <pvPortMalloc+0x124>
        __asm volatile
 80113dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113e0:	f383 8811 	msr	BASEPRI, r3
 80113e4:	f3bf 8f6f 	isb	sy
 80113e8:	f3bf 8f4f 	dsb	sy
 80113ec:	613b      	str	r3, [r7, #16]
    }
 80113ee:	bf00      	nop
 80113f0:	bf00      	nop
 80113f2:	e7fd      	b.n	80113f0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80113f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113f6:	685a      	ldr	r2, [r3, #4]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	1ad2      	subs	r2, r2, r3
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8011400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011402:	687a      	ldr	r2, [r7, #4]
 8011404:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011406:	69b8      	ldr	r0, [r7, #24]
 8011408:	f000 f90a 	bl	8011620 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801140c:	4b1d      	ldr	r3, [pc, #116]	@ (8011484 <pvPortMalloc+0x1b4>)
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	1ad3      	subs	r3, r2, r3
 8011416:	4a1b      	ldr	r2, [pc, #108]	@ (8011484 <pvPortMalloc+0x1b4>)
 8011418:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801141a:	4b1a      	ldr	r3, [pc, #104]	@ (8011484 <pvPortMalloc+0x1b4>)
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	4b1b      	ldr	r3, [pc, #108]	@ (801148c <pvPortMalloc+0x1bc>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	429a      	cmp	r2, r3
 8011424:	d203      	bcs.n	801142e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011426:	4b17      	ldr	r3, [pc, #92]	@ (8011484 <pvPortMalloc+0x1b4>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4a18      	ldr	r2, [pc, #96]	@ (801148c <pvPortMalloc+0x1bc>)
 801142c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 801142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011430:	685a      	ldr	r2, [r3, #4]
 8011432:	4b13      	ldr	r3, [pc, #76]	@ (8011480 <pvPortMalloc+0x1b0>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	431a      	orrs	r2, r3
 8011438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801143a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 801143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801143e:	2200      	movs	r2, #0
 8011440:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8011442:	4b13      	ldr	r3, [pc, #76]	@ (8011490 <pvPortMalloc+0x1c0>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	3301      	adds	r3, #1
 8011448:	4a11      	ldr	r2, [pc, #68]	@ (8011490 <pvPortMalloc+0x1c0>)
 801144a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 801144c:	f7fe fd12 	bl	800fe74 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	f003 0307 	and.w	r3, r3, #7
 8011456:	2b00      	cmp	r3, #0
 8011458:	d00b      	beq.n	8011472 <pvPortMalloc+0x1a2>
        __asm volatile
 801145a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	60fb      	str	r3, [r7, #12]
    }
 801146c:	bf00      	nop
 801146e:	bf00      	nop
 8011470:	e7fd      	b.n	801146e <pvPortMalloc+0x19e>
    return pvReturn;
 8011472:	69fb      	ldr	r3, [r7, #28]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3728      	adds	r7, #40	@ 0x28
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	20013094 	.word	0x20013094
 8011480:	200130a8 	.word	0x200130a8
 8011484:	20013098 	.word	0x20013098
 8011488:	2001308c 	.word	0x2001308c
 801148c:	2001309c 	.word	0x2001309c
 8011490:	200130a0 	.word	0x200130a0

08011494 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b086      	sub	sp, #24
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d04f      	beq.n	8011546 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80114a6:	2308      	movs	r3, #8
 80114a8:	425b      	negs	r3, r3
 80114aa:	697a      	ldr	r2, [r7, #20]
 80114ac:	4413      	add	r3, r2
 80114ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	685a      	ldr	r2, [r3, #4]
 80114b8:	4b25      	ldr	r3, [pc, #148]	@ (8011550 <vPortFree+0xbc>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4013      	ands	r3, r2
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d10b      	bne.n	80114da <vPortFree+0x46>
        __asm volatile
 80114c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114c6:	f383 8811 	msr	BASEPRI, r3
 80114ca:	f3bf 8f6f 	isb	sy
 80114ce:	f3bf 8f4f 	dsb	sy
 80114d2:	60fb      	str	r3, [r7, #12]
    }
 80114d4:	bf00      	nop
 80114d6:	bf00      	nop
 80114d8:	e7fd      	b.n	80114d6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d00b      	beq.n	80114fa <vPortFree+0x66>
        __asm volatile
 80114e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114e6:	f383 8811 	msr	BASEPRI, r3
 80114ea:	f3bf 8f6f 	isb	sy
 80114ee:	f3bf 8f4f 	dsb	sy
 80114f2:	60bb      	str	r3, [r7, #8]
    }
 80114f4:	bf00      	nop
 80114f6:	bf00      	nop
 80114f8:	e7fd      	b.n	80114f6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	685a      	ldr	r2, [r3, #4]
 80114fe:	4b14      	ldr	r3, [pc, #80]	@ (8011550 <vPortFree+0xbc>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	4013      	ands	r3, r2
 8011504:	2b00      	cmp	r3, #0
 8011506:	d01e      	beq.n	8011546 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d11a      	bne.n	8011546 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	685a      	ldr	r2, [r3, #4]
 8011514:	4b0e      	ldr	r3, [pc, #56]	@ (8011550 <vPortFree+0xbc>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	43db      	mvns	r3, r3
 801151a:	401a      	ands	r2, r3
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8011520:	f7fe fc9a 	bl	800fe58 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	685a      	ldr	r2, [r3, #4]
 8011528:	4b0a      	ldr	r3, [pc, #40]	@ (8011554 <vPortFree+0xc0>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	4413      	add	r3, r2
 801152e:	4a09      	ldr	r2, [pc, #36]	@ (8011554 <vPortFree+0xc0>)
 8011530:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011532:	6938      	ldr	r0, [r7, #16]
 8011534:	f000 f874 	bl	8011620 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8011538:	4b07      	ldr	r3, [pc, #28]	@ (8011558 <vPortFree+0xc4>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	3301      	adds	r3, #1
 801153e:	4a06      	ldr	r2, [pc, #24]	@ (8011558 <vPortFree+0xc4>)
 8011540:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8011542:	f7fe fc97 	bl	800fe74 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8011546:	bf00      	nop
 8011548:	3718      	adds	r7, #24
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	200130a8 	.word	0x200130a8
 8011554:	20013098 	.word	0x20013098
 8011558:	200130a4 	.word	0x200130a4

0801155c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 801155c:	b480      	push	{r7}
 801155e:	b085      	sub	sp, #20
 8011560:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011562:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8011566:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8011568:	4b27      	ldr	r3, [pc, #156]	@ (8011608 <prvHeapInit+0xac>)
 801156a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	f003 0307 	and.w	r3, r3, #7
 8011572:	2b00      	cmp	r3, #0
 8011574:	d00c      	beq.n	8011590 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	3307      	adds	r3, #7
 801157a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	f023 0307 	bic.w	r3, r3, #7
 8011582:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	4a1f      	ldr	r2, [pc, #124]	@ (8011608 <prvHeapInit+0xac>)
 801158c:	4413      	add	r3, r2
 801158e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011594:	4a1d      	ldr	r2, [pc, #116]	@ (801160c <prvHeapInit+0xb0>)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 801159a:	4b1c      	ldr	r3, [pc, #112]	@ (801160c <prvHeapInit+0xb0>)
 801159c:	2200      	movs	r2, #0
 801159e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	68ba      	ldr	r2, [r7, #8]
 80115a4:	4413      	add	r3, r2
 80115a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80115a8:	2208      	movs	r2, #8
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	1a9b      	subs	r3, r3, r2
 80115ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f023 0307 	bic.w	r3, r3, #7
 80115b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	4a15      	ldr	r2, [pc, #84]	@ (8011610 <prvHeapInit+0xb4>)
 80115bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80115be:	4b14      	ldr	r3, [pc, #80]	@ (8011610 <prvHeapInit+0xb4>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2200      	movs	r2, #0
 80115c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80115c6:	4b12      	ldr	r3, [pc, #72]	@ (8011610 <prvHeapInit+0xb4>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	2200      	movs	r2, #0
 80115cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	68fa      	ldr	r2, [r7, #12]
 80115d6:	1ad2      	subs	r2, r2, r3
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80115dc:	4b0c      	ldr	r3, [pc, #48]	@ (8011610 <prvHeapInit+0xb4>)
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	4a0a      	ldr	r2, [pc, #40]	@ (8011614 <prvHeapInit+0xb8>)
 80115ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	4a09      	ldr	r2, [pc, #36]	@ (8011618 <prvHeapInit+0xbc>)
 80115f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80115f4:	4b09      	ldr	r3, [pc, #36]	@ (801161c <prvHeapInit+0xc0>)
 80115f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80115fa:	601a      	str	r2, [r3, #0]
}
 80115fc:	bf00      	nop
 80115fe:	3714      	adds	r7, #20
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr
 8011608:	2000048c 	.word	0x2000048c
 801160c:	2001308c 	.word	0x2001308c
 8011610:	20013094 	.word	0x20013094
 8011614:	2001309c 	.word	0x2001309c
 8011618:	20013098 	.word	0x20013098
 801161c:	200130a8 	.word	0x200130a8

08011620 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8011620:	b480      	push	{r7}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011628:	4b28      	ldr	r3, [pc, #160]	@ (80116cc <prvInsertBlockIntoFreeList+0xac>)
 801162a:	60fb      	str	r3, [r7, #12]
 801162c:	e002      	b.n	8011634 <prvInsertBlockIntoFreeList+0x14>
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	60fb      	str	r3, [r7, #12]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	429a      	cmp	r2, r3
 801163c:	d8f7      	bhi.n	801162e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	4413      	add	r3, r2
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	429a      	cmp	r2, r3
 801164e:	d108      	bne.n	8011662 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	685a      	ldr	r2, [r3, #4]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	441a      	add	r2, r3
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	68ba      	ldr	r2, [r7, #8]
 801166c:	441a      	add	r2, r3
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	429a      	cmp	r2, r3
 8011674:	d118      	bne.n	80116a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	4b15      	ldr	r3, [pc, #84]	@ (80116d0 <prvInsertBlockIntoFreeList+0xb0>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	429a      	cmp	r2, r3
 8011680:	d00d      	beq.n	801169e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	441a      	add	r2, r3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	601a      	str	r2, [r3, #0]
 801169c:	e008      	b.n	80116b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801169e:	4b0c      	ldr	r3, [pc, #48]	@ (80116d0 <prvInsertBlockIntoFreeList+0xb0>)
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	601a      	str	r2, [r3, #0]
 80116a6:	e003      	b.n	80116b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80116b0:	68fa      	ldr	r2, [r7, #12]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d002      	beq.n	80116be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80116be:	bf00      	nop
 80116c0:	3714      	adds	r7, #20
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr
 80116ca:	bf00      	nop
 80116cc:	2001308c 	.word	0x2001308c
 80116d0:	20013094 	.word	0x20013094

080116d4 <malloc>:
 80116d4:	4b02      	ldr	r3, [pc, #8]	@ (80116e0 <malloc+0xc>)
 80116d6:	4601      	mov	r1, r0
 80116d8:	6818      	ldr	r0, [r3, #0]
 80116da:	f000 b82d 	b.w	8011738 <_malloc_r>
 80116de:	bf00      	nop
 80116e0:	20000030 	.word	0x20000030

080116e4 <free>:
 80116e4:	4b02      	ldr	r3, [pc, #8]	@ (80116f0 <free+0xc>)
 80116e6:	4601      	mov	r1, r0
 80116e8:	6818      	ldr	r0, [r3, #0]
 80116ea:	f000 bc0f 	b.w	8011f0c <_free_r>
 80116ee:	bf00      	nop
 80116f0:	20000030 	.word	0x20000030

080116f4 <sbrk_aligned>:
 80116f4:	b570      	push	{r4, r5, r6, lr}
 80116f6:	4e0f      	ldr	r6, [pc, #60]	@ (8011734 <sbrk_aligned+0x40>)
 80116f8:	460c      	mov	r4, r1
 80116fa:	6831      	ldr	r1, [r6, #0]
 80116fc:	4605      	mov	r5, r0
 80116fe:	b911      	cbnz	r1, 8011706 <sbrk_aligned+0x12>
 8011700:	f000 fba6 	bl	8011e50 <_sbrk_r>
 8011704:	6030      	str	r0, [r6, #0]
 8011706:	4621      	mov	r1, r4
 8011708:	4628      	mov	r0, r5
 801170a:	f000 fba1 	bl	8011e50 <_sbrk_r>
 801170e:	1c43      	adds	r3, r0, #1
 8011710:	d103      	bne.n	801171a <sbrk_aligned+0x26>
 8011712:	f04f 34ff 	mov.w	r4, #4294967295
 8011716:	4620      	mov	r0, r4
 8011718:	bd70      	pop	{r4, r5, r6, pc}
 801171a:	1cc4      	adds	r4, r0, #3
 801171c:	f024 0403 	bic.w	r4, r4, #3
 8011720:	42a0      	cmp	r0, r4
 8011722:	d0f8      	beq.n	8011716 <sbrk_aligned+0x22>
 8011724:	1a21      	subs	r1, r4, r0
 8011726:	4628      	mov	r0, r5
 8011728:	f000 fb92 	bl	8011e50 <_sbrk_r>
 801172c:	3001      	adds	r0, #1
 801172e:	d1f2      	bne.n	8011716 <sbrk_aligned+0x22>
 8011730:	e7ef      	b.n	8011712 <sbrk_aligned+0x1e>
 8011732:	bf00      	nop
 8011734:	200130ac 	.word	0x200130ac

08011738 <_malloc_r>:
 8011738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801173c:	1ccd      	adds	r5, r1, #3
 801173e:	f025 0503 	bic.w	r5, r5, #3
 8011742:	3508      	adds	r5, #8
 8011744:	2d0c      	cmp	r5, #12
 8011746:	bf38      	it	cc
 8011748:	250c      	movcc	r5, #12
 801174a:	2d00      	cmp	r5, #0
 801174c:	4606      	mov	r6, r0
 801174e:	db01      	blt.n	8011754 <_malloc_r+0x1c>
 8011750:	42a9      	cmp	r1, r5
 8011752:	d904      	bls.n	801175e <_malloc_r+0x26>
 8011754:	230c      	movs	r3, #12
 8011756:	6033      	str	r3, [r6, #0]
 8011758:	2000      	movs	r0, #0
 801175a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801175e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011834 <_malloc_r+0xfc>
 8011762:	f000 f869 	bl	8011838 <__malloc_lock>
 8011766:	f8d8 3000 	ldr.w	r3, [r8]
 801176a:	461c      	mov	r4, r3
 801176c:	bb44      	cbnz	r4, 80117c0 <_malloc_r+0x88>
 801176e:	4629      	mov	r1, r5
 8011770:	4630      	mov	r0, r6
 8011772:	f7ff ffbf 	bl	80116f4 <sbrk_aligned>
 8011776:	1c43      	adds	r3, r0, #1
 8011778:	4604      	mov	r4, r0
 801177a:	d158      	bne.n	801182e <_malloc_r+0xf6>
 801177c:	f8d8 4000 	ldr.w	r4, [r8]
 8011780:	4627      	mov	r7, r4
 8011782:	2f00      	cmp	r7, #0
 8011784:	d143      	bne.n	801180e <_malloc_r+0xd6>
 8011786:	2c00      	cmp	r4, #0
 8011788:	d04b      	beq.n	8011822 <_malloc_r+0xea>
 801178a:	6823      	ldr	r3, [r4, #0]
 801178c:	4639      	mov	r1, r7
 801178e:	4630      	mov	r0, r6
 8011790:	eb04 0903 	add.w	r9, r4, r3
 8011794:	f000 fb5c 	bl	8011e50 <_sbrk_r>
 8011798:	4581      	cmp	r9, r0
 801179a:	d142      	bne.n	8011822 <_malloc_r+0xea>
 801179c:	6821      	ldr	r1, [r4, #0]
 801179e:	1a6d      	subs	r5, r5, r1
 80117a0:	4629      	mov	r1, r5
 80117a2:	4630      	mov	r0, r6
 80117a4:	f7ff ffa6 	bl	80116f4 <sbrk_aligned>
 80117a8:	3001      	adds	r0, #1
 80117aa:	d03a      	beq.n	8011822 <_malloc_r+0xea>
 80117ac:	6823      	ldr	r3, [r4, #0]
 80117ae:	442b      	add	r3, r5
 80117b0:	6023      	str	r3, [r4, #0]
 80117b2:	f8d8 3000 	ldr.w	r3, [r8]
 80117b6:	685a      	ldr	r2, [r3, #4]
 80117b8:	bb62      	cbnz	r2, 8011814 <_malloc_r+0xdc>
 80117ba:	f8c8 7000 	str.w	r7, [r8]
 80117be:	e00f      	b.n	80117e0 <_malloc_r+0xa8>
 80117c0:	6822      	ldr	r2, [r4, #0]
 80117c2:	1b52      	subs	r2, r2, r5
 80117c4:	d420      	bmi.n	8011808 <_malloc_r+0xd0>
 80117c6:	2a0b      	cmp	r2, #11
 80117c8:	d917      	bls.n	80117fa <_malloc_r+0xc2>
 80117ca:	1961      	adds	r1, r4, r5
 80117cc:	42a3      	cmp	r3, r4
 80117ce:	6025      	str	r5, [r4, #0]
 80117d0:	bf18      	it	ne
 80117d2:	6059      	strne	r1, [r3, #4]
 80117d4:	6863      	ldr	r3, [r4, #4]
 80117d6:	bf08      	it	eq
 80117d8:	f8c8 1000 	streq.w	r1, [r8]
 80117dc:	5162      	str	r2, [r4, r5]
 80117de:	604b      	str	r3, [r1, #4]
 80117e0:	4630      	mov	r0, r6
 80117e2:	f000 f82f 	bl	8011844 <__malloc_unlock>
 80117e6:	f104 000b 	add.w	r0, r4, #11
 80117ea:	1d23      	adds	r3, r4, #4
 80117ec:	f020 0007 	bic.w	r0, r0, #7
 80117f0:	1ac2      	subs	r2, r0, r3
 80117f2:	bf1c      	itt	ne
 80117f4:	1a1b      	subne	r3, r3, r0
 80117f6:	50a3      	strne	r3, [r4, r2]
 80117f8:	e7af      	b.n	801175a <_malloc_r+0x22>
 80117fa:	6862      	ldr	r2, [r4, #4]
 80117fc:	42a3      	cmp	r3, r4
 80117fe:	bf0c      	ite	eq
 8011800:	f8c8 2000 	streq.w	r2, [r8]
 8011804:	605a      	strne	r2, [r3, #4]
 8011806:	e7eb      	b.n	80117e0 <_malloc_r+0xa8>
 8011808:	4623      	mov	r3, r4
 801180a:	6864      	ldr	r4, [r4, #4]
 801180c:	e7ae      	b.n	801176c <_malloc_r+0x34>
 801180e:	463c      	mov	r4, r7
 8011810:	687f      	ldr	r7, [r7, #4]
 8011812:	e7b6      	b.n	8011782 <_malloc_r+0x4a>
 8011814:	461a      	mov	r2, r3
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	42a3      	cmp	r3, r4
 801181a:	d1fb      	bne.n	8011814 <_malloc_r+0xdc>
 801181c:	2300      	movs	r3, #0
 801181e:	6053      	str	r3, [r2, #4]
 8011820:	e7de      	b.n	80117e0 <_malloc_r+0xa8>
 8011822:	230c      	movs	r3, #12
 8011824:	6033      	str	r3, [r6, #0]
 8011826:	4630      	mov	r0, r6
 8011828:	f000 f80c 	bl	8011844 <__malloc_unlock>
 801182c:	e794      	b.n	8011758 <_malloc_r+0x20>
 801182e:	6005      	str	r5, [r0, #0]
 8011830:	e7d6      	b.n	80117e0 <_malloc_r+0xa8>
 8011832:	bf00      	nop
 8011834:	200130b0 	.word	0x200130b0

08011838 <__malloc_lock>:
 8011838:	4801      	ldr	r0, [pc, #4]	@ (8011840 <__malloc_lock+0x8>)
 801183a:	f000 bb56 	b.w	8011eea <__retarget_lock_acquire_recursive>
 801183e:	bf00      	nop
 8011840:	200131f4 	.word	0x200131f4

08011844 <__malloc_unlock>:
 8011844:	4801      	ldr	r0, [pc, #4]	@ (801184c <__malloc_unlock+0x8>)
 8011846:	f000 bb51 	b.w	8011eec <__retarget_lock_release_recursive>
 801184a:	bf00      	nop
 801184c:	200131f4 	.word	0x200131f4

08011850 <realloc>:
 8011850:	4b02      	ldr	r3, [pc, #8]	@ (801185c <realloc+0xc>)
 8011852:	460a      	mov	r2, r1
 8011854:	4601      	mov	r1, r0
 8011856:	6818      	ldr	r0, [r3, #0]
 8011858:	f000 b802 	b.w	8011860 <_realloc_r>
 801185c:	20000030 	.word	0x20000030

08011860 <_realloc_r>:
 8011860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011864:	4607      	mov	r7, r0
 8011866:	4614      	mov	r4, r2
 8011868:	460d      	mov	r5, r1
 801186a:	b921      	cbnz	r1, 8011876 <_realloc_r+0x16>
 801186c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011870:	4611      	mov	r1, r2
 8011872:	f7ff bf61 	b.w	8011738 <_malloc_r>
 8011876:	b92a      	cbnz	r2, 8011884 <_realloc_r+0x24>
 8011878:	f000 fb48 	bl	8011f0c <_free_r>
 801187c:	4625      	mov	r5, r4
 801187e:	4628      	mov	r0, r5
 8011880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011884:	f000 fb8c 	bl	8011fa0 <_malloc_usable_size_r>
 8011888:	4284      	cmp	r4, r0
 801188a:	4606      	mov	r6, r0
 801188c:	d802      	bhi.n	8011894 <_realloc_r+0x34>
 801188e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011892:	d8f4      	bhi.n	801187e <_realloc_r+0x1e>
 8011894:	4621      	mov	r1, r4
 8011896:	4638      	mov	r0, r7
 8011898:	f7ff ff4e 	bl	8011738 <_malloc_r>
 801189c:	4680      	mov	r8, r0
 801189e:	b908      	cbnz	r0, 80118a4 <_realloc_r+0x44>
 80118a0:	4645      	mov	r5, r8
 80118a2:	e7ec      	b.n	801187e <_realloc_r+0x1e>
 80118a4:	42b4      	cmp	r4, r6
 80118a6:	4622      	mov	r2, r4
 80118a8:	4629      	mov	r1, r5
 80118aa:	bf28      	it	cs
 80118ac:	4632      	movcs	r2, r6
 80118ae:	f000 fb1e 	bl	8011eee <memcpy>
 80118b2:	4629      	mov	r1, r5
 80118b4:	4638      	mov	r0, r7
 80118b6:	f000 fb29 	bl	8011f0c <_free_r>
 80118ba:	e7f1      	b.n	80118a0 <_realloc_r+0x40>

080118bc <std>:
 80118bc:	2300      	movs	r3, #0
 80118be:	b510      	push	{r4, lr}
 80118c0:	4604      	mov	r4, r0
 80118c2:	e9c0 3300 	strd	r3, r3, [r0]
 80118c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118ca:	6083      	str	r3, [r0, #8]
 80118cc:	8181      	strh	r1, [r0, #12]
 80118ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80118d0:	81c2      	strh	r2, [r0, #14]
 80118d2:	6183      	str	r3, [r0, #24]
 80118d4:	4619      	mov	r1, r3
 80118d6:	2208      	movs	r2, #8
 80118d8:	305c      	adds	r0, #92	@ 0x5c
 80118da:	f000 fa69 	bl	8011db0 <memset>
 80118de:	4b0d      	ldr	r3, [pc, #52]	@ (8011914 <std+0x58>)
 80118e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80118e2:	4b0d      	ldr	r3, [pc, #52]	@ (8011918 <std+0x5c>)
 80118e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80118e6:	4b0d      	ldr	r3, [pc, #52]	@ (801191c <std+0x60>)
 80118e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80118ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011920 <std+0x64>)
 80118ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80118ee:	4b0d      	ldr	r3, [pc, #52]	@ (8011924 <std+0x68>)
 80118f0:	6224      	str	r4, [r4, #32]
 80118f2:	429c      	cmp	r4, r3
 80118f4:	d006      	beq.n	8011904 <std+0x48>
 80118f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80118fa:	4294      	cmp	r4, r2
 80118fc:	d002      	beq.n	8011904 <std+0x48>
 80118fe:	33d0      	adds	r3, #208	@ 0xd0
 8011900:	429c      	cmp	r4, r3
 8011902:	d105      	bne.n	8011910 <std+0x54>
 8011904:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801190c:	f000 baec 	b.w	8011ee8 <__retarget_lock_init_recursive>
 8011910:	bd10      	pop	{r4, pc}
 8011912:	bf00      	nop
 8011914:	08011bbd 	.word	0x08011bbd
 8011918:	08011be3 	.word	0x08011be3
 801191c:	08011c1b 	.word	0x08011c1b
 8011920:	08011c3f 	.word	0x08011c3f
 8011924:	200130b4 	.word	0x200130b4

08011928 <stdio_exit_handler>:
 8011928:	4a02      	ldr	r2, [pc, #8]	@ (8011934 <stdio_exit_handler+0xc>)
 801192a:	4903      	ldr	r1, [pc, #12]	@ (8011938 <stdio_exit_handler+0x10>)
 801192c:	4803      	ldr	r0, [pc, #12]	@ (801193c <stdio_exit_handler+0x14>)
 801192e:	f000 b869 	b.w	8011a04 <_fwalk_sglue>
 8011932:	bf00      	nop
 8011934:	20000024 	.word	0x20000024
 8011938:	08012f41 	.word	0x08012f41
 801193c:	20000034 	.word	0x20000034

08011940 <cleanup_stdio>:
 8011940:	6841      	ldr	r1, [r0, #4]
 8011942:	4b0c      	ldr	r3, [pc, #48]	@ (8011974 <cleanup_stdio+0x34>)
 8011944:	4299      	cmp	r1, r3
 8011946:	b510      	push	{r4, lr}
 8011948:	4604      	mov	r4, r0
 801194a:	d001      	beq.n	8011950 <cleanup_stdio+0x10>
 801194c:	f001 faf8 	bl	8012f40 <_fflush_r>
 8011950:	68a1      	ldr	r1, [r4, #8]
 8011952:	4b09      	ldr	r3, [pc, #36]	@ (8011978 <cleanup_stdio+0x38>)
 8011954:	4299      	cmp	r1, r3
 8011956:	d002      	beq.n	801195e <cleanup_stdio+0x1e>
 8011958:	4620      	mov	r0, r4
 801195a:	f001 faf1 	bl	8012f40 <_fflush_r>
 801195e:	68e1      	ldr	r1, [r4, #12]
 8011960:	4b06      	ldr	r3, [pc, #24]	@ (801197c <cleanup_stdio+0x3c>)
 8011962:	4299      	cmp	r1, r3
 8011964:	d004      	beq.n	8011970 <cleanup_stdio+0x30>
 8011966:	4620      	mov	r0, r4
 8011968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801196c:	f001 bae8 	b.w	8012f40 <_fflush_r>
 8011970:	bd10      	pop	{r4, pc}
 8011972:	bf00      	nop
 8011974:	200130b4 	.word	0x200130b4
 8011978:	2001311c 	.word	0x2001311c
 801197c:	20013184 	.word	0x20013184

08011980 <global_stdio_init.part.0>:
 8011980:	b510      	push	{r4, lr}
 8011982:	4b0b      	ldr	r3, [pc, #44]	@ (80119b0 <global_stdio_init.part.0+0x30>)
 8011984:	4c0b      	ldr	r4, [pc, #44]	@ (80119b4 <global_stdio_init.part.0+0x34>)
 8011986:	4a0c      	ldr	r2, [pc, #48]	@ (80119b8 <global_stdio_init.part.0+0x38>)
 8011988:	601a      	str	r2, [r3, #0]
 801198a:	4620      	mov	r0, r4
 801198c:	2200      	movs	r2, #0
 801198e:	2104      	movs	r1, #4
 8011990:	f7ff ff94 	bl	80118bc <std>
 8011994:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011998:	2201      	movs	r2, #1
 801199a:	2109      	movs	r1, #9
 801199c:	f7ff ff8e 	bl	80118bc <std>
 80119a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80119a4:	2202      	movs	r2, #2
 80119a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119aa:	2112      	movs	r1, #18
 80119ac:	f7ff bf86 	b.w	80118bc <std>
 80119b0:	200131ec 	.word	0x200131ec
 80119b4:	200130b4 	.word	0x200130b4
 80119b8:	08011929 	.word	0x08011929

080119bc <__sfp_lock_acquire>:
 80119bc:	4801      	ldr	r0, [pc, #4]	@ (80119c4 <__sfp_lock_acquire+0x8>)
 80119be:	f000 ba94 	b.w	8011eea <__retarget_lock_acquire_recursive>
 80119c2:	bf00      	nop
 80119c4:	200131f5 	.word	0x200131f5

080119c8 <__sfp_lock_release>:
 80119c8:	4801      	ldr	r0, [pc, #4]	@ (80119d0 <__sfp_lock_release+0x8>)
 80119ca:	f000 ba8f 	b.w	8011eec <__retarget_lock_release_recursive>
 80119ce:	bf00      	nop
 80119d0:	200131f5 	.word	0x200131f5

080119d4 <__sinit>:
 80119d4:	b510      	push	{r4, lr}
 80119d6:	4604      	mov	r4, r0
 80119d8:	f7ff fff0 	bl	80119bc <__sfp_lock_acquire>
 80119dc:	6a23      	ldr	r3, [r4, #32]
 80119de:	b11b      	cbz	r3, 80119e8 <__sinit+0x14>
 80119e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119e4:	f7ff bff0 	b.w	80119c8 <__sfp_lock_release>
 80119e8:	4b04      	ldr	r3, [pc, #16]	@ (80119fc <__sinit+0x28>)
 80119ea:	6223      	str	r3, [r4, #32]
 80119ec:	4b04      	ldr	r3, [pc, #16]	@ (8011a00 <__sinit+0x2c>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d1f5      	bne.n	80119e0 <__sinit+0xc>
 80119f4:	f7ff ffc4 	bl	8011980 <global_stdio_init.part.0>
 80119f8:	e7f2      	b.n	80119e0 <__sinit+0xc>
 80119fa:	bf00      	nop
 80119fc:	08011941 	.word	0x08011941
 8011a00:	200131ec 	.word	0x200131ec

08011a04 <_fwalk_sglue>:
 8011a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a08:	4607      	mov	r7, r0
 8011a0a:	4688      	mov	r8, r1
 8011a0c:	4614      	mov	r4, r2
 8011a0e:	2600      	movs	r6, #0
 8011a10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a14:	f1b9 0901 	subs.w	r9, r9, #1
 8011a18:	d505      	bpl.n	8011a26 <_fwalk_sglue+0x22>
 8011a1a:	6824      	ldr	r4, [r4, #0]
 8011a1c:	2c00      	cmp	r4, #0
 8011a1e:	d1f7      	bne.n	8011a10 <_fwalk_sglue+0xc>
 8011a20:	4630      	mov	r0, r6
 8011a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a26:	89ab      	ldrh	r3, [r5, #12]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d907      	bls.n	8011a3c <_fwalk_sglue+0x38>
 8011a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a30:	3301      	adds	r3, #1
 8011a32:	d003      	beq.n	8011a3c <_fwalk_sglue+0x38>
 8011a34:	4629      	mov	r1, r5
 8011a36:	4638      	mov	r0, r7
 8011a38:	47c0      	blx	r8
 8011a3a:	4306      	orrs	r6, r0
 8011a3c:	3568      	adds	r5, #104	@ 0x68
 8011a3e:	e7e9      	b.n	8011a14 <_fwalk_sglue+0x10>

08011a40 <iprintf>:
 8011a40:	b40f      	push	{r0, r1, r2, r3}
 8011a42:	b507      	push	{r0, r1, r2, lr}
 8011a44:	4906      	ldr	r1, [pc, #24]	@ (8011a60 <iprintf+0x20>)
 8011a46:	ab04      	add	r3, sp, #16
 8011a48:	6808      	ldr	r0, [r1, #0]
 8011a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a4e:	6881      	ldr	r1, [r0, #8]
 8011a50:	9301      	str	r3, [sp, #4]
 8011a52:	f000 fdff 	bl	8012654 <_vfiprintf_r>
 8011a56:	b003      	add	sp, #12
 8011a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a5c:	b004      	add	sp, #16
 8011a5e:	4770      	bx	lr
 8011a60:	20000030 	.word	0x20000030

08011a64 <_puts_r>:
 8011a64:	6a03      	ldr	r3, [r0, #32]
 8011a66:	b570      	push	{r4, r5, r6, lr}
 8011a68:	6884      	ldr	r4, [r0, #8]
 8011a6a:	4605      	mov	r5, r0
 8011a6c:	460e      	mov	r6, r1
 8011a6e:	b90b      	cbnz	r3, 8011a74 <_puts_r+0x10>
 8011a70:	f7ff ffb0 	bl	80119d4 <__sinit>
 8011a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a76:	07db      	lsls	r3, r3, #31
 8011a78:	d405      	bmi.n	8011a86 <_puts_r+0x22>
 8011a7a:	89a3      	ldrh	r3, [r4, #12]
 8011a7c:	0598      	lsls	r0, r3, #22
 8011a7e:	d402      	bmi.n	8011a86 <_puts_r+0x22>
 8011a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a82:	f000 fa32 	bl	8011eea <__retarget_lock_acquire_recursive>
 8011a86:	89a3      	ldrh	r3, [r4, #12]
 8011a88:	0719      	lsls	r1, r3, #28
 8011a8a:	d502      	bpl.n	8011a92 <_puts_r+0x2e>
 8011a8c:	6923      	ldr	r3, [r4, #16]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d135      	bne.n	8011afe <_puts_r+0x9a>
 8011a92:	4621      	mov	r1, r4
 8011a94:	4628      	mov	r0, r5
 8011a96:	f000 f935 	bl	8011d04 <__swsetup_r>
 8011a9a:	b380      	cbz	r0, 8011afe <_puts_r+0x9a>
 8011a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8011aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011aa2:	07da      	lsls	r2, r3, #31
 8011aa4:	d405      	bmi.n	8011ab2 <_puts_r+0x4e>
 8011aa6:	89a3      	ldrh	r3, [r4, #12]
 8011aa8:	059b      	lsls	r3, r3, #22
 8011aaa:	d402      	bmi.n	8011ab2 <_puts_r+0x4e>
 8011aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011aae:	f000 fa1d 	bl	8011eec <__retarget_lock_release_recursive>
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	bd70      	pop	{r4, r5, r6, pc}
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	da04      	bge.n	8011ac4 <_puts_r+0x60>
 8011aba:	69a2      	ldr	r2, [r4, #24]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	dc17      	bgt.n	8011af0 <_puts_r+0x8c>
 8011ac0:	290a      	cmp	r1, #10
 8011ac2:	d015      	beq.n	8011af0 <_puts_r+0x8c>
 8011ac4:	6823      	ldr	r3, [r4, #0]
 8011ac6:	1c5a      	adds	r2, r3, #1
 8011ac8:	6022      	str	r2, [r4, #0]
 8011aca:	7019      	strb	r1, [r3, #0]
 8011acc:	68a3      	ldr	r3, [r4, #8]
 8011ace:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011ad2:	3b01      	subs	r3, #1
 8011ad4:	60a3      	str	r3, [r4, #8]
 8011ad6:	2900      	cmp	r1, #0
 8011ad8:	d1ed      	bne.n	8011ab6 <_puts_r+0x52>
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	da11      	bge.n	8011b02 <_puts_r+0x9e>
 8011ade:	4622      	mov	r2, r4
 8011ae0:	210a      	movs	r1, #10
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	f000 f8d0 	bl	8011c88 <__swbuf_r>
 8011ae8:	3001      	adds	r0, #1
 8011aea:	d0d7      	beq.n	8011a9c <_puts_r+0x38>
 8011aec:	250a      	movs	r5, #10
 8011aee:	e7d7      	b.n	8011aa0 <_puts_r+0x3c>
 8011af0:	4622      	mov	r2, r4
 8011af2:	4628      	mov	r0, r5
 8011af4:	f000 f8c8 	bl	8011c88 <__swbuf_r>
 8011af8:	3001      	adds	r0, #1
 8011afa:	d1e7      	bne.n	8011acc <_puts_r+0x68>
 8011afc:	e7ce      	b.n	8011a9c <_puts_r+0x38>
 8011afe:	3e01      	subs	r6, #1
 8011b00:	e7e4      	b.n	8011acc <_puts_r+0x68>
 8011b02:	6823      	ldr	r3, [r4, #0]
 8011b04:	1c5a      	adds	r2, r3, #1
 8011b06:	6022      	str	r2, [r4, #0]
 8011b08:	220a      	movs	r2, #10
 8011b0a:	701a      	strb	r2, [r3, #0]
 8011b0c:	e7ee      	b.n	8011aec <_puts_r+0x88>
	...

08011b10 <puts>:
 8011b10:	4b02      	ldr	r3, [pc, #8]	@ (8011b1c <puts+0xc>)
 8011b12:	4601      	mov	r1, r0
 8011b14:	6818      	ldr	r0, [r3, #0]
 8011b16:	f7ff bfa5 	b.w	8011a64 <_puts_r>
 8011b1a:	bf00      	nop
 8011b1c:	20000030 	.word	0x20000030

08011b20 <siprintf>:
 8011b20:	b40e      	push	{r1, r2, r3}
 8011b22:	b510      	push	{r4, lr}
 8011b24:	b09d      	sub	sp, #116	@ 0x74
 8011b26:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011b28:	9002      	str	r0, [sp, #8]
 8011b2a:	9006      	str	r0, [sp, #24]
 8011b2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011b30:	480a      	ldr	r0, [pc, #40]	@ (8011b5c <siprintf+0x3c>)
 8011b32:	9107      	str	r1, [sp, #28]
 8011b34:	9104      	str	r1, [sp, #16]
 8011b36:	490a      	ldr	r1, [pc, #40]	@ (8011b60 <siprintf+0x40>)
 8011b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b3c:	9105      	str	r1, [sp, #20]
 8011b3e:	2400      	movs	r4, #0
 8011b40:	a902      	add	r1, sp, #8
 8011b42:	6800      	ldr	r0, [r0, #0]
 8011b44:	9301      	str	r3, [sp, #4]
 8011b46:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011b48:	f000 fa8e 	bl	8012068 <_svfiprintf_r>
 8011b4c:	9b02      	ldr	r3, [sp, #8]
 8011b4e:	701c      	strb	r4, [r3, #0]
 8011b50:	b01d      	add	sp, #116	@ 0x74
 8011b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b56:	b003      	add	sp, #12
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop
 8011b5c:	20000030 	.word	0x20000030
 8011b60:	ffff0208 	.word	0xffff0208

08011b64 <siscanf>:
 8011b64:	b40e      	push	{r1, r2, r3}
 8011b66:	b570      	push	{r4, r5, r6, lr}
 8011b68:	b09d      	sub	sp, #116	@ 0x74
 8011b6a:	ac21      	add	r4, sp, #132	@ 0x84
 8011b6c:	2500      	movs	r5, #0
 8011b6e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011b72:	f854 6b04 	ldr.w	r6, [r4], #4
 8011b76:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011b7a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011b7c:	9002      	str	r0, [sp, #8]
 8011b7e:	9006      	str	r0, [sp, #24]
 8011b80:	f7f6 fb50 	bl	8008224 <strlen>
 8011b84:	4b0b      	ldr	r3, [pc, #44]	@ (8011bb4 <siscanf+0x50>)
 8011b86:	9003      	str	r0, [sp, #12]
 8011b88:	9007      	str	r0, [sp, #28]
 8011b8a:	480b      	ldr	r0, [pc, #44]	@ (8011bb8 <siscanf+0x54>)
 8011b8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011b92:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b96:	4632      	mov	r2, r6
 8011b98:	4623      	mov	r3, r4
 8011b9a:	a902      	add	r1, sp, #8
 8011b9c:	6800      	ldr	r0, [r0, #0]
 8011b9e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011ba0:	9514      	str	r5, [sp, #80]	@ 0x50
 8011ba2:	9401      	str	r4, [sp, #4]
 8011ba4:	f000 fbb6 	bl	8012314 <__ssvfiscanf_r>
 8011ba8:	b01d      	add	sp, #116	@ 0x74
 8011baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bae:	b003      	add	sp, #12
 8011bb0:	4770      	bx	lr
 8011bb2:	bf00      	nop
 8011bb4:	08011bdf 	.word	0x08011bdf
 8011bb8:	20000030 	.word	0x20000030

08011bbc <__sread>:
 8011bbc:	b510      	push	{r4, lr}
 8011bbe:	460c      	mov	r4, r1
 8011bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bc4:	f000 f932 	bl	8011e2c <_read_r>
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	bfab      	itete	ge
 8011bcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011bce:	89a3      	ldrhlt	r3, [r4, #12]
 8011bd0:	181b      	addge	r3, r3, r0
 8011bd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011bd6:	bfac      	ite	ge
 8011bd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011bda:	81a3      	strhlt	r3, [r4, #12]
 8011bdc:	bd10      	pop	{r4, pc}

08011bde <__seofread>:
 8011bde:	2000      	movs	r0, #0
 8011be0:	4770      	bx	lr

08011be2 <__swrite>:
 8011be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be6:	461f      	mov	r7, r3
 8011be8:	898b      	ldrh	r3, [r1, #12]
 8011bea:	05db      	lsls	r3, r3, #23
 8011bec:	4605      	mov	r5, r0
 8011bee:	460c      	mov	r4, r1
 8011bf0:	4616      	mov	r6, r2
 8011bf2:	d505      	bpl.n	8011c00 <__swrite+0x1e>
 8011bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bf8:	2302      	movs	r3, #2
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f000 f904 	bl	8011e08 <_lseek_r>
 8011c00:	89a3      	ldrh	r3, [r4, #12]
 8011c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011c0a:	81a3      	strh	r3, [r4, #12]
 8011c0c:	4632      	mov	r2, r6
 8011c0e:	463b      	mov	r3, r7
 8011c10:	4628      	mov	r0, r5
 8011c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c16:	f000 b92b 	b.w	8011e70 <_write_r>

08011c1a <__sseek>:
 8011c1a:	b510      	push	{r4, lr}
 8011c1c:	460c      	mov	r4, r1
 8011c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c22:	f000 f8f1 	bl	8011e08 <_lseek_r>
 8011c26:	1c43      	adds	r3, r0, #1
 8011c28:	89a3      	ldrh	r3, [r4, #12]
 8011c2a:	bf15      	itete	ne
 8011c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011c36:	81a3      	strheq	r3, [r4, #12]
 8011c38:	bf18      	it	ne
 8011c3a:	81a3      	strhne	r3, [r4, #12]
 8011c3c:	bd10      	pop	{r4, pc}

08011c3e <__sclose>:
 8011c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c42:	f000 b8d1 	b.w	8011de8 <_close_r>
	...

08011c48 <_vsiprintf_r>:
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	b09a      	sub	sp, #104	@ 0x68
 8011c4c:	2400      	movs	r4, #0
 8011c4e:	9100      	str	r1, [sp, #0]
 8011c50:	9104      	str	r1, [sp, #16]
 8011c52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011c56:	9105      	str	r1, [sp, #20]
 8011c58:	9102      	str	r1, [sp, #8]
 8011c5a:	4905      	ldr	r1, [pc, #20]	@ (8011c70 <_vsiprintf_r+0x28>)
 8011c5c:	9103      	str	r1, [sp, #12]
 8011c5e:	4669      	mov	r1, sp
 8011c60:	9419      	str	r4, [sp, #100]	@ 0x64
 8011c62:	f000 fa01 	bl	8012068 <_svfiprintf_r>
 8011c66:	9b00      	ldr	r3, [sp, #0]
 8011c68:	701c      	strb	r4, [r3, #0]
 8011c6a:	b01a      	add	sp, #104	@ 0x68
 8011c6c:	bd10      	pop	{r4, pc}
 8011c6e:	bf00      	nop
 8011c70:	ffff0208 	.word	0xffff0208

08011c74 <vsiprintf>:
 8011c74:	4613      	mov	r3, r2
 8011c76:	460a      	mov	r2, r1
 8011c78:	4601      	mov	r1, r0
 8011c7a:	4802      	ldr	r0, [pc, #8]	@ (8011c84 <vsiprintf+0x10>)
 8011c7c:	6800      	ldr	r0, [r0, #0]
 8011c7e:	f7ff bfe3 	b.w	8011c48 <_vsiprintf_r>
 8011c82:	bf00      	nop
 8011c84:	20000030 	.word	0x20000030

08011c88 <__swbuf_r>:
 8011c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c8a:	460e      	mov	r6, r1
 8011c8c:	4614      	mov	r4, r2
 8011c8e:	4605      	mov	r5, r0
 8011c90:	b118      	cbz	r0, 8011c9a <__swbuf_r+0x12>
 8011c92:	6a03      	ldr	r3, [r0, #32]
 8011c94:	b90b      	cbnz	r3, 8011c9a <__swbuf_r+0x12>
 8011c96:	f7ff fe9d 	bl	80119d4 <__sinit>
 8011c9a:	69a3      	ldr	r3, [r4, #24]
 8011c9c:	60a3      	str	r3, [r4, #8]
 8011c9e:	89a3      	ldrh	r3, [r4, #12]
 8011ca0:	071a      	lsls	r2, r3, #28
 8011ca2:	d501      	bpl.n	8011ca8 <__swbuf_r+0x20>
 8011ca4:	6923      	ldr	r3, [r4, #16]
 8011ca6:	b943      	cbnz	r3, 8011cba <__swbuf_r+0x32>
 8011ca8:	4621      	mov	r1, r4
 8011caa:	4628      	mov	r0, r5
 8011cac:	f000 f82a 	bl	8011d04 <__swsetup_r>
 8011cb0:	b118      	cbz	r0, 8011cba <__swbuf_r+0x32>
 8011cb2:	f04f 37ff 	mov.w	r7, #4294967295
 8011cb6:	4638      	mov	r0, r7
 8011cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cba:	6823      	ldr	r3, [r4, #0]
 8011cbc:	6922      	ldr	r2, [r4, #16]
 8011cbe:	1a98      	subs	r0, r3, r2
 8011cc0:	6963      	ldr	r3, [r4, #20]
 8011cc2:	b2f6      	uxtb	r6, r6
 8011cc4:	4283      	cmp	r3, r0
 8011cc6:	4637      	mov	r7, r6
 8011cc8:	dc05      	bgt.n	8011cd6 <__swbuf_r+0x4e>
 8011cca:	4621      	mov	r1, r4
 8011ccc:	4628      	mov	r0, r5
 8011cce:	f001 f937 	bl	8012f40 <_fflush_r>
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d1ed      	bne.n	8011cb2 <__swbuf_r+0x2a>
 8011cd6:	68a3      	ldr	r3, [r4, #8]
 8011cd8:	3b01      	subs	r3, #1
 8011cda:	60a3      	str	r3, [r4, #8]
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	1c5a      	adds	r2, r3, #1
 8011ce0:	6022      	str	r2, [r4, #0]
 8011ce2:	701e      	strb	r6, [r3, #0]
 8011ce4:	6962      	ldr	r2, [r4, #20]
 8011ce6:	1c43      	adds	r3, r0, #1
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d004      	beq.n	8011cf6 <__swbuf_r+0x6e>
 8011cec:	89a3      	ldrh	r3, [r4, #12]
 8011cee:	07db      	lsls	r3, r3, #31
 8011cf0:	d5e1      	bpl.n	8011cb6 <__swbuf_r+0x2e>
 8011cf2:	2e0a      	cmp	r6, #10
 8011cf4:	d1df      	bne.n	8011cb6 <__swbuf_r+0x2e>
 8011cf6:	4621      	mov	r1, r4
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	f001 f921 	bl	8012f40 <_fflush_r>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	d0d9      	beq.n	8011cb6 <__swbuf_r+0x2e>
 8011d02:	e7d6      	b.n	8011cb2 <__swbuf_r+0x2a>

08011d04 <__swsetup_r>:
 8011d04:	b538      	push	{r3, r4, r5, lr}
 8011d06:	4b29      	ldr	r3, [pc, #164]	@ (8011dac <__swsetup_r+0xa8>)
 8011d08:	4605      	mov	r5, r0
 8011d0a:	6818      	ldr	r0, [r3, #0]
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	b118      	cbz	r0, 8011d18 <__swsetup_r+0x14>
 8011d10:	6a03      	ldr	r3, [r0, #32]
 8011d12:	b90b      	cbnz	r3, 8011d18 <__swsetup_r+0x14>
 8011d14:	f7ff fe5e 	bl	80119d4 <__sinit>
 8011d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d1c:	0719      	lsls	r1, r3, #28
 8011d1e:	d422      	bmi.n	8011d66 <__swsetup_r+0x62>
 8011d20:	06da      	lsls	r2, r3, #27
 8011d22:	d407      	bmi.n	8011d34 <__swsetup_r+0x30>
 8011d24:	2209      	movs	r2, #9
 8011d26:	602a      	str	r2, [r5, #0]
 8011d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d2c:	81a3      	strh	r3, [r4, #12]
 8011d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d32:	e033      	b.n	8011d9c <__swsetup_r+0x98>
 8011d34:	0758      	lsls	r0, r3, #29
 8011d36:	d512      	bpl.n	8011d5e <__swsetup_r+0x5a>
 8011d38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d3a:	b141      	cbz	r1, 8011d4e <__swsetup_r+0x4a>
 8011d3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d40:	4299      	cmp	r1, r3
 8011d42:	d002      	beq.n	8011d4a <__swsetup_r+0x46>
 8011d44:	4628      	mov	r0, r5
 8011d46:	f000 f8e1 	bl	8011f0c <_free_r>
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d4e:	89a3      	ldrh	r3, [r4, #12]
 8011d50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d54:	81a3      	strh	r3, [r4, #12]
 8011d56:	2300      	movs	r3, #0
 8011d58:	6063      	str	r3, [r4, #4]
 8011d5a:	6923      	ldr	r3, [r4, #16]
 8011d5c:	6023      	str	r3, [r4, #0]
 8011d5e:	89a3      	ldrh	r3, [r4, #12]
 8011d60:	f043 0308 	orr.w	r3, r3, #8
 8011d64:	81a3      	strh	r3, [r4, #12]
 8011d66:	6923      	ldr	r3, [r4, #16]
 8011d68:	b94b      	cbnz	r3, 8011d7e <__swsetup_r+0x7a>
 8011d6a:	89a3      	ldrh	r3, [r4, #12]
 8011d6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d74:	d003      	beq.n	8011d7e <__swsetup_r+0x7a>
 8011d76:	4621      	mov	r1, r4
 8011d78:	4628      	mov	r0, r5
 8011d7a:	f001 f92f 	bl	8012fdc <__smakebuf_r>
 8011d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d82:	f013 0201 	ands.w	r2, r3, #1
 8011d86:	d00a      	beq.n	8011d9e <__swsetup_r+0x9a>
 8011d88:	2200      	movs	r2, #0
 8011d8a:	60a2      	str	r2, [r4, #8]
 8011d8c:	6962      	ldr	r2, [r4, #20]
 8011d8e:	4252      	negs	r2, r2
 8011d90:	61a2      	str	r2, [r4, #24]
 8011d92:	6922      	ldr	r2, [r4, #16]
 8011d94:	b942      	cbnz	r2, 8011da8 <__swsetup_r+0xa4>
 8011d96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d9a:	d1c5      	bne.n	8011d28 <__swsetup_r+0x24>
 8011d9c:	bd38      	pop	{r3, r4, r5, pc}
 8011d9e:	0799      	lsls	r1, r3, #30
 8011da0:	bf58      	it	pl
 8011da2:	6962      	ldrpl	r2, [r4, #20]
 8011da4:	60a2      	str	r2, [r4, #8]
 8011da6:	e7f4      	b.n	8011d92 <__swsetup_r+0x8e>
 8011da8:	2000      	movs	r0, #0
 8011daa:	e7f7      	b.n	8011d9c <__swsetup_r+0x98>
 8011dac:	20000030 	.word	0x20000030

08011db0 <memset>:
 8011db0:	4402      	add	r2, r0
 8011db2:	4603      	mov	r3, r0
 8011db4:	4293      	cmp	r3, r2
 8011db6:	d100      	bne.n	8011dba <memset+0xa>
 8011db8:	4770      	bx	lr
 8011dba:	f803 1b01 	strb.w	r1, [r3], #1
 8011dbe:	e7f9      	b.n	8011db4 <memset+0x4>

08011dc0 <strncpy>:
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	3901      	subs	r1, #1
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	b132      	cbz	r2, 8011dd6 <strncpy+0x16>
 8011dc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011dcc:	f803 4b01 	strb.w	r4, [r3], #1
 8011dd0:	3a01      	subs	r2, #1
 8011dd2:	2c00      	cmp	r4, #0
 8011dd4:	d1f7      	bne.n	8011dc6 <strncpy+0x6>
 8011dd6:	441a      	add	r2, r3
 8011dd8:	2100      	movs	r1, #0
 8011dda:	4293      	cmp	r3, r2
 8011ddc:	d100      	bne.n	8011de0 <strncpy+0x20>
 8011dde:	bd10      	pop	{r4, pc}
 8011de0:	f803 1b01 	strb.w	r1, [r3], #1
 8011de4:	e7f9      	b.n	8011dda <strncpy+0x1a>
	...

08011de8 <_close_r>:
 8011de8:	b538      	push	{r3, r4, r5, lr}
 8011dea:	4d06      	ldr	r5, [pc, #24]	@ (8011e04 <_close_r+0x1c>)
 8011dec:	2300      	movs	r3, #0
 8011dee:	4604      	mov	r4, r0
 8011df0:	4608      	mov	r0, r1
 8011df2:	602b      	str	r3, [r5, #0]
 8011df4:	f7f9 f94f 	bl	800b096 <_close>
 8011df8:	1c43      	adds	r3, r0, #1
 8011dfa:	d102      	bne.n	8011e02 <_close_r+0x1a>
 8011dfc:	682b      	ldr	r3, [r5, #0]
 8011dfe:	b103      	cbz	r3, 8011e02 <_close_r+0x1a>
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	bd38      	pop	{r3, r4, r5, pc}
 8011e04:	200131f0 	.word	0x200131f0

08011e08 <_lseek_r>:
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4d07      	ldr	r5, [pc, #28]	@ (8011e28 <_lseek_r+0x20>)
 8011e0c:	4604      	mov	r4, r0
 8011e0e:	4608      	mov	r0, r1
 8011e10:	4611      	mov	r1, r2
 8011e12:	2200      	movs	r2, #0
 8011e14:	602a      	str	r2, [r5, #0]
 8011e16:	461a      	mov	r2, r3
 8011e18:	f7f9 f964 	bl	800b0e4 <_lseek>
 8011e1c:	1c43      	adds	r3, r0, #1
 8011e1e:	d102      	bne.n	8011e26 <_lseek_r+0x1e>
 8011e20:	682b      	ldr	r3, [r5, #0]
 8011e22:	b103      	cbz	r3, 8011e26 <_lseek_r+0x1e>
 8011e24:	6023      	str	r3, [r4, #0]
 8011e26:	bd38      	pop	{r3, r4, r5, pc}
 8011e28:	200131f0 	.word	0x200131f0

08011e2c <_read_r>:
 8011e2c:	b538      	push	{r3, r4, r5, lr}
 8011e2e:	4d07      	ldr	r5, [pc, #28]	@ (8011e4c <_read_r+0x20>)
 8011e30:	4604      	mov	r4, r0
 8011e32:	4608      	mov	r0, r1
 8011e34:	4611      	mov	r1, r2
 8011e36:	2200      	movs	r2, #0
 8011e38:	602a      	str	r2, [r5, #0]
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	f7f9 f8f2 	bl	800b024 <_read>
 8011e40:	1c43      	adds	r3, r0, #1
 8011e42:	d102      	bne.n	8011e4a <_read_r+0x1e>
 8011e44:	682b      	ldr	r3, [r5, #0]
 8011e46:	b103      	cbz	r3, 8011e4a <_read_r+0x1e>
 8011e48:	6023      	str	r3, [r4, #0]
 8011e4a:	bd38      	pop	{r3, r4, r5, pc}
 8011e4c:	200131f0 	.word	0x200131f0

08011e50 <_sbrk_r>:
 8011e50:	b538      	push	{r3, r4, r5, lr}
 8011e52:	4d06      	ldr	r5, [pc, #24]	@ (8011e6c <_sbrk_r+0x1c>)
 8011e54:	2300      	movs	r3, #0
 8011e56:	4604      	mov	r4, r0
 8011e58:	4608      	mov	r0, r1
 8011e5a:	602b      	str	r3, [r5, #0]
 8011e5c:	f001 fa96 	bl	801338c <_sbrk>
 8011e60:	1c43      	adds	r3, r0, #1
 8011e62:	d102      	bne.n	8011e6a <_sbrk_r+0x1a>
 8011e64:	682b      	ldr	r3, [r5, #0]
 8011e66:	b103      	cbz	r3, 8011e6a <_sbrk_r+0x1a>
 8011e68:	6023      	str	r3, [r4, #0]
 8011e6a:	bd38      	pop	{r3, r4, r5, pc}
 8011e6c:	200131f0 	.word	0x200131f0

08011e70 <_write_r>:
 8011e70:	b538      	push	{r3, r4, r5, lr}
 8011e72:	4d07      	ldr	r5, [pc, #28]	@ (8011e90 <_write_r+0x20>)
 8011e74:	4604      	mov	r4, r0
 8011e76:	4608      	mov	r0, r1
 8011e78:	4611      	mov	r1, r2
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	602a      	str	r2, [r5, #0]
 8011e7e:	461a      	mov	r2, r3
 8011e80:	f7f9 f8ed 	bl	800b05e <_write>
 8011e84:	1c43      	adds	r3, r0, #1
 8011e86:	d102      	bne.n	8011e8e <_write_r+0x1e>
 8011e88:	682b      	ldr	r3, [r5, #0]
 8011e8a:	b103      	cbz	r3, 8011e8e <_write_r+0x1e>
 8011e8c:	6023      	str	r3, [r4, #0]
 8011e8e:	bd38      	pop	{r3, r4, r5, pc}
 8011e90:	200131f0 	.word	0x200131f0

08011e94 <__errno>:
 8011e94:	4b01      	ldr	r3, [pc, #4]	@ (8011e9c <__errno+0x8>)
 8011e96:	6818      	ldr	r0, [r3, #0]
 8011e98:	4770      	bx	lr
 8011e9a:	bf00      	nop
 8011e9c:	20000030 	.word	0x20000030

08011ea0 <__libc_init_array>:
 8011ea0:	b570      	push	{r4, r5, r6, lr}
 8011ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8011ed8 <__libc_init_array+0x38>)
 8011ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8011edc <__libc_init_array+0x3c>)
 8011ea6:	1b64      	subs	r4, r4, r5
 8011ea8:	10a4      	asrs	r4, r4, #2
 8011eaa:	2600      	movs	r6, #0
 8011eac:	42a6      	cmp	r6, r4
 8011eae:	d109      	bne.n	8011ec4 <__libc_init_array+0x24>
 8011eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8011ee0 <__libc_init_array+0x40>)
 8011eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8011ee4 <__libc_init_array+0x44>)
 8011eb4:	f001 fa78 	bl	80133a8 <_init>
 8011eb8:	1b64      	subs	r4, r4, r5
 8011eba:	10a4      	asrs	r4, r4, #2
 8011ebc:	2600      	movs	r6, #0
 8011ebe:	42a6      	cmp	r6, r4
 8011ec0:	d105      	bne.n	8011ece <__libc_init_array+0x2e>
 8011ec2:	bd70      	pop	{r4, r5, r6, pc}
 8011ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ec8:	4798      	blx	r3
 8011eca:	3601      	adds	r6, #1
 8011ecc:	e7ee      	b.n	8011eac <__libc_init_array+0xc>
 8011ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ed2:	4798      	blx	r3
 8011ed4:	3601      	adds	r6, #1
 8011ed6:	e7f2      	b.n	8011ebe <__libc_init_array+0x1e>
 8011ed8:	08013fac 	.word	0x08013fac
 8011edc:	08013fac 	.word	0x08013fac
 8011ee0:	08013fac 	.word	0x08013fac
 8011ee4:	08013fb0 	.word	0x08013fb0

08011ee8 <__retarget_lock_init_recursive>:
 8011ee8:	4770      	bx	lr

08011eea <__retarget_lock_acquire_recursive>:
 8011eea:	4770      	bx	lr

08011eec <__retarget_lock_release_recursive>:
 8011eec:	4770      	bx	lr

08011eee <memcpy>:
 8011eee:	440a      	add	r2, r1
 8011ef0:	4291      	cmp	r1, r2
 8011ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ef6:	d100      	bne.n	8011efa <memcpy+0xc>
 8011ef8:	4770      	bx	lr
 8011efa:	b510      	push	{r4, lr}
 8011efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f04:	4291      	cmp	r1, r2
 8011f06:	d1f9      	bne.n	8011efc <memcpy+0xe>
 8011f08:	bd10      	pop	{r4, pc}
	...

08011f0c <_free_r>:
 8011f0c:	b538      	push	{r3, r4, r5, lr}
 8011f0e:	4605      	mov	r5, r0
 8011f10:	2900      	cmp	r1, #0
 8011f12:	d041      	beq.n	8011f98 <_free_r+0x8c>
 8011f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f18:	1f0c      	subs	r4, r1, #4
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	bfb8      	it	lt
 8011f1e:	18e4      	addlt	r4, r4, r3
 8011f20:	f7ff fc8a 	bl	8011838 <__malloc_lock>
 8011f24:	4a1d      	ldr	r2, [pc, #116]	@ (8011f9c <_free_r+0x90>)
 8011f26:	6813      	ldr	r3, [r2, #0]
 8011f28:	b933      	cbnz	r3, 8011f38 <_free_r+0x2c>
 8011f2a:	6063      	str	r3, [r4, #4]
 8011f2c:	6014      	str	r4, [r2, #0]
 8011f2e:	4628      	mov	r0, r5
 8011f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f34:	f7ff bc86 	b.w	8011844 <__malloc_unlock>
 8011f38:	42a3      	cmp	r3, r4
 8011f3a:	d908      	bls.n	8011f4e <_free_r+0x42>
 8011f3c:	6820      	ldr	r0, [r4, #0]
 8011f3e:	1821      	adds	r1, r4, r0
 8011f40:	428b      	cmp	r3, r1
 8011f42:	bf01      	itttt	eq
 8011f44:	6819      	ldreq	r1, [r3, #0]
 8011f46:	685b      	ldreq	r3, [r3, #4]
 8011f48:	1809      	addeq	r1, r1, r0
 8011f4a:	6021      	streq	r1, [r4, #0]
 8011f4c:	e7ed      	b.n	8011f2a <_free_r+0x1e>
 8011f4e:	461a      	mov	r2, r3
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	b10b      	cbz	r3, 8011f58 <_free_r+0x4c>
 8011f54:	42a3      	cmp	r3, r4
 8011f56:	d9fa      	bls.n	8011f4e <_free_r+0x42>
 8011f58:	6811      	ldr	r1, [r2, #0]
 8011f5a:	1850      	adds	r0, r2, r1
 8011f5c:	42a0      	cmp	r0, r4
 8011f5e:	d10b      	bne.n	8011f78 <_free_r+0x6c>
 8011f60:	6820      	ldr	r0, [r4, #0]
 8011f62:	4401      	add	r1, r0
 8011f64:	1850      	adds	r0, r2, r1
 8011f66:	4283      	cmp	r3, r0
 8011f68:	6011      	str	r1, [r2, #0]
 8011f6a:	d1e0      	bne.n	8011f2e <_free_r+0x22>
 8011f6c:	6818      	ldr	r0, [r3, #0]
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	6053      	str	r3, [r2, #4]
 8011f72:	4408      	add	r0, r1
 8011f74:	6010      	str	r0, [r2, #0]
 8011f76:	e7da      	b.n	8011f2e <_free_r+0x22>
 8011f78:	d902      	bls.n	8011f80 <_free_r+0x74>
 8011f7a:	230c      	movs	r3, #12
 8011f7c:	602b      	str	r3, [r5, #0]
 8011f7e:	e7d6      	b.n	8011f2e <_free_r+0x22>
 8011f80:	6820      	ldr	r0, [r4, #0]
 8011f82:	1821      	adds	r1, r4, r0
 8011f84:	428b      	cmp	r3, r1
 8011f86:	bf04      	itt	eq
 8011f88:	6819      	ldreq	r1, [r3, #0]
 8011f8a:	685b      	ldreq	r3, [r3, #4]
 8011f8c:	6063      	str	r3, [r4, #4]
 8011f8e:	bf04      	itt	eq
 8011f90:	1809      	addeq	r1, r1, r0
 8011f92:	6021      	streq	r1, [r4, #0]
 8011f94:	6054      	str	r4, [r2, #4]
 8011f96:	e7ca      	b.n	8011f2e <_free_r+0x22>
 8011f98:	bd38      	pop	{r3, r4, r5, pc}
 8011f9a:	bf00      	nop
 8011f9c:	200130b0 	.word	0x200130b0

08011fa0 <_malloc_usable_size_r>:
 8011fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fa4:	1f18      	subs	r0, r3, #4
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	bfbc      	itt	lt
 8011faa:	580b      	ldrlt	r3, [r1, r0]
 8011fac:	18c0      	addlt	r0, r0, r3
 8011fae:	4770      	bx	lr

08011fb0 <__ssputs_r>:
 8011fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fb4:	688e      	ldr	r6, [r1, #8]
 8011fb6:	461f      	mov	r7, r3
 8011fb8:	42be      	cmp	r6, r7
 8011fba:	680b      	ldr	r3, [r1, #0]
 8011fbc:	4682      	mov	sl, r0
 8011fbe:	460c      	mov	r4, r1
 8011fc0:	4690      	mov	r8, r2
 8011fc2:	d82d      	bhi.n	8012020 <__ssputs_r+0x70>
 8011fc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011fc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011fcc:	d026      	beq.n	801201c <__ssputs_r+0x6c>
 8011fce:	6965      	ldr	r5, [r4, #20]
 8011fd0:	6909      	ldr	r1, [r1, #16]
 8011fd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011fd6:	eba3 0901 	sub.w	r9, r3, r1
 8011fda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011fde:	1c7b      	adds	r3, r7, #1
 8011fe0:	444b      	add	r3, r9
 8011fe2:	106d      	asrs	r5, r5, #1
 8011fe4:	429d      	cmp	r5, r3
 8011fe6:	bf38      	it	cc
 8011fe8:	461d      	movcc	r5, r3
 8011fea:	0553      	lsls	r3, r2, #21
 8011fec:	d527      	bpl.n	801203e <__ssputs_r+0x8e>
 8011fee:	4629      	mov	r1, r5
 8011ff0:	f7ff fba2 	bl	8011738 <_malloc_r>
 8011ff4:	4606      	mov	r6, r0
 8011ff6:	b360      	cbz	r0, 8012052 <__ssputs_r+0xa2>
 8011ff8:	6921      	ldr	r1, [r4, #16]
 8011ffa:	464a      	mov	r2, r9
 8011ffc:	f7ff ff77 	bl	8011eee <memcpy>
 8012000:	89a3      	ldrh	r3, [r4, #12]
 8012002:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801200a:	81a3      	strh	r3, [r4, #12]
 801200c:	6126      	str	r6, [r4, #16]
 801200e:	6165      	str	r5, [r4, #20]
 8012010:	444e      	add	r6, r9
 8012012:	eba5 0509 	sub.w	r5, r5, r9
 8012016:	6026      	str	r6, [r4, #0]
 8012018:	60a5      	str	r5, [r4, #8]
 801201a:	463e      	mov	r6, r7
 801201c:	42be      	cmp	r6, r7
 801201e:	d900      	bls.n	8012022 <__ssputs_r+0x72>
 8012020:	463e      	mov	r6, r7
 8012022:	6820      	ldr	r0, [r4, #0]
 8012024:	4632      	mov	r2, r6
 8012026:	4641      	mov	r1, r8
 8012028:	f001 f887 	bl	801313a <memmove>
 801202c:	68a3      	ldr	r3, [r4, #8]
 801202e:	1b9b      	subs	r3, r3, r6
 8012030:	60a3      	str	r3, [r4, #8]
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	4433      	add	r3, r6
 8012036:	6023      	str	r3, [r4, #0]
 8012038:	2000      	movs	r0, #0
 801203a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801203e:	462a      	mov	r2, r5
 8012040:	f7ff fc0e 	bl	8011860 <_realloc_r>
 8012044:	4606      	mov	r6, r0
 8012046:	2800      	cmp	r0, #0
 8012048:	d1e0      	bne.n	801200c <__ssputs_r+0x5c>
 801204a:	6921      	ldr	r1, [r4, #16]
 801204c:	4650      	mov	r0, sl
 801204e:	f7ff ff5d 	bl	8011f0c <_free_r>
 8012052:	230c      	movs	r3, #12
 8012054:	f8ca 3000 	str.w	r3, [sl]
 8012058:	89a3      	ldrh	r3, [r4, #12]
 801205a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801205e:	81a3      	strh	r3, [r4, #12]
 8012060:	f04f 30ff 	mov.w	r0, #4294967295
 8012064:	e7e9      	b.n	801203a <__ssputs_r+0x8a>
	...

08012068 <_svfiprintf_r>:
 8012068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801206c:	4698      	mov	r8, r3
 801206e:	898b      	ldrh	r3, [r1, #12]
 8012070:	061b      	lsls	r3, r3, #24
 8012072:	b09d      	sub	sp, #116	@ 0x74
 8012074:	4607      	mov	r7, r0
 8012076:	460d      	mov	r5, r1
 8012078:	4614      	mov	r4, r2
 801207a:	d510      	bpl.n	801209e <_svfiprintf_r+0x36>
 801207c:	690b      	ldr	r3, [r1, #16]
 801207e:	b973      	cbnz	r3, 801209e <_svfiprintf_r+0x36>
 8012080:	2140      	movs	r1, #64	@ 0x40
 8012082:	f7ff fb59 	bl	8011738 <_malloc_r>
 8012086:	6028      	str	r0, [r5, #0]
 8012088:	6128      	str	r0, [r5, #16]
 801208a:	b930      	cbnz	r0, 801209a <_svfiprintf_r+0x32>
 801208c:	230c      	movs	r3, #12
 801208e:	603b      	str	r3, [r7, #0]
 8012090:	f04f 30ff 	mov.w	r0, #4294967295
 8012094:	b01d      	add	sp, #116	@ 0x74
 8012096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801209a:	2340      	movs	r3, #64	@ 0x40
 801209c:	616b      	str	r3, [r5, #20]
 801209e:	2300      	movs	r3, #0
 80120a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80120a2:	2320      	movs	r3, #32
 80120a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80120ac:	2330      	movs	r3, #48	@ 0x30
 80120ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801224c <_svfiprintf_r+0x1e4>
 80120b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80120b6:	f04f 0901 	mov.w	r9, #1
 80120ba:	4623      	mov	r3, r4
 80120bc:	469a      	mov	sl, r3
 80120be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120c2:	b10a      	cbz	r2, 80120c8 <_svfiprintf_r+0x60>
 80120c4:	2a25      	cmp	r2, #37	@ 0x25
 80120c6:	d1f9      	bne.n	80120bc <_svfiprintf_r+0x54>
 80120c8:	ebba 0b04 	subs.w	fp, sl, r4
 80120cc:	d00b      	beq.n	80120e6 <_svfiprintf_r+0x7e>
 80120ce:	465b      	mov	r3, fp
 80120d0:	4622      	mov	r2, r4
 80120d2:	4629      	mov	r1, r5
 80120d4:	4638      	mov	r0, r7
 80120d6:	f7ff ff6b 	bl	8011fb0 <__ssputs_r>
 80120da:	3001      	adds	r0, #1
 80120dc:	f000 80a7 	beq.w	801222e <_svfiprintf_r+0x1c6>
 80120e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120e2:	445a      	add	r2, fp
 80120e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80120e6:	f89a 3000 	ldrb.w	r3, [sl]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	f000 809f 	beq.w	801222e <_svfiprintf_r+0x1c6>
 80120f0:	2300      	movs	r3, #0
 80120f2:	f04f 32ff 	mov.w	r2, #4294967295
 80120f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120fa:	f10a 0a01 	add.w	sl, sl, #1
 80120fe:	9304      	str	r3, [sp, #16]
 8012100:	9307      	str	r3, [sp, #28]
 8012102:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012106:	931a      	str	r3, [sp, #104]	@ 0x68
 8012108:	4654      	mov	r4, sl
 801210a:	2205      	movs	r2, #5
 801210c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012110:	484e      	ldr	r0, [pc, #312]	@ (801224c <_svfiprintf_r+0x1e4>)
 8012112:	f7f6 f895 	bl	8008240 <memchr>
 8012116:	9a04      	ldr	r2, [sp, #16]
 8012118:	b9d8      	cbnz	r0, 8012152 <_svfiprintf_r+0xea>
 801211a:	06d0      	lsls	r0, r2, #27
 801211c:	bf44      	itt	mi
 801211e:	2320      	movmi	r3, #32
 8012120:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012124:	0711      	lsls	r1, r2, #28
 8012126:	bf44      	itt	mi
 8012128:	232b      	movmi	r3, #43	@ 0x2b
 801212a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801212e:	f89a 3000 	ldrb.w	r3, [sl]
 8012132:	2b2a      	cmp	r3, #42	@ 0x2a
 8012134:	d015      	beq.n	8012162 <_svfiprintf_r+0xfa>
 8012136:	9a07      	ldr	r2, [sp, #28]
 8012138:	4654      	mov	r4, sl
 801213a:	2000      	movs	r0, #0
 801213c:	f04f 0c0a 	mov.w	ip, #10
 8012140:	4621      	mov	r1, r4
 8012142:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012146:	3b30      	subs	r3, #48	@ 0x30
 8012148:	2b09      	cmp	r3, #9
 801214a:	d94b      	bls.n	80121e4 <_svfiprintf_r+0x17c>
 801214c:	b1b0      	cbz	r0, 801217c <_svfiprintf_r+0x114>
 801214e:	9207      	str	r2, [sp, #28]
 8012150:	e014      	b.n	801217c <_svfiprintf_r+0x114>
 8012152:	eba0 0308 	sub.w	r3, r0, r8
 8012156:	fa09 f303 	lsl.w	r3, r9, r3
 801215a:	4313      	orrs	r3, r2
 801215c:	9304      	str	r3, [sp, #16]
 801215e:	46a2      	mov	sl, r4
 8012160:	e7d2      	b.n	8012108 <_svfiprintf_r+0xa0>
 8012162:	9b03      	ldr	r3, [sp, #12]
 8012164:	1d19      	adds	r1, r3, #4
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	9103      	str	r1, [sp, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	bfbb      	ittet	lt
 801216e:	425b      	neglt	r3, r3
 8012170:	f042 0202 	orrlt.w	r2, r2, #2
 8012174:	9307      	strge	r3, [sp, #28]
 8012176:	9307      	strlt	r3, [sp, #28]
 8012178:	bfb8      	it	lt
 801217a:	9204      	strlt	r2, [sp, #16]
 801217c:	7823      	ldrb	r3, [r4, #0]
 801217e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012180:	d10a      	bne.n	8012198 <_svfiprintf_r+0x130>
 8012182:	7863      	ldrb	r3, [r4, #1]
 8012184:	2b2a      	cmp	r3, #42	@ 0x2a
 8012186:	d132      	bne.n	80121ee <_svfiprintf_r+0x186>
 8012188:	9b03      	ldr	r3, [sp, #12]
 801218a:	1d1a      	adds	r2, r3, #4
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	9203      	str	r2, [sp, #12]
 8012190:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012194:	3402      	adds	r4, #2
 8012196:	9305      	str	r3, [sp, #20]
 8012198:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801225c <_svfiprintf_r+0x1f4>
 801219c:	7821      	ldrb	r1, [r4, #0]
 801219e:	2203      	movs	r2, #3
 80121a0:	4650      	mov	r0, sl
 80121a2:	f7f6 f84d 	bl	8008240 <memchr>
 80121a6:	b138      	cbz	r0, 80121b8 <_svfiprintf_r+0x150>
 80121a8:	9b04      	ldr	r3, [sp, #16]
 80121aa:	eba0 000a 	sub.w	r0, r0, sl
 80121ae:	2240      	movs	r2, #64	@ 0x40
 80121b0:	4082      	lsls	r2, r0
 80121b2:	4313      	orrs	r3, r2
 80121b4:	3401      	adds	r4, #1
 80121b6:	9304      	str	r3, [sp, #16]
 80121b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121bc:	4824      	ldr	r0, [pc, #144]	@ (8012250 <_svfiprintf_r+0x1e8>)
 80121be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121c2:	2206      	movs	r2, #6
 80121c4:	f7f6 f83c 	bl	8008240 <memchr>
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d036      	beq.n	801223a <_svfiprintf_r+0x1d2>
 80121cc:	4b21      	ldr	r3, [pc, #132]	@ (8012254 <_svfiprintf_r+0x1ec>)
 80121ce:	bb1b      	cbnz	r3, 8012218 <_svfiprintf_r+0x1b0>
 80121d0:	9b03      	ldr	r3, [sp, #12]
 80121d2:	3307      	adds	r3, #7
 80121d4:	f023 0307 	bic.w	r3, r3, #7
 80121d8:	3308      	adds	r3, #8
 80121da:	9303      	str	r3, [sp, #12]
 80121dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121de:	4433      	add	r3, r6
 80121e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80121e2:	e76a      	b.n	80120ba <_svfiprintf_r+0x52>
 80121e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80121e8:	460c      	mov	r4, r1
 80121ea:	2001      	movs	r0, #1
 80121ec:	e7a8      	b.n	8012140 <_svfiprintf_r+0xd8>
 80121ee:	2300      	movs	r3, #0
 80121f0:	3401      	adds	r4, #1
 80121f2:	9305      	str	r3, [sp, #20]
 80121f4:	4619      	mov	r1, r3
 80121f6:	f04f 0c0a 	mov.w	ip, #10
 80121fa:	4620      	mov	r0, r4
 80121fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012200:	3a30      	subs	r2, #48	@ 0x30
 8012202:	2a09      	cmp	r2, #9
 8012204:	d903      	bls.n	801220e <_svfiprintf_r+0x1a6>
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0c6      	beq.n	8012198 <_svfiprintf_r+0x130>
 801220a:	9105      	str	r1, [sp, #20]
 801220c:	e7c4      	b.n	8012198 <_svfiprintf_r+0x130>
 801220e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012212:	4604      	mov	r4, r0
 8012214:	2301      	movs	r3, #1
 8012216:	e7f0      	b.n	80121fa <_svfiprintf_r+0x192>
 8012218:	ab03      	add	r3, sp, #12
 801221a:	9300      	str	r3, [sp, #0]
 801221c:	462a      	mov	r2, r5
 801221e:	4b0e      	ldr	r3, [pc, #56]	@ (8012258 <_svfiprintf_r+0x1f0>)
 8012220:	a904      	add	r1, sp, #16
 8012222:	4638      	mov	r0, r7
 8012224:	f3af 8000 	nop.w
 8012228:	1c42      	adds	r2, r0, #1
 801222a:	4606      	mov	r6, r0
 801222c:	d1d6      	bne.n	80121dc <_svfiprintf_r+0x174>
 801222e:	89ab      	ldrh	r3, [r5, #12]
 8012230:	065b      	lsls	r3, r3, #25
 8012232:	f53f af2d 	bmi.w	8012090 <_svfiprintf_r+0x28>
 8012236:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012238:	e72c      	b.n	8012094 <_svfiprintf_r+0x2c>
 801223a:	ab03      	add	r3, sp, #12
 801223c:	9300      	str	r3, [sp, #0]
 801223e:	462a      	mov	r2, r5
 8012240:	4b05      	ldr	r3, [pc, #20]	@ (8012258 <_svfiprintf_r+0x1f0>)
 8012242:	a904      	add	r1, sp, #16
 8012244:	4638      	mov	r0, r7
 8012246:	f000 fb8b 	bl	8012960 <_printf_i>
 801224a:	e7ed      	b.n	8012228 <_svfiprintf_r+0x1c0>
 801224c:	08013f55 	.word	0x08013f55
 8012250:	08013f5f 	.word	0x08013f5f
 8012254:	00000000 	.word	0x00000000
 8012258:	08011fb1 	.word	0x08011fb1
 801225c:	08013f5b 	.word	0x08013f5b

08012260 <_sungetc_r>:
 8012260:	b538      	push	{r3, r4, r5, lr}
 8012262:	1c4b      	adds	r3, r1, #1
 8012264:	4614      	mov	r4, r2
 8012266:	d103      	bne.n	8012270 <_sungetc_r+0x10>
 8012268:	f04f 35ff 	mov.w	r5, #4294967295
 801226c:	4628      	mov	r0, r5
 801226e:	bd38      	pop	{r3, r4, r5, pc}
 8012270:	8993      	ldrh	r3, [r2, #12]
 8012272:	f023 0320 	bic.w	r3, r3, #32
 8012276:	8193      	strh	r3, [r2, #12]
 8012278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801227a:	6852      	ldr	r2, [r2, #4]
 801227c:	b2cd      	uxtb	r5, r1
 801227e:	b18b      	cbz	r3, 80122a4 <_sungetc_r+0x44>
 8012280:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012282:	4293      	cmp	r3, r2
 8012284:	dd08      	ble.n	8012298 <_sungetc_r+0x38>
 8012286:	6823      	ldr	r3, [r4, #0]
 8012288:	1e5a      	subs	r2, r3, #1
 801228a:	6022      	str	r2, [r4, #0]
 801228c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012290:	6863      	ldr	r3, [r4, #4]
 8012292:	3301      	adds	r3, #1
 8012294:	6063      	str	r3, [r4, #4]
 8012296:	e7e9      	b.n	801226c <_sungetc_r+0xc>
 8012298:	4621      	mov	r1, r4
 801229a:	f000 ff14 	bl	80130c6 <__submore>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d0f1      	beq.n	8012286 <_sungetc_r+0x26>
 80122a2:	e7e1      	b.n	8012268 <_sungetc_r+0x8>
 80122a4:	6921      	ldr	r1, [r4, #16]
 80122a6:	6823      	ldr	r3, [r4, #0]
 80122a8:	b151      	cbz	r1, 80122c0 <_sungetc_r+0x60>
 80122aa:	4299      	cmp	r1, r3
 80122ac:	d208      	bcs.n	80122c0 <_sungetc_r+0x60>
 80122ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80122b2:	42a9      	cmp	r1, r5
 80122b4:	d104      	bne.n	80122c0 <_sungetc_r+0x60>
 80122b6:	3b01      	subs	r3, #1
 80122b8:	3201      	adds	r2, #1
 80122ba:	6023      	str	r3, [r4, #0]
 80122bc:	6062      	str	r2, [r4, #4]
 80122be:	e7d5      	b.n	801226c <_sungetc_r+0xc>
 80122c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80122c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80122c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80122ca:	2303      	movs	r3, #3
 80122cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80122ce:	4623      	mov	r3, r4
 80122d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80122d4:	6023      	str	r3, [r4, #0]
 80122d6:	2301      	movs	r3, #1
 80122d8:	e7dc      	b.n	8012294 <_sungetc_r+0x34>

080122da <__ssrefill_r>:
 80122da:	b510      	push	{r4, lr}
 80122dc:	460c      	mov	r4, r1
 80122de:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80122e0:	b169      	cbz	r1, 80122fe <__ssrefill_r+0x24>
 80122e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80122e6:	4299      	cmp	r1, r3
 80122e8:	d001      	beq.n	80122ee <__ssrefill_r+0x14>
 80122ea:	f7ff fe0f 	bl	8011f0c <_free_r>
 80122ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122f0:	6063      	str	r3, [r4, #4]
 80122f2:	2000      	movs	r0, #0
 80122f4:	6360      	str	r0, [r4, #52]	@ 0x34
 80122f6:	b113      	cbz	r3, 80122fe <__ssrefill_r+0x24>
 80122f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80122fa:	6023      	str	r3, [r4, #0]
 80122fc:	bd10      	pop	{r4, pc}
 80122fe:	6923      	ldr	r3, [r4, #16]
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	2300      	movs	r3, #0
 8012304:	6063      	str	r3, [r4, #4]
 8012306:	89a3      	ldrh	r3, [r4, #12]
 8012308:	f043 0320 	orr.w	r3, r3, #32
 801230c:	81a3      	strh	r3, [r4, #12]
 801230e:	f04f 30ff 	mov.w	r0, #4294967295
 8012312:	e7f3      	b.n	80122fc <__ssrefill_r+0x22>

08012314 <__ssvfiscanf_r>:
 8012314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012318:	460c      	mov	r4, r1
 801231a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801231e:	2100      	movs	r1, #0
 8012320:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012324:	49a6      	ldr	r1, [pc, #664]	@ (80125c0 <__ssvfiscanf_r+0x2ac>)
 8012326:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012328:	f10d 0804 	add.w	r8, sp, #4
 801232c:	49a5      	ldr	r1, [pc, #660]	@ (80125c4 <__ssvfiscanf_r+0x2b0>)
 801232e:	4fa6      	ldr	r7, [pc, #664]	@ (80125c8 <__ssvfiscanf_r+0x2b4>)
 8012330:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012334:	4606      	mov	r6, r0
 8012336:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012338:	9300      	str	r3, [sp, #0]
 801233a:	f892 9000 	ldrb.w	r9, [r2]
 801233e:	f1b9 0f00 	cmp.w	r9, #0
 8012342:	f000 8158 	beq.w	80125f6 <__ssvfiscanf_r+0x2e2>
 8012346:	f817 3009 	ldrb.w	r3, [r7, r9]
 801234a:	f013 0308 	ands.w	r3, r3, #8
 801234e:	f102 0501 	add.w	r5, r2, #1
 8012352:	d019      	beq.n	8012388 <__ssvfiscanf_r+0x74>
 8012354:	6863      	ldr	r3, [r4, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	dd0f      	ble.n	801237a <__ssvfiscanf_r+0x66>
 801235a:	6823      	ldr	r3, [r4, #0]
 801235c:	781a      	ldrb	r2, [r3, #0]
 801235e:	5cba      	ldrb	r2, [r7, r2]
 8012360:	0712      	lsls	r2, r2, #28
 8012362:	d401      	bmi.n	8012368 <__ssvfiscanf_r+0x54>
 8012364:	462a      	mov	r2, r5
 8012366:	e7e8      	b.n	801233a <__ssvfiscanf_r+0x26>
 8012368:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801236a:	3201      	adds	r2, #1
 801236c:	9245      	str	r2, [sp, #276]	@ 0x114
 801236e:	6862      	ldr	r2, [r4, #4]
 8012370:	3301      	adds	r3, #1
 8012372:	3a01      	subs	r2, #1
 8012374:	6062      	str	r2, [r4, #4]
 8012376:	6023      	str	r3, [r4, #0]
 8012378:	e7ec      	b.n	8012354 <__ssvfiscanf_r+0x40>
 801237a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801237c:	4621      	mov	r1, r4
 801237e:	4630      	mov	r0, r6
 8012380:	4798      	blx	r3
 8012382:	2800      	cmp	r0, #0
 8012384:	d0e9      	beq.n	801235a <__ssvfiscanf_r+0x46>
 8012386:	e7ed      	b.n	8012364 <__ssvfiscanf_r+0x50>
 8012388:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801238c:	f040 8085 	bne.w	801249a <__ssvfiscanf_r+0x186>
 8012390:	9341      	str	r3, [sp, #260]	@ 0x104
 8012392:	9343      	str	r3, [sp, #268]	@ 0x10c
 8012394:	7853      	ldrb	r3, [r2, #1]
 8012396:	2b2a      	cmp	r3, #42	@ 0x2a
 8012398:	bf02      	ittt	eq
 801239a:	2310      	moveq	r3, #16
 801239c:	1c95      	addeq	r5, r2, #2
 801239e:	9341      	streq	r3, [sp, #260]	@ 0x104
 80123a0:	220a      	movs	r2, #10
 80123a2:	46aa      	mov	sl, r5
 80123a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80123a8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80123ac:	2b09      	cmp	r3, #9
 80123ae:	d91e      	bls.n	80123ee <__ssvfiscanf_r+0xda>
 80123b0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80125cc <__ssvfiscanf_r+0x2b8>
 80123b4:	2203      	movs	r2, #3
 80123b6:	4658      	mov	r0, fp
 80123b8:	f7f5 ff42 	bl	8008240 <memchr>
 80123bc:	b138      	cbz	r0, 80123ce <__ssvfiscanf_r+0xba>
 80123be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80123c0:	eba0 000b 	sub.w	r0, r0, fp
 80123c4:	2301      	movs	r3, #1
 80123c6:	4083      	lsls	r3, r0
 80123c8:	4313      	orrs	r3, r2
 80123ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80123cc:	4655      	mov	r5, sl
 80123ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80123d2:	2b78      	cmp	r3, #120	@ 0x78
 80123d4:	d806      	bhi.n	80123e4 <__ssvfiscanf_r+0xd0>
 80123d6:	2b57      	cmp	r3, #87	@ 0x57
 80123d8:	d810      	bhi.n	80123fc <__ssvfiscanf_r+0xe8>
 80123da:	2b25      	cmp	r3, #37	@ 0x25
 80123dc:	d05d      	beq.n	801249a <__ssvfiscanf_r+0x186>
 80123de:	d857      	bhi.n	8012490 <__ssvfiscanf_r+0x17c>
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d075      	beq.n	80124d0 <__ssvfiscanf_r+0x1bc>
 80123e4:	2303      	movs	r3, #3
 80123e6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80123e8:	230a      	movs	r3, #10
 80123ea:	9342      	str	r3, [sp, #264]	@ 0x108
 80123ec:	e088      	b.n	8012500 <__ssvfiscanf_r+0x1ec>
 80123ee:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80123f0:	fb02 1103 	mla	r1, r2, r3, r1
 80123f4:	3930      	subs	r1, #48	@ 0x30
 80123f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80123f8:	4655      	mov	r5, sl
 80123fa:	e7d2      	b.n	80123a2 <__ssvfiscanf_r+0x8e>
 80123fc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012400:	2a20      	cmp	r2, #32
 8012402:	d8ef      	bhi.n	80123e4 <__ssvfiscanf_r+0xd0>
 8012404:	a101      	add	r1, pc, #4	@ (adr r1, 801240c <__ssvfiscanf_r+0xf8>)
 8012406:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801240a:	bf00      	nop
 801240c:	080124df 	.word	0x080124df
 8012410:	080123e5 	.word	0x080123e5
 8012414:	080123e5 	.word	0x080123e5
 8012418:	08012539 	.word	0x08012539
 801241c:	080123e5 	.word	0x080123e5
 8012420:	080123e5 	.word	0x080123e5
 8012424:	080123e5 	.word	0x080123e5
 8012428:	080123e5 	.word	0x080123e5
 801242c:	080123e5 	.word	0x080123e5
 8012430:	080123e5 	.word	0x080123e5
 8012434:	080123e5 	.word	0x080123e5
 8012438:	0801254f 	.word	0x0801254f
 801243c:	08012535 	.word	0x08012535
 8012440:	08012497 	.word	0x08012497
 8012444:	08012497 	.word	0x08012497
 8012448:	08012497 	.word	0x08012497
 801244c:	080123e5 	.word	0x080123e5
 8012450:	080124f1 	.word	0x080124f1
 8012454:	080123e5 	.word	0x080123e5
 8012458:	080123e5 	.word	0x080123e5
 801245c:	080123e5 	.word	0x080123e5
 8012460:	080123e5 	.word	0x080123e5
 8012464:	0801255f 	.word	0x0801255f
 8012468:	080124f9 	.word	0x080124f9
 801246c:	080124d7 	.word	0x080124d7
 8012470:	080123e5 	.word	0x080123e5
 8012474:	080123e5 	.word	0x080123e5
 8012478:	0801255b 	.word	0x0801255b
 801247c:	080123e5 	.word	0x080123e5
 8012480:	08012535 	.word	0x08012535
 8012484:	080123e5 	.word	0x080123e5
 8012488:	080123e5 	.word	0x080123e5
 801248c:	080124df 	.word	0x080124df
 8012490:	3b45      	subs	r3, #69	@ 0x45
 8012492:	2b02      	cmp	r3, #2
 8012494:	d8a6      	bhi.n	80123e4 <__ssvfiscanf_r+0xd0>
 8012496:	2305      	movs	r3, #5
 8012498:	e031      	b.n	80124fe <__ssvfiscanf_r+0x1ea>
 801249a:	6863      	ldr	r3, [r4, #4]
 801249c:	2b00      	cmp	r3, #0
 801249e:	dd0d      	ble.n	80124bc <__ssvfiscanf_r+0x1a8>
 80124a0:	6823      	ldr	r3, [r4, #0]
 80124a2:	781a      	ldrb	r2, [r3, #0]
 80124a4:	454a      	cmp	r2, r9
 80124a6:	f040 80a6 	bne.w	80125f6 <__ssvfiscanf_r+0x2e2>
 80124aa:	3301      	adds	r3, #1
 80124ac:	6862      	ldr	r2, [r4, #4]
 80124ae:	6023      	str	r3, [r4, #0]
 80124b0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80124b2:	3a01      	subs	r2, #1
 80124b4:	3301      	adds	r3, #1
 80124b6:	6062      	str	r2, [r4, #4]
 80124b8:	9345      	str	r3, [sp, #276]	@ 0x114
 80124ba:	e753      	b.n	8012364 <__ssvfiscanf_r+0x50>
 80124bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80124be:	4621      	mov	r1, r4
 80124c0:	4630      	mov	r0, r6
 80124c2:	4798      	blx	r3
 80124c4:	2800      	cmp	r0, #0
 80124c6:	d0eb      	beq.n	80124a0 <__ssvfiscanf_r+0x18c>
 80124c8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80124ca:	2800      	cmp	r0, #0
 80124cc:	f040 808b 	bne.w	80125e6 <__ssvfiscanf_r+0x2d2>
 80124d0:	f04f 30ff 	mov.w	r0, #4294967295
 80124d4:	e08b      	b.n	80125ee <__ssvfiscanf_r+0x2da>
 80124d6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80124d8:	f042 0220 	orr.w	r2, r2, #32
 80124dc:	9241      	str	r2, [sp, #260]	@ 0x104
 80124de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80124e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80124e4:	9241      	str	r2, [sp, #260]	@ 0x104
 80124e6:	2210      	movs	r2, #16
 80124e8:	2b6e      	cmp	r3, #110	@ 0x6e
 80124ea:	9242      	str	r2, [sp, #264]	@ 0x108
 80124ec:	d902      	bls.n	80124f4 <__ssvfiscanf_r+0x1e0>
 80124ee:	e005      	b.n	80124fc <__ssvfiscanf_r+0x1e8>
 80124f0:	2300      	movs	r3, #0
 80124f2:	9342      	str	r3, [sp, #264]	@ 0x108
 80124f4:	2303      	movs	r3, #3
 80124f6:	e002      	b.n	80124fe <__ssvfiscanf_r+0x1ea>
 80124f8:	2308      	movs	r3, #8
 80124fa:	9342      	str	r3, [sp, #264]	@ 0x108
 80124fc:	2304      	movs	r3, #4
 80124fe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012500:	6863      	ldr	r3, [r4, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	dd39      	ble.n	801257a <__ssvfiscanf_r+0x266>
 8012506:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012508:	0659      	lsls	r1, r3, #25
 801250a:	d404      	bmi.n	8012516 <__ssvfiscanf_r+0x202>
 801250c:	6823      	ldr	r3, [r4, #0]
 801250e:	781a      	ldrb	r2, [r3, #0]
 8012510:	5cba      	ldrb	r2, [r7, r2]
 8012512:	0712      	lsls	r2, r2, #28
 8012514:	d438      	bmi.n	8012588 <__ssvfiscanf_r+0x274>
 8012516:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012518:	2b02      	cmp	r3, #2
 801251a:	dc47      	bgt.n	80125ac <__ssvfiscanf_r+0x298>
 801251c:	466b      	mov	r3, sp
 801251e:	4622      	mov	r2, r4
 8012520:	a941      	add	r1, sp, #260	@ 0x104
 8012522:	4630      	mov	r0, r6
 8012524:	f000 fb3a 	bl	8012b9c <_scanf_chars>
 8012528:	2801      	cmp	r0, #1
 801252a:	d064      	beq.n	80125f6 <__ssvfiscanf_r+0x2e2>
 801252c:	2802      	cmp	r0, #2
 801252e:	f47f af19 	bne.w	8012364 <__ssvfiscanf_r+0x50>
 8012532:	e7c9      	b.n	80124c8 <__ssvfiscanf_r+0x1b4>
 8012534:	220a      	movs	r2, #10
 8012536:	e7d7      	b.n	80124e8 <__ssvfiscanf_r+0x1d4>
 8012538:	4629      	mov	r1, r5
 801253a:	4640      	mov	r0, r8
 801253c:	f000 fd8a 	bl	8013054 <__sccl>
 8012540:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012546:	9341      	str	r3, [sp, #260]	@ 0x104
 8012548:	4605      	mov	r5, r0
 801254a:	2301      	movs	r3, #1
 801254c:	e7d7      	b.n	80124fe <__ssvfiscanf_r+0x1ea>
 801254e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012554:	9341      	str	r3, [sp, #260]	@ 0x104
 8012556:	2300      	movs	r3, #0
 8012558:	e7d1      	b.n	80124fe <__ssvfiscanf_r+0x1ea>
 801255a:	2302      	movs	r3, #2
 801255c:	e7cf      	b.n	80124fe <__ssvfiscanf_r+0x1ea>
 801255e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012560:	06c3      	lsls	r3, r0, #27
 8012562:	f53f aeff 	bmi.w	8012364 <__ssvfiscanf_r+0x50>
 8012566:	9b00      	ldr	r3, [sp, #0]
 8012568:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801256a:	1d19      	adds	r1, r3, #4
 801256c:	9100      	str	r1, [sp, #0]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	07c0      	lsls	r0, r0, #31
 8012572:	bf4c      	ite	mi
 8012574:	801a      	strhmi	r2, [r3, #0]
 8012576:	601a      	strpl	r2, [r3, #0]
 8012578:	e6f4      	b.n	8012364 <__ssvfiscanf_r+0x50>
 801257a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801257c:	4621      	mov	r1, r4
 801257e:	4630      	mov	r0, r6
 8012580:	4798      	blx	r3
 8012582:	2800      	cmp	r0, #0
 8012584:	d0bf      	beq.n	8012506 <__ssvfiscanf_r+0x1f2>
 8012586:	e79f      	b.n	80124c8 <__ssvfiscanf_r+0x1b4>
 8012588:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801258a:	3201      	adds	r2, #1
 801258c:	9245      	str	r2, [sp, #276]	@ 0x114
 801258e:	6862      	ldr	r2, [r4, #4]
 8012590:	3a01      	subs	r2, #1
 8012592:	2a00      	cmp	r2, #0
 8012594:	6062      	str	r2, [r4, #4]
 8012596:	dd02      	ble.n	801259e <__ssvfiscanf_r+0x28a>
 8012598:	3301      	adds	r3, #1
 801259a:	6023      	str	r3, [r4, #0]
 801259c:	e7b6      	b.n	801250c <__ssvfiscanf_r+0x1f8>
 801259e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80125a0:	4621      	mov	r1, r4
 80125a2:	4630      	mov	r0, r6
 80125a4:	4798      	blx	r3
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d0b0      	beq.n	801250c <__ssvfiscanf_r+0x1f8>
 80125aa:	e78d      	b.n	80124c8 <__ssvfiscanf_r+0x1b4>
 80125ac:	2b04      	cmp	r3, #4
 80125ae:	dc0f      	bgt.n	80125d0 <__ssvfiscanf_r+0x2bc>
 80125b0:	466b      	mov	r3, sp
 80125b2:	4622      	mov	r2, r4
 80125b4:	a941      	add	r1, sp, #260	@ 0x104
 80125b6:	4630      	mov	r0, r6
 80125b8:	f000 fb4a 	bl	8012c50 <_scanf_i>
 80125bc:	e7b4      	b.n	8012528 <__ssvfiscanf_r+0x214>
 80125be:	bf00      	nop
 80125c0:	08012261 	.word	0x08012261
 80125c4:	080122db 	.word	0x080122db
 80125c8:	08013e55 	.word	0x08013e55
 80125cc:	08013f5b 	.word	0x08013f5b
 80125d0:	4b0a      	ldr	r3, [pc, #40]	@ (80125fc <__ssvfiscanf_r+0x2e8>)
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	f43f aec6 	beq.w	8012364 <__ssvfiscanf_r+0x50>
 80125d8:	466b      	mov	r3, sp
 80125da:	4622      	mov	r2, r4
 80125dc:	a941      	add	r1, sp, #260	@ 0x104
 80125de:	4630      	mov	r0, r6
 80125e0:	f3af 8000 	nop.w
 80125e4:	e7a0      	b.n	8012528 <__ssvfiscanf_r+0x214>
 80125e6:	89a3      	ldrh	r3, [r4, #12]
 80125e8:	065b      	lsls	r3, r3, #25
 80125ea:	f53f af71 	bmi.w	80124d0 <__ssvfiscanf_r+0x1bc>
 80125ee:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80125f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80125f8:	e7f9      	b.n	80125ee <__ssvfiscanf_r+0x2da>
 80125fa:	bf00      	nop
 80125fc:	00000000 	.word	0x00000000

08012600 <__sfputc_r>:
 8012600:	6893      	ldr	r3, [r2, #8]
 8012602:	3b01      	subs	r3, #1
 8012604:	2b00      	cmp	r3, #0
 8012606:	b410      	push	{r4}
 8012608:	6093      	str	r3, [r2, #8]
 801260a:	da08      	bge.n	801261e <__sfputc_r+0x1e>
 801260c:	6994      	ldr	r4, [r2, #24]
 801260e:	42a3      	cmp	r3, r4
 8012610:	db01      	blt.n	8012616 <__sfputc_r+0x16>
 8012612:	290a      	cmp	r1, #10
 8012614:	d103      	bne.n	801261e <__sfputc_r+0x1e>
 8012616:	f85d 4b04 	ldr.w	r4, [sp], #4
 801261a:	f7ff bb35 	b.w	8011c88 <__swbuf_r>
 801261e:	6813      	ldr	r3, [r2, #0]
 8012620:	1c58      	adds	r0, r3, #1
 8012622:	6010      	str	r0, [r2, #0]
 8012624:	7019      	strb	r1, [r3, #0]
 8012626:	4608      	mov	r0, r1
 8012628:	f85d 4b04 	ldr.w	r4, [sp], #4
 801262c:	4770      	bx	lr

0801262e <__sfputs_r>:
 801262e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012630:	4606      	mov	r6, r0
 8012632:	460f      	mov	r7, r1
 8012634:	4614      	mov	r4, r2
 8012636:	18d5      	adds	r5, r2, r3
 8012638:	42ac      	cmp	r4, r5
 801263a:	d101      	bne.n	8012640 <__sfputs_r+0x12>
 801263c:	2000      	movs	r0, #0
 801263e:	e007      	b.n	8012650 <__sfputs_r+0x22>
 8012640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012644:	463a      	mov	r2, r7
 8012646:	4630      	mov	r0, r6
 8012648:	f7ff ffda 	bl	8012600 <__sfputc_r>
 801264c:	1c43      	adds	r3, r0, #1
 801264e:	d1f3      	bne.n	8012638 <__sfputs_r+0xa>
 8012650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012654 <_vfiprintf_r>:
 8012654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012658:	460d      	mov	r5, r1
 801265a:	b09d      	sub	sp, #116	@ 0x74
 801265c:	4614      	mov	r4, r2
 801265e:	4698      	mov	r8, r3
 8012660:	4606      	mov	r6, r0
 8012662:	b118      	cbz	r0, 801266c <_vfiprintf_r+0x18>
 8012664:	6a03      	ldr	r3, [r0, #32]
 8012666:	b90b      	cbnz	r3, 801266c <_vfiprintf_r+0x18>
 8012668:	f7ff f9b4 	bl	80119d4 <__sinit>
 801266c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801266e:	07d9      	lsls	r1, r3, #31
 8012670:	d405      	bmi.n	801267e <_vfiprintf_r+0x2a>
 8012672:	89ab      	ldrh	r3, [r5, #12]
 8012674:	059a      	lsls	r2, r3, #22
 8012676:	d402      	bmi.n	801267e <_vfiprintf_r+0x2a>
 8012678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801267a:	f7ff fc36 	bl	8011eea <__retarget_lock_acquire_recursive>
 801267e:	89ab      	ldrh	r3, [r5, #12]
 8012680:	071b      	lsls	r3, r3, #28
 8012682:	d501      	bpl.n	8012688 <_vfiprintf_r+0x34>
 8012684:	692b      	ldr	r3, [r5, #16]
 8012686:	b99b      	cbnz	r3, 80126b0 <_vfiprintf_r+0x5c>
 8012688:	4629      	mov	r1, r5
 801268a:	4630      	mov	r0, r6
 801268c:	f7ff fb3a 	bl	8011d04 <__swsetup_r>
 8012690:	b170      	cbz	r0, 80126b0 <_vfiprintf_r+0x5c>
 8012692:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012694:	07dc      	lsls	r4, r3, #31
 8012696:	d504      	bpl.n	80126a2 <_vfiprintf_r+0x4e>
 8012698:	f04f 30ff 	mov.w	r0, #4294967295
 801269c:	b01d      	add	sp, #116	@ 0x74
 801269e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a2:	89ab      	ldrh	r3, [r5, #12]
 80126a4:	0598      	lsls	r0, r3, #22
 80126a6:	d4f7      	bmi.n	8012698 <_vfiprintf_r+0x44>
 80126a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126aa:	f7ff fc1f 	bl	8011eec <__retarget_lock_release_recursive>
 80126ae:	e7f3      	b.n	8012698 <_vfiprintf_r+0x44>
 80126b0:	2300      	movs	r3, #0
 80126b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80126b4:	2320      	movs	r3, #32
 80126b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80126ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80126be:	2330      	movs	r3, #48	@ 0x30
 80126c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012870 <_vfiprintf_r+0x21c>
 80126c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80126c8:	f04f 0901 	mov.w	r9, #1
 80126cc:	4623      	mov	r3, r4
 80126ce:	469a      	mov	sl, r3
 80126d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126d4:	b10a      	cbz	r2, 80126da <_vfiprintf_r+0x86>
 80126d6:	2a25      	cmp	r2, #37	@ 0x25
 80126d8:	d1f9      	bne.n	80126ce <_vfiprintf_r+0x7a>
 80126da:	ebba 0b04 	subs.w	fp, sl, r4
 80126de:	d00b      	beq.n	80126f8 <_vfiprintf_r+0xa4>
 80126e0:	465b      	mov	r3, fp
 80126e2:	4622      	mov	r2, r4
 80126e4:	4629      	mov	r1, r5
 80126e6:	4630      	mov	r0, r6
 80126e8:	f7ff ffa1 	bl	801262e <__sfputs_r>
 80126ec:	3001      	adds	r0, #1
 80126ee:	f000 80a7 	beq.w	8012840 <_vfiprintf_r+0x1ec>
 80126f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126f4:	445a      	add	r2, fp
 80126f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80126f8:	f89a 3000 	ldrb.w	r3, [sl]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	f000 809f 	beq.w	8012840 <_vfiprintf_r+0x1ec>
 8012702:	2300      	movs	r3, #0
 8012704:	f04f 32ff 	mov.w	r2, #4294967295
 8012708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801270c:	f10a 0a01 	add.w	sl, sl, #1
 8012710:	9304      	str	r3, [sp, #16]
 8012712:	9307      	str	r3, [sp, #28]
 8012714:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012718:	931a      	str	r3, [sp, #104]	@ 0x68
 801271a:	4654      	mov	r4, sl
 801271c:	2205      	movs	r2, #5
 801271e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012722:	4853      	ldr	r0, [pc, #332]	@ (8012870 <_vfiprintf_r+0x21c>)
 8012724:	f7f5 fd8c 	bl	8008240 <memchr>
 8012728:	9a04      	ldr	r2, [sp, #16]
 801272a:	b9d8      	cbnz	r0, 8012764 <_vfiprintf_r+0x110>
 801272c:	06d1      	lsls	r1, r2, #27
 801272e:	bf44      	itt	mi
 8012730:	2320      	movmi	r3, #32
 8012732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012736:	0713      	lsls	r3, r2, #28
 8012738:	bf44      	itt	mi
 801273a:	232b      	movmi	r3, #43	@ 0x2b
 801273c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012740:	f89a 3000 	ldrb.w	r3, [sl]
 8012744:	2b2a      	cmp	r3, #42	@ 0x2a
 8012746:	d015      	beq.n	8012774 <_vfiprintf_r+0x120>
 8012748:	9a07      	ldr	r2, [sp, #28]
 801274a:	4654      	mov	r4, sl
 801274c:	2000      	movs	r0, #0
 801274e:	f04f 0c0a 	mov.w	ip, #10
 8012752:	4621      	mov	r1, r4
 8012754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012758:	3b30      	subs	r3, #48	@ 0x30
 801275a:	2b09      	cmp	r3, #9
 801275c:	d94b      	bls.n	80127f6 <_vfiprintf_r+0x1a2>
 801275e:	b1b0      	cbz	r0, 801278e <_vfiprintf_r+0x13a>
 8012760:	9207      	str	r2, [sp, #28]
 8012762:	e014      	b.n	801278e <_vfiprintf_r+0x13a>
 8012764:	eba0 0308 	sub.w	r3, r0, r8
 8012768:	fa09 f303 	lsl.w	r3, r9, r3
 801276c:	4313      	orrs	r3, r2
 801276e:	9304      	str	r3, [sp, #16]
 8012770:	46a2      	mov	sl, r4
 8012772:	e7d2      	b.n	801271a <_vfiprintf_r+0xc6>
 8012774:	9b03      	ldr	r3, [sp, #12]
 8012776:	1d19      	adds	r1, r3, #4
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	9103      	str	r1, [sp, #12]
 801277c:	2b00      	cmp	r3, #0
 801277e:	bfbb      	ittet	lt
 8012780:	425b      	neglt	r3, r3
 8012782:	f042 0202 	orrlt.w	r2, r2, #2
 8012786:	9307      	strge	r3, [sp, #28]
 8012788:	9307      	strlt	r3, [sp, #28]
 801278a:	bfb8      	it	lt
 801278c:	9204      	strlt	r2, [sp, #16]
 801278e:	7823      	ldrb	r3, [r4, #0]
 8012790:	2b2e      	cmp	r3, #46	@ 0x2e
 8012792:	d10a      	bne.n	80127aa <_vfiprintf_r+0x156>
 8012794:	7863      	ldrb	r3, [r4, #1]
 8012796:	2b2a      	cmp	r3, #42	@ 0x2a
 8012798:	d132      	bne.n	8012800 <_vfiprintf_r+0x1ac>
 801279a:	9b03      	ldr	r3, [sp, #12]
 801279c:	1d1a      	adds	r2, r3, #4
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	9203      	str	r2, [sp, #12]
 80127a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80127a6:	3402      	adds	r4, #2
 80127a8:	9305      	str	r3, [sp, #20]
 80127aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012880 <_vfiprintf_r+0x22c>
 80127ae:	7821      	ldrb	r1, [r4, #0]
 80127b0:	2203      	movs	r2, #3
 80127b2:	4650      	mov	r0, sl
 80127b4:	f7f5 fd44 	bl	8008240 <memchr>
 80127b8:	b138      	cbz	r0, 80127ca <_vfiprintf_r+0x176>
 80127ba:	9b04      	ldr	r3, [sp, #16]
 80127bc:	eba0 000a 	sub.w	r0, r0, sl
 80127c0:	2240      	movs	r2, #64	@ 0x40
 80127c2:	4082      	lsls	r2, r0
 80127c4:	4313      	orrs	r3, r2
 80127c6:	3401      	adds	r4, #1
 80127c8:	9304      	str	r3, [sp, #16]
 80127ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ce:	4829      	ldr	r0, [pc, #164]	@ (8012874 <_vfiprintf_r+0x220>)
 80127d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127d4:	2206      	movs	r2, #6
 80127d6:	f7f5 fd33 	bl	8008240 <memchr>
 80127da:	2800      	cmp	r0, #0
 80127dc:	d03f      	beq.n	801285e <_vfiprintf_r+0x20a>
 80127de:	4b26      	ldr	r3, [pc, #152]	@ (8012878 <_vfiprintf_r+0x224>)
 80127e0:	bb1b      	cbnz	r3, 801282a <_vfiprintf_r+0x1d6>
 80127e2:	9b03      	ldr	r3, [sp, #12]
 80127e4:	3307      	adds	r3, #7
 80127e6:	f023 0307 	bic.w	r3, r3, #7
 80127ea:	3308      	adds	r3, #8
 80127ec:	9303      	str	r3, [sp, #12]
 80127ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127f0:	443b      	add	r3, r7
 80127f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80127f4:	e76a      	b.n	80126cc <_vfiprintf_r+0x78>
 80127f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80127fa:	460c      	mov	r4, r1
 80127fc:	2001      	movs	r0, #1
 80127fe:	e7a8      	b.n	8012752 <_vfiprintf_r+0xfe>
 8012800:	2300      	movs	r3, #0
 8012802:	3401      	adds	r4, #1
 8012804:	9305      	str	r3, [sp, #20]
 8012806:	4619      	mov	r1, r3
 8012808:	f04f 0c0a 	mov.w	ip, #10
 801280c:	4620      	mov	r0, r4
 801280e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012812:	3a30      	subs	r2, #48	@ 0x30
 8012814:	2a09      	cmp	r2, #9
 8012816:	d903      	bls.n	8012820 <_vfiprintf_r+0x1cc>
 8012818:	2b00      	cmp	r3, #0
 801281a:	d0c6      	beq.n	80127aa <_vfiprintf_r+0x156>
 801281c:	9105      	str	r1, [sp, #20]
 801281e:	e7c4      	b.n	80127aa <_vfiprintf_r+0x156>
 8012820:	fb0c 2101 	mla	r1, ip, r1, r2
 8012824:	4604      	mov	r4, r0
 8012826:	2301      	movs	r3, #1
 8012828:	e7f0      	b.n	801280c <_vfiprintf_r+0x1b8>
 801282a:	ab03      	add	r3, sp, #12
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	462a      	mov	r2, r5
 8012830:	4b12      	ldr	r3, [pc, #72]	@ (801287c <_vfiprintf_r+0x228>)
 8012832:	a904      	add	r1, sp, #16
 8012834:	4630      	mov	r0, r6
 8012836:	f3af 8000 	nop.w
 801283a:	4607      	mov	r7, r0
 801283c:	1c78      	adds	r0, r7, #1
 801283e:	d1d6      	bne.n	80127ee <_vfiprintf_r+0x19a>
 8012840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012842:	07d9      	lsls	r1, r3, #31
 8012844:	d405      	bmi.n	8012852 <_vfiprintf_r+0x1fe>
 8012846:	89ab      	ldrh	r3, [r5, #12]
 8012848:	059a      	lsls	r2, r3, #22
 801284a:	d402      	bmi.n	8012852 <_vfiprintf_r+0x1fe>
 801284c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801284e:	f7ff fb4d 	bl	8011eec <__retarget_lock_release_recursive>
 8012852:	89ab      	ldrh	r3, [r5, #12]
 8012854:	065b      	lsls	r3, r3, #25
 8012856:	f53f af1f 	bmi.w	8012698 <_vfiprintf_r+0x44>
 801285a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801285c:	e71e      	b.n	801269c <_vfiprintf_r+0x48>
 801285e:	ab03      	add	r3, sp, #12
 8012860:	9300      	str	r3, [sp, #0]
 8012862:	462a      	mov	r2, r5
 8012864:	4b05      	ldr	r3, [pc, #20]	@ (801287c <_vfiprintf_r+0x228>)
 8012866:	a904      	add	r1, sp, #16
 8012868:	4630      	mov	r0, r6
 801286a:	f000 f879 	bl	8012960 <_printf_i>
 801286e:	e7e4      	b.n	801283a <_vfiprintf_r+0x1e6>
 8012870:	08013f55 	.word	0x08013f55
 8012874:	08013f5f 	.word	0x08013f5f
 8012878:	00000000 	.word	0x00000000
 801287c:	0801262f 	.word	0x0801262f
 8012880:	08013f5b 	.word	0x08013f5b

08012884 <_printf_common>:
 8012884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012888:	4616      	mov	r6, r2
 801288a:	4698      	mov	r8, r3
 801288c:	688a      	ldr	r2, [r1, #8]
 801288e:	690b      	ldr	r3, [r1, #16]
 8012890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012894:	4293      	cmp	r3, r2
 8012896:	bfb8      	it	lt
 8012898:	4613      	movlt	r3, r2
 801289a:	6033      	str	r3, [r6, #0]
 801289c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80128a0:	4607      	mov	r7, r0
 80128a2:	460c      	mov	r4, r1
 80128a4:	b10a      	cbz	r2, 80128aa <_printf_common+0x26>
 80128a6:	3301      	adds	r3, #1
 80128a8:	6033      	str	r3, [r6, #0]
 80128aa:	6823      	ldr	r3, [r4, #0]
 80128ac:	0699      	lsls	r1, r3, #26
 80128ae:	bf42      	ittt	mi
 80128b0:	6833      	ldrmi	r3, [r6, #0]
 80128b2:	3302      	addmi	r3, #2
 80128b4:	6033      	strmi	r3, [r6, #0]
 80128b6:	6825      	ldr	r5, [r4, #0]
 80128b8:	f015 0506 	ands.w	r5, r5, #6
 80128bc:	d106      	bne.n	80128cc <_printf_common+0x48>
 80128be:	f104 0a19 	add.w	sl, r4, #25
 80128c2:	68e3      	ldr	r3, [r4, #12]
 80128c4:	6832      	ldr	r2, [r6, #0]
 80128c6:	1a9b      	subs	r3, r3, r2
 80128c8:	42ab      	cmp	r3, r5
 80128ca:	dc26      	bgt.n	801291a <_printf_common+0x96>
 80128cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80128d0:	6822      	ldr	r2, [r4, #0]
 80128d2:	3b00      	subs	r3, #0
 80128d4:	bf18      	it	ne
 80128d6:	2301      	movne	r3, #1
 80128d8:	0692      	lsls	r2, r2, #26
 80128da:	d42b      	bmi.n	8012934 <_printf_common+0xb0>
 80128dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80128e0:	4641      	mov	r1, r8
 80128e2:	4638      	mov	r0, r7
 80128e4:	47c8      	blx	r9
 80128e6:	3001      	adds	r0, #1
 80128e8:	d01e      	beq.n	8012928 <_printf_common+0xa4>
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	6922      	ldr	r2, [r4, #16]
 80128ee:	f003 0306 	and.w	r3, r3, #6
 80128f2:	2b04      	cmp	r3, #4
 80128f4:	bf02      	ittt	eq
 80128f6:	68e5      	ldreq	r5, [r4, #12]
 80128f8:	6833      	ldreq	r3, [r6, #0]
 80128fa:	1aed      	subeq	r5, r5, r3
 80128fc:	68a3      	ldr	r3, [r4, #8]
 80128fe:	bf0c      	ite	eq
 8012900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012904:	2500      	movne	r5, #0
 8012906:	4293      	cmp	r3, r2
 8012908:	bfc4      	itt	gt
 801290a:	1a9b      	subgt	r3, r3, r2
 801290c:	18ed      	addgt	r5, r5, r3
 801290e:	2600      	movs	r6, #0
 8012910:	341a      	adds	r4, #26
 8012912:	42b5      	cmp	r5, r6
 8012914:	d11a      	bne.n	801294c <_printf_common+0xc8>
 8012916:	2000      	movs	r0, #0
 8012918:	e008      	b.n	801292c <_printf_common+0xa8>
 801291a:	2301      	movs	r3, #1
 801291c:	4652      	mov	r2, sl
 801291e:	4641      	mov	r1, r8
 8012920:	4638      	mov	r0, r7
 8012922:	47c8      	blx	r9
 8012924:	3001      	adds	r0, #1
 8012926:	d103      	bne.n	8012930 <_printf_common+0xac>
 8012928:	f04f 30ff 	mov.w	r0, #4294967295
 801292c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012930:	3501      	adds	r5, #1
 8012932:	e7c6      	b.n	80128c2 <_printf_common+0x3e>
 8012934:	18e1      	adds	r1, r4, r3
 8012936:	1c5a      	adds	r2, r3, #1
 8012938:	2030      	movs	r0, #48	@ 0x30
 801293a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801293e:	4422      	add	r2, r4
 8012940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012948:	3302      	adds	r3, #2
 801294a:	e7c7      	b.n	80128dc <_printf_common+0x58>
 801294c:	2301      	movs	r3, #1
 801294e:	4622      	mov	r2, r4
 8012950:	4641      	mov	r1, r8
 8012952:	4638      	mov	r0, r7
 8012954:	47c8      	blx	r9
 8012956:	3001      	adds	r0, #1
 8012958:	d0e6      	beq.n	8012928 <_printf_common+0xa4>
 801295a:	3601      	adds	r6, #1
 801295c:	e7d9      	b.n	8012912 <_printf_common+0x8e>
	...

08012960 <_printf_i>:
 8012960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012964:	7e0f      	ldrb	r7, [r1, #24]
 8012966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012968:	2f78      	cmp	r7, #120	@ 0x78
 801296a:	4691      	mov	r9, r2
 801296c:	4680      	mov	r8, r0
 801296e:	460c      	mov	r4, r1
 8012970:	469a      	mov	sl, r3
 8012972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012976:	d807      	bhi.n	8012988 <_printf_i+0x28>
 8012978:	2f62      	cmp	r7, #98	@ 0x62
 801297a:	d80a      	bhi.n	8012992 <_printf_i+0x32>
 801297c:	2f00      	cmp	r7, #0
 801297e:	f000 80d1 	beq.w	8012b24 <_printf_i+0x1c4>
 8012982:	2f58      	cmp	r7, #88	@ 0x58
 8012984:	f000 80b8 	beq.w	8012af8 <_printf_i+0x198>
 8012988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801298c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012990:	e03a      	b.n	8012a08 <_printf_i+0xa8>
 8012992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012996:	2b15      	cmp	r3, #21
 8012998:	d8f6      	bhi.n	8012988 <_printf_i+0x28>
 801299a:	a101      	add	r1, pc, #4	@ (adr r1, 80129a0 <_printf_i+0x40>)
 801299c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80129a0:	080129f9 	.word	0x080129f9
 80129a4:	08012a0d 	.word	0x08012a0d
 80129a8:	08012989 	.word	0x08012989
 80129ac:	08012989 	.word	0x08012989
 80129b0:	08012989 	.word	0x08012989
 80129b4:	08012989 	.word	0x08012989
 80129b8:	08012a0d 	.word	0x08012a0d
 80129bc:	08012989 	.word	0x08012989
 80129c0:	08012989 	.word	0x08012989
 80129c4:	08012989 	.word	0x08012989
 80129c8:	08012989 	.word	0x08012989
 80129cc:	08012b0b 	.word	0x08012b0b
 80129d0:	08012a37 	.word	0x08012a37
 80129d4:	08012ac5 	.word	0x08012ac5
 80129d8:	08012989 	.word	0x08012989
 80129dc:	08012989 	.word	0x08012989
 80129e0:	08012b2d 	.word	0x08012b2d
 80129e4:	08012989 	.word	0x08012989
 80129e8:	08012a37 	.word	0x08012a37
 80129ec:	08012989 	.word	0x08012989
 80129f0:	08012989 	.word	0x08012989
 80129f4:	08012acd 	.word	0x08012acd
 80129f8:	6833      	ldr	r3, [r6, #0]
 80129fa:	1d1a      	adds	r2, r3, #4
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	6032      	str	r2, [r6, #0]
 8012a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e09c      	b.n	8012b46 <_printf_i+0x1e6>
 8012a0c:	6833      	ldr	r3, [r6, #0]
 8012a0e:	6820      	ldr	r0, [r4, #0]
 8012a10:	1d19      	adds	r1, r3, #4
 8012a12:	6031      	str	r1, [r6, #0]
 8012a14:	0606      	lsls	r6, r0, #24
 8012a16:	d501      	bpl.n	8012a1c <_printf_i+0xbc>
 8012a18:	681d      	ldr	r5, [r3, #0]
 8012a1a:	e003      	b.n	8012a24 <_printf_i+0xc4>
 8012a1c:	0645      	lsls	r5, r0, #25
 8012a1e:	d5fb      	bpl.n	8012a18 <_printf_i+0xb8>
 8012a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012a24:	2d00      	cmp	r5, #0
 8012a26:	da03      	bge.n	8012a30 <_printf_i+0xd0>
 8012a28:	232d      	movs	r3, #45	@ 0x2d
 8012a2a:	426d      	negs	r5, r5
 8012a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a30:	4858      	ldr	r0, [pc, #352]	@ (8012b94 <_printf_i+0x234>)
 8012a32:	230a      	movs	r3, #10
 8012a34:	e011      	b.n	8012a5a <_printf_i+0xfa>
 8012a36:	6821      	ldr	r1, [r4, #0]
 8012a38:	6833      	ldr	r3, [r6, #0]
 8012a3a:	0608      	lsls	r0, r1, #24
 8012a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012a40:	d402      	bmi.n	8012a48 <_printf_i+0xe8>
 8012a42:	0649      	lsls	r1, r1, #25
 8012a44:	bf48      	it	mi
 8012a46:	b2ad      	uxthmi	r5, r5
 8012a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8012a4a:	4852      	ldr	r0, [pc, #328]	@ (8012b94 <_printf_i+0x234>)
 8012a4c:	6033      	str	r3, [r6, #0]
 8012a4e:	bf14      	ite	ne
 8012a50:	230a      	movne	r3, #10
 8012a52:	2308      	moveq	r3, #8
 8012a54:	2100      	movs	r1, #0
 8012a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012a5a:	6866      	ldr	r6, [r4, #4]
 8012a5c:	60a6      	str	r6, [r4, #8]
 8012a5e:	2e00      	cmp	r6, #0
 8012a60:	db05      	blt.n	8012a6e <_printf_i+0x10e>
 8012a62:	6821      	ldr	r1, [r4, #0]
 8012a64:	432e      	orrs	r6, r5
 8012a66:	f021 0104 	bic.w	r1, r1, #4
 8012a6a:	6021      	str	r1, [r4, #0]
 8012a6c:	d04b      	beq.n	8012b06 <_printf_i+0x1a6>
 8012a6e:	4616      	mov	r6, r2
 8012a70:	fbb5 f1f3 	udiv	r1, r5, r3
 8012a74:	fb03 5711 	mls	r7, r3, r1, r5
 8012a78:	5dc7      	ldrb	r7, [r0, r7]
 8012a7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012a7e:	462f      	mov	r7, r5
 8012a80:	42bb      	cmp	r3, r7
 8012a82:	460d      	mov	r5, r1
 8012a84:	d9f4      	bls.n	8012a70 <_printf_i+0x110>
 8012a86:	2b08      	cmp	r3, #8
 8012a88:	d10b      	bne.n	8012aa2 <_printf_i+0x142>
 8012a8a:	6823      	ldr	r3, [r4, #0]
 8012a8c:	07df      	lsls	r7, r3, #31
 8012a8e:	d508      	bpl.n	8012aa2 <_printf_i+0x142>
 8012a90:	6923      	ldr	r3, [r4, #16]
 8012a92:	6861      	ldr	r1, [r4, #4]
 8012a94:	4299      	cmp	r1, r3
 8012a96:	bfde      	ittt	le
 8012a98:	2330      	movle	r3, #48	@ 0x30
 8012a9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012a9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012aa2:	1b92      	subs	r2, r2, r6
 8012aa4:	6122      	str	r2, [r4, #16]
 8012aa6:	f8cd a000 	str.w	sl, [sp]
 8012aaa:	464b      	mov	r3, r9
 8012aac:	aa03      	add	r2, sp, #12
 8012aae:	4621      	mov	r1, r4
 8012ab0:	4640      	mov	r0, r8
 8012ab2:	f7ff fee7 	bl	8012884 <_printf_common>
 8012ab6:	3001      	adds	r0, #1
 8012ab8:	d14a      	bne.n	8012b50 <_printf_i+0x1f0>
 8012aba:	f04f 30ff 	mov.w	r0, #4294967295
 8012abe:	b004      	add	sp, #16
 8012ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ac4:	6823      	ldr	r3, [r4, #0]
 8012ac6:	f043 0320 	orr.w	r3, r3, #32
 8012aca:	6023      	str	r3, [r4, #0]
 8012acc:	4832      	ldr	r0, [pc, #200]	@ (8012b98 <_printf_i+0x238>)
 8012ace:	2778      	movs	r7, #120	@ 0x78
 8012ad0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012ad4:	6823      	ldr	r3, [r4, #0]
 8012ad6:	6831      	ldr	r1, [r6, #0]
 8012ad8:	061f      	lsls	r7, r3, #24
 8012ada:	f851 5b04 	ldr.w	r5, [r1], #4
 8012ade:	d402      	bmi.n	8012ae6 <_printf_i+0x186>
 8012ae0:	065f      	lsls	r7, r3, #25
 8012ae2:	bf48      	it	mi
 8012ae4:	b2ad      	uxthmi	r5, r5
 8012ae6:	6031      	str	r1, [r6, #0]
 8012ae8:	07d9      	lsls	r1, r3, #31
 8012aea:	bf44      	itt	mi
 8012aec:	f043 0320 	orrmi.w	r3, r3, #32
 8012af0:	6023      	strmi	r3, [r4, #0]
 8012af2:	b11d      	cbz	r5, 8012afc <_printf_i+0x19c>
 8012af4:	2310      	movs	r3, #16
 8012af6:	e7ad      	b.n	8012a54 <_printf_i+0xf4>
 8012af8:	4826      	ldr	r0, [pc, #152]	@ (8012b94 <_printf_i+0x234>)
 8012afa:	e7e9      	b.n	8012ad0 <_printf_i+0x170>
 8012afc:	6823      	ldr	r3, [r4, #0]
 8012afe:	f023 0320 	bic.w	r3, r3, #32
 8012b02:	6023      	str	r3, [r4, #0]
 8012b04:	e7f6      	b.n	8012af4 <_printf_i+0x194>
 8012b06:	4616      	mov	r6, r2
 8012b08:	e7bd      	b.n	8012a86 <_printf_i+0x126>
 8012b0a:	6833      	ldr	r3, [r6, #0]
 8012b0c:	6825      	ldr	r5, [r4, #0]
 8012b0e:	6961      	ldr	r1, [r4, #20]
 8012b10:	1d18      	adds	r0, r3, #4
 8012b12:	6030      	str	r0, [r6, #0]
 8012b14:	062e      	lsls	r6, r5, #24
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	d501      	bpl.n	8012b1e <_printf_i+0x1be>
 8012b1a:	6019      	str	r1, [r3, #0]
 8012b1c:	e002      	b.n	8012b24 <_printf_i+0x1c4>
 8012b1e:	0668      	lsls	r0, r5, #25
 8012b20:	d5fb      	bpl.n	8012b1a <_printf_i+0x1ba>
 8012b22:	8019      	strh	r1, [r3, #0]
 8012b24:	2300      	movs	r3, #0
 8012b26:	6123      	str	r3, [r4, #16]
 8012b28:	4616      	mov	r6, r2
 8012b2a:	e7bc      	b.n	8012aa6 <_printf_i+0x146>
 8012b2c:	6833      	ldr	r3, [r6, #0]
 8012b2e:	1d1a      	adds	r2, r3, #4
 8012b30:	6032      	str	r2, [r6, #0]
 8012b32:	681e      	ldr	r6, [r3, #0]
 8012b34:	6862      	ldr	r2, [r4, #4]
 8012b36:	2100      	movs	r1, #0
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f7f5 fb81 	bl	8008240 <memchr>
 8012b3e:	b108      	cbz	r0, 8012b44 <_printf_i+0x1e4>
 8012b40:	1b80      	subs	r0, r0, r6
 8012b42:	6060      	str	r0, [r4, #4]
 8012b44:	6863      	ldr	r3, [r4, #4]
 8012b46:	6123      	str	r3, [r4, #16]
 8012b48:	2300      	movs	r3, #0
 8012b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b4e:	e7aa      	b.n	8012aa6 <_printf_i+0x146>
 8012b50:	6923      	ldr	r3, [r4, #16]
 8012b52:	4632      	mov	r2, r6
 8012b54:	4649      	mov	r1, r9
 8012b56:	4640      	mov	r0, r8
 8012b58:	47d0      	blx	sl
 8012b5a:	3001      	adds	r0, #1
 8012b5c:	d0ad      	beq.n	8012aba <_printf_i+0x15a>
 8012b5e:	6823      	ldr	r3, [r4, #0]
 8012b60:	079b      	lsls	r3, r3, #30
 8012b62:	d413      	bmi.n	8012b8c <_printf_i+0x22c>
 8012b64:	68e0      	ldr	r0, [r4, #12]
 8012b66:	9b03      	ldr	r3, [sp, #12]
 8012b68:	4298      	cmp	r0, r3
 8012b6a:	bfb8      	it	lt
 8012b6c:	4618      	movlt	r0, r3
 8012b6e:	e7a6      	b.n	8012abe <_printf_i+0x15e>
 8012b70:	2301      	movs	r3, #1
 8012b72:	4632      	mov	r2, r6
 8012b74:	4649      	mov	r1, r9
 8012b76:	4640      	mov	r0, r8
 8012b78:	47d0      	blx	sl
 8012b7a:	3001      	adds	r0, #1
 8012b7c:	d09d      	beq.n	8012aba <_printf_i+0x15a>
 8012b7e:	3501      	adds	r5, #1
 8012b80:	68e3      	ldr	r3, [r4, #12]
 8012b82:	9903      	ldr	r1, [sp, #12]
 8012b84:	1a5b      	subs	r3, r3, r1
 8012b86:	42ab      	cmp	r3, r5
 8012b88:	dcf2      	bgt.n	8012b70 <_printf_i+0x210>
 8012b8a:	e7eb      	b.n	8012b64 <_printf_i+0x204>
 8012b8c:	2500      	movs	r5, #0
 8012b8e:	f104 0619 	add.w	r6, r4, #25
 8012b92:	e7f5      	b.n	8012b80 <_printf_i+0x220>
 8012b94:	08013f66 	.word	0x08013f66
 8012b98:	08013f77 	.word	0x08013f77

08012b9c <_scanf_chars>:
 8012b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ba0:	4615      	mov	r5, r2
 8012ba2:	688a      	ldr	r2, [r1, #8]
 8012ba4:	4680      	mov	r8, r0
 8012ba6:	460c      	mov	r4, r1
 8012ba8:	b932      	cbnz	r2, 8012bb8 <_scanf_chars+0x1c>
 8012baa:	698a      	ldr	r2, [r1, #24]
 8012bac:	2a00      	cmp	r2, #0
 8012bae:	bf14      	ite	ne
 8012bb0:	f04f 32ff 	movne.w	r2, #4294967295
 8012bb4:	2201      	moveq	r2, #1
 8012bb6:	608a      	str	r2, [r1, #8]
 8012bb8:	6822      	ldr	r2, [r4, #0]
 8012bba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012c4c <_scanf_chars+0xb0>
 8012bbe:	06d1      	lsls	r1, r2, #27
 8012bc0:	bf5f      	itttt	pl
 8012bc2:	681a      	ldrpl	r2, [r3, #0]
 8012bc4:	1d11      	addpl	r1, r2, #4
 8012bc6:	6019      	strpl	r1, [r3, #0]
 8012bc8:	6816      	ldrpl	r6, [r2, #0]
 8012bca:	2700      	movs	r7, #0
 8012bcc:	69a0      	ldr	r0, [r4, #24]
 8012bce:	b188      	cbz	r0, 8012bf4 <_scanf_chars+0x58>
 8012bd0:	2801      	cmp	r0, #1
 8012bd2:	d107      	bne.n	8012be4 <_scanf_chars+0x48>
 8012bd4:	682b      	ldr	r3, [r5, #0]
 8012bd6:	781a      	ldrb	r2, [r3, #0]
 8012bd8:	6963      	ldr	r3, [r4, #20]
 8012bda:	5c9b      	ldrb	r3, [r3, r2]
 8012bdc:	b953      	cbnz	r3, 8012bf4 <_scanf_chars+0x58>
 8012bde:	2f00      	cmp	r7, #0
 8012be0:	d031      	beq.n	8012c46 <_scanf_chars+0xaa>
 8012be2:	e022      	b.n	8012c2a <_scanf_chars+0x8e>
 8012be4:	2802      	cmp	r0, #2
 8012be6:	d120      	bne.n	8012c2a <_scanf_chars+0x8e>
 8012be8:	682b      	ldr	r3, [r5, #0]
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012bf0:	071b      	lsls	r3, r3, #28
 8012bf2:	d41a      	bmi.n	8012c2a <_scanf_chars+0x8e>
 8012bf4:	6823      	ldr	r3, [r4, #0]
 8012bf6:	06da      	lsls	r2, r3, #27
 8012bf8:	bf5e      	ittt	pl
 8012bfa:	682b      	ldrpl	r3, [r5, #0]
 8012bfc:	781b      	ldrbpl	r3, [r3, #0]
 8012bfe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012c02:	682a      	ldr	r2, [r5, #0]
 8012c04:	686b      	ldr	r3, [r5, #4]
 8012c06:	3201      	adds	r2, #1
 8012c08:	602a      	str	r2, [r5, #0]
 8012c0a:	68a2      	ldr	r2, [r4, #8]
 8012c0c:	3b01      	subs	r3, #1
 8012c0e:	3a01      	subs	r2, #1
 8012c10:	606b      	str	r3, [r5, #4]
 8012c12:	3701      	adds	r7, #1
 8012c14:	60a2      	str	r2, [r4, #8]
 8012c16:	b142      	cbz	r2, 8012c2a <_scanf_chars+0x8e>
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	dcd7      	bgt.n	8012bcc <_scanf_chars+0x30>
 8012c1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012c20:	4629      	mov	r1, r5
 8012c22:	4640      	mov	r0, r8
 8012c24:	4798      	blx	r3
 8012c26:	2800      	cmp	r0, #0
 8012c28:	d0d0      	beq.n	8012bcc <_scanf_chars+0x30>
 8012c2a:	6823      	ldr	r3, [r4, #0]
 8012c2c:	f013 0310 	ands.w	r3, r3, #16
 8012c30:	d105      	bne.n	8012c3e <_scanf_chars+0xa2>
 8012c32:	68e2      	ldr	r2, [r4, #12]
 8012c34:	3201      	adds	r2, #1
 8012c36:	60e2      	str	r2, [r4, #12]
 8012c38:	69a2      	ldr	r2, [r4, #24]
 8012c3a:	b102      	cbz	r2, 8012c3e <_scanf_chars+0xa2>
 8012c3c:	7033      	strb	r3, [r6, #0]
 8012c3e:	6923      	ldr	r3, [r4, #16]
 8012c40:	443b      	add	r3, r7
 8012c42:	6123      	str	r3, [r4, #16]
 8012c44:	2000      	movs	r0, #0
 8012c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c4a:	bf00      	nop
 8012c4c:	08013e55 	.word	0x08013e55

08012c50 <_scanf_i>:
 8012c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c54:	4698      	mov	r8, r3
 8012c56:	4b74      	ldr	r3, [pc, #464]	@ (8012e28 <_scanf_i+0x1d8>)
 8012c58:	460c      	mov	r4, r1
 8012c5a:	4682      	mov	sl, r0
 8012c5c:	4616      	mov	r6, r2
 8012c5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c62:	b087      	sub	sp, #28
 8012c64:	ab03      	add	r3, sp, #12
 8012c66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012c6a:	4b70      	ldr	r3, [pc, #448]	@ (8012e2c <_scanf_i+0x1dc>)
 8012c6c:	69a1      	ldr	r1, [r4, #24]
 8012c6e:	4a70      	ldr	r2, [pc, #448]	@ (8012e30 <_scanf_i+0x1e0>)
 8012c70:	2903      	cmp	r1, #3
 8012c72:	bf08      	it	eq
 8012c74:	461a      	moveq	r2, r3
 8012c76:	68a3      	ldr	r3, [r4, #8]
 8012c78:	9201      	str	r2, [sp, #4]
 8012c7a:	1e5a      	subs	r2, r3, #1
 8012c7c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012c80:	bf88      	it	hi
 8012c82:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012c86:	4627      	mov	r7, r4
 8012c88:	bf82      	ittt	hi
 8012c8a:	eb03 0905 	addhi.w	r9, r3, r5
 8012c8e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012c92:	60a3      	strhi	r3, [r4, #8]
 8012c94:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012c98:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012c9c:	bf98      	it	ls
 8012c9e:	f04f 0900 	movls.w	r9, #0
 8012ca2:	6023      	str	r3, [r4, #0]
 8012ca4:	463d      	mov	r5, r7
 8012ca6:	f04f 0b00 	mov.w	fp, #0
 8012caa:	6831      	ldr	r1, [r6, #0]
 8012cac:	ab03      	add	r3, sp, #12
 8012cae:	7809      	ldrb	r1, [r1, #0]
 8012cb0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012cb4:	2202      	movs	r2, #2
 8012cb6:	f7f5 fac3 	bl	8008240 <memchr>
 8012cba:	b328      	cbz	r0, 8012d08 <_scanf_i+0xb8>
 8012cbc:	f1bb 0f01 	cmp.w	fp, #1
 8012cc0:	d159      	bne.n	8012d76 <_scanf_i+0x126>
 8012cc2:	6862      	ldr	r2, [r4, #4]
 8012cc4:	b92a      	cbnz	r2, 8012cd2 <_scanf_i+0x82>
 8012cc6:	6822      	ldr	r2, [r4, #0]
 8012cc8:	2108      	movs	r1, #8
 8012cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012cce:	6061      	str	r1, [r4, #4]
 8012cd0:	6022      	str	r2, [r4, #0]
 8012cd2:	6822      	ldr	r2, [r4, #0]
 8012cd4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012cd8:	6022      	str	r2, [r4, #0]
 8012cda:	68a2      	ldr	r2, [r4, #8]
 8012cdc:	1e51      	subs	r1, r2, #1
 8012cde:	60a1      	str	r1, [r4, #8]
 8012ce0:	b192      	cbz	r2, 8012d08 <_scanf_i+0xb8>
 8012ce2:	6832      	ldr	r2, [r6, #0]
 8012ce4:	1c51      	adds	r1, r2, #1
 8012ce6:	6031      	str	r1, [r6, #0]
 8012ce8:	7812      	ldrb	r2, [r2, #0]
 8012cea:	f805 2b01 	strb.w	r2, [r5], #1
 8012cee:	6872      	ldr	r2, [r6, #4]
 8012cf0:	3a01      	subs	r2, #1
 8012cf2:	2a00      	cmp	r2, #0
 8012cf4:	6072      	str	r2, [r6, #4]
 8012cf6:	dc07      	bgt.n	8012d08 <_scanf_i+0xb8>
 8012cf8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012cfc:	4631      	mov	r1, r6
 8012cfe:	4650      	mov	r0, sl
 8012d00:	4790      	blx	r2
 8012d02:	2800      	cmp	r0, #0
 8012d04:	f040 8085 	bne.w	8012e12 <_scanf_i+0x1c2>
 8012d08:	f10b 0b01 	add.w	fp, fp, #1
 8012d0c:	f1bb 0f03 	cmp.w	fp, #3
 8012d10:	d1cb      	bne.n	8012caa <_scanf_i+0x5a>
 8012d12:	6863      	ldr	r3, [r4, #4]
 8012d14:	b90b      	cbnz	r3, 8012d1a <_scanf_i+0xca>
 8012d16:	230a      	movs	r3, #10
 8012d18:	6063      	str	r3, [r4, #4]
 8012d1a:	6863      	ldr	r3, [r4, #4]
 8012d1c:	4945      	ldr	r1, [pc, #276]	@ (8012e34 <_scanf_i+0x1e4>)
 8012d1e:	6960      	ldr	r0, [r4, #20]
 8012d20:	1ac9      	subs	r1, r1, r3
 8012d22:	f000 f997 	bl	8013054 <__sccl>
 8012d26:	f04f 0b00 	mov.w	fp, #0
 8012d2a:	68a3      	ldr	r3, [r4, #8]
 8012d2c:	6822      	ldr	r2, [r4, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d03d      	beq.n	8012dae <_scanf_i+0x15e>
 8012d32:	6831      	ldr	r1, [r6, #0]
 8012d34:	6960      	ldr	r0, [r4, #20]
 8012d36:	f891 c000 	ldrb.w	ip, [r1]
 8012d3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d035      	beq.n	8012dae <_scanf_i+0x15e>
 8012d42:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012d46:	d124      	bne.n	8012d92 <_scanf_i+0x142>
 8012d48:	0510      	lsls	r0, r2, #20
 8012d4a:	d522      	bpl.n	8012d92 <_scanf_i+0x142>
 8012d4c:	f10b 0b01 	add.w	fp, fp, #1
 8012d50:	f1b9 0f00 	cmp.w	r9, #0
 8012d54:	d003      	beq.n	8012d5e <_scanf_i+0x10e>
 8012d56:	3301      	adds	r3, #1
 8012d58:	f109 39ff 	add.w	r9, r9, #4294967295
 8012d5c:	60a3      	str	r3, [r4, #8]
 8012d5e:	6873      	ldr	r3, [r6, #4]
 8012d60:	3b01      	subs	r3, #1
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	6073      	str	r3, [r6, #4]
 8012d66:	dd1b      	ble.n	8012da0 <_scanf_i+0x150>
 8012d68:	6833      	ldr	r3, [r6, #0]
 8012d6a:	3301      	adds	r3, #1
 8012d6c:	6033      	str	r3, [r6, #0]
 8012d6e:	68a3      	ldr	r3, [r4, #8]
 8012d70:	3b01      	subs	r3, #1
 8012d72:	60a3      	str	r3, [r4, #8]
 8012d74:	e7d9      	b.n	8012d2a <_scanf_i+0xda>
 8012d76:	f1bb 0f02 	cmp.w	fp, #2
 8012d7a:	d1ae      	bne.n	8012cda <_scanf_i+0x8a>
 8012d7c:	6822      	ldr	r2, [r4, #0]
 8012d7e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012d82:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012d86:	d1c4      	bne.n	8012d12 <_scanf_i+0xc2>
 8012d88:	2110      	movs	r1, #16
 8012d8a:	6061      	str	r1, [r4, #4]
 8012d8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012d90:	e7a2      	b.n	8012cd8 <_scanf_i+0x88>
 8012d92:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012d96:	6022      	str	r2, [r4, #0]
 8012d98:	780b      	ldrb	r3, [r1, #0]
 8012d9a:	f805 3b01 	strb.w	r3, [r5], #1
 8012d9e:	e7de      	b.n	8012d5e <_scanf_i+0x10e>
 8012da0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012da4:	4631      	mov	r1, r6
 8012da6:	4650      	mov	r0, sl
 8012da8:	4798      	blx	r3
 8012daa:	2800      	cmp	r0, #0
 8012dac:	d0df      	beq.n	8012d6e <_scanf_i+0x11e>
 8012dae:	6823      	ldr	r3, [r4, #0]
 8012db0:	05d9      	lsls	r1, r3, #23
 8012db2:	d50d      	bpl.n	8012dd0 <_scanf_i+0x180>
 8012db4:	42bd      	cmp	r5, r7
 8012db6:	d909      	bls.n	8012dcc <_scanf_i+0x17c>
 8012db8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012dbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012dc0:	4632      	mov	r2, r6
 8012dc2:	4650      	mov	r0, sl
 8012dc4:	4798      	blx	r3
 8012dc6:	f105 39ff 	add.w	r9, r5, #4294967295
 8012dca:	464d      	mov	r5, r9
 8012dcc:	42bd      	cmp	r5, r7
 8012dce:	d028      	beq.n	8012e22 <_scanf_i+0x1d2>
 8012dd0:	6822      	ldr	r2, [r4, #0]
 8012dd2:	f012 0210 	ands.w	r2, r2, #16
 8012dd6:	d113      	bne.n	8012e00 <_scanf_i+0x1b0>
 8012dd8:	702a      	strb	r2, [r5, #0]
 8012dda:	6863      	ldr	r3, [r4, #4]
 8012ddc:	9e01      	ldr	r6, [sp, #4]
 8012dde:	4639      	mov	r1, r7
 8012de0:	4650      	mov	r0, sl
 8012de2:	47b0      	blx	r6
 8012de4:	f8d8 3000 	ldr.w	r3, [r8]
 8012de8:	6821      	ldr	r1, [r4, #0]
 8012dea:	1d1a      	adds	r2, r3, #4
 8012dec:	f8c8 2000 	str.w	r2, [r8]
 8012df0:	f011 0f20 	tst.w	r1, #32
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	d00f      	beq.n	8012e18 <_scanf_i+0x1c8>
 8012df8:	6018      	str	r0, [r3, #0]
 8012dfa:	68e3      	ldr	r3, [r4, #12]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	60e3      	str	r3, [r4, #12]
 8012e00:	6923      	ldr	r3, [r4, #16]
 8012e02:	1bed      	subs	r5, r5, r7
 8012e04:	445d      	add	r5, fp
 8012e06:	442b      	add	r3, r5
 8012e08:	6123      	str	r3, [r4, #16]
 8012e0a:	2000      	movs	r0, #0
 8012e0c:	b007      	add	sp, #28
 8012e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e12:	f04f 0b00 	mov.w	fp, #0
 8012e16:	e7ca      	b.n	8012dae <_scanf_i+0x15e>
 8012e18:	07ca      	lsls	r2, r1, #31
 8012e1a:	bf4c      	ite	mi
 8012e1c:	8018      	strhmi	r0, [r3, #0]
 8012e1e:	6018      	strpl	r0, [r3, #0]
 8012e20:	e7eb      	b.n	8012dfa <_scanf_i+0x1aa>
 8012e22:	2001      	movs	r0, #1
 8012e24:	e7f2      	b.n	8012e0c <_scanf_i+0x1bc>
 8012e26:	bf00      	nop
 8012e28:	08013648 	.word	0x08013648
 8012e2c:	080132a9 	.word	0x080132a9
 8012e30:	08013389 	.word	0x08013389
 8012e34:	08013f98 	.word	0x08013f98

08012e38 <__sflush_r>:
 8012e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e40:	0716      	lsls	r6, r2, #28
 8012e42:	4605      	mov	r5, r0
 8012e44:	460c      	mov	r4, r1
 8012e46:	d454      	bmi.n	8012ef2 <__sflush_r+0xba>
 8012e48:	684b      	ldr	r3, [r1, #4]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	dc02      	bgt.n	8012e54 <__sflush_r+0x1c>
 8012e4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	dd48      	ble.n	8012ee6 <__sflush_r+0xae>
 8012e54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e56:	2e00      	cmp	r6, #0
 8012e58:	d045      	beq.n	8012ee6 <__sflush_r+0xae>
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012e60:	682f      	ldr	r7, [r5, #0]
 8012e62:	6a21      	ldr	r1, [r4, #32]
 8012e64:	602b      	str	r3, [r5, #0]
 8012e66:	d030      	beq.n	8012eca <__sflush_r+0x92>
 8012e68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012e6a:	89a3      	ldrh	r3, [r4, #12]
 8012e6c:	0759      	lsls	r1, r3, #29
 8012e6e:	d505      	bpl.n	8012e7c <__sflush_r+0x44>
 8012e70:	6863      	ldr	r3, [r4, #4]
 8012e72:	1ad2      	subs	r2, r2, r3
 8012e74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012e76:	b10b      	cbz	r3, 8012e7c <__sflush_r+0x44>
 8012e78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012e7a:	1ad2      	subs	r2, r2, r3
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e80:	6a21      	ldr	r1, [r4, #32]
 8012e82:	4628      	mov	r0, r5
 8012e84:	47b0      	blx	r6
 8012e86:	1c43      	adds	r3, r0, #1
 8012e88:	89a3      	ldrh	r3, [r4, #12]
 8012e8a:	d106      	bne.n	8012e9a <__sflush_r+0x62>
 8012e8c:	6829      	ldr	r1, [r5, #0]
 8012e8e:	291d      	cmp	r1, #29
 8012e90:	d82b      	bhi.n	8012eea <__sflush_r+0xb2>
 8012e92:	4a2a      	ldr	r2, [pc, #168]	@ (8012f3c <__sflush_r+0x104>)
 8012e94:	40ca      	lsrs	r2, r1
 8012e96:	07d6      	lsls	r6, r2, #31
 8012e98:	d527      	bpl.n	8012eea <__sflush_r+0xb2>
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	6062      	str	r2, [r4, #4]
 8012e9e:	04d9      	lsls	r1, r3, #19
 8012ea0:	6922      	ldr	r2, [r4, #16]
 8012ea2:	6022      	str	r2, [r4, #0]
 8012ea4:	d504      	bpl.n	8012eb0 <__sflush_r+0x78>
 8012ea6:	1c42      	adds	r2, r0, #1
 8012ea8:	d101      	bne.n	8012eae <__sflush_r+0x76>
 8012eaa:	682b      	ldr	r3, [r5, #0]
 8012eac:	b903      	cbnz	r3, 8012eb0 <__sflush_r+0x78>
 8012eae:	6560      	str	r0, [r4, #84]	@ 0x54
 8012eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012eb2:	602f      	str	r7, [r5, #0]
 8012eb4:	b1b9      	cbz	r1, 8012ee6 <__sflush_r+0xae>
 8012eb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012eba:	4299      	cmp	r1, r3
 8012ebc:	d002      	beq.n	8012ec4 <__sflush_r+0x8c>
 8012ebe:	4628      	mov	r0, r5
 8012ec0:	f7ff f824 	bl	8011f0c <_free_r>
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	6363      	str	r3, [r4, #52]	@ 0x34
 8012ec8:	e00d      	b.n	8012ee6 <__sflush_r+0xae>
 8012eca:	2301      	movs	r3, #1
 8012ecc:	4628      	mov	r0, r5
 8012ece:	47b0      	blx	r6
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	1c50      	adds	r0, r2, #1
 8012ed4:	d1c9      	bne.n	8012e6a <__sflush_r+0x32>
 8012ed6:	682b      	ldr	r3, [r5, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d0c6      	beq.n	8012e6a <__sflush_r+0x32>
 8012edc:	2b1d      	cmp	r3, #29
 8012ede:	d001      	beq.n	8012ee4 <__sflush_r+0xac>
 8012ee0:	2b16      	cmp	r3, #22
 8012ee2:	d11e      	bne.n	8012f22 <__sflush_r+0xea>
 8012ee4:	602f      	str	r7, [r5, #0]
 8012ee6:	2000      	movs	r0, #0
 8012ee8:	e022      	b.n	8012f30 <__sflush_r+0xf8>
 8012eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eee:	b21b      	sxth	r3, r3
 8012ef0:	e01b      	b.n	8012f2a <__sflush_r+0xf2>
 8012ef2:	690f      	ldr	r7, [r1, #16]
 8012ef4:	2f00      	cmp	r7, #0
 8012ef6:	d0f6      	beq.n	8012ee6 <__sflush_r+0xae>
 8012ef8:	0793      	lsls	r3, r2, #30
 8012efa:	680e      	ldr	r6, [r1, #0]
 8012efc:	bf08      	it	eq
 8012efe:	694b      	ldreq	r3, [r1, #20]
 8012f00:	600f      	str	r7, [r1, #0]
 8012f02:	bf18      	it	ne
 8012f04:	2300      	movne	r3, #0
 8012f06:	eba6 0807 	sub.w	r8, r6, r7
 8012f0a:	608b      	str	r3, [r1, #8]
 8012f0c:	f1b8 0f00 	cmp.w	r8, #0
 8012f10:	dde9      	ble.n	8012ee6 <__sflush_r+0xae>
 8012f12:	6a21      	ldr	r1, [r4, #32]
 8012f14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012f16:	4643      	mov	r3, r8
 8012f18:	463a      	mov	r2, r7
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	47b0      	blx	r6
 8012f1e:	2800      	cmp	r0, #0
 8012f20:	dc08      	bgt.n	8012f34 <__sflush_r+0xfc>
 8012f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f2a:	81a3      	strh	r3, [r4, #12]
 8012f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f34:	4407      	add	r7, r0
 8012f36:	eba8 0800 	sub.w	r8, r8, r0
 8012f3a:	e7e7      	b.n	8012f0c <__sflush_r+0xd4>
 8012f3c:	20400001 	.word	0x20400001

08012f40 <_fflush_r>:
 8012f40:	b538      	push	{r3, r4, r5, lr}
 8012f42:	690b      	ldr	r3, [r1, #16]
 8012f44:	4605      	mov	r5, r0
 8012f46:	460c      	mov	r4, r1
 8012f48:	b913      	cbnz	r3, 8012f50 <_fflush_r+0x10>
 8012f4a:	2500      	movs	r5, #0
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	bd38      	pop	{r3, r4, r5, pc}
 8012f50:	b118      	cbz	r0, 8012f5a <_fflush_r+0x1a>
 8012f52:	6a03      	ldr	r3, [r0, #32]
 8012f54:	b90b      	cbnz	r3, 8012f5a <_fflush_r+0x1a>
 8012f56:	f7fe fd3d 	bl	80119d4 <__sinit>
 8012f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d0f3      	beq.n	8012f4a <_fflush_r+0xa>
 8012f62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012f64:	07d0      	lsls	r0, r2, #31
 8012f66:	d404      	bmi.n	8012f72 <_fflush_r+0x32>
 8012f68:	0599      	lsls	r1, r3, #22
 8012f6a:	d402      	bmi.n	8012f72 <_fflush_r+0x32>
 8012f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f6e:	f7fe ffbc 	bl	8011eea <__retarget_lock_acquire_recursive>
 8012f72:	4628      	mov	r0, r5
 8012f74:	4621      	mov	r1, r4
 8012f76:	f7ff ff5f 	bl	8012e38 <__sflush_r>
 8012f7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f7c:	07da      	lsls	r2, r3, #31
 8012f7e:	4605      	mov	r5, r0
 8012f80:	d4e4      	bmi.n	8012f4c <_fflush_r+0xc>
 8012f82:	89a3      	ldrh	r3, [r4, #12]
 8012f84:	059b      	lsls	r3, r3, #22
 8012f86:	d4e1      	bmi.n	8012f4c <_fflush_r+0xc>
 8012f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f8a:	f7fe ffaf 	bl	8011eec <__retarget_lock_release_recursive>
 8012f8e:	e7dd      	b.n	8012f4c <_fflush_r+0xc>

08012f90 <__swhatbuf_r>:
 8012f90:	b570      	push	{r4, r5, r6, lr}
 8012f92:	460c      	mov	r4, r1
 8012f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f98:	2900      	cmp	r1, #0
 8012f9a:	b096      	sub	sp, #88	@ 0x58
 8012f9c:	4615      	mov	r5, r2
 8012f9e:	461e      	mov	r6, r3
 8012fa0:	da0d      	bge.n	8012fbe <__swhatbuf_r+0x2e>
 8012fa2:	89a3      	ldrh	r3, [r4, #12]
 8012fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012fa8:	f04f 0100 	mov.w	r1, #0
 8012fac:	bf14      	ite	ne
 8012fae:	2340      	movne	r3, #64	@ 0x40
 8012fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012fb4:	2000      	movs	r0, #0
 8012fb6:	6031      	str	r1, [r6, #0]
 8012fb8:	602b      	str	r3, [r5, #0]
 8012fba:	b016      	add	sp, #88	@ 0x58
 8012fbc:	bd70      	pop	{r4, r5, r6, pc}
 8012fbe:	466a      	mov	r2, sp
 8012fc0:	f000 f8d6 	bl	8013170 <_fstat_r>
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	dbec      	blt.n	8012fa2 <__swhatbuf_r+0x12>
 8012fc8:	9901      	ldr	r1, [sp, #4]
 8012fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012fd2:	4259      	negs	r1, r3
 8012fd4:	4159      	adcs	r1, r3
 8012fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012fda:	e7eb      	b.n	8012fb4 <__swhatbuf_r+0x24>

08012fdc <__smakebuf_r>:
 8012fdc:	898b      	ldrh	r3, [r1, #12]
 8012fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fe0:	079d      	lsls	r5, r3, #30
 8012fe2:	4606      	mov	r6, r0
 8012fe4:	460c      	mov	r4, r1
 8012fe6:	d507      	bpl.n	8012ff8 <__smakebuf_r+0x1c>
 8012fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012fec:	6023      	str	r3, [r4, #0]
 8012fee:	6123      	str	r3, [r4, #16]
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	6163      	str	r3, [r4, #20]
 8012ff4:	b003      	add	sp, #12
 8012ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ff8:	ab01      	add	r3, sp, #4
 8012ffa:	466a      	mov	r2, sp
 8012ffc:	f7ff ffc8 	bl	8012f90 <__swhatbuf_r>
 8013000:	9f00      	ldr	r7, [sp, #0]
 8013002:	4605      	mov	r5, r0
 8013004:	4639      	mov	r1, r7
 8013006:	4630      	mov	r0, r6
 8013008:	f7fe fb96 	bl	8011738 <_malloc_r>
 801300c:	b948      	cbnz	r0, 8013022 <__smakebuf_r+0x46>
 801300e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013012:	059a      	lsls	r2, r3, #22
 8013014:	d4ee      	bmi.n	8012ff4 <__smakebuf_r+0x18>
 8013016:	f023 0303 	bic.w	r3, r3, #3
 801301a:	f043 0302 	orr.w	r3, r3, #2
 801301e:	81a3      	strh	r3, [r4, #12]
 8013020:	e7e2      	b.n	8012fe8 <__smakebuf_r+0xc>
 8013022:	89a3      	ldrh	r3, [r4, #12]
 8013024:	6020      	str	r0, [r4, #0]
 8013026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801302a:	81a3      	strh	r3, [r4, #12]
 801302c:	9b01      	ldr	r3, [sp, #4]
 801302e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013032:	b15b      	cbz	r3, 801304c <__smakebuf_r+0x70>
 8013034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013038:	4630      	mov	r0, r6
 801303a:	f000 f8ab 	bl	8013194 <_isatty_r>
 801303e:	b128      	cbz	r0, 801304c <__smakebuf_r+0x70>
 8013040:	89a3      	ldrh	r3, [r4, #12]
 8013042:	f023 0303 	bic.w	r3, r3, #3
 8013046:	f043 0301 	orr.w	r3, r3, #1
 801304a:	81a3      	strh	r3, [r4, #12]
 801304c:	89a3      	ldrh	r3, [r4, #12]
 801304e:	431d      	orrs	r5, r3
 8013050:	81a5      	strh	r5, [r4, #12]
 8013052:	e7cf      	b.n	8012ff4 <__smakebuf_r+0x18>

08013054 <__sccl>:
 8013054:	b570      	push	{r4, r5, r6, lr}
 8013056:	780b      	ldrb	r3, [r1, #0]
 8013058:	4604      	mov	r4, r0
 801305a:	2b5e      	cmp	r3, #94	@ 0x5e
 801305c:	bf0b      	itete	eq
 801305e:	784b      	ldrbeq	r3, [r1, #1]
 8013060:	1c4a      	addne	r2, r1, #1
 8013062:	1c8a      	addeq	r2, r1, #2
 8013064:	2100      	movne	r1, #0
 8013066:	bf08      	it	eq
 8013068:	2101      	moveq	r1, #1
 801306a:	3801      	subs	r0, #1
 801306c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013070:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013074:	42a8      	cmp	r0, r5
 8013076:	d1fb      	bne.n	8013070 <__sccl+0x1c>
 8013078:	b90b      	cbnz	r3, 801307e <__sccl+0x2a>
 801307a:	1e50      	subs	r0, r2, #1
 801307c:	bd70      	pop	{r4, r5, r6, pc}
 801307e:	f081 0101 	eor.w	r1, r1, #1
 8013082:	54e1      	strb	r1, [r4, r3]
 8013084:	4610      	mov	r0, r2
 8013086:	4602      	mov	r2, r0
 8013088:	f812 5b01 	ldrb.w	r5, [r2], #1
 801308c:	2d2d      	cmp	r5, #45	@ 0x2d
 801308e:	d005      	beq.n	801309c <__sccl+0x48>
 8013090:	2d5d      	cmp	r5, #93	@ 0x5d
 8013092:	d016      	beq.n	80130c2 <__sccl+0x6e>
 8013094:	2d00      	cmp	r5, #0
 8013096:	d0f1      	beq.n	801307c <__sccl+0x28>
 8013098:	462b      	mov	r3, r5
 801309a:	e7f2      	b.n	8013082 <__sccl+0x2e>
 801309c:	7846      	ldrb	r6, [r0, #1]
 801309e:	2e5d      	cmp	r6, #93	@ 0x5d
 80130a0:	d0fa      	beq.n	8013098 <__sccl+0x44>
 80130a2:	42b3      	cmp	r3, r6
 80130a4:	dcf8      	bgt.n	8013098 <__sccl+0x44>
 80130a6:	3002      	adds	r0, #2
 80130a8:	461a      	mov	r2, r3
 80130aa:	3201      	adds	r2, #1
 80130ac:	4296      	cmp	r6, r2
 80130ae:	54a1      	strb	r1, [r4, r2]
 80130b0:	dcfb      	bgt.n	80130aa <__sccl+0x56>
 80130b2:	1af2      	subs	r2, r6, r3
 80130b4:	3a01      	subs	r2, #1
 80130b6:	1c5d      	adds	r5, r3, #1
 80130b8:	42b3      	cmp	r3, r6
 80130ba:	bfa8      	it	ge
 80130bc:	2200      	movge	r2, #0
 80130be:	18ab      	adds	r3, r5, r2
 80130c0:	e7e1      	b.n	8013086 <__sccl+0x32>
 80130c2:	4610      	mov	r0, r2
 80130c4:	e7da      	b.n	801307c <__sccl+0x28>

080130c6 <__submore>:
 80130c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130ca:	460c      	mov	r4, r1
 80130cc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80130ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130d2:	4299      	cmp	r1, r3
 80130d4:	d11d      	bne.n	8013112 <__submore+0x4c>
 80130d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80130da:	f7fe fb2d 	bl	8011738 <_malloc_r>
 80130de:	b918      	cbnz	r0, 80130e8 <__submore+0x22>
 80130e0:	f04f 30ff 	mov.w	r0, #4294967295
 80130e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80130ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 80130ee:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80130f2:	6360      	str	r0, [r4, #52]	@ 0x34
 80130f4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80130f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80130fc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013100:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013104:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013108:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801310c:	6020      	str	r0, [r4, #0]
 801310e:	2000      	movs	r0, #0
 8013110:	e7e8      	b.n	80130e4 <__submore+0x1e>
 8013112:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013114:	0077      	lsls	r7, r6, #1
 8013116:	463a      	mov	r2, r7
 8013118:	f7fe fba2 	bl	8011860 <_realloc_r>
 801311c:	4605      	mov	r5, r0
 801311e:	2800      	cmp	r0, #0
 8013120:	d0de      	beq.n	80130e0 <__submore+0x1a>
 8013122:	eb00 0806 	add.w	r8, r0, r6
 8013126:	4601      	mov	r1, r0
 8013128:	4632      	mov	r2, r6
 801312a:	4640      	mov	r0, r8
 801312c:	f7fe fedf 	bl	8011eee <memcpy>
 8013130:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013134:	f8c4 8000 	str.w	r8, [r4]
 8013138:	e7e9      	b.n	801310e <__submore+0x48>

0801313a <memmove>:
 801313a:	4288      	cmp	r0, r1
 801313c:	b510      	push	{r4, lr}
 801313e:	eb01 0402 	add.w	r4, r1, r2
 8013142:	d902      	bls.n	801314a <memmove+0x10>
 8013144:	4284      	cmp	r4, r0
 8013146:	4623      	mov	r3, r4
 8013148:	d807      	bhi.n	801315a <memmove+0x20>
 801314a:	1e43      	subs	r3, r0, #1
 801314c:	42a1      	cmp	r1, r4
 801314e:	d008      	beq.n	8013162 <memmove+0x28>
 8013150:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013154:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013158:	e7f8      	b.n	801314c <memmove+0x12>
 801315a:	4402      	add	r2, r0
 801315c:	4601      	mov	r1, r0
 801315e:	428a      	cmp	r2, r1
 8013160:	d100      	bne.n	8013164 <memmove+0x2a>
 8013162:	bd10      	pop	{r4, pc}
 8013164:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013168:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801316c:	e7f7      	b.n	801315e <memmove+0x24>
	...

08013170 <_fstat_r>:
 8013170:	b538      	push	{r3, r4, r5, lr}
 8013172:	4d07      	ldr	r5, [pc, #28]	@ (8013190 <_fstat_r+0x20>)
 8013174:	2300      	movs	r3, #0
 8013176:	4604      	mov	r4, r0
 8013178:	4608      	mov	r0, r1
 801317a:	4611      	mov	r1, r2
 801317c:	602b      	str	r3, [r5, #0]
 801317e:	f7f7 ff96 	bl	800b0ae <_fstat>
 8013182:	1c43      	adds	r3, r0, #1
 8013184:	d102      	bne.n	801318c <_fstat_r+0x1c>
 8013186:	682b      	ldr	r3, [r5, #0]
 8013188:	b103      	cbz	r3, 801318c <_fstat_r+0x1c>
 801318a:	6023      	str	r3, [r4, #0]
 801318c:	bd38      	pop	{r3, r4, r5, pc}
 801318e:	bf00      	nop
 8013190:	200131f0 	.word	0x200131f0

08013194 <_isatty_r>:
 8013194:	b538      	push	{r3, r4, r5, lr}
 8013196:	4d06      	ldr	r5, [pc, #24]	@ (80131b0 <_isatty_r+0x1c>)
 8013198:	2300      	movs	r3, #0
 801319a:	4604      	mov	r4, r0
 801319c:	4608      	mov	r0, r1
 801319e:	602b      	str	r3, [r5, #0]
 80131a0:	f7f7 ff95 	bl	800b0ce <_isatty>
 80131a4:	1c43      	adds	r3, r0, #1
 80131a6:	d102      	bne.n	80131ae <_isatty_r+0x1a>
 80131a8:	682b      	ldr	r3, [r5, #0]
 80131aa:	b103      	cbz	r3, 80131ae <_isatty_r+0x1a>
 80131ac:	6023      	str	r3, [r4, #0]
 80131ae:	bd38      	pop	{r3, r4, r5, pc}
 80131b0:	200131f0 	.word	0x200131f0

080131b4 <_strtol_l.isra.0>:
 80131b4:	2b24      	cmp	r3, #36	@ 0x24
 80131b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131ba:	4686      	mov	lr, r0
 80131bc:	4690      	mov	r8, r2
 80131be:	d801      	bhi.n	80131c4 <_strtol_l.isra.0+0x10>
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d106      	bne.n	80131d2 <_strtol_l.isra.0+0x1e>
 80131c4:	f7fe fe66 	bl	8011e94 <__errno>
 80131c8:	2316      	movs	r3, #22
 80131ca:	6003      	str	r3, [r0, #0]
 80131cc:	2000      	movs	r0, #0
 80131ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131d2:	4834      	ldr	r0, [pc, #208]	@ (80132a4 <_strtol_l.isra.0+0xf0>)
 80131d4:	460d      	mov	r5, r1
 80131d6:	462a      	mov	r2, r5
 80131d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80131dc:	5d06      	ldrb	r6, [r0, r4]
 80131de:	f016 0608 	ands.w	r6, r6, #8
 80131e2:	d1f8      	bne.n	80131d6 <_strtol_l.isra.0+0x22>
 80131e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80131e6:	d110      	bne.n	801320a <_strtol_l.isra.0+0x56>
 80131e8:	782c      	ldrb	r4, [r5, #0]
 80131ea:	2601      	movs	r6, #1
 80131ec:	1c95      	adds	r5, r2, #2
 80131ee:	f033 0210 	bics.w	r2, r3, #16
 80131f2:	d115      	bne.n	8013220 <_strtol_l.isra.0+0x6c>
 80131f4:	2c30      	cmp	r4, #48	@ 0x30
 80131f6:	d10d      	bne.n	8013214 <_strtol_l.isra.0+0x60>
 80131f8:	782a      	ldrb	r2, [r5, #0]
 80131fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80131fe:	2a58      	cmp	r2, #88	@ 0x58
 8013200:	d108      	bne.n	8013214 <_strtol_l.isra.0+0x60>
 8013202:	786c      	ldrb	r4, [r5, #1]
 8013204:	3502      	adds	r5, #2
 8013206:	2310      	movs	r3, #16
 8013208:	e00a      	b.n	8013220 <_strtol_l.isra.0+0x6c>
 801320a:	2c2b      	cmp	r4, #43	@ 0x2b
 801320c:	bf04      	itt	eq
 801320e:	782c      	ldrbeq	r4, [r5, #0]
 8013210:	1c95      	addeq	r5, r2, #2
 8013212:	e7ec      	b.n	80131ee <_strtol_l.isra.0+0x3a>
 8013214:	2b00      	cmp	r3, #0
 8013216:	d1f6      	bne.n	8013206 <_strtol_l.isra.0+0x52>
 8013218:	2c30      	cmp	r4, #48	@ 0x30
 801321a:	bf14      	ite	ne
 801321c:	230a      	movne	r3, #10
 801321e:	2308      	moveq	r3, #8
 8013220:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013224:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013228:	2200      	movs	r2, #0
 801322a:	fbbc f9f3 	udiv	r9, ip, r3
 801322e:	4610      	mov	r0, r2
 8013230:	fb03 ca19 	mls	sl, r3, r9, ip
 8013234:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013238:	2f09      	cmp	r7, #9
 801323a:	d80f      	bhi.n	801325c <_strtol_l.isra.0+0xa8>
 801323c:	463c      	mov	r4, r7
 801323e:	42a3      	cmp	r3, r4
 8013240:	dd1b      	ble.n	801327a <_strtol_l.isra.0+0xc6>
 8013242:	1c57      	adds	r7, r2, #1
 8013244:	d007      	beq.n	8013256 <_strtol_l.isra.0+0xa2>
 8013246:	4581      	cmp	r9, r0
 8013248:	d314      	bcc.n	8013274 <_strtol_l.isra.0+0xc0>
 801324a:	d101      	bne.n	8013250 <_strtol_l.isra.0+0x9c>
 801324c:	45a2      	cmp	sl, r4
 801324e:	db11      	blt.n	8013274 <_strtol_l.isra.0+0xc0>
 8013250:	fb00 4003 	mla	r0, r0, r3, r4
 8013254:	2201      	movs	r2, #1
 8013256:	f815 4b01 	ldrb.w	r4, [r5], #1
 801325a:	e7eb      	b.n	8013234 <_strtol_l.isra.0+0x80>
 801325c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013260:	2f19      	cmp	r7, #25
 8013262:	d801      	bhi.n	8013268 <_strtol_l.isra.0+0xb4>
 8013264:	3c37      	subs	r4, #55	@ 0x37
 8013266:	e7ea      	b.n	801323e <_strtol_l.isra.0+0x8a>
 8013268:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801326c:	2f19      	cmp	r7, #25
 801326e:	d804      	bhi.n	801327a <_strtol_l.isra.0+0xc6>
 8013270:	3c57      	subs	r4, #87	@ 0x57
 8013272:	e7e4      	b.n	801323e <_strtol_l.isra.0+0x8a>
 8013274:	f04f 32ff 	mov.w	r2, #4294967295
 8013278:	e7ed      	b.n	8013256 <_strtol_l.isra.0+0xa2>
 801327a:	1c53      	adds	r3, r2, #1
 801327c:	d108      	bne.n	8013290 <_strtol_l.isra.0+0xdc>
 801327e:	2322      	movs	r3, #34	@ 0x22
 8013280:	f8ce 3000 	str.w	r3, [lr]
 8013284:	4660      	mov	r0, ip
 8013286:	f1b8 0f00 	cmp.w	r8, #0
 801328a:	d0a0      	beq.n	80131ce <_strtol_l.isra.0+0x1a>
 801328c:	1e69      	subs	r1, r5, #1
 801328e:	e006      	b.n	801329e <_strtol_l.isra.0+0xea>
 8013290:	b106      	cbz	r6, 8013294 <_strtol_l.isra.0+0xe0>
 8013292:	4240      	negs	r0, r0
 8013294:	f1b8 0f00 	cmp.w	r8, #0
 8013298:	d099      	beq.n	80131ce <_strtol_l.isra.0+0x1a>
 801329a:	2a00      	cmp	r2, #0
 801329c:	d1f6      	bne.n	801328c <_strtol_l.isra.0+0xd8>
 801329e:	f8c8 1000 	str.w	r1, [r8]
 80132a2:	e794      	b.n	80131ce <_strtol_l.isra.0+0x1a>
 80132a4:	08013e55 	.word	0x08013e55

080132a8 <_strtol_r>:
 80132a8:	f7ff bf84 	b.w	80131b4 <_strtol_l.isra.0>

080132ac <_strtoul_l.isra.0>:
 80132ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132b0:	4e34      	ldr	r6, [pc, #208]	@ (8013384 <_strtoul_l.isra.0+0xd8>)
 80132b2:	4686      	mov	lr, r0
 80132b4:	460d      	mov	r5, r1
 80132b6:	4628      	mov	r0, r5
 80132b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80132bc:	5d37      	ldrb	r7, [r6, r4]
 80132be:	f017 0708 	ands.w	r7, r7, #8
 80132c2:	d1f8      	bne.n	80132b6 <_strtoul_l.isra.0+0xa>
 80132c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80132c6:	d110      	bne.n	80132ea <_strtoul_l.isra.0+0x3e>
 80132c8:	782c      	ldrb	r4, [r5, #0]
 80132ca:	2701      	movs	r7, #1
 80132cc:	1c85      	adds	r5, r0, #2
 80132ce:	f033 0010 	bics.w	r0, r3, #16
 80132d2:	d115      	bne.n	8013300 <_strtoul_l.isra.0+0x54>
 80132d4:	2c30      	cmp	r4, #48	@ 0x30
 80132d6:	d10d      	bne.n	80132f4 <_strtoul_l.isra.0+0x48>
 80132d8:	7828      	ldrb	r0, [r5, #0]
 80132da:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80132de:	2858      	cmp	r0, #88	@ 0x58
 80132e0:	d108      	bne.n	80132f4 <_strtoul_l.isra.0+0x48>
 80132e2:	786c      	ldrb	r4, [r5, #1]
 80132e4:	3502      	adds	r5, #2
 80132e6:	2310      	movs	r3, #16
 80132e8:	e00a      	b.n	8013300 <_strtoul_l.isra.0+0x54>
 80132ea:	2c2b      	cmp	r4, #43	@ 0x2b
 80132ec:	bf04      	itt	eq
 80132ee:	782c      	ldrbeq	r4, [r5, #0]
 80132f0:	1c85      	addeq	r5, r0, #2
 80132f2:	e7ec      	b.n	80132ce <_strtoul_l.isra.0+0x22>
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d1f6      	bne.n	80132e6 <_strtoul_l.isra.0+0x3a>
 80132f8:	2c30      	cmp	r4, #48	@ 0x30
 80132fa:	bf14      	ite	ne
 80132fc:	230a      	movne	r3, #10
 80132fe:	2308      	moveq	r3, #8
 8013300:	f04f 38ff 	mov.w	r8, #4294967295
 8013304:	2600      	movs	r6, #0
 8013306:	fbb8 f8f3 	udiv	r8, r8, r3
 801330a:	fb03 f908 	mul.w	r9, r3, r8
 801330e:	ea6f 0909 	mvn.w	r9, r9
 8013312:	4630      	mov	r0, r6
 8013314:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013318:	f1bc 0f09 	cmp.w	ip, #9
 801331c:	d810      	bhi.n	8013340 <_strtoul_l.isra.0+0x94>
 801331e:	4664      	mov	r4, ip
 8013320:	42a3      	cmp	r3, r4
 8013322:	dd1e      	ble.n	8013362 <_strtoul_l.isra.0+0xb6>
 8013324:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013328:	d007      	beq.n	801333a <_strtoul_l.isra.0+0x8e>
 801332a:	4580      	cmp	r8, r0
 801332c:	d316      	bcc.n	801335c <_strtoul_l.isra.0+0xb0>
 801332e:	d101      	bne.n	8013334 <_strtoul_l.isra.0+0x88>
 8013330:	45a1      	cmp	r9, r4
 8013332:	db13      	blt.n	801335c <_strtoul_l.isra.0+0xb0>
 8013334:	fb00 4003 	mla	r0, r0, r3, r4
 8013338:	2601      	movs	r6, #1
 801333a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801333e:	e7e9      	b.n	8013314 <_strtoul_l.isra.0+0x68>
 8013340:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013344:	f1bc 0f19 	cmp.w	ip, #25
 8013348:	d801      	bhi.n	801334e <_strtoul_l.isra.0+0xa2>
 801334a:	3c37      	subs	r4, #55	@ 0x37
 801334c:	e7e8      	b.n	8013320 <_strtoul_l.isra.0+0x74>
 801334e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013352:	f1bc 0f19 	cmp.w	ip, #25
 8013356:	d804      	bhi.n	8013362 <_strtoul_l.isra.0+0xb6>
 8013358:	3c57      	subs	r4, #87	@ 0x57
 801335a:	e7e1      	b.n	8013320 <_strtoul_l.isra.0+0x74>
 801335c:	f04f 36ff 	mov.w	r6, #4294967295
 8013360:	e7eb      	b.n	801333a <_strtoul_l.isra.0+0x8e>
 8013362:	1c73      	adds	r3, r6, #1
 8013364:	d106      	bne.n	8013374 <_strtoul_l.isra.0+0xc8>
 8013366:	2322      	movs	r3, #34	@ 0x22
 8013368:	f8ce 3000 	str.w	r3, [lr]
 801336c:	4630      	mov	r0, r6
 801336e:	b932      	cbnz	r2, 801337e <_strtoul_l.isra.0+0xd2>
 8013370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013374:	b107      	cbz	r7, 8013378 <_strtoul_l.isra.0+0xcc>
 8013376:	4240      	negs	r0, r0
 8013378:	2a00      	cmp	r2, #0
 801337a:	d0f9      	beq.n	8013370 <_strtoul_l.isra.0+0xc4>
 801337c:	b106      	cbz	r6, 8013380 <_strtoul_l.isra.0+0xd4>
 801337e:	1e69      	subs	r1, r5, #1
 8013380:	6011      	str	r1, [r2, #0]
 8013382:	e7f5      	b.n	8013370 <_strtoul_l.isra.0+0xc4>
 8013384:	08013e55 	.word	0x08013e55

08013388 <_strtoul_r>:
 8013388:	f7ff bf90 	b.w	80132ac <_strtoul_l.isra.0>

0801338c <_sbrk>:
 801338c:	4a04      	ldr	r2, [pc, #16]	@ (80133a0 <_sbrk+0x14>)
 801338e:	6811      	ldr	r1, [r2, #0]
 8013390:	4603      	mov	r3, r0
 8013392:	b909      	cbnz	r1, 8013398 <_sbrk+0xc>
 8013394:	4903      	ldr	r1, [pc, #12]	@ (80133a4 <_sbrk+0x18>)
 8013396:	6011      	str	r1, [r2, #0]
 8013398:	6810      	ldr	r0, [r2, #0]
 801339a:	4403      	add	r3, r0
 801339c:	6013      	str	r3, [r2, #0]
 801339e:	4770      	bx	lr
 80133a0:	200131f8 	.word	0x200131f8
 80133a4:	20013200 	.word	0x20013200

080133a8 <_init>:
 80133a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133aa:	bf00      	nop
 80133ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133ae:	bc08      	pop	{r3}
 80133b0:	469e      	mov	lr, r3
 80133b2:	4770      	bx	lr

080133b4 <_fini>:
 80133b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133b6:	bf00      	nop
 80133b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133ba:	bc08      	pop	{r3}
 80133bc:	469e      	mov	lr, r3
 80133be:	4770      	bx	lr
