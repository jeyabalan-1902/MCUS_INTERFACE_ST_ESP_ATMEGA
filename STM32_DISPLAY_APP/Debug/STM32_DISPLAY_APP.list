
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4d0  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  080166a0  080166a0  0000f6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080174e8  080174e8  000111ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080174e8  080174e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080174f0  080174f0  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080174f0  080174f0  000104f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080174f4  080174f4  000104f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  080174f8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013284  200001ec  080176e4  000111ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013470  080176e4  00011470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b66d  00000000  00000000  0001121c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041c9  00000000  00000000  0002c889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00030a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e7  00000000  00000000  000324e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263b0  00000000  00000000  000339cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebc1  00000000  00000000  00059d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e12e4  00000000  00000000  00078940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159c24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008764  00000000  00000000  00159c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001623cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	200001ec 	.word	0x200001ec
 80081ec:	00000000 	.word	0x00000000
 80081f0:	08016688 	.word	0x08016688

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	200001f0 	.word	0x200001f0
 800820c:	08016688 	.word	0x08016688

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr

08008224 <strlen>:
 8008224:	4603      	mov	r3, r0
 8008226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800822a:	2a00      	cmp	r2, #0
 800822c:	d1fb      	bne.n	8008226 <strlen+0x2>
 800822e:	1a18      	subs	r0, r3, r0
 8008230:	3801      	subs	r0, #1
 8008232:	4770      	bx	lr
	...

08008240 <memchr>:
 8008240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008244:	2a10      	cmp	r2, #16
 8008246:	db2b      	blt.n	80082a0 <memchr+0x60>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	d008      	beq.n	8008260 <memchr+0x20>
 800824e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008252:	3a01      	subs	r2, #1
 8008254:	428b      	cmp	r3, r1
 8008256:	d02d      	beq.n	80082b4 <memchr+0x74>
 8008258:	f010 0f07 	tst.w	r0, #7
 800825c:	b342      	cbz	r2, 80082b0 <memchr+0x70>
 800825e:	d1f6      	bne.n	800824e <memchr+0xe>
 8008260:	b4f0      	push	{r4, r5, r6, r7}
 8008262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800826a:	f022 0407 	bic.w	r4, r2, #7
 800826e:	f07f 0700 	mvns.w	r7, #0
 8008272:	2300      	movs	r3, #0
 8008274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008278:	3c08      	subs	r4, #8
 800827a:	ea85 0501 	eor.w	r5, r5, r1
 800827e:	ea86 0601 	eor.w	r6, r6, r1
 8008282:	fa85 f547 	uadd8	r5, r5, r7
 8008286:	faa3 f587 	sel	r5, r3, r7
 800828a:	fa86 f647 	uadd8	r6, r6, r7
 800828e:	faa5 f687 	sel	r6, r5, r7
 8008292:	b98e      	cbnz	r6, 80082b8 <memchr+0x78>
 8008294:	d1ee      	bne.n	8008274 <memchr+0x34>
 8008296:	bcf0      	pop	{r4, r5, r6, r7}
 8008298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800829c:	f002 0207 	and.w	r2, r2, #7
 80082a0:	b132      	cbz	r2, 80082b0 <memchr+0x70>
 80082a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082a6:	3a01      	subs	r2, #1
 80082a8:	ea83 0301 	eor.w	r3, r3, r1
 80082ac:	b113      	cbz	r3, 80082b4 <memchr+0x74>
 80082ae:	d1f8      	bne.n	80082a2 <memchr+0x62>
 80082b0:	2000      	movs	r0, #0
 80082b2:	4770      	bx	lr
 80082b4:	3801      	subs	r0, #1
 80082b6:	4770      	bx	lr
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	bf06      	itte	eq
 80082bc:	4635      	moveq	r5, r6
 80082be:	3803      	subeq	r0, #3
 80082c0:	3807      	subne	r0, #7
 80082c2:	f015 0f01 	tst.w	r5, #1
 80082c6:	d107      	bne.n	80082d8 <memchr+0x98>
 80082c8:	3001      	adds	r0, #1
 80082ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082ce:	bf02      	ittt	eq
 80082d0:	3001      	addeq	r0, #1
 80082d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082d6:	3001      	addeq	r0, #1
 80082d8:	bcf0      	pop	{r4, r5, r6, r7}
 80082da:	3801      	subs	r0, #1
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_d2uiz>:
 8008c08:	004a      	lsls	r2, r1, #1
 8008c0a:	d211      	bcs.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008c10:	d211      	bcs.n	8008c36 <__aeabi_d2uiz+0x2e>
 8008c12:	d50d      	bpl.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c1c:	d40e      	bmi.n	8008c3c <__aeabi_d2uiz+0x34>
 8008c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008c2e:	4770      	bx	lr
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c3a:	d102      	bne.n	8008c42 <__aeabi_d2uiz+0x3a>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	4770      	bx	lr

08008c48 <__aeabi_uldivmod>:
 8008c48:	b953      	cbnz	r3, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4a:	b94a      	cbnz	r2, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bf08      	it	eq
 8008c50:	2800      	cmpeq	r0, #0
 8008c52:	bf1c      	itt	ne
 8008c54:	f04f 31ff 	movne.w	r1, #4294967295
 8008c58:	f04f 30ff 	movne.w	r0, #4294967295
 8008c5c:	f000 b9be 	b.w	8008fdc <__aeabi_idiv0>
 8008c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c68:	f000 f83c 	bl	8008ce4 <__udivmoddi4>
 8008c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c74:	b004      	add	sp, #16
 8008c76:	4770      	bx	lr

08008c78 <__aeabi_d2lz>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7ff ff5b 	bl	8008b3c <__aeabi_dcmplt>
 8008c86:	b928      	cbnz	r0, 8008c94 <__aeabi_d2lz+0x1c>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b80a 	b.w	8008ca8 <__aeabi_d2ulz>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008c9a:	f000 f805 	bl	8008ca8 <__aeabi_d2ulz>
 8008c9e:	4240      	negs	r0, r0
 8008ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop

08008ca8 <__aeabi_d2ulz>:
 8008ca8:	b5d0      	push	{r4, r6, r7, lr}
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <__aeabi_d2ulz+0x34>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7ff fcd1 	bl	8008658 <__aeabi_dmul>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__aeabi_d2uiz>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fc52 	bl	8008564 <__aeabi_ui2d>
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <__aeabi_d2ulz+0x38>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7ff fcc8 	bl	8008658 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7ff fb0a 	bl	80082e8 <__aeabi_dsub>
 8008cd4:	f7ff ff98 	bl	8008c08 <__aeabi_d2uiz>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	bdd0      	pop	{r4, r6, r7, pc}
 8008cdc:	3df00000 	.word	0x3df00000
 8008ce0:	41f00000 	.word	0x41f00000

08008ce4 <__udivmoddi4>:
 8008ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	9d08      	ldr	r5, [sp, #32]
 8008cea:	468e      	mov	lr, r1
 8008cec:	4604      	mov	r4, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d14a      	bne.n	8008d8a <__udivmoddi4+0xa6>
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	d962      	bls.n	8008dc0 <__udivmoddi4+0xdc>
 8008cfa:	fab2 f682 	clz	r6, r2
 8008cfe:	b14e      	cbz	r6, 8008d14 <__udivmoddi4+0x30>
 8008d00:	f1c6 0320 	rsb	r3, r6, #32
 8008d04:	fa01 f806 	lsl.w	r8, r1, r6
 8008d08:	fa20 f303 	lsr.w	r3, r0, r3
 8008d0c:	40b7      	lsls	r7, r6
 8008d0e:	ea43 0808 	orr.w	r8, r3, r8
 8008d12:	40b4      	lsls	r4, r6
 8008d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d18:	fa1f fc87 	uxth.w	ip, r7
 8008d1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8008d20:	0c23      	lsrs	r3, r4, #16
 8008d22:	fb0e 8811 	mls	r8, lr, r1, r8
 8008d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008d2a:	fb01 f20c 	mul.w	r2, r1, ip
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d909      	bls.n	8008d46 <__udivmoddi4+0x62>
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8008d38:	f080 80ea 	bcs.w	8008f10 <__udivmoddi4+0x22c>
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	f240 80e7 	bls.w	8008f10 <__udivmoddi4+0x22c>
 8008d42:	3902      	subs	r1, #2
 8008d44:	443b      	add	r3, r7
 8008d46:	1a9a      	subs	r2, r3, r2
 8008d48:	b2a3      	uxth	r3, r4
 8008d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8008d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8008d5a:	459c      	cmp	ip, r3
 8008d5c:	d909      	bls.n	8008d72 <__udivmoddi4+0x8e>
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d64:	f080 80d6 	bcs.w	8008f14 <__udivmoddi4+0x230>
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	f240 80d3 	bls.w	8008f14 <__udivmoddi4+0x230>
 8008d6e:	443b      	add	r3, r7
 8008d70:	3802      	subs	r0, #2
 8008d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008d76:	eba3 030c 	sub.w	r3, r3, ip
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	b11d      	cbz	r5, 8008d86 <__udivmoddi4+0xa2>
 8008d7e:	40f3      	lsrs	r3, r6
 8008d80:	2200      	movs	r2, #0
 8008d82:	e9c5 3200 	strd	r3, r2, [r5]
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	428b      	cmp	r3, r1
 8008d8c:	d905      	bls.n	8008d9a <__udivmoddi4+0xb6>
 8008d8e:	b10d      	cbz	r5, 8008d94 <__udivmoddi4+0xb0>
 8008d90:	e9c5 0100 	strd	r0, r1, [r5]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4608      	mov	r0, r1
 8008d98:	e7f5      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008d9a:	fab3 f183 	clz	r1, r3
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	d146      	bne.n	8008e30 <__udivmoddi4+0x14c>
 8008da2:	4573      	cmp	r3, lr
 8008da4:	d302      	bcc.n	8008dac <__udivmoddi4+0xc8>
 8008da6:	4282      	cmp	r2, r0
 8008da8:	f200 8105 	bhi.w	8008fb6 <__udivmoddi4+0x2d2>
 8008dac:	1a84      	subs	r4, r0, r2
 8008dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8008db2:	2001      	movs	r0, #1
 8008db4:	4690      	mov	r8, r2
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d0e5      	beq.n	8008d86 <__udivmoddi4+0xa2>
 8008dba:	e9c5 4800 	strd	r4, r8, [r5]
 8008dbe:	e7e2      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 8090 	beq.w	8008ee6 <__udivmoddi4+0x202>
 8008dc6:	fab2 f682 	clz	r6, r2
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	f040 80a4 	bne.w	8008f18 <__udivmoddi4+0x234>
 8008dd0:	1a8a      	subs	r2, r1, r2
 8008dd2:	0c03      	lsrs	r3, r0, #16
 8008dd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	b2bc      	uxth	r4, r7
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8008de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dea:	fb04 f20c 	mul.w	r2, r4, ip
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d907      	bls.n	8008e02 <__udivmoddi4+0x11e>
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008df8:	d202      	bcs.n	8008e00 <__udivmoddi4+0x11c>
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	f200 80e0 	bhi.w	8008fc0 <__udivmoddi4+0x2dc>
 8008e00:	46c4      	mov	ip, r8
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8008e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8008e0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008e10:	fb02 f404 	mul.w	r4, r2, r4
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d907      	bls.n	8008e28 <__udivmoddi4+0x144>
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8008e1e:	d202      	bcs.n	8008e26 <__udivmoddi4+0x142>
 8008e20:	429c      	cmp	r4, r3
 8008e22:	f200 80ca 	bhi.w	8008fba <__udivmoddi4+0x2d6>
 8008e26:	4602      	mov	r2, r0
 8008e28:	1b1b      	subs	r3, r3, r4
 8008e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008e2e:	e7a5      	b.n	8008d7c <__udivmoddi4+0x98>
 8008e30:	f1c1 0620 	rsb	r6, r1, #32
 8008e34:	408b      	lsls	r3, r1
 8008e36:	fa22 f706 	lsr.w	r7, r2, r6
 8008e3a:	431f      	orrs	r7, r3
 8008e3c:	fa0e f401 	lsl.w	r4, lr, r1
 8008e40:	fa20 f306 	lsr.w	r3, r0, r6
 8008e44:	fa2e fe06 	lsr.w	lr, lr, r6
 8008e48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8008e52:	fa1f fc87 	uxth.w	ip, r7
 8008e56:	fbbe f0f9 	udiv	r0, lr, r9
 8008e5a:	0c1c      	lsrs	r4, r3, #16
 8008e5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8008e60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008e64:	fb00 fe0c 	mul.w	lr, r0, ip
 8008e68:	45a6      	cmp	lr, r4
 8008e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8008e6e:	d909      	bls.n	8008e84 <__udivmoddi4+0x1a0>
 8008e70:	193c      	adds	r4, r7, r4
 8008e72:	f100 3aff 	add.w	sl, r0, #4294967295
 8008e76:	f080 809c 	bcs.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e7a:	45a6      	cmp	lr, r4
 8008e7c:	f240 8099 	bls.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e80:	3802      	subs	r0, #2
 8008e82:	443c      	add	r4, r7
 8008e84:	eba4 040e 	sub.w	r4, r4, lr
 8008e88:	fa1f fe83 	uxth.w	lr, r3
 8008e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008e90:	fb09 4413 	mls	r4, r9, r3, r4
 8008e94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008e98:	fb03 fc0c 	mul.w	ip, r3, ip
 8008e9c:	45a4      	cmp	ip, r4
 8008e9e:	d908      	bls.n	8008eb2 <__udivmoddi4+0x1ce>
 8008ea0:	193c      	adds	r4, r7, r4
 8008ea2:	f103 3eff 	add.w	lr, r3, #4294967295
 8008ea6:	f080 8082 	bcs.w	8008fae <__udivmoddi4+0x2ca>
 8008eaa:	45a4      	cmp	ip, r4
 8008eac:	d97f      	bls.n	8008fae <__udivmoddi4+0x2ca>
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	443c      	add	r4, r7
 8008eb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008eb6:	eba4 040c 	sub.w	r4, r4, ip
 8008eba:	fba0 ec02 	umull	lr, ip, r0, r2
 8008ebe:	4564      	cmp	r4, ip
 8008ec0:	4673      	mov	r3, lr
 8008ec2:	46e1      	mov	r9, ip
 8008ec4:	d362      	bcc.n	8008f8c <__udivmoddi4+0x2a8>
 8008ec6:	d05f      	beq.n	8008f88 <__udivmoddi4+0x2a4>
 8008ec8:	b15d      	cbz	r5, 8008ee2 <__udivmoddi4+0x1fe>
 8008eca:	ebb8 0203 	subs.w	r2, r8, r3
 8008ece:	eb64 0409 	sbc.w	r4, r4, r9
 8008ed2:	fa04 f606 	lsl.w	r6, r4, r6
 8008ed6:	fa22 f301 	lsr.w	r3, r2, r1
 8008eda:	431e      	orrs	r6, r3
 8008edc:	40cc      	lsrs	r4, r1
 8008ede:	e9c5 6400 	strd	r6, r4, [r5]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e74f      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008ee6:	fbb1 fcf2 	udiv	ip, r1, r2
 8008eea:	0c01      	lsrs	r1, r0, #16
 8008eec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008ef0:	b280      	uxth	r0, r0
 8008ef2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	4638      	mov	r0, r7
 8008efa:	463c      	mov	r4, r7
 8008efc:	46b8      	mov	r8, r7
 8008efe:	46be      	mov	lr, r7
 8008f00:	2620      	movs	r6, #32
 8008f02:	fbb1 f1f7 	udiv	r1, r1, r7
 8008f06:	eba2 0208 	sub.w	r2, r2, r8
 8008f0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008f0e:	e766      	b.n	8008dde <__udivmoddi4+0xfa>
 8008f10:	4601      	mov	r1, r0
 8008f12:	e718      	b.n	8008d46 <__udivmoddi4+0x62>
 8008f14:	4610      	mov	r0, r2
 8008f16:	e72c      	b.n	8008d72 <__udivmoddi4+0x8e>
 8008f18:	f1c6 0220 	rsb	r2, r6, #32
 8008f1c:	fa2e f302 	lsr.w	r3, lr, r2
 8008f20:	40b7      	lsls	r7, r6
 8008f22:	40b1      	lsls	r1, r6
 8008f24:	fa20 f202 	lsr.w	r2, r0, r2
 8008f28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8008f32:	b2bc      	uxth	r4, r7
 8008f34:	fb0e 3318 	mls	r3, lr, r8, r3
 8008f38:	0c11      	lsrs	r1, r2, #16
 8008f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f3e:	fb08 f904 	mul.w	r9, r8, r4
 8008f42:	40b0      	lsls	r0, r6
 8008f44:	4589      	cmp	r9, r1
 8008f46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	d93e      	bls.n	8008fcc <__udivmoddi4+0x2e8>
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	f108 3cff 	add.w	ip, r8, #4294967295
 8008f54:	d201      	bcs.n	8008f5a <__udivmoddi4+0x276>
 8008f56:	4589      	cmp	r9, r1
 8008f58:	d81f      	bhi.n	8008f9a <__udivmoddi4+0x2b6>
 8008f5a:	eba1 0109 	sub.w	r1, r1, r9
 8008f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f62:	fb09 f804 	mul.w	r8, r9, r4
 8008f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8008f6a:	b292      	uxth	r2, r2
 8008f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f70:	4542      	cmp	r2, r8
 8008f72:	d229      	bcs.n	8008fc8 <__udivmoddi4+0x2e4>
 8008f74:	18ba      	adds	r2, r7, r2
 8008f76:	f109 31ff 	add.w	r1, r9, #4294967295
 8008f7a:	d2c4      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f7c:	4542      	cmp	r2, r8
 8008f7e:	d2c2      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f80:	f1a9 0102 	sub.w	r1, r9, #2
 8008f84:	443a      	add	r2, r7
 8008f86:	e7be      	b.n	8008f06 <__udivmoddi4+0x222>
 8008f88:	45f0      	cmp	r8, lr
 8008f8a:	d29d      	bcs.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f8c:	ebbe 0302 	subs.w	r3, lr, r2
 8008f90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008f94:	3801      	subs	r0, #1
 8008f96:	46e1      	mov	r9, ip
 8008f98:	e796      	b.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f9a:	eba7 0909 	sub.w	r9, r7, r9
 8008f9e:	4449      	add	r1, r9
 8008fa0:	f1a8 0c02 	sub.w	ip, r8, #2
 8008fa4:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fa8:	fb09 f804 	mul.w	r8, r9, r4
 8008fac:	e7db      	b.n	8008f66 <__udivmoddi4+0x282>
 8008fae:	4673      	mov	r3, lr
 8008fb0:	e77f      	b.n	8008eb2 <__udivmoddi4+0x1ce>
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	e766      	b.n	8008e84 <__udivmoddi4+0x1a0>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	e6fd      	b.n	8008db6 <__udivmoddi4+0xd2>
 8008fba:	443b      	add	r3, r7
 8008fbc:	3a02      	subs	r2, #2
 8008fbe:	e733      	b.n	8008e28 <__udivmoddi4+0x144>
 8008fc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8008fc4:	443b      	add	r3, r7
 8008fc6:	e71c      	b.n	8008e02 <__udivmoddi4+0x11e>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	e79c      	b.n	8008f06 <__udivmoddi4+0x222>
 8008fcc:	eba1 0109 	sub.w	r1, r1, r9
 8008fd0:	46c4      	mov	ip, r8
 8008fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fd6:	fb09 f804 	mul.w	r8, r9, r4
 8008fda:	e7c4      	b.n	8008f66 <__udivmoddi4+0x282>

08008fdc <__aeabi_idiv0>:
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af02      	add	r7, sp, #8
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	4611      	mov	r1, r2
 8008fec:	461a      	mov	r2, r3
 8008fee:	4623      	mov	r3, r4
 8008ff0:	80fb      	strh	r3, [r7, #6]
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	80bb      	strh	r3, [r7, #4]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	807b      	strh	r3, [r7, #2]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8008ffe:	88f8      	ldrh	r0, [r7, #6]
 8009000:	88b9      	ldrh	r1, [r7, #4]
 8009002:	887a      	ldrh	r2, [r7, #2]
 8009004:	883c      	ldrh	r4, [r7, #0]
 8009006:	8b3b      	ldrh	r3, [r7, #24]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	4623      	mov	r3, r4
 800900c:	f000 fa88 	bl	8009520 <ST7735_FillRectangle>
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	bd90      	pop	{r4, r7, pc}

08009018 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af02      	add	r7, sp, #8
 800901e:	4603      	mov	r3, r0
 8009020:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8009022:	4b08      	ldr	r3, [pc, #32]	@ (8009044 <fillScreen+0x2c>)
 8009024:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009028:	4b07      	ldr	r3, [pc, #28]	@ (8009048 <fillScreen+0x30>)
 800902a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800902e:	88fb      	ldrh	r3, [r7, #6]
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	460b      	mov	r3, r1
 8009034:	2100      	movs	r1, #0
 8009036:	2000      	movs	r0, #0
 8009038:	f7ff ffd2 	bl	8008fe0 <fillRect>
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000208 	.word	0x20000208
 8009048:	2000020a 	.word	0x2000020a

0800904c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8009050:	2200      	movs	r2, #0
 8009052:	2102      	movs	r1, #2
 8009054:	4802      	ldr	r0, [pc, #8]	@ (8009060 <ST7735_Select+0x14>)
 8009056:	f004 f9d1 	bl	800d3fc <HAL_GPIO_WritePin>
}
 800905a:	bf00      	nop
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	40020000 	.word	0x40020000

08009064 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8009068:	2201      	movs	r2, #1
 800906a:	2102      	movs	r1, #2
 800906c:	4802      	ldr	r0, [pc, #8]	@ (8009078 <ST7735_Unselect+0x14>)
 800906e:	f004 f9c5 	bl	800d3fc <HAL_GPIO_WritePin>
}
 8009072:	bf00      	nop
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	40020000 	.word	0x40020000

0800907c <ST7735_Reset>:

void ST7735_Reset()
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8009080:	2200      	movs	r2, #0
 8009082:	2110      	movs	r1, #16
 8009084:	4806      	ldr	r0, [pc, #24]	@ (80090a0 <ST7735_Reset+0x24>)
 8009086:	f004 f9b9 	bl	800d3fc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800908a:	2005      	movs	r0, #5
 800908c:	f003 fe72 	bl	800cd74 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8009090:	2201      	movs	r2, #1
 8009092:	2110      	movs	r1, #16
 8009094:	4802      	ldr	r0, [pc, #8]	@ (80090a0 <ST7735_Reset+0x24>)
 8009096:	f004 f9b1 	bl	800d3fc <HAL_GPIO_WritePin>
}
 800909a:	bf00      	nop
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	40020000 	.word	0x40020000

080090a4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80090ae:	2200      	movs	r2, #0
 80090b0:	2110      	movs	r1, #16
 80090b2:	4807      	ldr	r0, [pc, #28]	@ (80090d0 <ST7735_WriteCommand+0x2c>)
 80090b4:	f004 f9a2 	bl	800d3fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80090b8:	1df9      	adds	r1, r7, #7
 80090ba:	f04f 33ff 	mov.w	r3, #4294967295
 80090be:	2201      	movs	r2, #1
 80090c0:	4804      	ldr	r0, [pc, #16]	@ (80090d4 <ST7735_WriteCommand+0x30>)
 80090c2:	f005 f83c 	bl	800e13e <HAL_SPI_Transmit>
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	40020800 	.word	0x40020800
 80090d4:	200002d8 	.word	0x200002d8

080090d8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80090e2:	2201      	movs	r2, #1
 80090e4:	2110      	movs	r1, #16
 80090e6:	4807      	ldr	r0, [pc, #28]	@ (8009104 <ST7735_WriteData+0x2c>)
 80090e8:	f004 f988 	bl	800d3fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	f04f 33ff 	mov.w	r3, #4294967295
 80090f4:	6879      	ldr	r1, [r7, #4]
 80090f6:	4804      	ldr	r0, [pc, #16]	@ (8009108 <ST7735_WriteData+0x30>)
 80090f8:	f005 f821 	bl	800e13e <HAL_SPI_Transmit>
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	40020800 	.word	0x40020800
 8009108:	200002d8 	.word	0x200002d8

0800910c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	607a      	str	r2, [r7, #4]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800911e:	e034      	b.n	800918a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	607a      	str	r2, [r7, #4]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800912a:	7afb      	ldrb	r3, [r7, #11]
 800912c:	4618      	mov	r0, r3
 800912e:	f7ff ffb9 	bl	80090a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800913c:	7abb      	ldrb	r3, [r7, #10]
 800913e:	b29b      	uxth	r3, r3
 8009140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009144:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8009146:	7abb      	ldrb	r3, [r7, #10]
 8009148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800914c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800914e:	7abb      	ldrb	r3, [r7, #10]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d008      	beq.n	8009166 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8009154:	7abb      	ldrb	r3, [r7, #10]
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff ffbd 	bl	80090d8 <ST7735_WriteData>
            addr += numArgs;
 800915e:	7abb      	ldrb	r3, [r7, #10]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	4413      	add	r3, r2
 8009164:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8009166:	89bb      	ldrh	r3, [r7, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00e      	beq.n	800918a <DisplayInit+0x7e>
            ms = *addr++;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	607a      	str	r2, [r7, #4]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8009176:	89bb      	ldrh	r3, [r7, #12]
 8009178:	2bff      	cmp	r3, #255	@ 0xff
 800917a:	d102      	bne.n	8009182 <DisplayInit+0x76>
 800917c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009180:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8009182:	89bb      	ldrh	r3, [r7, #12]
 8009184:	4618      	mov	r0, r3
 8009186:	f003 fdf5 	bl	800cd74 <HAL_Delay>
    while(numCommands--) {
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	73fa      	strb	r2, [r7, #15]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1c5      	bne.n	8009120 <DisplayInit+0x14>
        }
    }
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80091a0:	b590      	push	{r4, r7, lr}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4604      	mov	r4, r0
 80091a8:	4608      	mov	r0, r1
 80091aa:	4611      	mov	r1, r2
 80091ac:	461a      	mov	r2, r3
 80091ae:	4623      	mov	r3, r4
 80091b0:	71fb      	strb	r3, [r7, #7]
 80091b2:	4603      	mov	r3, r0
 80091b4:	71bb      	strb	r3, [r7, #6]
 80091b6:	460b      	mov	r3, r1
 80091b8:	717b      	strb	r3, [r7, #5]
 80091ba:	4613      	mov	r3, r2
 80091bc:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80091be:	202a      	movs	r0, #42	@ 0x2a
 80091c0:	f7ff ff70 	bl	80090a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80091c4:	2300      	movs	r3, #0
 80091c6:	733b      	strb	r3, [r7, #12]
 80091c8:	4b17      	ldr	r3, [pc, #92]	@ (8009228 <ST7735_SetAddressWindow+0x88>)
 80091ca:	781a      	ldrb	r2, [r3, #0]
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	4413      	add	r3, r2
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	737b      	strb	r3, [r7, #13]
 80091d4:	2300      	movs	r3, #0
 80091d6:	73bb      	strb	r3, [r7, #14]
 80091d8:	4b13      	ldr	r3, [pc, #76]	@ (8009228 <ST7735_SetAddressWindow+0x88>)
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	797b      	ldrb	r3, [r7, #5]
 80091de:	4413      	add	r3, r2
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80091e4:	f107 030c 	add.w	r3, r7, #12
 80091e8:	2104      	movs	r1, #4
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff ff74 	bl	80090d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80091f0:	202b      	movs	r0, #43	@ 0x2b
 80091f2:	f7ff ff57 	bl	80090a4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80091f6:	4b0d      	ldr	r3, [pc, #52]	@ (800922c <ST7735_SetAddressWindow+0x8c>)
 80091f8:	781a      	ldrb	r2, [r3, #0]
 80091fa:	79bb      	ldrb	r3, [r7, #6]
 80091fc:	4413      	add	r3, r2
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8009202:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <ST7735_SetAddressWindow+0x8c>)
 8009204:	781a      	ldrb	r2, [r3, #0]
 8009206:	793b      	ldrb	r3, [r7, #4]
 8009208:	4413      	add	r3, r2
 800920a:	b2db      	uxtb	r3, r3
 800920c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800920e:	f107 030c 	add.w	r3, r7, #12
 8009212:	2104      	movs	r1, #4
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff ff5f 	bl	80090d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800921a:	202c      	movs	r0, #44	@ 0x2c
 800921c:	f7ff ff42 	bl	80090a4 <ST7735_WriteCommand>
}
 8009220:	bf00      	nop
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	bd90      	pop	{r4, r7, pc}
 8009228:	2000020f 	.word	0x2000020f
 800922c:	20000210 	.word	0x20000210

08009230 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800923a:	f7ff ff07 	bl	800904c <ST7735_Select>
    ST7735_Reset();
 800923e:	f7ff ff1d 	bl	800907c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8009242:	480c      	ldr	r0, [pc, #48]	@ (8009274 <ST7735_Init+0x44>)
 8009244:	f7ff ff62 	bl	800910c <DisplayInit>
    DisplayInit(init_cmds2);
 8009248:	480b      	ldr	r0, [pc, #44]	@ (8009278 <ST7735_Init+0x48>)
 800924a:	f7ff ff5f 	bl	800910c <DisplayInit>
    DisplayInit(init_cmds3);
 800924e:	480b      	ldr	r0, [pc, #44]	@ (800927c <ST7735_Init+0x4c>)
 8009250:	f7ff ff5c 	bl	800910c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8009254:	4b0a      	ldr	r3, [pc, #40]	@ (8009280 <ST7735_Init+0x50>)
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800925a:	4b0a      	ldr	r3, [pc, #40]	@ (8009284 <ST7735_Init+0x54>)
 800925c:	2200      	movs	r2, #0
 800925e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f810 	bl	8009288 <ST7735_SetRotation>
    ST7735_Unselect();
 8009268:	f7ff fefc 	bl	8009064 <ST7735_Unselect>

}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	08016910 	.word	0x08016910
 8009278:	08016948 	.word	0x08016948
 800927c:	08016958 	.word	0x08016958
 8009280:	2000020d 	.word	0x2000020d
 8009284:	2000020e 	.word	0x2000020e

08009288 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	f003 0303 	and.w	r3, r3, #3
 800929c:	b2da      	uxtb	r2, r3
 800929e:	4b33      	ldr	r3, [pc, #204]	@ (800936c <ST7735_SetRotation+0xe4>)
 80092a0:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80092a2:	4b32      	ldr	r3, [pc, #200]	@ (800936c <ST7735_SetRotation+0xe4>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d84e      	bhi.n	8009348 <ST7735_SetRotation+0xc0>
 80092aa:	a201      	add	r2, pc, #4	@ (adr r2, 80092b0 <ST7735_SetRotation+0x28>)
 80092ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b0:	080092c1 	.word	0x080092c1
 80092b4:	080092e3 	.word	0x080092e3
 80092b8:	08009305 	.word	0x08009305
 80092bc:	08009327 	.word	0x08009327
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80092c0:	23c0      	movs	r3, #192	@ 0xc0
 80092c2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80092c4:	4b2a      	ldr	r3, [pc, #168]	@ (8009370 <ST7735_SetRotation+0xe8>)
 80092c6:	22a0      	movs	r2, #160	@ 0xa0
 80092c8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80092ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009374 <ST7735_SetRotation+0xec>)
 80092cc:	2280      	movs	r2, #128	@ 0x80
 80092ce:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80092d0:	4b29      	ldr	r3, [pc, #164]	@ (8009378 <ST7735_SetRotation+0xf0>)
 80092d2:	781a      	ldrb	r2, [r3, #0]
 80092d4:	4b29      	ldr	r3, [pc, #164]	@ (800937c <ST7735_SetRotation+0xf4>)
 80092d6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80092d8:	4b29      	ldr	r3, [pc, #164]	@ (8009380 <ST7735_SetRotation+0xf8>)
 80092da:	781a      	ldrb	r2, [r3, #0]
 80092dc:	4b29      	ldr	r3, [pc, #164]	@ (8009384 <ST7735_SetRotation+0xfc>)
 80092de:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80092e0:	e032      	b.n	8009348 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80092e2:	23a0      	movs	r3, #160	@ 0xa0
 80092e4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80092e6:	4b23      	ldr	r3, [pc, #140]	@ (8009374 <ST7735_SetRotation+0xec>)
 80092e8:	22a0      	movs	r2, #160	@ 0xa0
 80092ea:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80092ec:	4b20      	ldr	r3, [pc, #128]	@ (8009370 <ST7735_SetRotation+0xe8>)
 80092ee:	2280      	movs	r2, #128	@ 0x80
 80092f0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80092f2:	4b21      	ldr	r3, [pc, #132]	@ (8009378 <ST7735_SetRotation+0xf0>)
 80092f4:	781a      	ldrb	r2, [r3, #0]
 80092f6:	4b23      	ldr	r3, [pc, #140]	@ (8009384 <ST7735_SetRotation+0xfc>)
 80092f8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80092fa:	4b21      	ldr	r3, [pc, #132]	@ (8009380 <ST7735_SetRotation+0xf8>)
 80092fc:	781a      	ldrb	r2, [r3, #0]
 80092fe:	4b1f      	ldr	r3, [pc, #124]	@ (800937c <ST7735_SetRotation+0xf4>)
 8009300:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009302:	e021      	b.n	8009348 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8009308:	4b19      	ldr	r3, [pc, #100]	@ (8009370 <ST7735_SetRotation+0xe8>)
 800930a:	22a0      	movs	r2, #160	@ 0xa0
 800930c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800930e:	4b19      	ldr	r3, [pc, #100]	@ (8009374 <ST7735_SetRotation+0xec>)
 8009310:	2280      	movs	r2, #128	@ 0x80
 8009312:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8009314:	4b18      	ldr	r3, [pc, #96]	@ (8009378 <ST7735_SetRotation+0xf0>)
 8009316:	781a      	ldrb	r2, [r3, #0]
 8009318:	4b18      	ldr	r3, [pc, #96]	@ (800937c <ST7735_SetRotation+0xf4>)
 800931a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800931c:	4b18      	ldr	r3, [pc, #96]	@ (8009380 <ST7735_SetRotation+0xf8>)
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	4b18      	ldr	r3, [pc, #96]	@ (8009384 <ST7735_SetRotation+0xfc>)
 8009322:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009324:	e010      	b.n	8009348 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8009326:	2360      	movs	r3, #96	@ 0x60
 8009328:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800932a:	4b12      	ldr	r3, [pc, #72]	@ (8009374 <ST7735_SetRotation+0xec>)
 800932c:	22a0      	movs	r2, #160	@ 0xa0
 800932e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8009330:	4b0f      	ldr	r3, [pc, #60]	@ (8009370 <ST7735_SetRotation+0xe8>)
 8009332:	2280      	movs	r2, #128	@ 0x80
 8009334:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8009336:	4b10      	ldr	r3, [pc, #64]	@ (8009378 <ST7735_SetRotation+0xf0>)
 8009338:	781a      	ldrb	r2, [r3, #0]
 800933a:	4b12      	ldr	r3, [pc, #72]	@ (8009384 <ST7735_SetRotation+0xfc>)
 800933c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800933e:	4b10      	ldr	r3, [pc, #64]	@ (8009380 <ST7735_SetRotation+0xf8>)
 8009340:	781a      	ldrb	r2, [r3, #0]
 8009342:	4b0e      	ldr	r3, [pc, #56]	@ (800937c <ST7735_SetRotation+0xf4>)
 8009344:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009346:	bf00      	nop
  }
  ST7735_Select();
 8009348:	f7ff fe80 	bl	800904c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800934c:	2036      	movs	r0, #54	@ 0x36
 800934e:	f7ff fea9 	bl	80090a4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8009352:	f107 030f 	add.w	r3, r7, #15
 8009356:	2101      	movs	r1, #1
 8009358:	4618      	mov	r0, r3
 800935a:	f7ff febd 	bl	80090d8 <ST7735_WriteData>
  ST7735_Unselect();
 800935e:	f7ff fe81 	bl	8009064 <ST7735_Unselect>
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	2000020c 	.word	0x2000020c
 8009370:	2000020a 	.word	0x2000020a
 8009374:	20000208 	.word	0x20000208
 8009378:	2000020d 	.word	0x2000020d
 800937c:	2000020f 	.word	0x2000020f
 8009380:	2000020e 	.word	0x2000020e
 8009384:	20000210 	.word	0x20000210

08009388 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8009388:	b082      	sub	sp, #8
 800938a:	b590      	push	{r4, r7, lr}
 800938c:	b089      	sub	sp, #36	@ 0x24
 800938e:	af00      	add	r7, sp, #0
 8009390:	637b      	str	r3, [r7, #52]	@ 0x34
 8009392:	4603      	mov	r3, r0
 8009394:	80fb      	strh	r3, [r7, #6]
 8009396:	460b      	mov	r3, r1
 8009398:	80bb      	strh	r3, [r7, #4]
 800939a:	4613      	mov	r3, r2
 800939c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	b2d8      	uxtb	r0, r3
 80093a2:	88bb      	ldrh	r3, [r7, #4]
 80093a4:	b2d9      	uxtb	r1, r3
 80093a6:	88fb      	ldrh	r3, [r7, #6]
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80093ae:	4413      	add	r3, r2
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b2dc      	uxtb	r4, r3
 80093b6:	88bb      	ldrh	r3, [r7, #4]
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80093be:	4413      	add	r3, r2
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	4622      	mov	r2, r4
 80093c8:	f7ff feea 	bl	80091a0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80093cc:	2300      	movs	r3, #0
 80093ce:	61fb      	str	r3, [r7, #28]
 80093d0:	e043      	b.n	800945a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80093d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	3b20      	subs	r3, #32
 80093d8:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80093dc:	fb01 f303 	mul.w	r3, r1, r3
 80093e0:	4619      	mov	r1, r3
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	440b      	add	r3, r1
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	4413      	add	r3, r2
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80093ee:	2300      	movs	r3, #0
 80093f0:	61bb      	str	r3, [r7, #24]
 80093f2:	e029      	b.n	8009448 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	fa02 f303 	lsl.w	r3, r2, r3
 80093fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00e      	beq.n	8009422 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8009404:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	b29b      	uxth	r3, r3
 800940a:	b2db      	uxtb	r3, r3
 800940c:	743b      	strb	r3, [r7, #16]
 800940e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009410:	b2db      	uxtb	r3, r3
 8009412:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8009414:	f107 0310 	add.w	r3, r7, #16
 8009418:	2102      	movs	r1, #2
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff fe5c 	bl	80090d8 <ST7735_WriteData>
 8009420:	e00f      	b.n	8009442 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8009422:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009426:	0a1b      	lsrs	r3, r3, #8
 8009428:	b29b      	uxth	r3, r3
 800942a:	b2db      	uxtb	r3, r3
 800942c:	733b      	strb	r3, [r7, #12]
 800942e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009432:	b2db      	uxtb	r3, r3
 8009434:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8009436:	f107 030c 	add.w	r3, r7, #12
 800943a:	2102      	movs	r1, #2
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff fe4b 	bl	80090d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	3301      	adds	r3, #1
 8009446:	61bb      	str	r3, [r7, #24]
 8009448:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800944c:	461a      	mov	r2, r3
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	4293      	cmp	r3, r2
 8009452:	d3cf      	bcc.n	80093f4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	3301      	adds	r3, #1
 8009458:	61fb      	str	r3, [r7, #28]
 800945a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800945e:	461a      	mov	r2, r3
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	4293      	cmp	r3, r2
 8009464:	d3b5      	bcc.n	80093d2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8009466:	bf00      	nop
 8009468:	bf00      	nop
 800946a:	3724      	adds	r7, #36	@ 0x24
 800946c:	46bd      	mov	sp, r7
 800946e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009472:	b002      	add	sp, #8
 8009474:	4770      	bx	lr
	...

08009478 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8009478:	b082      	sub	sp, #8
 800947a:	b580      	push	{r7, lr}
 800947c:	b086      	sub	sp, #24
 800947e:	af04      	add	r7, sp, #16
 8009480:	603a      	str	r2, [r7, #0]
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	4603      	mov	r3, r0
 8009486:	80fb      	strh	r3, [r7, #6]
 8009488:	460b      	mov	r3, r1
 800948a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800948c:	f7ff fdde 	bl	800904c <ST7735_Select>

    while(*str) {
 8009490:	e033      	b.n	80094fa <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8009492:	88fb      	ldrh	r3, [r7, #6]
 8009494:	7d3a      	ldrb	r2, [r7, #20]
 8009496:	4413      	add	r3, r2
 8009498:	4a1f      	ldr	r2, [pc, #124]	@ (8009518 <ST7735_WriteString+0xa0>)
 800949a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800949e:	4293      	cmp	r3, r2
 80094a0:	db16      	blt.n	80094d0 <ST7735_WriteString+0x58>
            x = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80094a6:	7d7b      	ldrb	r3, [r7, #21]
 80094a8:	461a      	mov	r2, r3
 80094aa:	88bb      	ldrh	r3, [r7, #4]
 80094ac:	4413      	add	r3, r2
 80094ae:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80094b0:	88bb      	ldrh	r3, [r7, #4]
 80094b2:	7d7a      	ldrb	r2, [r7, #21]
 80094b4:	4413      	add	r3, r2
 80094b6:	4a19      	ldr	r2, [pc, #100]	@ (800951c <ST7735_WriteString+0xa4>)
 80094b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80094bc:	4293      	cmp	r3, r2
 80094be:	da21      	bge.n	8009504 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d103      	bne.n	80094d0 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	603b      	str	r3, [r7, #0]
                continue;
 80094ce:	e014      	b.n	80094fa <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	88b9      	ldrh	r1, [r7, #4]
 80094d6:	88f8      	ldrh	r0, [r7, #6]
 80094d8:	8c3b      	ldrh	r3, [r7, #32]
 80094da:	9302      	str	r3, [sp, #8]
 80094dc:	8bbb      	ldrh	r3, [r7, #28]
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f7ff ff4f 	bl	8009388 <ST7735_WriteChar>
        x += font.width;
 80094ea:	7d3b      	ldrb	r3, [r7, #20]
 80094ec:	461a      	mov	r2, r3
 80094ee:	88fb      	ldrh	r3, [r7, #6]
 80094f0:	4413      	add	r3, r2
 80094f2:	80fb      	strh	r3, [r7, #6]
        str++;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	3301      	adds	r3, #1
 80094f8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1c7      	bne.n	8009492 <ST7735_WriteString+0x1a>
 8009502:	e000      	b.n	8009506 <ST7735_WriteString+0x8e>
                break;
 8009504:	bf00      	nop
    }

    ST7735_Unselect();
 8009506:	f7ff fdad 	bl	8009064 <ST7735_Unselect>
}
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009514:	b002      	add	sp, #8
 8009516:	4770      	bx	lr
 8009518:	20000208 	.word	0x20000208
 800951c:	2000020a 	.word	0x2000020a

08009520 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8009520:	b590      	push	{r4, r7, lr}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	4611      	mov	r1, r2
 800952c:	461a      	mov	r2, r3
 800952e:	4623      	mov	r3, r4
 8009530:	80fb      	strh	r3, [r7, #6]
 8009532:	4603      	mov	r3, r0
 8009534:	80bb      	strh	r3, [r7, #4]
 8009536:	460b      	mov	r3, r1
 8009538:	807b      	strh	r3, [r7, #2]
 800953a:	4613      	mov	r3, r2
 800953c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	4a37      	ldr	r2, [pc, #220]	@ (8009620 <ST7735_FillRectangle+0x100>)
 8009542:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009546:	4293      	cmp	r3, r2
 8009548:	da66      	bge.n	8009618 <ST7735_FillRectangle+0xf8>
 800954a:	88bb      	ldrh	r3, [r7, #4]
 800954c:	4a35      	ldr	r2, [pc, #212]	@ (8009624 <ST7735_FillRectangle+0x104>)
 800954e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009552:	4293      	cmp	r3, r2
 8009554:	da60      	bge.n	8009618 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8009556:	88fa      	ldrh	r2, [r7, #6]
 8009558:	887b      	ldrh	r3, [r7, #2]
 800955a:	4413      	add	r3, r2
 800955c:	4a30      	ldr	r2, [pc, #192]	@ (8009620 <ST7735_FillRectangle+0x100>)
 800955e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009562:	4293      	cmp	r3, r2
 8009564:	dd06      	ble.n	8009574 <ST7735_FillRectangle+0x54>
 8009566:	4b2e      	ldr	r3, [pc, #184]	@ (8009620 <ST7735_FillRectangle+0x100>)
 8009568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800956c:	b29a      	uxth	r2, r3
 800956e:	88fb      	ldrh	r3, [r7, #6]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8009574:	88ba      	ldrh	r2, [r7, #4]
 8009576:	883b      	ldrh	r3, [r7, #0]
 8009578:	4413      	add	r3, r2
 800957a:	4a2a      	ldr	r2, [pc, #168]	@ (8009624 <ST7735_FillRectangle+0x104>)
 800957c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009580:	4293      	cmp	r3, r2
 8009582:	dd06      	ble.n	8009592 <ST7735_FillRectangle+0x72>
 8009584:	4b27      	ldr	r3, [pc, #156]	@ (8009624 <ST7735_FillRectangle+0x104>)
 8009586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800958a:	b29a      	uxth	r2, r3
 800958c:	88bb      	ldrh	r3, [r7, #4]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8009592:	f7ff fd5b 	bl	800904c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	b2d8      	uxtb	r0, r3
 800959a:	88bb      	ldrh	r3, [r7, #4]
 800959c:	b2d9      	uxtb	r1, r3
 800959e:	88fb      	ldrh	r3, [r7, #6]
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	887b      	ldrh	r3, [r7, #2]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	4413      	add	r3, r2
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	3b01      	subs	r3, #1
 80095ac:	b2dc      	uxtb	r4, r3
 80095ae:	88bb      	ldrh	r3, [r7, #4]
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	883b      	ldrh	r3, [r7, #0]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	4413      	add	r3, r2
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	4622      	mov	r2, r4
 80095c0:	f7ff fdee 	bl	80091a0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80095c4:	8c3b      	ldrh	r3, [r7, #32]
 80095c6:	0a1b      	lsrs	r3, r3, #8
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	733b      	strb	r3, [r7, #12]
 80095ce:	8c3b      	ldrh	r3, [r7, #32]
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80095d4:	2201      	movs	r2, #1
 80095d6:	2110      	movs	r1, #16
 80095d8:	4813      	ldr	r0, [pc, #76]	@ (8009628 <ST7735_FillRectangle+0x108>)
 80095da:	f003 ff0f 	bl	800d3fc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80095de:	883b      	ldrh	r3, [r7, #0]
 80095e0:	80bb      	strh	r3, [r7, #4]
 80095e2:	e013      	b.n	800960c <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80095e4:	887b      	ldrh	r3, [r7, #2]
 80095e6:	80fb      	strh	r3, [r7, #6]
 80095e8:	e00a      	b.n	8009600 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80095ea:	f107 010c 	add.w	r1, r7, #12
 80095ee:	f04f 33ff 	mov.w	r3, #4294967295
 80095f2:	2202      	movs	r2, #2
 80095f4:	480d      	ldr	r0, [pc, #52]	@ (800962c <ST7735_FillRectangle+0x10c>)
 80095f6:	f004 fda2 	bl	800e13e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	80fb      	strh	r3, [r7, #6]
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1f1      	bne.n	80095ea <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8009606:	88bb      	ldrh	r3, [r7, #4]
 8009608:	3b01      	subs	r3, #1
 800960a:	80bb      	strh	r3, [r7, #4]
 800960c:	88bb      	ldrh	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e8      	bne.n	80095e4 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8009612:	f7ff fd27 	bl	8009064 <ST7735_Unselect>
 8009616:	e000      	b.n	800961a <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8009618:	bf00      	nop
}
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	bd90      	pop	{r4, r7, pc}
 8009620:	20000208 	.word	0x20000208
 8009624:	2000020a 	.word	0x2000020a
 8009628:	40020800 	.word	0x40020800
 800962c:	200002d8 	.word	0x200002d8

08009630 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <case_insensitive_strcmp+0x16>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8009646:	2301      	movs	r3, #1
 8009648:	e056      	b.n	80096f8 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	d10d      	bne.n	800966e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8009652:	2300      	movs	r3, #0
 8009654:	e050      	b.n	80096f8 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800965e:	2300      	movs	r3, #0
 8009660:	e04a      	b.n	80096f8 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3301      	adds	r3, #1
 8009666:	607b      	str	r3, [r7, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	3301      	adds	r3, #1
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	73fb      	strb	r3, [r7, #15]
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	3301      	adds	r3, #1
 8009678:	4a22      	ldr	r2, [pc, #136]	@ (8009704 <case_insensitive_strcmp+0xd4>)
 800967a:	4413      	add	r3, r2
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	2b01      	cmp	r3, #1
 8009684:	d103      	bne.n	800968e <case_insensitive_strcmp+0x5e>
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	f103 0220 	add.w	r2, r3, #32
 800968c:	e000      	b.n	8009690 <case_insensitive_strcmp+0x60>
 800968e:	7bfa      	ldrb	r2, [r7, #15]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	73bb      	strb	r3, [r7, #14]
 8009696:	7bbb      	ldrb	r3, [r7, #14]
 8009698:	3301      	adds	r3, #1
 800969a:	491a      	ldr	r1, [pc, #104]	@ (8009704 <case_insensitive_strcmp+0xd4>)
 800969c:	440b      	add	r3, r1
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d102      	bne.n	80096ae <case_insensitive_strcmp+0x7e>
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	3320      	adds	r3, #32
 80096ac:	e000      	b.n	80096b0 <case_insensitive_strcmp+0x80>
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d0d0      	beq.n	8009656 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	737b      	strb	r3, [r7, #13]
 80096ba:	7b7b      	ldrb	r3, [r7, #13]
 80096bc:	3301      	adds	r3, #1
 80096be:	4a11      	ldr	r2, [pc, #68]	@ (8009704 <case_insensitive_strcmp+0xd4>)
 80096c0:	4413      	add	r3, r2
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	f003 0303 	and.w	r3, r3, #3
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d103      	bne.n	80096d4 <case_insensitive_strcmp+0xa4>
 80096cc:	7b7b      	ldrb	r3, [r7, #13]
 80096ce:	f103 0220 	add.w	r2, r3, #32
 80096d2:	e000      	b.n	80096d6 <case_insensitive_strcmp+0xa6>
 80096d4:	7b7a      	ldrb	r2, [r7, #13]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	733b      	strb	r3, [r7, #12]
 80096dc:	7b3b      	ldrb	r3, [r7, #12]
 80096de:	3301      	adds	r3, #1
 80096e0:	4908      	ldr	r1, [pc, #32]	@ (8009704 <case_insensitive_strcmp+0xd4>)
 80096e2:	440b      	add	r3, r1
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d102      	bne.n	80096f4 <case_insensitive_strcmp+0xc4>
 80096ee:	7b3b      	ldrb	r3, [r7, #12]
 80096f0:	3320      	adds	r3, #32
 80096f2:	e000      	b.n	80096f6 <case_insensitive_strcmp+0xc6>
 80096f4:	7b3b      	ldrb	r3, [r7, #12]
 80096f6:	1ad3      	subs	r3, r2, r3
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	080172e8 	.word	0x080172e8

08009708 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <cJSON_strdup+0x1c>
    {
        return NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	e015      	b.n	8009750 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7fe fd7d 	bl	8008224 <strlen>
 800972a:	4603      	mov	r3, r0
 800972c:	3301      	adds	r3, #1
 800972e:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	4798      	blx	r3
 8009738:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <cJSON_strdup+0x3c>
    {
        return NULL;
 8009740:	2300      	movs	r3, #0
 8009742:	e005      	b.n	8009750 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	68b8      	ldr	r0, [r7, #8]
 800974a:	f00a fca6 	bl	801409a <memcpy>

    return copy;
 800974e:	68bb      	ldr	r3, [r7, #8]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2028      	movs	r0, #40	@ 0x28
 8009766:	4798      	blx	r3
 8009768:	60f8      	str	r0, [r7, #12]
    if (node)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d004      	beq.n	800977a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8009770:	2228      	movs	r2, #40	@ 0x28
 8009772:	2100      	movs	r1, #0
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f00a fbdf 	bl	8013f38 <memset>
    }

    return node;
 800977a:	68fb      	ldr	r3, [r7, #12]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8009790:	e03d      	b.n	800980e <cJSON_Delete+0x8a>
    {
        next = item->next;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d108      	bne.n	80097b6 <cJSON_Delete+0x32>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff ffe7 	bl	8009784 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10c      	bne.n	80097dc <cJSON_Delete+0x58>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d008      	beq.n	80097dc <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80097ca:	4b15      	ldr	r3, [pc, #84]	@ (8009820 <cJSON_Delete+0x9c>)
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	6912      	ldr	r2, [r2, #16]
 80097d2:	4610      	mov	r0, r2
 80097d4:	4798      	blx	r3
            item->valuestring = NULL;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10c      	bne.n	8009802 <cJSON_Delete+0x7e>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d008      	beq.n	8009802 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80097f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <cJSON_Delete+0x9c>)
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6a12      	ldr	r2, [r2, #32]
 80097f8:	4610      	mov	r0, r2
 80097fa:	4798      	blx	r3
            item->string = NULL;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8009802:	4b07      	ldr	r3, [pc, #28]	@ (8009820 <cJSON_Delete+0x9c>)
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
        item = next;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1be      	bne.n	8009792 <cJSON_Delete+0xe>
    }
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000000 	.word	0x20000000

08009824 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8009824:	b480      	push	{r7}
 8009826:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8009828:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800982a:	4618      	mov	r0, r3
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	0000      	movs	r0, r0
	...

08009838 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b098      	sub	sp, #96	@ 0x60
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
    double number = 0;
 8009842:	f04f 0200 	mov.w	r2, #0
 8009846:	f04f 0300 	mov.w	r3, #0
 800984a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8009852:	f7ff ffe7 	bl	8009824 <get_decimal_point>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <parse_number+0x36>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <parse_number+0x3a>
    {
        return false;
 800986e:	2300      	movs	r3, #0
 8009870:	e0a0      	b.n	80099b4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8009872:	2300      	movs	r3, #0
 8009874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009876:	e03d      	b.n	80098f4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	6899      	ldr	r1, [r3, #8]
 8009880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009882:	440b      	add	r3, r1
 8009884:	4413      	add	r3, r2
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b45      	cmp	r3, #69	@ 0x45
 800988a:	dc17      	bgt.n	80098bc <parse_number+0x84>
 800988c:	2b2b      	cmp	r3, #43	@ 0x2b
 800988e:	db40      	blt.n	8009912 <parse_number+0xda>
 8009890:	3b2b      	subs	r3, #43	@ 0x2b
 8009892:	2201      	movs	r2, #1
 8009894:	409a      	lsls	r2, r3
 8009896:	4b4c      	ldr	r3, [pc, #304]	@ (80099c8 <parse_number+0x190>)
 8009898:	4013      	ands	r3, r2
 800989a:	2b00      	cmp	r3, #0
 800989c:	bf14      	ite	ne
 800989e:	2301      	movne	r3, #1
 80098a0:	2300      	moveq	r3, #0
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10b      	bne.n	80098c0 <parse_number+0x88>
 80098a8:	f002 0308 	and.w	r3, r2, #8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	bf14      	ite	ne
 80098b0:	2301      	movne	r3, #1
 80098b2:	2300      	moveq	r3, #0
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d111      	bne.n	80098de <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80098ba:	e02a      	b.n	8009912 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80098bc:	2b65      	cmp	r3, #101	@ 0x65
 80098be:	d128      	bne.n	8009912 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	6899      	ldr	r1, [r3, #8]
 80098c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098ca:	440b      	add	r3, r1
 80098cc:	4413      	add	r3, r2
 80098ce:	7819      	ldrb	r1, [r3, #0]
 80098d0:	f107 0208 	add.w	r2, r7, #8
 80098d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098d6:	4413      	add	r3, r2
 80098d8:	460a      	mov	r2, r1
 80098da:	701a      	strb	r2, [r3, #0]
                break;
 80098dc:	e007      	b.n	80098ee <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80098de:	f107 0208 	add.w	r2, r7, #8
 80098e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098e4:	4413      	add	r3, r2
 80098e6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80098ea:	701a      	strb	r2, [r3, #0]
                break;
 80098ec:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80098ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098f0:	3301      	adds	r3, #1
 80098f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80098f8:	d80d      	bhi.n	8009916 <parse_number+0xde>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <parse_number+0xde>
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	689a      	ldr	r2, [r3, #8]
 8009904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009906:	441a      	add	r2, r3
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	429a      	cmp	r2, r3
 800990e:	d3b3      	bcc.n	8009878 <parse_number+0x40>
        }
    }
loop_end:
 8009910:	e001      	b.n	8009916 <parse_number+0xde>
                goto loop_end;
 8009912:	bf00      	nop
 8009914:	e000      	b.n	8009918 <parse_number+0xe0>
loop_end:
 8009916:	bf00      	nop
    number_c_string[i] = '\0';
 8009918:	f107 0208 	add.w	r2, r7, #8
 800991c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800991e:	4413      	add	r3, r2
 8009920:	2200      	movs	r2, #0
 8009922:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8009924:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8009928:	f107 0308 	add.w	r3, r7, #8
 800992c:	4611      	mov	r1, r2
 800992e:	4618      	mov	r0, r3
 8009930:	f00a f846 	bl	80139c0 <strtod>
 8009934:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8009938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800993a:	f107 0308 	add.w	r3, r7, #8
 800993e:	429a      	cmp	r2, r3
 8009940:	d101      	bne.n	8009946 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8009942:	2300      	movs	r3, #0
 8009944:	e036      	b.n	80099b4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800994c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8009950:	a31b      	add	r3, pc, #108	@ (adr r3, 80099c0 <parse_number+0x188>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800995a:	f7ff f903 	bl	8008b64 <__aeabi_dcmpge>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800996a:	615a      	str	r2, [r3, #20]
 800996c:	e015      	b.n	800999a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800996e:	f04f 0200 	mov.w	r2, #0
 8009972:	4b16      	ldr	r3, [pc, #88]	@ (80099cc <parse_number+0x194>)
 8009974:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009978:	f7ff f8ea 	bl	8008b50 <__aeabi_dcmple>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009988:	615a      	str	r2, [r3, #20]
 800998a:	e006      	b.n	800999a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800998c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009990:	f7ff f912 	bl	8008bb8 <__aeabi_d2iz>
 8009994:	4602      	mov	r2, r0
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2208      	movs	r2, #8
 800999e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80099a6:	f107 0208 	add.w	r2, r7, #8
 80099aa:	1a8a      	subs	r2, r1, r2
 80099ac:	441a      	add	r2, r3
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	609a      	str	r2, [r3, #8]
    return true;
 80099b2:	2301      	movs	r3, #1
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3760      	adds	r7, #96	@ 0x60
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	f3af 8000 	nop.w
 80099c0:	ffc00000 	.word	0xffc00000
 80099c4:	41dfffff 	.word	0x41dfffff
 80099c8:	04007fe5 	.word	0x04007fe5
 80099cc:	c1e00000 	.word	0xc1e00000

080099d0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80099de:	2300      	movs	r3, #0
 80099e0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d003      	beq.n	80099f0 <ensure+0x20>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <ensure+0x24>
    {
        return NULL;
 80099f0:	2300      	movs	r3, #0
 80099f2:	e083      	b.n	8009afc <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <ensure+0x3c>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d301      	bcc.n	8009a0c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e077      	b.n	8009afc <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	da01      	bge.n	8009a16 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e072      	b.n	8009afc <ensure+0x12c>
    }

    needed += p->offset + 1;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	3301      	adds	r3, #1
 8009a20:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d805      	bhi.n	8009a38 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	4413      	add	r3, r2
 8009a36:	e061      	b.n	8009afc <ensure+0x12c>
    }

    if (p->noalloc) {
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <ensure+0x74>
        return NULL;
 8009a40:	2300      	movs	r3, #0
 8009a42:	e05b      	b.n	8009afc <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4a:	d308      	bcc.n	8009a5e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	db03      	blt.n	8009a5a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8009a52:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009a56:	60bb      	str	r3, [r7, #8]
 8009a58:	e004      	b.n	8009a64 <ensure+0x94>
        }
        else
        {
            return NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e04e      	b.n	8009afc <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d018      	beq.n	8009a9e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	6812      	ldr	r2, [r2, #0]
 8009a74:	68b9      	ldr	r1, [r7, #8]
 8009a76:	4610      	mov	r0, r2
 8009a78:	4798      	blx	r3
 8009a7a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d132      	bne.n	8009ae8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	6812      	ldr	r2, [r2, #0]
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	4798      	blx	r3
            p->length = 0;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]

            return NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e02e      	b.n	8009afc <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	68b8      	ldr	r0, [r7, #8]
 8009aa4:	4798      	blx	r3
 8009aa6:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10d      	bne.n	8009aca <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	6812      	ldr	r2, [r2, #0]
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	4798      	blx	r3
            p->length = 0;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]

            return NULL;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	e018      	b.n	8009afc <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6819      	ldr	r1, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f00a fadf 	bl	801409a <memcpy>
        p->hooks.deallocate(p->buffer);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	6812      	ldr	r2, [r2, #0]
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4798      	blx	r3
    }
    p->length = newsize;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	4413      	add	r3, r2
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8009b04:	b590      	push	{r4, r7, lr}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d013      	beq.n	8009b3e <update_offset+0x3a>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00f      	beq.n	8009b3e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	4413      	add	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	689c      	ldr	r4, [r3, #8]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f7fe fb78 	bl	8008224 <strlen>
 8009b34:	4603      	mov	r3, r0
 8009b36:	18e2      	adds	r2, r4, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	609a      	str	r2, [r3, #8]
 8009b3c:	e000      	b.n	8009b40 <update_offset+0x3c>
        return;
 8009b3e:	bf00      	nop
}
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd90      	pop	{r4, r7, pc}
	...

08009b48 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8009b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b4c:	b087      	sub	sp, #28
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	ed87 0b02 	vstr	d0, [r7, #8]
 8009b54:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8009b58:	68b8      	ldr	r0, [r7, #8]
 8009b5a:	68fe      	ldr	r6, [r7, #12]
 8009b5c:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	687e      	ldr	r6, [r7, #4]
 8009b64:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009b68:	f7ff f806 	bl	8008b78 <__aeabi_dcmpgt>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <compare_double+0x34>
 8009b72:	68bc      	ldr	r4, [r7, #8]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8009b7a:	e003      	b.n	8009b84 <compare_double+0x3c>
 8009b7c:	683c      	ldr	r4, [r7, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8009b84:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8009b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b90:	f7fe fbaa 	bl	80082e8 <__aeabi_dsub>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4690      	mov	r8, r2
 8009b9a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd4 <compare_double+0x8c>)
 8009ba4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009ba8:	f7fe fd56 	bl	8008658 <__aeabi_dmul>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	f7fe ffca 	bl	8008b50 <__aeabi_dcmple>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <compare_double+0x7e>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	461c      	mov	r4, r3
 8009bc6:	b2e3      	uxtb	r3, r4
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	371c      	adds	r7, #28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bd2:	bf00      	nop
 8009bd4:	3cb00000 	.word	0x3cb00000

08009bd8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8009bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bda:	b093      	sub	sp, #76	@ 0x4c
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009bec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8009bf8:	f107 0314 	add.w	r3, r7, #20
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	605a      	str	r2, [r3, #4]
 8009c02:	609a      	str	r2, [r3, #8]
 8009c04:	60da      	str	r2, [r3, #12]
 8009c06:	611a      	str	r2, [r3, #16]
 8009c08:	615a      	str	r2, [r3, #20]
 8009c0a:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 8009c0c:	f7ff fe0a 	bl	8009824 <get_decimal_point>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8009c16:	f04f 0200 	mov.w	r2, #0
 8009c1a:	f04f 0300 	mov.w	r3, #0
 8009c1e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <print_number+0x54>
    {
        return false;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	e0b4      	b.n	8009d96 <print_number+0x1be>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8009c2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009c30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009c34:	f7fe ffaa 	bl	8008b8c <__aeabi_dcmpun>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d121      	bne.n	8009c82 <print_number+0xaa>
 8009c3e:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8009c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c42:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8009c46:	2301      	movs	r3, #1
 8009c48:	461e      	mov	r6, r3
 8009c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4e:	4b54      	ldr	r3, [pc, #336]	@ (8009da0 <print_number+0x1c8>)
 8009c50:	4620      	mov	r0, r4
 8009c52:	4629      	mov	r1, r5
 8009c54:	f7fe ff9a 	bl	8008b8c <__aeabi_dcmpun>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10b      	bne.n	8009c76 <print_number+0x9e>
 8009c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c62:	4b4f      	ldr	r3, [pc, #316]	@ (8009da0 <print_number+0x1c8>)
 8009c64:	4620      	mov	r0, r4
 8009c66:	4629      	mov	r1, r5
 8009c68:	f7fe ff72 	bl	8008b50 <__aeabi_dcmple>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <print_number+0x9e>
 8009c72:	2300      	movs	r3, #0
 8009c74:	461e      	mov	r6, r3
 8009c76:	b2f3      	uxtb	r3, r6
 8009c78:	f083 0301 	eor.w	r3, r3, #1
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d007      	beq.n	8009c92 <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 8009c82:	f107 0314 	add.w	r3, r7, #20
 8009c86:	4947      	ldr	r1, [pc, #284]	@ (8009da4 <print_number+0x1cc>)
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f00a f80d 	bl	8013ca8 <siprintf>
 8009c8e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009c90:	e03f      	b.n	8009d12 <print_number+0x13a>
    }
    else if(d == (double)item->valueint)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fc74 	bl	8008584 <__aeabi_i2d>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009ca4:	f7fe ff40 	bl	8008b28 <__aeabi_dcmpeq>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d009      	beq.n	8009cc2 <print_number+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	695a      	ldr	r2, [r3, #20]
 8009cb2:	f107 0314 	add.w	r3, r7, #20
 8009cb6:	493c      	ldr	r1, [pc, #240]	@ (8009da8 <print_number+0x1d0>)
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f009 fff5 	bl	8013ca8 <siprintf>
 8009cbe:	6478      	str	r0, [r7, #68]	@ 0x44
 8009cc0:	e027      	b.n	8009d12 <print_number+0x13a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8009cc2:	f107 0014 	add.w	r0, r7, #20
 8009cc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009cca:	4938      	ldr	r1, [pc, #224]	@ (8009dac <print_number+0x1d4>)
 8009ccc:	f009 ffec 	bl	8013ca8 <siprintf>
 8009cd0:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8009cd2:	f107 0208 	add.w	r2, r7, #8
 8009cd6:	f107 0314 	add.w	r3, r7, #20
 8009cda:	4935      	ldr	r1, [pc, #212]	@ (8009db0 <print_number+0x1d8>)
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f00a f805 	bl	8013cec <siscanf>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d10c      	bne.n	8009d02 <print_number+0x12a>
 8009ce8:	ed97 7b02 	vldr	d7, [r7, #8]
 8009cec:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8009cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8009cf4:	eef0 0a67 	vmov.f32	s1, s15
 8009cf8:	f7ff ff26 	bl	8009b48 <compare_double>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d107      	bne.n	8009d12 <print_number+0x13a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8009d02:	f107 0014 	add.w	r0, r7, #20
 8009d06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009d0a:	492a      	ldr	r1, [pc, #168]	@ (8009db4 <print_number+0x1dc>)
 8009d0c:	f009 ffcc 	bl	8013ca8 <siprintf>
 8009d10:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8009d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	db02      	blt.n	8009d1e <print_number+0x146>
 8009d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d1a:	2b19      	cmp	r3, #25
 8009d1c:	dd01      	ble.n	8009d22 <print_number+0x14a>
    {
        return false;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e039      	b.n	8009d96 <print_number+0x1be>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8009d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d24:	3301      	adds	r3, #1
 8009d26:	4619      	mov	r1, r3
 8009d28:	6838      	ldr	r0, [r7, #0]
 8009d2a:	f7ff fe51 	bl	80099d0 <ensure>
 8009d2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8009d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <print_number+0x162>
    {
        return false;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e02d      	b.n	8009d96 <print_number+0x1be>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d3e:	e01a      	b.n	8009d76 <print_number+0x19e>
    {
        if (number_buffer[i] == decimal_point)
 8009d40:	f107 0214 	add.w	r2, r7, #20
 8009d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d46:	4413      	add	r3, r2
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d105      	bne.n	8009d5e <print_number+0x186>
        {
            output_pointer[i] = '.';
 8009d52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d56:	4413      	add	r3, r2
 8009d58:	222e      	movs	r2, #46	@ 0x2e
 8009d5a:	701a      	strb	r2, [r3, #0]
            continue;
 8009d5c:	e008      	b.n	8009d70 <print_number+0x198>
        }

        output_pointer[i] = number_buffer[i];
 8009d5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d62:	4413      	add	r3, r2
 8009d64:	f107 0114 	add.w	r1, r7, #20
 8009d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d6a:	440a      	add	r2, r1
 8009d6c:	7812      	ldrb	r2, [r2, #0]
 8009d6e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8009d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d72:	3301      	adds	r3, #1
 8009d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d3e0      	bcc.n	8009d40 <print_number+0x168>
    }
    output_pointer[i] = '\0';
 8009d7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d82:	4413      	add	r3, r2
 8009d84:	2200      	movs	r2, #0
 8009d86:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d8e:	441a      	add	r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	609a      	str	r2, [r3, #8]

    return true;
 8009d94:	2301      	movs	r3, #1
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	374c      	adds	r7, #76	@ 0x4c
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	7fefffff 	.word	0x7fefffff
 8009da4:	080166ac 	.word	0x080166ac
 8009da8:	080166b4 	.word	0x080166b4
 8009dac:	080166b8 	.word	0x080166b8
 8009db0:	080166c0 	.word	0x080166c0
 8009db4:	080166c4 	.word	0x080166c4

08009db8 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60bb      	str	r3, [r7, #8]
 8009dcc:	e04c      	b.n	8009e68 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b2f      	cmp	r3, #47	@ 0x2f
 8009dd8:	d90f      	bls.n	8009dfa <parse_hex4+0x42>
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4413      	add	r3, r2
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b39      	cmp	r3, #57	@ 0x39
 8009de4:	d809      	bhi.n	8009dfa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4413      	add	r3, r2
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4413      	add	r3, r2
 8009df4:	3b30      	subs	r3, #48	@ 0x30
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	e02d      	b.n	8009e56 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	4413      	add	r3, r2
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b40      	cmp	r3, #64	@ 0x40
 8009e04:	d90f      	bls.n	8009e26 <parse_hex4+0x6e>
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	2b46      	cmp	r3, #70	@ 0x46
 8009e10:	d809      	bhi.n	8009e26 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	4413      	add	r3, r2
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	4413      	add	r3, r2
 8009e20:	3b37      	subs	r3, #55	@ 0x37
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e017      	b.n	8009e56 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b60      	cmp	r3, #96	@ 0x60
 8009e30:	d90f      	bls.n	8009e52 <parse_hex4+0x9a>
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4413      	add	r3, r2
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b66      	cmp	r3, #102	@ 0x66
 8009e3c:	d809      	bhi.n	8009e52 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	4413      	add	r3, r2
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	461a      	mov	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	3b57      	subs	r3, #87	@ 0x57
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	e001      	b.n	8009e56 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	e00c      	b.n	8009e70 <parse_hex4+0xb8>
        }

        if (i < 3)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d802      	bhi.n	8009e62 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	011b      	lsls	r3, r3, #4
 8009e60:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	3301      	adds	r3, #1
 8009e66:	60bb      	str	r3, [r7, #8]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d9af      	bls.n	8009dce <parse_hex4+0x16>
        }
    }

    return h;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08a      	sub	sp, #40	@ 0x28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	2b05      	cmp	r3, #5
 8009eb4:	f340 80b7 	ble.w	800a026 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	3302      	adds	r3, #2
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7ff ff7b 	bl	8009db8 <parse_hex4>
 8009ec2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8009eca:	d304      	bcc.n	8009ed6 <utf16_literal_to_utf8+0x5a>
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8009ed2:	f0c0 80aa 	bcc.w	800a02a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8009edc:	d337      	bcc.n	8009f4e <utf16_literal_to_utf8+0xd2>
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8009ee4:	d233      	bcs.n	8009f4e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	3306      	adds	r3, #6
 8009eea:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8009ef0:	230c      	movs	r3, #12
 8009ef2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	2b05      	cmp	r3, #5
 8009efe:	f340 8096 	ble.w	800a02e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2b5c      	cmp	r3, #92	@ 0x5c
 8009f08:	f040 8093 	bne.w	800a032 <utf16_literal_to_utf8+0x1b6>
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	2b75      	cmp	r3, #117	@ 0x75
 8009f14:	f040 808d 	bne.w	800a032 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	3302      	adds	r3, #2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff ff4b 	bl	8009db8 <parse_hex4>
 8009f22:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8009f2a:	f0c0 8084 	bcc.w	800a036 <utf16_literal_to_utf8+0x1ba>
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8009f34:	d27f      	bcs.n	800a036 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	029a      	lsls	r2, r3, #10
 8009f3a:	4b43      	ldr	r3, [pc, #268]	@ (800a048 <utf16_literal_to_utf8+0x1cc>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009f44:	4313      	orrs	r3, r2
 8009f46:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8009f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8009f4c:	e004      	b.n	8009f58 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8009f4e:	2306      	movs	r3, #6
 8009f50:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8009f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f5c:	d803      	bhi.n	8009f66 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f64:	e01f      	b.n	8009fa6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8009f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f6c:	d206      	bcs.n	8009f7c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8009f74:	23c0      	movs	r3, #192	@ 0xc0
 8009f76:	f887 3020 	strb.w	r3, [r7, #32]
 8009f7a:	e014      	b.n	8009fa6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f82:	d206      	bcs.n	8009f92 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8009f84:	2303      	movs	r3, #3
 8009f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8009f8a:	23e0      	movs	r3, #224	@ 0xe0
 8009f8c:	f887 3020 	strb.w	r3, [r7, #32]
 8009f90:	e009      	b.n	8009fa6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8009f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f94:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8009f98:	d24f      	bcs.n	800a03a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8009f9a:	2304      	movs	r3, #4
 8009f9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8009fa0:	23f0      	movs	r3, #240	@ 0xf0
 8009fa2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8009fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009faa:	3b01      	subs	r3, #1
 8009fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009fb0:	e015      	b.n	8009fde <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6819      	ldr	r1, [r3, #0]
 8009fc0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009fc4:	440b      	add	r3, r1
 8009fc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009fca:	b2d2      	uxtb	r2, r2
 8009fcc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8009fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd0:	099b      	lsrs	r3, r3, #6
 8009fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8009fd4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009fde:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1e5      	bne.n	8009fb2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8009fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d909      	bls.n	800a002 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8009fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff0:	b2d9      	uxtb	r1, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	b2d2      	uxtb	r2, r2
 8009ffe:	701a      	strb	r2, [r3, #0]
 800a000:	e007      	b.n	800a012 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	b2da      	uxtb	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a01a:	441a      	add	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800a020:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a024:	e00b      	b.n	800a03e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800a026:	bf00      	nop
 800a028:	e008      	b.n	800a03c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800a02a:	bf00      	nop
 800a02c:	e006      	b.n	800a03c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a02e:	bf00      	nop
 800a030:	e004      	b.n	800a03c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a032:	bf00      	nop
 800a034:	e002      	b.n	800a03c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a036:	bf00      	nop
 800a038:	e000      	b.n	800a03c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800a03a:	bf00      	nop

fail:
    return 0;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3728      	adds	r7, #40	@ 0x28
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	000ffc00 	.word	0x000ffc00

0800a04c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b08a      	sub	sp, #40	@ 0x28
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	3301      	adds	r3, #1
 800a060:	4413      	add	r3, r2
 800a062:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	3301      	adds	r3, #1
 800a06e:	4413      	add	r3, r2
 800a070:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800a076:	2300      	movs	r3, #0
 800a078:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	4413      	add	r3, r2
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b22      	cmp	r3, #34	@ 0x22
 800a088:	f040 8103 	bne.w	800a292 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800a094:	e017      	b.n	800a0c6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b5c      	cmp	r3, #92	@ 0x5c
 800a09c:	d110      	bne.n	800a0c0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	f080 80f1 	bcs.w	800a296 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	61bb      	str	r3, [r7, #24]
                input_end++;
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6a3a      	ldr	r2, [r7, #32]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d203      	bcs.n	800a0e0 <parse_string+0x94>
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b22      	cmp	r3, #34	@ 0x22
 800a0de:	d1da      	bne.n	800a096 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6a3a      	ldr	r2, [r7, #32]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	f080 80d3 	bcs.w	800a29a <parse_string+0x24e>
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	2b22      	cmp	r3, #34	@ 0x22
 800a0fa:	f040 80ce 	bne.w	800a29a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	4413      	add	r3, r2
 800a108:	6a3a      	ldr	r2, [r7, #32]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	461a      	mov	r2, r3
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	3201      	adds	r2, #1
 800a11c:	4610      	mov	r0, r2
 800a11e:	4798      	blx	r3
 800a120:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 80ba 	beq.w	800a29e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800a12e:	e094      	b.n	800a25a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800a130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	2b5c      	cmp	r3, #92	@ 0x5c
 800a136:	d008      	beq.n	800a14a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800a138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a13a:	1c53      	adds	r3, r2, #1
 800a13c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	1c59      	adds	r1, r3, #1
 800a142:	60f9      	str	r1, [r7, #12]
 800a144:	7812      	ldrb	r2, [r2, #0]
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	e087      	b.n	800a25a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800a14a:	2302      	movs	r3, #2
 800a14c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800a14e:	6a3a      	ldr	r2, [r7, #32]
 800a150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	f340 80a4 	ble.w	800a2a2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800a15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15c:	3301      	adds	r3, #1
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b75      	cmp	r3, #117	@ 0x75
 800a162:	f300 80a0 	bgt.w	800a2a6 <parse_string+0x25a>
 800a166:	2b5c      	cmp	r3, #92	@ 0x5c
 800a168:	da04      	bge.n	800a174 <parse_string+0x128>
 800a16a:	2b22      	cmp	r3, #34	@ 0x22
 800a16c:	d05c      	beq.n	800a228 <parse_string+0x1dc>
 800a16e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a170:	d05a      	beq.n	800a228 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800a172:	e098      	b.n	800a2a6 <parse_string+0x25a>
            switch (input_pointer[1])
 800a174:	3b5c      	subs	r3, #92	@ 0x5c
 800a176:	2b19      	cmp	r3, #25
 800a178:	f200 8095 	bhi.w	800a2a6 <parse_string+0x25a>
 800a17c:	a201      	add	r2, pc, #4	@ (adr r2, 800a184 <parse_string+0x138>)
 800a17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a182:	bf00      	nop
 800a184:	0800a229 	.word	0x0800a229
 800a188:	0800a2a7 	.word	0x0800a2a7
 800a18c:	0800a2a7 	.word	0x0800a2a7
 800a190:	0800a2a7 	.word	0x0800a2a7
 800a194:	0800a2a7 	.word	0x0800a2a7
 800a198:	0800a2a7 	.word	0x0800a2a7
 800a19c:	0800a1ed 	.word	0x0800a1ed
 800a1a0:	0800a2a7 	.word	0x0800a2a7
 800a1a4:	0800a2a7 	.word	0x0800a2a7
 800a1a8:	0800a2a7 	.word	0x0800a2a7
 800a1ac:	0800a1f9 	.word	0x0800a1f9
 800a1b0:	0800a2a7 	.word	0x0800a2a7
 800a1b4:	0800a2a7 	.word	0x0800a2a7
 800a1b8:	0800a2a7 	.word	0x0800a2a7
 800a1bc:	0800a2a7 	.word	0x0800a2a7
 800a1c0:	0800a2a7 	.word	0x0800a2a7
 800a1c4:	0800a2a7 	.word	0x0800a2a7
 800a1c8:	0800a2a7 	.word	0x0800a2a7
 800a1cc:	0800a205 	.word	0x0800a205
 800a1d0:	0800a2a7 	.word	0x0800a2a7
 800a1d4:	0800a2a7 	.word	0x0800a2a7
 800a1d8:	0800a2a7 	.word	0x0800a2a7
 800a1dc:	0800a211 	.word	0x0800a211
 800a1e0:	0800a2a7 	.word	0x0800a2a7
 800a1e4:	0800a21d 	.word	0x0800a21d
 800a1e8:	0800a239 	.word	0x0800a239
                    *output_pointer++ = '\b';
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	60fa      	str	r2, [r7, #12]
 800a1f2:	2208      	movs	r2, #8
 800a1f4:	701a      	strb	r2, [r3, #0]
                    break;
 800a1f6:	e02c      	b.n	800a252 <parse_string+0x206>
                    *output_pointer++ = '\f';
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	60fa      	str	r2, [r7, #12]
 800a1fe:	220c      	movs	r2, #12
 800a200:	701a      	strb	r2, [r3, #0]
                    break;
 800a202:	e026      	b.n	800a252 <parse_string+0x206>
                    *output_pointer++ = '\n';
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	60fa      	str	r2, [r7, #12]
 800a20a:	220a      	movs	r2, #10
 800a20c:	701a      	strb	r2, [r3, #0]
                    break;
 800a20e:	e020      	b.n	800a252 <parse_string+0x206>
                    *output_pointer++ = '\r';
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	60fa      	str	r2, [r7, #12]
 800a216:	220d      	movs	r2, #13
 800a218:	701a      	strb	r2, [r3, #0]
                    break;
 800a21a:	e01a      	b.n	800a252 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	60fa      	str	r2, [r7, #12]
 800a222:	2209      	movs	r2, #9
 800a224:	701a      	strb	r2, [r3, #0]
                    break;
 800a226:	e014      	b.n	800a252 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	1c59      	adds	r1, r3, #1
 800a230:	60f9      	str	r1, [r7, #12]
 800a232:	7812      	ldrb	r2, [r2, #0]
 800a234:	701a      	strb	r2, [r3, #0]
                    break;
 800a236:	e00c      	b.n	800a252 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800a238:	f107 030c 	add.w	r3, r7, #12
 800a23c:	461a      	mov	r2, r3
 800a23e:	6a39      	ldr	r1, [r7, #32]
 800a240:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a242:	f7ff fe1b 	bl	8009e7c <utf16_literal_to_utf8>
 800a246:	4603      	mov	r3, r0
 800a248:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d02c      	beq.n	800a2aa <parse_string+0x25e>
                    break;
 800a250:	bf00      	nop
            }
            input_pointer += sequence_length;
 800a252:	7dfb      	ldrb	r3, [r7, #23]
 800a254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a256:	4413      	add	r3, r2
 800a258:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800a25a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	429a      	cmp	r2, r3
 800a260:	f4ff af66 	bcc.w	800a130 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2210      	movs	r2, #16
 800a26e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	69fa      	ldr	r2, [r7, #28]
 800a274:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	6a3a      	ldr	r2, [r7, #32]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	461a      	mov	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	609a      	str	r2, [r3, #8]

    return true;
 800a28e:	2301      	movs	r3, #1
 800a290:	e020      	b.n	800a2d4 <parse_string+0x288>
        goto fail;
 800a292:	bf00      	nop
 800a294:	e00a      	b.n	800a2ac <parse_string+0x260>
                    goto fail;
 800a296:	bf00      	nop
 800a298:	e008      	b.n	800a2ac <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800a29a:	bf00      	nop
 800a29c:	e006      	b.n	800a2ac <parse_string+0x260>
            goto fail; /* allocation failure */
 800a29e:	bf00      	nop
 800a2a0:	e004      	b.n	800a2ac <parse_string+0x260>
                goto fail;
 800a2a2:	bf00      	nop
 800a2a4:	e002      	b.n	800a2ac <parse_string+0x260>
                    goto fail;
 800a2a6:	bf00      	nop
 800a2a8:	e000      	b.n	800a2ac <parse_string+0x260>
                        goto fail;
 800a2aa:	bf00      	nop

fail:
    if (output != NULL)
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	69f8      	ldr	r0, [r7, #28]
 800a2b8:	4798      	blx	r3
        output = NULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d006      	beq.n	800a2d2 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	609a      	str	r2, [r3, #8]
    }

    return false;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3728      	adds	r7, #40	@ 0x28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <print_string_ptr+0x28>
    {
        return false;
 800a300:	2300      	movs	r3, #0
 800a302:	e110      	b.n	800a526 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d111      	bne.n	800a32e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800a30a:	2103      	movs	r1, #3
 800a30c:	6838      	ldr	r0, [r7, #0]
 800a30e:	f7ff fb5f 	bl	80099d0 <ensure>
 800a312:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <print_string_ptr+0x42>
        {
            return false;
 800a31a:	2300      	movs	r3, #0
 800a31c:	e103      	b.n	800a526 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	4a83      	ldr	r2, [pc, #524]	@ (800a530 <print_string_ptr+0x254>)
 800a322:	8811      	ldrh	r1, [r2, #0]
 800a324:	7892      	ldrb	r2, [r2, #2]
 800a326:	8019      	strh	r1, [r3, #0]
 800a328:	709a      	strb	r2, [r3, #2]

        return true;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e0fb      	b.n	800a526 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	61fb      	str	r3, [r7, #28]
 800a332:	e024      	b.n	800a37e <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b22      	cmp	r3, #34	@ 0x22
 800a33a:	dc0f      	bgt.n	800a35c <print_string_ptr+0x80>
 800a33c:	2b08      	cmp	r3, #8
 800a33e:	db13      	blt.n	800a368 <print_string_ptr+0x8c>
 800a340:	3b08      	subs	r3, #8
 800a342:	4a7c      	ldr	r2, [pc, #496]	@ (800a534 <print_string_ptr+0x258>)
 800a344:	fa22 f303 	lsr.w	r3, r2, r3
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bf14      	ite	ne
 800a350:	2301      	movne	r3, #1
 800a352:	2300      	moveq	r3, #0
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d102      	bne.n	800a360 <print_string_ptr+0x84>
 800a35a:	e005      	b.n	800a368 <print_string_ptr+0x8c>
 800a35c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a35e:	d103      	bne.n	800a368 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	3301      	adds	r3, #1
 800a364:	617b      	str	r3, [r7, #20]
                break;
 800a366:	e007      	b.n	800a378 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b1f      	cmp	r3, #31
 800a36e:	d802      	bhi.n	800a376 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	3305      	adds	r3, #5
 800a374:	617b      	str	r3, [r7, #20]
                }
                break;
 800a376:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	3301      	adds	r3, #1
 800a37c:	61fb      	str	r3, [r7, #28]
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1d6      	bne.n	800a334 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800a386:	69fa      	ldr	r2, [r7, #28]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	461a      	mov	r2, r3
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	4413      	add	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3303      	adds	r3, #3
 800a398:	4619      	mov	r1, r3
 800a39a:	6838      	ldr	r0, [r7, #0]
 800a39c:	f7ff fb18 	bl	80099d0 <ensure>
 800a3a0:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <print_string_ptr+0xd0>
    {
        return false;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e0bc      	b.n	800a526 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d117      	bne.n	800a3e2 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	2222      	movs	r2, #34	@ 0x22
 800a3b6:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	6879      	ldr	r1, [r7, #4]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f009 fe6a 	bl	801409a <memcpy>
        output[output_length + 1] = '\"';
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	2222      	movs	r2, #34	@ 0x22
 800a3d0:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3302      	adds	r3, #2
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	4413      	add	r3, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	701a      	strb	r2, [r3, #0]

        return true;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e0a1      	b.n	800a526 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	2222      	movs	r2, #34	@ 0x22
 800a3e6:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	61fb      	str	r3, [r7, #28]
 800a3f2:	e086      	b.n	800a502 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	2b1f      	cmp	r3, #31
 800a3fa:	d90c      	bls.n	800a416 <print_string_ptr+0x13a>
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2b22      	cmp	r3, #34	@ 0x22
 800a402:	d008      	beq.n	800a416 <print_string_ptr+0x13a>
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2b5c      	cmp	r3, #92	@ 0x5c
 800a40a:	d004      	beq.n	800a416 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	781a      	ldrb	r2, [r3, #0]
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	e06f      	b.n	800a4f6 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	61ba      	str	r2, [r7, #24]
 800a41c:	225c      	movs	r2, #92	@ 0x5c
 800a41e:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b22      	cmp	r3, #34	@ 0x22
 800a426:	dc3d      	bgt.n	800a4a4 <print_string_ptr+0x1c8>
 800a428:	2b08      	cmp	r3, #8
 800a42a:	db59      	blt.n	800a4e0 <print_string_ptr+0x204>
 800a42c:	3b08      	subs	r3, #8
 800a42e:	2b1a      	cmp	r3, #26
 800a430:	d856      	bhi.n	800a4e0 <print_string_ptr+0x204>
 800a432:	a201      	add	r2, pc, #4	@ (adr r2, 800a438 <print_string_ptr+0x15c>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a4b9 	.word	0x0800a4b9
 800a43c:	0800a4d9 	.word	0x0800a4d9
 800a440:	0800a4c9 	.word	0x0800a4c9
 800a444:	0800a4e1 	.word	0x0800a4e1
 800a448:	0800a4c1 	.word	0x0800a4c1
 800a44c:	0800a4d1 	.word	0x0800a4d1
 800a450:	0800a4e1 	.word	0x0800a4e1
 800a454:	0800a4e1 	.word	0x0800a4e1
 800a458:	0800a4e1 	.word	0x0800a4e1
 800a45c:	0800a4e1 	.word	0x0800a4e1
 800a460:	0800a4e1 	.word	0x0800a4e1
 800a464:	0800a4e1 	.word	0x0800a4e1
 800a468:	0800a4e1 	.word	0x0800a4e1
 800a46c:	0800a4e1 	.word	0x0800a4e1
 800a470:	0800a4e1 	.word	0x0800a4e1
 800a474:	0800a4e1 	.word	0x0800a4e1
 800a478:	0800a4e1 	.word	0x0800a4e1
 800a47c:	0800a4e1 	.word	0x0800a4e1
 800a480:	0800a4e1 	.word	0x0800a4e1
 800a484:	0800a4e1 	.word	0x0800a4e1
 800a488:	0800a4e1 	.word	0x0800a4e1
 800a48c:	0800a4e1 	.word	0x0800a4e1
 800a490:	0800a4e1 	.word	0x0800a4e1
 800a494:	0800a4e1 	.word	0x0800a4e1
 800a498:	0800a4e1 	.word	0x0800a4e1
 800a49c:	0800a4e1 	.word	0x0800a4e1
 800a4a0:	0800a4b1 	.word	0x0800a4b1
 800a4a4:	2b5c      	cmp	r3, #92	@ 0x5c
 800a4a6:	d11b      	bne.n	800a4e0 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	225c      	movs	r2, #92	@ 0x5c
 800a4ac:	701a      	strb	r2, [r3, #0]
                    break;
 800a4ae:	e022      	b.n	800a4f6 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	2222      	movs	r2, #34	@ 0x22
 800a4b4:	701a      	strb	r2, [r3, #0]
                    break;
 800a4b6:	e01e      	b.n	800a4f6 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	2262      	movs	r2, #98	@ 0x62
 800a4bc:	701a      	strb	r2, [r3, #0]
                    break;
 800a4be:	e01a      	b.n	800a4f6 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	2266      	movs	r2, #102	@ 0x66
 800a4c4:	701a      	strb	r2, [r3, #0]
                    break;
 800a4c6:	e016      	b.n	800a4f6 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	226e      	movs	r2, #110	@ 0x6e
 800a4cc:	701a      	strb	r2, [r3, #0]
                    break;
 800a4ce:	e012      	b.n	800a4f6 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	2272      	movs	r2, #114	@ 0x72
 800a4d4:	701a      	strb	r2, [r3, #0]
                    break;
 800a4d6:	e00e      	b.n	800a4f6 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	2274      	movs	r2, #116	@ 0x74
 800a4dc:	701a      	strb	r2, [r3, #0]
                    break;
 800a4de:	e00a      	b.n	800a4f6 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	4914      	ldr	r1, [pc, #80]	@ (800a538 <print_string_ptr+0x25c>)
 800a4e8:	69b8      	ldr	r0, [r7, #24]
 800a4ea:	f009 fbdd 	bl	8013ca8 <siprintf>
                    output_pointer += 4;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	61bb      	str	r3, [r7, #24]
                    break;
 800a4f4:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	61fb      	str	r3, [r7, #28]
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	3301      	adds	r3, #1
 800a500:	61bb      	str	r3, [r7, #24]
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	f47f af74 	bne.w	800a3f4 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	4413      	add	r3, r2
 800a514:	2222      	movs	r2, #34	@ 0x22
 800a516:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3302      	adds	r3, #2
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	2200      	movs	r2, #0
 800a522:	701a      	strb	r2, [r3, #0]

    return true;
 800a524:	2301      	movs	r3, #1
}
 800a526:	4618      	mov	r0, r3
 800a528:	3720      	adds	r7, #32
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	080166cc 	.word	0x080166cc
 800a534:	04000037 	.word	0x04000037
 800a538:	080166d0 	.word	0x080166d0

0800a53c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fec5 	bl	800a2dc <print_string_ptr>
 800a552:	4603      	mov	r3, r0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <buffer_skip_whitespace+0x16>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	e02c      	b.n	800a5d0 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d005      	beq.n	800a588 <buffer_skip_whitespace+0x2c>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	429a      	cmp	r2, r3
 800a586:	d306      	bcc.n	800a596 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	e021      	b.n	800a5d0 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00d      	beq.n	800a5b8 <buffer_skip_whitespace+0x5c>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689a      	ldr	r2, [r3, #8]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d207      	bcs.n	800a5b8 <buffer_skip_whitespace+0x5c>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	d9e9      	bls.n	800a58c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689a      	ldr	r2, [r3, #8]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d104      	bne.n	800a5ce <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	1e5a      	subs	r2, r3, #1
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800a5ce:	687b      	ldr	r3, [r7, #4]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d007      	beq.n	800a5fa <skip_utf8_bom+0x1e>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <skip_utf8_bom+0x1e>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <skip_utf8_bom+0x22>
    {
        return NULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e01c      	b.n	800a638 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d018      	beq.n	800a636 <skip_utf8_bom+0x5a>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	1d1a      	adds	r2, r3, #4
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d211      	bcs.n	800a636 <skip_utf8_bom+0x5a>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	4413      	add	r3, r2
 800a61c:	2203      	movs	r2, #3
 800a61e:	4908      	ldr	r1, [pc, #32]	@ (800a640 <skip_utf8_bom+0x64>)
 800a620:	4618      	mov	r0, r3
 800a622:	f009 fc91 	bl	8013f48 <strncmp>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d104      	bne.n	800a636 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	1cda      	adds	r2, r3, #3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800a636:	687b      	ldr	r3, [r7, #4]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	080166d8 	.word	0x080166d8

0800a644 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800a656:	2300      	movs	r3, #0
 800a658:	e00c      	b.n	800a674 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7fd fde2 	bl	8008224 <strlen>
 800a660:	4603      	mov	r3, r0
 800a662:	3301      	adds	r3, #1
 800a664:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	6979      	ldr	r1, [r7, #20]
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 f805 	bl	800a67c <cJSON_ParseWithLengthOpts>
 800a672:	4603      	mov	r3, r0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b08e      	sub	sp, #56	@ 0x38
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800a68a:	f107 0318 	add.w	r3, r7, #24
 800a68e:	2200      	movs	r2, #0
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	605a      	str	r2, [r3, #4]
 800a694:	609a      	str	r2, [r3, #8]
 800a696:	60da      	str	r2, [r3, #12]
 800a698:	611a      	str	r2, [r3, #16]
 800a69a:	615a      	str	r2, [r3, #20]
 800a69c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800a6a2:	4b41      	ldr	r3, [pc, #260]	@ (800a7a8 <cJSON_ParseWithLengthOpts+0x12c>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800a6a8:	4b3f      	ldr	r3, [pc, #252]	@ (800a7a8 <cJSON_ParseWithLengthOpts+0x12c>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d042      	beq.n	800a73a <cJSON_ParseWithLengthOpts+0xbe>
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d03f      	beq.n	800a73a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800a6c6:	4a39      	ldr	r2, [pc, #228]	@ (800a7ac <cJSON_ParseWithLengthOpts+0x130>)
 800a6c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a6cc:	ca07      	ldmia	r2, {r0, r1, r2}
 800a6ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800a6d2:	4836      	ldr	r0, [pc, #216]	@ (800a7ac <cJSON_ParseWithLengthOpts+0x130>)
 800a6d4:	f7ff f840 	bl	8009758 <cJSON_New_Item>
 800a6d8:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800a6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d02e      	beq.n	800a73e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800a6e0:	f107 0318 	add.w	r3, r7, #24
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7ff ff79 	bl	800a5dc <skip_utf8_bom>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff ff35 	bl	800a55c <buffer_skip_whitespace>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a6f8:	f000 f902 	bl	800a900 <parse_value>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d01f      	beq.n	800a742 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00e      	beq.n	800a726 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800a708:	f107 0318 	add.w	r3, r7, #24
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7ff ff25 	bl	800a55c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800a712:	6a3a      	ldr	r2, [r7, #32]
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	429a      	cmp	r2, r3
 800a718:	d215      	bcs.n	800a746 <cJSON_ParseWithLengthOpts+0xca>
 800a71a:	69ba      	ldr	r2, [r7, #24]
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	4413      	add	r3, r2
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10f      	bne.n	800a746 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d004      	beq.n	800a736 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800a72c:	69ba      	ldr	r2, [r7, #24]
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	441a      	add	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	601a      	str	r2, [r3, #0]
    }

    return item;
 800a736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a738:	e031      	b.n	800a79e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800a73a:	bf00      	nop
 800a73c:	e004      	b.n	800a748 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800a73e:	bf00      	nop
 800a740:	e002      	b.n	800a748 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800a742:	bf00      	nop
 800a744:	e000      	b.n	800a748 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800a746:	bf00      	nop

fail:
    if (item != NULL)
 800a748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d002      	beq.n	800a754 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800a74e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a750:	f7ff f818 	bl	8009784 <cJSON_Delete>
    }

    if (value != NULL)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d020      	beq.n	800a79c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800a762:	6a3a      	ldr	r2, [r7, #32]
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	429a      	cmp	r2, r3
 800a768:	d202      	bcs.n	800a770 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	e005      	b.n	800a77c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d002      	beq.n	800a77c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	3b01      	subs	r3, #1
 800a77a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d004      	beq.n	800a78c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	441a      	add	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800a78c:	4b06      	ldr	r3, [pc, #24]	@ (800a7a8 <cJSON_ParseWithLengthOpts+0x12c>)
 800a78e:	461a      	mov	r2, r3
 800a790:	f107 0310 	add.w	r3, r7, #16
 800a794:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a798:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3738      	adds	r7, #56	@ 0x38
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000214 	.word	0x20000214
 800a7ac:	20000000 	.word	0x20000000

0800a7b0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7ff ff41 	bl	800a644 <cJSON_ParseWithOpts>
 800a7c2:	4603      	mov	r3, r0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08e      	sub	sp, #56	@ 0x38
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800a7dc:	f107 0310 	add.w	r3, r7, #16
 800a7e0:	2224      	movs	r2, #36	@ 0x24
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f009 fba7 	bl	8013f38 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a3b      	ldr	r2, [pc, #236]	@ (800a8dc <print+0x110>)
 800a7f0:	6812      	ldr	r2, [r2, #0]
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	4798      	blx	r3
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800a7fa:	4b38      	ldr	r3, [pc, #224]	@ (800a8dc <print+0x110>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a80a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a80c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d042      	beq.n	800a89c <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800a816:	f107 0310 	add.w	r3, r7, #16
 800a81a:	4619      	mov	r1, r3
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f95b 	bl	800aad8 <print_value>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d03b      	beq.n	800a8a0 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 800a828:	f107 0310 	add.w	r3, r7, #16
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff f969 	bl	8009b04 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00d      	beq.n	800a856 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	6938      	ldr	r0, [r7, #16]
 800a840:	69ba      	ldr	r2, [r7, #24]
 800a842:	3201      	adds	r2, #1
 800a844:	4611      	mov	r1, r2
 800a846:	4798      	blx	r3
 800a848:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800a84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d029      	beq.n	800a8a4 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800a850:	2300      	movs	r3, #0
 800a852:	613b      	str	r3, [r7, #16]
 800a854:	e020      	b.n	800a898 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	3201      	adds	r2, #1
 800a85e:	4610      	mov	r0, r2
 800a860:	4798      	blx	r3
 800a862:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800a864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a866:	2b00      	cmp	r3, #0
 800a868:	d01e      	beq.n	800a8a8 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800a86a:	6939      	ldr	r1, [r7, #16]
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	4293      	cmp	r3, r2
 800a874:	bf28      	it	cs
 800a876:	4613      	movcs	r3, r2
 800a878:	461a      	mov	r2, r3
 800a87a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a87c:	f009 fc0d 	bl	801409a <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a884:	4413      	add	r3, r2
 800a886:	2200      	movs	r2, #0
 800a888:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	4610      	mov	r0, r2
 800a892:	4798      	blx	r3
        buffer->buffer = NULL;
 800a894:	2300      	movs	r3, #0
 800a896:	613b      	str	r3, [r7, #16]
    }

    return printed;
 800a898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89a:	e01a      	b.n	800a8d2 <print+0x106>
        goto fail;
 800a89c:	bf00      	nop
 800a89e:	e004      	b.n	800a8aa <print+0xde>
        goto fail;
 800a8a0:	bf00      	nop
 800a8a2:	e002      	b.n	800a8aa <print+0xde>
            goto fail;
 800a8a4:	bf00      	nop
 800a8a6:	e000      	b.n	800a8aa <print+0xde>
            goto fail;
 800a8a8:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d006      	beq.n	800a8be <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	4798      	blx	r3
        buffer->buffer = NULL;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800a8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <print+0x104>
    {
        hooks->deallocate(printed);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a8ca:	4798      	blx	r3
        printed = NULL;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3738      	adds	r7, #56	@ 0x38
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	08016984 	.word	0x08016984

0800a8e0 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800a8e8:	4a04      	ldr	r2, [pc, #16]	@ (800a8fc <cJSON_PrintUnformatted+0x1c>)
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ff6d 	bl	800a7cc <print>
 800a8f2:	4603      	mov	r3, r0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000000 	.word	0x20000000

0800a900 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d003      	beq.n	800a918 <parse_value+0x18>
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <parse_value+0x1c>
    {
        return false; /* no input */
 800a918:	2300      	movs	r3, #0
 800a91a:	e0d2      	b.n	800aac2 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d01d      	beq.n	800a95e <parse_value+0x5e>
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	1d1a      	adds	r2, r3, #4
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d816      	bhi.n	800a95e <parse_value+0x5e>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	4413      	add	r3, r2
 800a93a:	2204      	movs	r2, #4
 800a93c:	4963      	ldr	r1, [pc, #396]	@ (800aacc <parse_value+0x1cc>)
 800a93e:	4618      	mov	r0, r3
 800a940:	f009 fb02 	bl	8013f48 <strncmp>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d109      	bne.n	800a95e <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2204      	movs	r2, #4
 800a94e:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	1d1a      	adds	r2, r3, #4
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	609a      	str	r2, [r3, #8]
        return true;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e0b1      	b.n	800aac2 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01d      	beq.n	800a9a0 <parse_value+0xa0>
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	1d5a      	adds	r2, r3, #5
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d816      	bhi.n	800a9a0 <parse_value+0xa0>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	4413      	add	r3, r2
 800a97c:	2205      	movs	r2, #5
 800a97e:	4954      	ldr	r1, [pc, #336]	@ (800aad0 <parse_value+0x1d0>)
 800a980:	4618      	mov	r0, r3
 800a982:	f009 fae1 	bl	8013f48 <strncmp>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d109      	bne.n	800a9a0 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	1d5a      	adds	r2, r3, #5
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	609a      	str	r2, [r3, #8]
        return true;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e090      	b.n	800aac2 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d020      	beq.n	800a9e8 <parse_value+0xe8>
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	1d1a      	adds	r2, r3, #4
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d819      	bhi.n	800a9e8 <parse_value+0xe8>
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	4413      	add	r3, r2
 800a9be:	2204      	movs	r2, #4
 800a9c0:	4944      	ldr	r1, [pc, #272]	@ (800aad4 <parse_value+0x1d4>)
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f009 fac0 	bl	8013f48 <strncmp>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10c      	bne.n	800a9e8 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	1d1a      	adds	r2, r3, #4
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	609a      	str	r2, [r3, #8]
        return true;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e06c      	b.n	800aac2 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d013      	beq.n	800aa16 <parse_value+0x116>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	689a      	ldr	r2, [r3, #8]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d20d      	bcs.n	800aa16 <parse_value+0x116>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	4413      	add	r3, r2
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b22      	cmp	r3, #34	@ 0x22
 800aa08:	d105      	bne.n	800aa16 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff fb1d 	bl	800a04c <parse_string>
 800aa12:	4603      	mov	r3, r0
 800aa14:	e055      	b.n	800aac2 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d023      	beq.n	800aa64 <parse_value+0x164>
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d21d      	bcs.n	800aa64 <parse_value+0x164>
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	4413      	add	r3, r2
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa36:	d00f      	beq.n	800aa58 <parse_value+0x158>
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	4413      	add	r3, r2
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2b2f      	cmp	r3, #47	@ 0x2f
 800aa46:	d90d      	bls.n	800aa64 <parse_value+0x164>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	4413      	add	r3, r2
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	2b39      	cmp	r3, #57	@ 0x39
 800aa56:	d805      	bhi.n	800aa64 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7fe feec 	bl	8009838 <parse_number>
 800aa60:	4603      	mov	r3, r0
 800aa62:	e02e      	b.n	800aac2 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d013      	beq.n	800aa92 <parse_value+0x192>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	689a      	ldr	r2, [r3, #8]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d20d      	bcs.n	800aa92 <parse_value+0x192>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	4413      	add	r3, r2
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	2b5b      	cmp	r3, #91	@ 0x5b
 800aa84:	d105      	bne.n	800aa92 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f909 	bl	800aca0 <parse_array>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	e017      	b.n	800aac2 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d013      	beq.n	800aac0 <parse_value+0x1c0>
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	689a      	ldr	r2, [r3, #8]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d20d      	bcs.n	800aac0 <parse_value+0x1c0>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	4413      	add	r3, r2
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b7b      	cmp	r3, #123	@ 0x7b
 800aab2:	d105      	bne.n	800aac0 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fa3c 	bl	800af34 <parse_object>
 800aabc:	4603      	mov	r3, r0
 800aabe:	e000      	b.n	800aac2 <parse_value+0x1c2>
    }

    return false;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	080166ac 	.word	0x080166ac
 800aad0:	080166dc 	.word	0x080166dc
 800aad4:	080166e4 	.word	0x080166e4

0800aad8 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <print_value+0x1a>
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <print_value+0x1e>
    {
        return false;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e0c9      	b.n	800ac8a <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b80      	cmp	r3, #128	@ 0x80
 800aafe:	f000 808e 	beq.w	800ac1e <print_value+0x146>
 800ab02:	2b80      	cmp	r3, #128	@ 0x80
 800ab04:	f300 80c0 	bgt.w	800ac88 <print_value+0x1b0>
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	dc49      	bgt.n	800aba0 <print_value+0xc8>
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f340 80bb 	ble.w	800ac88 <print_value+0x1b0>
 800ab12:	3b01      	subs	r3, #1
 800ab14:	2b1f      	cmp	r3, #31
 800ab16:	f200 80b7 	bhi.w	800ac88 <print_value+0x1b0>
 800ab1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab20 <print_value+0x48>)
 800ab1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab20:	0800abcb 	.word	0x0800abcb
 800ab24:	0800abef 	.word	0x0800abef
 800ab28:	0800ac89 	.word	0x0800ac89
 800ab2c:	0800aba7 	.word	0x0800aba7
 800ab30:	0800ac89 	.word	0x0800ac89
 800ab34:	0800ac89 	.word	0x0800ac89
 800ab38:	0800ac89 	.word	0x0800ac89
 800ab3c:	0800ac13 	.word	0x0800ac13
 800ab40:	0800ac89 	.word	0x0800ac89
 800ab44:	0800ac89 	.word	0x0800ac89
 800ab48:	0800ac89 	.word	0x0800ac89
 800ab4c:	0800ac89 	.word	0x0800ac89
 800ab50:	0800ac89 	.word	0x0800ac89
 800ab54:	0800ac89 	.word	0x0800ac89
 800ab58:	0800ac89 	.word	0x0800ac89
 800ab5c:	0800ac65 	.word	0x0800ac65
 800ab60:	0800ac89 	.word	0x0800ac89
 800ab64:	0800ac89 	.word	0x0800ac89
 800ab68:	0800ac89 	.word	0x0800ac89
 800ab6c:	0800ac89 	.word	0x0800ac89
 800ab70:	0800ac89 	.word	0x0800ac89
 800ab74:	0800ac89 	.word	0x0800ac89
 800ab78:	0800ac89 	.word	0x0800ac89
 800ab7c:	0800ac89 	.word	0x0800ac89
 800ab80:	0800ac89 	.word	0x0800ac89
 800ab84:	0800ac89 	.word	0x0800ac89
 800ab88:	0800ac89 	.word	0x0800ac89
 800ab8c:	0800ac89 	.word	0x0800ac89
 800ab90:	0800ac89 	.word	0x0800ac89
 800ab94:	0800ac89 	.word	0x0800ac89
 800ab98:	0800ac89 	.word	0x0800ac89
 800ab9c:	0800ac71 	.word	0x0800ac71
 800aba0:	2b40      	cmp	r3, #64	@ 0x40
 800aba2:	d06b      	beq.n	800ac7c <print_value+0x1a4>
 800aba4:	e070      	b.n	800ac88 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800aba6:	2105      	movs	r1, #5
 800aba8:	6838      	ldr	r0, [r7, #0]
 800abaa:	f7fe ff11 	bl	80099d0 <ensure>
 800abae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <print_value+0xe2>
            {
                return false;
 800abb6:	2300      	movs	r3, #0
 800abb8:	e067      	b.n	800ac8a <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	4a35      	ldr	r2, [pc, #212]	@ (800ac94 <print_value+0x1bc>)
 800abbe:	6810      	ldr	r0, [r2, #0]
 800abc0:	6018      	str	r0, [r3, #0]
 800abc2:	7912      	ldrb	r2, [r2, #4]
 800abc4:	711a      	strb	r2, [r3, #4]
            return true;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e05f      	b.n	800ac8a <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800abca:	2106      	movs	r1, #6
 800abcc:	6838      	ldr	r0, [r7, #0]
 800abce:	f7fe feff 	bl	80099d0 <ensure>
 800abd2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d101      	bne.n	800abde <print_value+0x106>
            {
                return false;
 800abda:	2300      	movs	r3, #0
 800abdc:	e055      	b.n	800ac8a <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	4a2d      	ldr	r2, [pc, #180]	@ (800ac98 <print_value+0x1c0>)
 800abe2:	6810      	ldr	r0, [r2, #0]
 800abe4:	6018      	str	r0, [r3, #0]
 800abe6:	8892      	ldrh	r2, [r2, #4]
 800abe8:	809a      	strh	r2, [r3, #4]
            return true;
 800abea:	2301      	movs	r3, #1
 800abec:	e04d      	b.n	800ac8a <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800abee:	2105      	movs	r1, #5
 800abf0:	6838      	ldr	r0, [r7, #0]
 800abf2:	f7fe feed 	bl	80099d0 <ensure>
 800abf6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <print_value+0x12a>
            {
                return false;
 800abfe:	2300      	movs	r3, #0
 800ac00:	e043      	b.n	800ac8a <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4a25      	ldr	r2, [pc, #148]	@ (800ac9c <print_value+0x1c4>)
 800ac06:	6810      	ldr	r0, [r2, #0]
 800ac08:	6018      	str	r0, [r3, #0]
 800ac0a:	7912      	ldrb	r2, [r2, #4]
 800ac0c:	711a      	strb	r2, [r3, #4]
            return true;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e03b      	b.n	800ac8a <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7fe ffdf 	bl	8009bd8 <print_number>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	e035      	b.n	800ac8a <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d101      	bne.n	800ac2e <print_value+0x156>
            {
                return false;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e02d      	b.n	800ac8a <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fd faf6 	bl	8008224 <strlen>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800ac3e:	68b9      	ldr	r1, [r7, #8]
 800ac40:	6838      	ldr	r0, [r7, #0]
 800ac42:	f7fe fec5 	bl	80099d0 <ensure>
 800ac46:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <print_value+0x17a>
            {
                return false;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e01b      	b.n	800ac8a <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f009 fa1d 	bl	801409a <memcpy>
            return true;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e012      	b.n	800ac8a <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff fc68 	bl	800a53c <print_string>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	e00c      	b.n	800ac8a <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f8d8 	bl	800ae28 <print_array>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	e006      	b.n	800ac8a <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fa64 	bl	800b14c <print_object>
 800ac84:	4603      	mov	r3, r0
 800ac86:	e000      	b.n	800ac8a <print_value+0x1b2>

        default:
            return false;
 800ac88:	2300      	movs	r3, #0
    }
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	080166ac 	.word	0x080166ac
 800ac98:	080166dc 	.word	0x080166dc
 800ac9c:	080166e4 	.word	0x080166e4

0800aca0 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800acaa:	2300      	movs	r3, #0
 800acac:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800acba:	d301      	bcc.n	800acc0 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800acbc:	2300      	movs	r3, #0
 800acbe:	e0af      	b.n	800ae20 <parse_array+0x180>
    }
    input_buffer->depth++;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	1c5a      	adds	r2, r3, #1
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	4413      	add	r3, r2
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2b5b      	cmp	r3, #91	@ 0x5b
 800acd8:	f040 8094 	bne.w	800ae04 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800ace6:	6838      	ldr	r0, [r7, #0]
 800ace8:	f7ff fc38 	bl	800a55c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00d      	beq.n	800ad0e <parse_array+0x6e>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	689a      	ldr	r2, [r3, #8]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d207      	bcs.n	800ad0e <parse_array+0x6e>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	4413      	add	r3, r2
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	2b5d      	cmp	r3, #93	@ 0x5d
 800ad0c:	d061      	beq.n	800add2 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d005      	beq.n	800ad20 <parse_array+0x80>
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	689a      	ldr	r2, [r3, #8]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d305      	bcc.n	800ad2c <parse_array+0x8c>
    {
        input_buffer->offset--;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	1e5a      	subs	r2, r3, #1
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	609a      	str	r2, [r3, #8]
        goto fail;
 800ad2a:	e072      	b.n	800ae12 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	1e5a      	subs	r2, r3, #1
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	3310      	adds	r3, #16
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fd0c 	bl	8009758 <cJSON_New_Item>
 800ad40:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d05f      	beq.n	800ae08 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d104      	bne.n	800ad58 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	613b      	str	r3, [r7, #16]
 800ad56:	e007      	b.n	800ad68 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	1c5a      	adds	r2, r3, #1
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800ad72:	6838      	ldr	r0, [r7, #0]
 800ad74:	f7ff fbf2 	bl	800a55c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6938      	ldr	r0, [r7, #16]
 800ad7c:	f7ff fdc0 	bl	800a900 <parse_value>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d042      	beq.n	800ae0c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800ad86:	6838      	ldr	r0, [r7, #0]
 800ad88:	f7ff fbe8 	bl	800a55c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00d      	beq.n	800adae <parse_array+0x10e>
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	689a      	ldr	r2, [r3, #8]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d207      	bcs.n	800adae <parse_array+0x10e>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	4413      	add	r3, r2
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b2c      	cmp	r3, #44	@ 0x2c
 800adac:	d0c3      	beq.n	800ad36 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d02d      	beq.n	800ae10 <parse_array+0x170>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d227      	bcs.n	800ae10 <parse_array+0x170>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	4413      	add	r3, r2
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2b5d      	cmp	r3, #93	@ 0x5d
 800adce:	d11f      	bne.n	800ae10 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800add0:	e000      	b.n	800add4 <parse_array+0x134>
        goto success;
 800add2:	bf00      	nop
    input_buffer->depth--;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	1e5a      	subs	r2, r3, #1
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <parse_array+0x14a>
        head->prev = current_item;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2220      	movs	r2, #32
 800adee:	60da      	str	r2, [r3, #12]
    item->child = head;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	1c5a      	adds	r2, r3, #1
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	609a      	str	r2, [r3, #8]

    return true;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e00d      	b.n	800ae20 <parse_array+0x180>
        goto fail;
 800ae04:	bf00      	nop
 800ae06:	e004      	b.n	800ae12 <parse_array+0x172>
            goto fail; /* allocation failure */
 800ae08:	bf00      	nop
 800ae0a:	e002      	b.n	800ae12 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800ae0c:	bf00      	nop
 800ae0e:	e000      	b.n	800ae12 <parse_array+0x172>
        goto fail; /* expected end of array */
 800ae10:	bf00      	nop

fail:
    if (head != NULL)
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800ae18:	6978      	ldr	r0, [r7, #20]
 800ae1a:	f7fe fcb3 	bl	8009784 <cJSON_Delete>
    }

    return false;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <print_array+0x22>
    {
        return false;
 800ae46:	2300      	movs	r3, #0
 800ae48:	e070      	b.n	800af2c <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	6838      	ldr	r0, [r7, #0]
 800ae4e:	f7fe fdbf 	bl	80099d0 <ensure>
 800ae52:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <print_array+0x36>
    {
        return false;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e066      	b.n	800af2c <print_array+0x104>
    }

    *output_pointer = '[';
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	225b      	movs	r2, #91	@ 0x5b
 800ae62:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	1c5a      	adds	r2, r3, #1
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800ae78:	e03d      	b.n	800aef6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6938      	ldr	r0, [r7, #16]
 800ae7e:	f7ff fe2b 	bl	800aad8 <print_value>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <print_array+0x64>
        {
            return false;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e04f      	b.n	800af2c <print_array+0x104>
        }
        update_offset(output_buffer);
 800ae8c:	6838      	ldr	r0, [r7, #0]
 800ae8e:	f7fe fe39 	bl	8009b04 <update_offset>
        if (current_element->next)
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d02a      	beq.n	800aef0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <print_array+0x7e>
 800aea2:	2302      	movs	r3, #2
 800aea4:	e000      	b.n	800aea8 <print_array+0x80>
 800aea6:	2301      	movs	r3, #1
 800aea8:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3301      	adds	r3, #1
 800aeae:	4619      	mov	r1, r3
 800aeb0:	6838      	ldr	r0, [r7, #0]
 800aeb2:	f7fe fd8d 	bl	80099d0 <ensure>
 800aeb6:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <print_array+0x9a>
            {
                return false;
 800aebe:	2300      	movs	r3, #0
 800aec0:	e034      	b.n	800af2c <print_array+0x104>
            }
            *output_pointer++ = ',';
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	1c5a      	adds	r2, r3, #1
 800aec6:	617a      	str	r2, [r7, #20]
 800aec8:	222c      	movs	r2, #44	@ 0x2c
 800aeca:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d004      	beq.n	800aede <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	1c5a      	adds	r2, r3, #1
 800aed8:	617a      	str	r2, [r7, #20]
 800aeda:	2220      	movs	r2, #32
 800aedc:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2200      	movs	r2, #0
 800aee2:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	441a      	add	r2, r3
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1be      	bne.n	800ae7a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800aefc:	2102      	movs	r1, #2
 800aefe:	6838      	ldr	r0, [r7, #0]
 800af00:	f7fe fd66 	bl	80099d0 <ensure>
 800af04:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <print_array+0xe8>
    {
        return false;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e00d      	b.n	800af2c <print_array+0x104>
    }
    *output_pointer++ = ']';
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	617a      	str	r2, [r7, #20]
 800af16:	225d      	movs	r2, #93	@ 0x5d
 800af18:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2200      	movs	r2, #0
 800af1e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	1e5a      	subs	r2, r3, #1
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	60da      	str	r2, [r3, #12]

    return true;
 800af2a:	2301      	movs	r3, #1
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800af42:	2300      	movs	r3, #0
 800af44:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af4e:	d301      	bcc.n	800af54 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800af50:	2300      	movs	r3, #0
 800af52:	e0f7      	b.n	800b144 <parse_object+0x210>
    }
    input_buffer->depth++;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	f000 80db 	beq.w	800b11c <parse_object+0x1e8>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	689a      	ldr	r2, [r3, #8]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	429a      	cmp	r2, r3
 800af70:	f080 80d4 	bcs.w	800b11c <parse_object+0x1e8>
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	4413      	add	r3, r2
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b7b      	cmp	r3, #123	@ 0x7b
 800af82:	f040 80cb 	bne.w	800b11c <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800af90:	6838      	ldr	r0, [r7, #0]
 800af92:	f7ff fae3 	bl	800a55c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00e      	beq.n	800afba <parse_object+0x86>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d208      	bcs.n	800afba <parse_object+0x86>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	4413      	add	r3, r2
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b7d      	cmp	r3, #125	@ 0x7d
 800afb6:	f000 8098 	beq.w	800b0ea <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d005      	beq.n	800afcc <parse_object+0x98>
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	689a      	ldr	r2, [r3, #8]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d305      	bcc.n	800afd8 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	1e5a      	subs	r2, r3, #1
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	609a      	str	r2, [r3, #8]
        goto fail;
 800afd6:	e0ae      	b.n	800b136 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	1e5a      	subs	r2, r3, #1
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	3310      	adds	r3, #16
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fe fbb6 	bl	8009758 <cJSON_New_Item>
 800afec:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 8095 	beq.w	800b120 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d104      	bne.n	800b006 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	613b      	str	r3, [r7, #16]
 800b004:	e007      	b.n	800b016 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 8083 	beq.w	800b124 <parse_object+0x1f0>
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d27b      	bcs.n	800b124 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b036:	6838      	ldr	r0, [r7, #0]
 800b038:	f7ff fa90 	bl	800a55c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6938      	ldr	r0, [r7, #16]
 800b040:	f7ff f804 	bl	800a04c <parse_string>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d06e      	beq.n	800b128 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800b04a:	6838      	ldr	r0, [r7, #0]
 800b04c:	f7ff fa86 	bl	800a55c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	2200      	movs	r2, #0
 800b05c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d063      	beq.n	800b12c <parse_object+0x1f8>
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	689a      	ldr	r2, [r3, #8]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d25d      	bcs.n	800b12c <parse_object+0x1f8>
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	4413      	add	r3, r2
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b07e:	d155      	bne.n	800b12c <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b08a:	6838      	ldr	r0, [r7, #0]
 800b08c:	f7ff fa66 	bl	800a55c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6938      	ldr	r0, [r7, #16]
 800b094:	f7ff fc34 	bl	800a900 <parse_value>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d048      	beq.n	800b130 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800b09e:	6838      	ldr	r0, [r7, #0]
 800b0a0:	f7ff fa5c 	bl	800a55c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00d      	beq.n	800b0c6 <parse_object+0x192>
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	689a      	ldr	r2, [r3, #8]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d207      	bcs.n	800b0c6 <parse_object+0x192>
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	4413      	add	r3, r2
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	2b2c      	cmp	r3, #44	@ 0x2c
 800b0c4:	d08d      	beq.n	800afe2 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d033      	beq.n	800b134 <parse_object+0x200>
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	689a      	ldr	r2, [r3, #8]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d22d      	bcs.n	800b134 <parse_object+0x200>
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	2b7d      	cmp	r3, #125	@ 0x7d
 800b0e6:	d125      	bne.n	800b134 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 800b0e8:	e000      	b.n	800b0ec <parse_object+0x1b8>
        goto success; /* empty object */
 800b0ea:	bf00      	nop
    input_buffer->depth--;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	1e5a      	subs	r2, r3, #1
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <parse_object+0x1ce>
        head->prev = current_item;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2240      	movs	r2, #64	@ 0x40
 800b106:	60da      	str	r2, [r3, #12]
    item->child = head;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	609a      	str	r2, [r3, #8]
    return true;
 800b118:	2301      	movs	r3, #1
 800b11a:	e013      	b.n	800b144 <parse_object+0x210>
        goto fail; /* not an object */
 800b11c:	bf00      	nop
 800b11e:	e00a      	b.n	800b136 <parse_object+0x202>
            goto fail; /* allocation failure */
 800b120:	bf00      	nop
 800b122:	e008      	b.n	800b136 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800b124:	bf00      	nop
 800b126:	e006      	b.n	800b136 <parse_object+0x202>
            goto fail; /* failed to parse name */
 800b128:	bf00      	nop
 800b12a:	e004      	b.n	800b136 <parse_object+0x202>
            goto fail; /* invalid object */
 800b12c:	bf00      	nop
 800b12e:	e002      	b.n	800b136 <parse_object+0x202>
            goto fail; /* failed to parse value */
 800b130:	bf00      	nop
 800b132:	e000      	b.n	800b136 <parse_object+0x202>
        goto fail; /* expected end of object */
 800b134:	bf00      	nop

fail:
    if (head != NULL)
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800b13c:	6978      	ldr	r0, [r7, #20]
 800b13e:	f7fe fb21 	bl	8009784 <cJSON_Delete>
    }

    return false;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800b156:	2300      	movs	r3, #0
 800b158:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <print_object+0x22>
    {
        return false;
 800b16a:	2300      	movs	r3, #0
 800b16c:	e108      	b.n	800b380 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <print_object+0x2e>
 800b176:	2302      	movs	r3, #2
 800b178:	e000      	b.n	800b17c <print_object+0x30>
 800b17a:	2301      	movs	r3, #1
 800b17c:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3301      	adds	r3, #1
 800b182:	4619      	mov	r1, r3
 800b184:	6838      	ldr	r0, [r7, #0]
 800b186:	f7fe fc23 	bl	80099d0 <ensure>
 800b18a:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <print_object+0x4a>
    {
        return false;
 800b192:	2300      	movs	r3, #0
 800b194:	e0f4      	b.n	800b380 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	61fa      	str	r2, [r7, #28]
 800b19c:	227b      	movs	r2, #123	@ 0x7b
 800b19e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d004      	beq.n	800b1bc <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	61fa      	str	r2, [r7, #28]
 800b1b8:	220a      	movs	r2, #10
 800b1ba:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	689a      	ldr	r2, [r3, #8]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	441a      	add	r2, r3
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	609a      	str	r2, [r3, #8]

    while (current_item)
 800b1c8:	e0a0      	b.n	800b30c <print_object+0x1c0>
    {
        if (output_buffer->format)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d022      	beq.n	800b218 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6838      	ldr	r0, [r7, #0]
 800b1da:	f7fe fbf9 	bl	80099d0 <ensure>
 800b1de:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <print_object+0x9e>
            {
                return false;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	e0ca      	b.n	800b380 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	617b      	str	r3, [r7, #20]
 800b1ee:	e007      	b.n	800b200 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	61fa      	str	r2, [r7, #28]
 800b1f6:	2209      	movs	r2, #9
 800b1f8:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	617b      	str	r3, [r7, #20]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	429a      	cmp	r2, r3
 800b208:	d3f2      	bcc.n	800b1f0 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	689a      	ldr	r2, [r3, #8]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	441a      	add	r2, r3
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	6a1b      	ldr	r3, [r3, #32]
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff f85c 	bl	800a2dc <print_string_ptr>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d101      	bne.n	800b22e <print_object+0xe2>
        {
            return false;
 800b22a:	2300      	movs	r3, #0
 800b22c:	e0a8      	b.n	800b380 <print_object+0x234>
        }
        update_offset(output_buffer);
 800b22e:	6838      	ldr	r0, [r7, #0]
 800b230:	f7fe fc68 	bl	8009b04 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <print_object+0xf4>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e000      	b.n	800b242 <print_object+0xf6>
 800b240:	2301      	movs	r3, #1
 800b242:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800b244:	68f9      	ldr	r1, [r7, #12]
 800b246:	6838      	ldr	r0, [r7, #0]
 800b248:	f7fe fbc2 	bl	80099d0 <ensure>
 800b24c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d101      	bne.n	800b258 <print_object+0x10c>
        {
            return false;
 800b254:	2300      	movs	r3, #0
 800b256:	e093      	b.n	800b380 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	61fa      	str	r2, [r7, #28]
 800b25e:	223a      	movs	r2, #58	@ 0x3a
 800b260:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d004      	beq.n	800b274 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	61fa      	str	r2, [r7, #28]
 800b270:	2209      	movs	r2, #9
 800b272:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	441a      	add	r2, r3
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	69b8      	ldr	r0, [r7, #24]
 800b284:	f7ff fc28 	bl	800aad8 <print_value>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <print_object+0x146>
        {
            return false;
 800b28e:	2300      	movs	r3, #0
 800b290:	e076      	b.n	800b380 <print_object+0x234>
        }
        update_offset(output_buffer);
 800b292:	6838      	ldr	r0, [r7, #0]
 800b294:	f7fe fc36 	bl	8009b04 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <print_object+0x158>
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	e000      	b.n	800b2a6 <print_object+0x15a>
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <print_object+0x166>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e000      	b.n	800b2b4 <print_object+0x168>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	4413      	add	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6838      	ldr	r0, [r7, #0]
 800b2c0:	f7fe fb86 	bl	80099d0 <ensure>
 800b2c4:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <print_object+0x184>
        {
            return false;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e057      	b.n	800b380 <print_object+0x234>
        }
        if (current_item->next)
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d004      	beq.n	800b2e2 <print_object+0x196>
        {
            *output_pointer++ = ',';
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	61fa      	str	r2, [r7, #28]
 800b2de:	222c      	movs	r2, #44	@ 0x2c
 800b2e0:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d004      	beq.n	800b2f4 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	1c5a      	adds	r2, r3, #1
 800b2ee:	61fa      	str	r2, [r7, #28]
 800b2f0:	220a      	movs	r2, #10
 800b2f2:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	689a      	ldr	r2, [r3, #8]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	441a      	add	r2, r3
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f47f af5b 	bne.w	800b1ca <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d003      	beq.n	800b324 <print_object+0x1d8>
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	3301      	adds	r3, #1
 800b322:	e000      	b.n	800b326 <print_object+0x1da>
 800b324:	2302      	movs	r3, #2
 800b326:	4619      	mov	r1, r3
 800b328:	6838      	ldr	r0, [r7, #0]
 800b32a:	f7fe fb51 	bl	80099d0 <ensure>
 800b32e:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <print_object+0x1ee>
    {
        return false;
 800b336:	2300      	movs	r3, #0
 800b338:	e022      	b.n	800b380 <print_object+0x234>
    }
    if (output_buffer->format)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d010      	beq.n	800b364 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800b342:	2300      	movs	r3, #0
 800b344:	613b      	str	r3, [r7, #16]
 800b346:	e007      	b.n	800b358 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	1c5a      	adds	r2, r3, #1
 800b34c:	61fa      	str	r2, [r7, #28]
 800b34e:	2209      	movs	r2, #9
 800b350:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	3301      	adds	r3, #1
 800b356:	613b      	str	r3, [r7, #16]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	429a      	cmp	r2, r3
 800b362:	d3f1      	bcc.n	800b348 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	61fa      	str	r2, [r7, #28]
 800b36a:	227d      	movs	r2, #125	@ 0x7d
 800b36c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	2200      	movs	r2, #0
 800b372:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	1e5a      	subs	r2, r3, #1
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	60da      	str	r2, [r3, #12]

    return true;
 800b37e:	2301      	movs	r3, #1
}
 800b380:	4618      	mov	r0, r3
 800b382:	3720      	adds	r7, #32
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <get_object_item+0x1c>
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <get_object_item+0x20>
    {
        return NULL;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	e033      	b.n	800b410 <get_object_item+0x88>
    }

    current_element = object->child;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d017      	beq.n	800b3e4 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800b3b4:	e002      	b.n	800b3bc <get_object_item+0x34>
        {
            current_element = current_element->next;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d01c      	beq.n	800b3fc <get_object_item+0x74>
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d018      	beq.n	800b3fc <get_object_item+0x74>
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	68b8      	ldr	r0, [r7, #8]
 800b3d2:	f7fc ff1d 	bl	8008210 <strcmp>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1ec      	bne.n	800b3b6 <get_object_item+0x2e>
 800b3dc:	e00e      	b.n	800b3fc <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d008      	beq.n	800b3fc <get_object_item+0x74>
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	68b8      	ldr	r0, [r7, #8]
 800b3f2:	f7fe f91d 	bl	8009630 <case_insensitive_strcmp>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1f0      	bne.n	800b3de <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d003      	beq.n	800b40a <get_object_item+0x82>
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <get_object_item+0x86>
        return NULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e000      	b.n	800b410 <get_object_item+0x88>
    }

    return current_element;
 800b40e:	697b      	ldr	r3, [r7, #20]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800b422:	2200      	movs	r2, #0
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7ff ffae 	bl	800b388 <get_object_item>
 800b42c:	4603      	mov	r3, r0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800b436:	b480      	push	{r7}
 800b438:	b083      	sub	sp, #12
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	605a      	str	r2, [r3, #4]
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d006      	beq.n	800b47a <add_item_to_array+0x22>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d003      	beq.n	800b47a <add_item_to_array+0x22>
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	d101      	bne.n	800b47e <add_item_to_array+0x26>
    {
        return false;
 800b47a:	2300      	movs	r3, #0
 800b47c:	e01e      	b.n	800b4bc <add_item_to_array+0x64>
    }

    child = array->child;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	e00d      	b.n	800b4ba <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d009      	beq.n	800b4ba <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7ff ffc2 	bl	800b436 <suffix_object>
            array->child->prev = item;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800b4ba:	2301      	movs	r3, #1
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800b4cc:	687b      	ldr	r3, [r7, #4]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b086      	sub	sp, #24
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	60f8      	str	r0, [r7, #12]
 800b4e2:	60b9      	str	r1, [r7, #8]
 800b4e4:	607a      	str	r2, [r7, #4]
 800b4e6:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d009      	beq.n	800b50a <add_item_to_object+0x30>
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d006      	beq.n	800b50a <add_item_to_object+0x30>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d003      	beq.n	800b50a <add_item_to_object+0x30>
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	429a      	cmp	r2, r3
 800b508:	d101      	bne.n	800b50e <add_item_to_object+0x34>
    {
        return false;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e036      	b.n	800b57c <add_item_to_object+0xa2>
    }

    if (constant_key)
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d009      	beq.n	800b528 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800b514:	68b8      	ldr	r0, [r7, #8]
 800b516:	f7ff ffd5 	bl	800b4c4 <cast_away_const>
 800b51a:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b524:	613b      	str	r3, [r7, #16]
 800b526:	e00e      	b.n	800b546 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800b528:	6839      	ldr	r1, [r7, #0]
 800b52a:	68b8      	ldr	r0, [r7, #8]
 800b52c:	f7fe f8ec 	bl	8009708 <cJSON_strdup>
 800b530:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <add_item_to_object+0x62>
        {
            return false;
 800b538:	2300      	movs	r3, #0
 800b53a:	e01f      	b.n	800b57c <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b544:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d109      	bne.n	800b566 <add_item_to_object+0x8c>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d005      	beq.n	800b566 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	6a12      	ldr	r2, [r2, #32]
 800b562:	4610      	mov	r0, r2
 800b564:	4798      	blx	r3
    }

    item->string = new_key;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f7ff ff6f 	bl	800b458 <add_item_to_array>
 800b57a:	4603      	mov	r3, r0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af02      	add	r7, sp, #8
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800b592:	ed97 0b00 	vldr	d0, [r7]
 800b596:	f000 f81b 	bl	800b5d0 <cJSON_CreateNumber>
 800b59a:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800b59c:	2300      	movs	r3, #0
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	4b09      	ldr	r3, [pc, #36]	@ (800b5c8 <cJSON_AddNumberToObject+0x44>)
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	68b9      	ldr	r1, [r7, #8]
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff ff97 	bl	800b4da <add_item_to_object>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	e003      	b.n	800b5be <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800b5b6:	6978      	ldr	r0, [r7, #20]
 800b5b8:	f7fe f8e4 	bl	8009784 <cJSON_Delete>
    return NULL;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000000 	.word	0x20000000
 800b5cc:	00000000 	.word	0x00000000

0800b5d0 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800b5da:	481f      	ldr	r0, [pc, #124]	@ (800b658 <cJSON_CreateNumber+0x88>)
 800b5dc:	f7fe f8bc 	bl	8009758 <cJSON_New_Item>
 800b5e0:	60f8      	str	r0, [r7, #12]
    if(item)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d02c      	beq.n	800b642 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2208      	movs	r2, #8
 800b5ec:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800b5ee:	68f9      	ldr	r1, [r7, #12]
 800b5f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5f4:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800b5f8:	a315      	add	r3, pc, #84	@ (adr r3, 800b650 <cJSON_CreateNumber+0x80>)
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b602:	f7fd faaf 	bl	8008b64 <__aeabi_dcmpge>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d004      	beq.n	800b616 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800b612:	615a      	str	r2, [r3, #20]
 800b614:	e015      	b.n	800b642 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800b616:	f04f 0200 	mov.w	r2, #0
 800b61a:	4b10      	ldr	r3, [pc, #64]	@ (800b65c <cJSON_CreateNumber+0x8c>)
 800b61c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b620:	f7fd fa96 	bl	8008b50 <__aeabi_dcmple>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d004      	beq.n	800b634 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b630:	615a      	str	r2, [r3, #20]
 800b632:	e006      	b.n	800b642 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800b634:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b638:	f7fd fabe 	bl	8008bb8 <__aeabi_d2iz>
 800b63c:	4602      	mov	r2, r0
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800b642:	68fb      	ldr	r3, [r7, #12]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	f3af 8000 	nop.w
 800b650:	ffc00000 	.word	0xffc00000
 800b654:	41dfffff 	.word	0x41dfffff
 800b658:	20000000 	.word	0x20000000
 800b65c:	c1e00000 	.word	0xc1e00000

0800b660 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800b666:	4807      	ldr	r0, [pc, #28]	@ (800b684 <cJSON_CreateObject+0x24>)
 800b668:	f7fe f876 	bl	8009758 <cJSON_New_Item>
 800b66c:	6078      	str	r0, [r7, #4]
    if (item)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2240      	movs	r2, #64	@ 0x40
 800b678:	60da      	str	r2, [r3, #12]
    }

    return item;
 800b67a:	687b      	ldr	r3, [r7, #4]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	20000000 	.word	0x20000000

0800b688 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <cJSON_IsNumber+0x12>
    {
        return false;
 800b696:	2300      	movs	r3, #0
 800b698:	e007      	b.n	800b6aa <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b08      	cmp	r3, #8
 800b6a2:	bf0c      	ite	eq
 800b6a4:	2301      	moveq	r3, #1
 800b6a6:	2300      	movne	r3, #0
 800b6a8:	b2db      	uxtb	r3, r3
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	370c      	adds	r7, #12
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
	...

0800b6b8 <InitializeDisplay>:

uint8_t current_line = 0;
char display_buffer[MAX_DISPLAY_LINES][23];

void InitializeDisplay(void)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af04      	add	r7, sp, #16
	printf("Application started\n");
 800b6be:	4825      	ldr	r0, [pc, #148]	@ (800b754 <InitializeDisplay+0x9c>)
 800b6c0:	f008 fab4 	bl	8013c2c <puts>
	printf("Touch application running\n");
 800b6c4:	4824      	ldr	r0, [pc, #144]	@ (800b758 <InitializeDisplay+0xa0>)
 800b6c6:	f008 fab1 	bl	8013c2c <puts>
    ST7735_Init(0);
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	f7fd fdb0 	bl	8009230 <ST7735_Init>
    fillScreen(BLACK);
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	f7fd fca1 	bl	8009018 <fillScreen>
    ST7735_SetRotation(1);
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	f7fd fdd6 	bl	8009288 <ST7735_SetRotation>
    // Clear display buffer
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800b6dc:	2300      	movs	r3, #0
 800b6de:	607b      	str	r3, [r7, #4]
 800b6e0:	e00f      	b.n	800b702 <InitializeDisplay+0x4a>
        memset(display_buffer[i], 0, 23);
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	4413      	add	r3, r2
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	1a9b      	subs	r3, r3, r2
 800b6ee:	4a1b      	ldr	r2, [pc, #108]	@ (800b75c <InitializeDisplay+0xa4>)
 800b6f0:	4413      	add	r3, r2
 800b6f2:	2217      	movs	r2, #23
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f008 fc1e 	bl	8013f38 <memset>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3301      	adds	r3, #1
 800b700:	607b      	str	r3, [r7, #4]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b07      	cmp	r3, #7
 800b706:	ddec      	ble.n	800b6e2 <InitializeDisplay+0x2a>
    }
    current_line = 0;
 800b708:	4b15      	ldr	r3, [pc, #84]	@ (800b760 <InitializeDisplay+0xa8>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	701a      	strb	r2, [r3, #0]

    // Display header
    ST7735_WriteString(5, 5, "-ONWORDS TOUCH BOARD-", Font_7x10, YELLOW, BLACK);
 800b70e:	4b15      	ldr	r3, [pc, #84]	@ (800b764 <InitializeDisplay+0xac>)
 800b710:	2200      	movs	r2, #0
 800b712:	9202      	str	r2, [sp, #8]
 800b714:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800b718:	9201      	str	r2, [sp, #4]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	9200      	str	r2, [sp, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a11      	ldr	r2, [pc, #68]	@ (800b768 <InitializeDisplay+0xb0>)
 800b722:	2105      	movs	r1, #5
 800b724:	2005      	movs	r0, #5
 800b726:	f7fd fea7 	bl	8009478 <ST7735_WriteString>
    ST7735_WriteString(5, 18, "    VERSION v3.0", Font_7x10, RED, BLACK);
 800b72a:	4b0e      	ldr	r3, [pc, #56]	@ (800b764 <InitializeDisplay+0xac>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	9202      	str	r2, [sp, #8]
 800b730:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b734:	9201      	str	r2, [sp, #4]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	9200      	str	r2, [sp, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a0b      	ldr	r2, [pc, #44]	@ (800b76c <InitializeDisplay+0xb4>)
 800b73e:	2112      	movs	r1, #18
 800b740:	2005      	movs	r0, #5
 800b742:	f7fd fe99 	bl	8009478 <ST7735_WriteString>
    printf("Touch application running\n");
 800b746:	4804      	ldr	r0, [pc, #16]	@ (800b758 <InitializeDisplay+0xa0>)
 800b748:	f008 fa70 	bl	8013c2c <puts>
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	080166ec 	.word	0x080166ec
 800b758:	08016700 	.word	0x08016700
 800b75c:	20000220 	.word	0x20000220
 800b760:	2000021c 	.word	0x2000021c
 800b764:	2000000c 	.word	0x2000000c
 800b768:	0801671c 	.word	0x0801671c
 800b76c:	08016734 	.word	0x08016734

0800b770 <ClearDisplay>:


void ClearDisplay(void)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af04      	add	r7, sp, #16
    fillScreen(BLACK);
 800b776:	2000      	movs	r0, #0
 800b778:	f7fd fc4e 	bl	8009018 <fillScreen>
    current_line = 0;
 800b77c:	4b1c      	ldr	r3, [pc, #112]	@ (800b7f0 <ClearDisplay+0x80>)
 800b77e:	2200      	movs	r2, #0
 800b780:	701a      	strb	r2, [r3, #0]

    // Redraw header
    ST7735_WriteString(5, 5, "-ONWORDS TOUCH BOARD-", Font_7x10, YELLOW, BLACK);
 800b782:	4b1c      	ldr	r3, [pc, #112]	@ (800b7f4 <ClearDisplay+0x84>)
 800b784:	2200      	movs	r2, #0
 800b786:	9202      	str	r2, [sp, #8]
 800b788:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800b78c:	9201      	str	r2, [sp, #4]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	9200      	str	r2, [sp, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a18      	ldr	r2, [pc, #96]	@ (800b7f8 <ClearDisplay+0x88>)
 800b796:	2105      	movs	r1, #5
 800b798:	2005      	movs	r0, #5
 800b79a:	f7fd fe6d 	bl	8009478 <ST7735_WriteString>
	ST7735_WriteString(5, 18, "    VERSION v3.0", Font_7x10, RED, BLACK);
 800b79e:	4b15      	ldr	r3, [pc, #84]	@ (800b7f4 <ClearDisplay+0x84>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	9202      	str	r2, [sp, #8]
 800b7a4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b7a8:	9201      	str	r2, [sp, #4]
 800b7aa:	685a      	ldr	r2, [r3, #4]
 800b7ac:	9200      	str	r2, [sp, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a12      	ldr	r2, [pc, #72]	@ (800b7fc <ClearDisplay+0x8c>)
 800b7b2:	2112      	movs	r1, #18
 800b7b4:	2005      	movs	r0, #5
 800b7b6:	f7fd fe5f 	bl	8009478 <ST7735_WriteString>

    // Clear display buffer
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	607b      	str	r3, [r7, #4]
 800b7be:	e00f      	b.n	800b7e0 <ClearDisplay+0x70>
        memset(display_buffer[i], 0, 23);
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	4413      	add	r3, r2
 800b7c8:	00db      	lsls	r3, r3, #3
 800b7ca:	1a9b      	subs	r3, r3, r2
 800b7cc:	4a0c      	ldr	r2, [pc, #48]	@ (800b800 <ClearDisplay+0x90>)
 800b7ce:	4413      	add	r3, r2
 800b7d0:	2217      	movs	r2, #23
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f008 fbaf 	bl	8013f38 <memset>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	607b      	str	r3, [r7, #4]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b07      	cmp	r3, #7
 800b7e4:	ddec      	ble.n	800b7c0 <ClearDisplay+0x50>
    }
}
 800b7e6:	bf00      	nop
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	2000021c 	.word	0x2000021c
 800b7f4:	2000000c 	.word	0x2000000c
 800b7f8:	0801671c 	.word	0x0801671c
 800b7fc:	08016734 	.word	0x08016734
 800b800:	20000220 	.word	0x20000220

0800b804 <DisplayMessage>:
    }
}


void DisplayMessage(const char* message)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af04      	add	r7, sp, #16
 800b80a:	6078      	str	r0, [r7, #4]
    if(!message) return;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d04b      	beq.n	800b8aa <DisplayMessage+0xa6>

    // If we've reached the bottom, scroll up
    if(current_line >= MAX_DISPLAY_LINES) {
 800b812:	4b28      	ldr	r3, [pc, #160]	@ (800b8b4 <DisplayMessage+0xb0>)
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	2b07      	cmp	r3, #7
 800b818:	d904      	bls.n	800b824 <DisplayMessage+0x20>
        ClearDisplay();
 800b81a:	f7ff ffa9 	bl	800b770 <ClearDisplay>
        //current_line = MAX_DISPLAY_LINES - 1;
        current_line = 0;
 800b81e:	4b25      	ldr	r3, [pc, #148]	@ (800b8b4 <DisplayMessage+0xb0>)
 800b820:	2200      	movs	r2, #0
 800b822:	701a      	strb	r2, [r3, #0]
    }

    strncpy(display_buffer[current_line], message, 22);
 800b824:	4b23      	ldr	r3, [pc, #140]	@ (800b8b4 <DisplayMessage+0xb0>)
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	461a      	mov	r2, r3
 800b82a:	4613      	mov	r3, r2
 800b82c:	005b      	lsls	r3, r3, #1
 800b82e:	4413      	add	r3, r2
 800b830:	00db      	lsls	r3, r3, #3
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	4a20      	ldr	r2, [pc, #128]	@ (800b8b8 <DisplayMessage+0xb4>)
 800b836:	4413      	add	r3, r2
 800b838:	2216      	movs	r2, #22
 800b83a:	6879      	ldr	r1, [r7, #4]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f008 fb95 	bl	8013f6c <strncpy>
    display_buffer[current_line][22] = '\0';
 800b842:	4b1c      	ldr	r3, [pc, #112]	@ (800b8b4 <DisplayMessage+0xb0>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	491b      	ldr	r1, [pc, #108]	@ (800b8b8 <DisplayMessage+0xb4>)
 800b84a:	4613      	mov	r3, r2
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	4413      	add	r3, r2
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	1a9b      	subs	r3, r3, r2
 800b854:	440b      	add	r3, r1
 800b856:	3316      	adds	r3, #22
 800b858:	2200      	movs	r2, #0
 800b85a:	701a      	strb	r2, [r3, #0]

    // Display the message
    ST7735_WriteString(5, 30 + (current_line * LINE_HEIGHT), display_buffer[current_line], Font_7x10, WHITE, BLACK);
 800b85c:	4b15      	ldr	r3, [pc, #84]	@ (800b8b4 <DisplayMessage+0xb0>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	461a      	mov	r2, r3
 800b862:	0052      	lsls	r2, r2, #1
 800b864:	4413      	add	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	b29b      	uxth	r3, r3
 800b86a:	331e      	adds	r3, #30
 800b86c:	b299      	uxth	r1, r3
 800b86e:	4b11      	ldr	r3, [pc, #68]	@ (800b8b4 <DisplayMessage+0xb0>)
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	4613      	mov	r3, r2
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	4413      	add	r3, r2
 800b87a:	00db      	lsls	r3, r3, #3
 800b87c:	1a9b      	subs	r3, r3, r2
 800b87e:	4a0e      	ldr	r2, [pc, #56]	@ (800b8b8 <DisplayMessage+0xb4>)
 800b880:	1898      	adds	r0, r3, r2
 800b882:	4b0e      	ldr	r3, [pc, #56]	@ (800b8bc <DisplayMessage+0xb8>)
 800b884:	2200      	movs	r2, #0
 800b886:	9202      	str	r2, [sp, #8]
 800b888:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b88c:	9201      	str	r2, [sp, #4]
 800b88e:	685a      	ldr	r2, [r3, #4]
 800b890:	9200      	str	r2, [sp, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4602      	mov	r2, r0
 800b896:	2005      	movs	r0, #5
 800b898:	f7fd fdee 	bl	8009478 <ST7735_WriteString>

    current_line++;
 800b89c:	4b05      	ldr	r3, [pc, #20]	@ (800b8b4 <DisplayMessage+0xb0>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	4b03      	ldr	r3, [pc, #12]	@ (800b8b4 <DisplayMessage+0xb0>)
 800b8a6:	701a      	strb	r2, [r3, #0]
 800b8a8:	e000      	b.n	800b8ac <DisplayMessage+0xa8>
    if(!message) return;
 800b8aa:	bf00      	nop
}
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	2000021c 	.word	0x2000021c
 800b8b8:	20000220 	.word	0x20000220
 800b8bc:	2000000c 	.word	0x2000000c

0800b8c0 <print_To_display>:

void print_To_display(char *format,...)
{
 800b8c0:	b40f      	push	{r0, r1, r2, r3}
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b096      	sub	sp, #88	@ 0x58
 800b8c6:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 800b8c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800b8cc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 800b8ce:	f107 0308 	add.w	r3, r7, #8
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f008 fa90 	bl	8013dfc <vsiprintf>
	// Also display on screen
	DisplayMessage(str);
 800b8dc:	f107 0308 	add.w	r3, r7, #8
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7ff ff8f 	bl	800b804 <DisplayMessage>
    va_start(args, format);
    vsprintf(str, format, args);
    DisplayMessage(str);
    va_end(args);
#endif
}
 800b8e6:	bf00      	nop
 800b8e8:	3758      	adds	r7, #88	@ 0x58
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8f0:	b004      	add	sp, #16
 800b8f2:	4770      	bx	lr

0800b8f4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800b8fc:	1d39      	adds	r1, r7, #4
 800b8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b902:	2201      	movs	r2, #1
 800b904:	4803      	ldr	r0, [pc, #12]	@ (800b914 <__io_putchar+0x20>)
 800b906:	f003 fd97 	bl	800f438 <HAL_UART_Transmit>
	return ch;
 800b90a:	687b      	ldr	r3, [r7, #4]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	20000388 	.word	0x20000388

0800b918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b91c:	f001 f9e8 	bl	800ccf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b920:	f000 f810 	bl	800b944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b924:	f000 f940 	bl	800bba8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800b928:	f000 f87e 	bl	800ba28 <MX_SPI1_Init>
  MX_SPI2_Init();
 800b92c:	f000 f8b4 	bl	800ba98 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800b930:	f000 f8e6 	bl	800bb00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b934:	f000 f90e 	bl	800bb54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  InitializeDisplay();
 800b938:	f7ff febe 	bl	800b6b8 <InitializeDisplay>
  setup_freeRTOS();
 800b93c:	f000 fcca 	bl	800c2d4 <setup_freeRTOS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b940:	bf00      	nop
 800b942:	e7fd      	b.n	800b940 <main+0x28>

0800b944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b094      	sub	sp, #80	@ 0x50
 800b948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b94a:	f107 031c 	add.w	r3, r7, #28
 800b94e:	2234      	movs	r2, #52	@ 0x34
 800b950:	2100      	movs	r1, #0
 800b952:	4618      	mov	r0, r3
 800b954:	f008 faf0 	bl	8013f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b958:	f107 0308 	add.w	r3, r7, #8
 800b95c:	2200      	movs	r2, #0
 800b95e:	601a      	str	r2, [r3, #0]
 800b960:	605a      	str	r2, [r3, #4]
 800b962:	609a      	str	r2, [r3, #8]
 800b964:	60da      	str	r2, [r3, #12]
 800b966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b968:	2300      	movs	r3, #0
 800b96a:	607b      	str	r3, [r7, #4]
 800b96c:	4b2c      	ldr	r3, [pc, #176]	@ (800ba20 <SystemClock_Config+0xdc>)
 800b96e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b970:	4a2b      	ldr	r2, [pc, #172]	@ (800ba20 <SystemClock_Config+0xdc>)
 800b972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b976:	6413      	str	r3, [r2, #64]	@ 0x40
 800b978:	4b29      	ldr	r3, [pc, #164]	@ (800ba20 <SystemClock_Config+0xdc>)
 800b97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b97c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b980:	607b      	str	r3, [r7, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b984:	2300      	movs	r3, #0
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	4b26      	ldr	r3, [pc, #152]	@ (800ba24 <SystemClock_Config+0xe0>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a25      	ldr	r2, [pc, #148]	@ (800ba24 <SystemClock_Config+0xe0>)
 800b98e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b992:	6013      	str	r3, [r2, #0]
 800b994:	4b23      	ldr	r3, [pc, #140]	@ (800ba24 <SystemClock_Config+0xe0>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b99c:	603b      	str	r3, [r7, #0]
 800b99e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b9a8:	2310      	movs	r3, #16
 800b9aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800b9b4:	2308      	movs	r3, #8
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800b9b8:	23b4      	movs	r3, #180	@ 0xb4
 800b9ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b9bc:	2302      	movs	r3, #2
 800b9be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b9c8:	f107 031c 	add.w	r3, r7, #28
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f002 f88f 	bl	800daf0 <HAL_RCC_OscConfig>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 800b9d8:	f000 f998 	bl	800bd0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800b9dc:	f001 fd42 	bl	800d464 <HAL_PWREx_EnableOverDrive>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800b9e6:	f000 f991 	bl	800bd0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b9ea:	230f      	movs	r3, #15
 800b9ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b9f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800b9fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b9fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ba02:	f107 0308 	add.w	r3, r7, #8
 800ba06:	2105      	movs	r1, #5
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 fd7b 	bl	800d504 <HAL_RCC_ClockConfig>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800ba14:	f000 f97a 	bl	800bd0c <Error_Handler>
  }
}
 800ba18:	bf00      	nop
 800ba1a:	3750      	adds	r7, #80	@ 0x50
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	40023800 	.word	0x40023800
 800ba24:	40007000 	.word	0x40007000

0800ba28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800ba2c:	4b18      	ldr	r3, [pc, #96]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba2e:	4a19      	ldr	r2, [pc, #100]	@ (800ba94 <MX_SPI1_Init+0x6c>)
 800ba30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ba32:	4b17      	ldr	r3, [pc, #92]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ba38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800ba3a:	4b15      	ldr	r3, [pc, #84]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ba40:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ba42:	4b13      	ldr	r3, [pc, #76]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ba48:	4b11      	ldr	r3, [pc, #68]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ba4e:	4b10      	ldr	r3, [pc, #64]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ba54:	4b0e      	ldr	r3, [pc, #56]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ba5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ba62:	4b0b      	ldr	r3, [pc, #44]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ba68:	4b09      	ldr	r3, [pc, #36]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba6e:	4b08      	ldr	r3, [pc, #32]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ba74:	4b06      	ldr	r3, [pc, #24]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba76:	220a      	movs	r2, #10
 800ba78:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ba7a:	4805      	ldr	r0, [pc, #20]	@ (800ba90 <MX_SPI1_Init+0x68>)
 800ba7c:	f002 fad6 	bl	800e02c <HAL_SPI_Init>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800ba86:	f000 f941 	bl	800bd0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800ba8a:	bf00      	nop
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	200002d8 	.word	0x200002d8
 800ba94:	40013000 	.word	0x40013000

0800ba98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800ba9c:	4b16      	ldr	r3, [pc, #88]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800ba9e:	4a17      	ldr	r2, [pc, #92]	@ (800bafc <MX_SPI2_Init+0x64>)
 800baa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800baa2:	4b15      	ldr	r3, [pc, #84]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800baa8:	4b13      	ldr	r3, [pc, #76]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800baaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800baae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800bab0:	4b11      	ldr	r3, [pc, #68]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bab6:	4b10      	ldr	r3, [pc, #64]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800bab8:	2200      	movs	r2, #0
 800baba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800babc:	4b0e      	ldr	r3, [pc, #56]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800babe:	2200      	movs	r2, #0
 800bac0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800bac2:	4b0d      	ldr	r3, [pc, #52]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800bac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bac8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800baca:	4b0b      	ldr	r3, [pc, #44]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800bacc:	2200      	movs	r2, #0
 800bace:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800bad0:	4b09      	ldr	r3, [pc, #36]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bad6:	4b08      	ldr	r3, [pc, #32]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800bad8:	2200      	movs	r2, #0
 800bada:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800badc:	4b06      	ldr	r3, [pc, #24]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800bade:	220a      	movs	r2, #10
 800bae0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800bae2:	4805      	ldr	r0, [pc, #20]	@ (800baf8 <MX_SPI2_Init+0x60>)
 800bae4:	f002 faa2 	bl	800e02c <HAL_SPI_Init>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 800baee:	f000 f90d 	bl	800bd0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800baf2:	bf00      	nop
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20000330 	.word	0x20000330
 800bafc:	40003800 	.word	0x40003800

0800bb00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800bb04:	4b11      	ldr	r3, [pc, #68]	@ (800bb4c <MX_USART2_UART_Init+0x4c>)
 800bb06:	4a12      	ldr	r2, [pc, #72]	@ (800bb50 <MX_USART2_UART_Init+0x50>)
 800bb08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800bb0a:	4b10      	ldr	r3, [pc, #64]	@ (800bb4c <MX_USART2_UART_Init+0x4c>)
 800bb0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800bb10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800bb12:	4b0e      	ldr	r3, [pc, #56]	@ (800bb4c <MX_USART2_UART_Init+0x4c>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800bb18:	4b0c      	ldr	r3, [pc, #48]	@ (800bb4c <MX_USART2_UART_Init+0x4c>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800bb1e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb4c <MX_USART2_UART_Init+0x4c>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800bb24:	4b09      	ldr	r3, [pc, #36]	@ (800bb4c <MX_USART2_UART_Init+0x4c>)
 800bb26:	220c      	movs	r2, #12
 800bb28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bb2a:	4b08      	ldr	r3, [pc, #32]	@ (800bb4c <MX_USART2_UART_Init+0x4c>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800bb30:	4b06      	ldr	r3, [pc, #24]	@ (800bb4c <MX_USART2_UART_Init+0x4c>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800bb36:	4805      	ldr	r0, [pc, #20]	@ (800bb4c <MX_USART2_UART_Init+0x4c>)
 800bb38:	f003 fc2e 	bl	800f398 <HAL_UART_Init>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d001      	beq.n	800bb46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800bb42:	f000 f8e3 	bl	800bd0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800bb46:	bf00      	nop
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20000388 	.word	0x20000388
 800bb50:	40004400 	.word	0x40004400

0800bb54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800bb58:	4b11      	ldr	r3, [pc, #68]	@ (800bba0 <MX_USART3_UART_Init+0x4c>)
 800bb5a:	4a12      	ldr	r2, [pc, #72]	@ (800bba4 <MX_USART3_UART_Init+0x50>)
 800bb5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800bb5e:	4b10      	ldr	r3, [pc, #64]	@ (800bba0 <MX_USART3_UART_Init+0x4c>)
 800bb60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800bb64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800bb66:	4b0e      	ldr	r3, [pc, #56]	@ (800bba0 <MX_USART3_UART_Init+0x4c>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800bb6c:	4b0c      	ldr	r3, [pc, #48]	@ (800bba0 <MX_USART3_UART_Init+0x4c>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800bb72:	4b0b      	ldr	r3, [pc, #44]	@ (800bba0 <MX_USART3_UART_Init+0x4c>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800bb78:	4b09      	ldr	r3, [pc, #36]	@ (800bba0 <MX_USART3_UART_Init+0x4c>)
 800bb7a:	220c      	movs	r2, #12
 800bb7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bb7e:	4b08      	ldr	r3, [pc, #32]	@ (800bba0 <MX_USART3_UART_Init+0x4c>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800bb84:	4b06      	ldr	r3, [pc, #24]	@ (800bba0 <MX_USART3_UART_Init+0x4c>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800bb8a:	4805      	ldr	r0, [pc, #20]	@ (800bba0 <MX_USART3_UART_Init+0x4c>)
 800bb8c:	f003 fc04 	bl	800f398 <HAL_UART_Init>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800bb96:	f000 f8b9 	bl	800bd0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800bb9a:	bf00      	nop
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	200003d0 	.word	0x200003d0
 800bba4:	40004800 	.word	0x40004800

0800bba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08a      	sub	sp, #40	@ 0x28
 800bbac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbae:	f107 0314 	add.w	r3, r7, #20
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
 800bbb6:	605a      	str	r2, [r3, #4]
 800bbb8:	609a      	str	r2, [r3, #8]
 800bbba:	60da      	str	r2, [r3, #12]
 800bbbc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	613b      	str	r3, [r7, #16]
 800bbc2:	4b44      	ldr	r3, [pc, #272]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bbc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc6:	4a43      	ldr	r2, [pc, #268]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bbc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbcc:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbce:	4b41      	ldr	r3, [pc, #260]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbd6:	613b      	str	r3, [r7, #16]
 800bbd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60fb      	str	r3, [r7, #12]
 800bbde:	4b3d      	ldr	r3, [pc, #244]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bbe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbe2:	4a3c      	ldr	r2, [pc, #240]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bbe4:	f043 0304 	orr.w	r3, r3, #4
 800bbe8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbea:	4b3a      	ldr	r3, [pc, #232]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bbec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbee:	f003 0304 	and.w	r3, r3, #4
 800bbf2:	60fb      	str	r3, [r7, #12]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60bb      	str	r3, [r7, #8]
 800bbfa:	4b36      	ldr	r3, [pc, #216]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bbfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbfe:	4a35      	ldr	r2, [pc, #212]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bc00:	f043 0301 	orr.w	r3, r3, #1
 800bc04:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc06:	4b33      	ldr	r3, [pc, #204]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bc08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc0a:	f003 0301 	and.w	r3, r3, #1
 800bc0e:	60bb      	str	r3, [r7, #8]
 800bc10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc12:	2300      	movs	r3, #0
 800bc14:	607b      	str	r3, [r7, #4]
 800bc16:	4b2f      	ldr	r3, [pc, #188]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bc18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc1a:	4a2e      	ldr	r2, [pc, #184]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bc1c:	f043 0302 	orr.w	r3, r3, #2
 800bc20:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc22:	4b2c      	ldr	r3, [pc, #176]	@ (800bcd4 <MX_GPIO_Init+0x12c>)
 800bc24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc26:	f003 0302 	and.w	r3, r3, #2
 800bc2a:	607b      	str	r3, [r7, #4]
 800bc2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 800bc2e:	2200      	movs	r2, #0
 800bc30:	2102      	movs	r1, #2
 800bc32:	4829      	ldr	r0, [pc, #164]	@ (800bcd8 <MX_GPIO_Init+0x130>)
 800bc34:	f001 fbe2 	bl	800d3fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800bc38:	2200      	movs	r2, #0
 800bc3a:	211c      	movs	r1, #28
 800bc3c:	4827      	ldr	r0, [pc, #156]	@ (800bcdc <MX_GPIO_Init+0x134>)
 800bc3e:	f001 fbdd 	bl	800d3fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800bc42:	2200      	movs	r2, #0
 800bc44:	2112      	movs	r1, #18
 800bc46:	4826      	ldr	r0, [pc, #152]	@ (800bce0 <MX_GPIO_Init+0x138>)
 800bc48:	f001 fbd8 	bl	800d3fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin, GPIO_PIN_RESET);
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800bc52:	4824      	ldr	r0, [pc, #144]	@ (800bce4 <MX_GPIO_Init+0x13c>)
 800bc54:	f001 fbd2 	bl	800d3fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 800bc58:	2302      	movs	r3, #2
 800bc5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc64:	2300      	movs	r3, #0
 800bc66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 800bc68:	f107 0314 	add.w	r3, r7, #20
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	481a      	ldr	r0, [pc, #104]	@ (800bcd8 <MX_GPIO_Init+0x130>)
 800bc70:	f001 fa18 	bl	800d0a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 */
  GPIO_InitStruct.Pin = TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4;
 800bc74:	231c      	movs	r3, #28
 800bc76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc80:	2300      	movs	r3, #0
 800bc82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc84:	f107 0314 	add.w	r3, r7, #20
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4814      	ldr	r0, [pc, #80]	@ (800bcdc <MX_GPIO_Init+0x134>)
 800bc8c:	f001 fa0a 	bl	800d0a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800bc90:	2312      	movs	r3, #18
 800bc92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc94:	2301      	movs	r3, #1
 800bc96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bca0:	f107 0314 	add.w	r3, r7, #20
 800bca4:	4619      	mov	r1, r3
 800bca6:	480e      	ldr	r0, [pc, #56]	@ (800bce0 <MX_GPIO_Init+0x138>)
 800bca8:	f001 f9fc 	bl	800d0a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_LED4_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED4_Pin;
 800bcac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bcb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED4_GPIO_Port, &GPIO_InitStruct);
 800bcbe:	f107 0314 	add.w	r3, r7, #20
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	4807      	ldr	r0, [pc, #28]	@ (800bce4 <MX_GPIO_Init+0x13c>)
 800bcc6:	f001 f9ed 	bl	800d0a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800bcca:	bf00      	nop
 800bccc:	3728      	adds	r7, #40	@ 0x28
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	40023800 	.word	0x40023800
 800bcd8:	40021c00 	.word	0x40021c00
 800bcdc:	40020800 	.word	0x40020800
 800bce0:	40020000 	.word	0x40020000
 800bce4:	40020400 	.word	0x40020400

0800bce8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a04      	ldr	r2, [pc, #16]	@ (800bd08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d101      	bne.n	800bcfe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800bcfa:	f001 f81b 	bl	800cd34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800bcfe:	bf00      	nop
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	40010000 	.word	0x40010000

0800bd0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800bd10:	b672      	cpsid	i
}
 800bd12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800bd14:	bf00      	nop
 800bd16:	e7fd      	b.n	800bd14 <Error_Handler+0x8>

0800bd18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd1e:	2300      	movs	r3, #0
 800bd20:	607b      	str	r3, [r7, #4]
 800bd22:	4b10      	ldr	r3, [pc, #64]	@ (800bd64 <HAL_MspInit+0x4c>)
 800bd24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd26:	4a0f      	ldr	r2, [pc, #60]	@ (800bd64 <HAL_MspInit+0x4c>)
 800bd28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bd2c:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd64 <HAL_MspInit+0x4c>)
 800bd30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd36:	607b      	str	r3, [r7, #4]
 800bd38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	603b      	str	r3, [r7, #0]
 800bd3e:	4b09      	ldr	r3, [pc, #36]	@ (800bd64 <HAL_MspInit+0x4c>)
 800bd40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd42:	4a08      	ldr	r2, [pc, #32]	@ (800bd64 <HAL_MspInit+0x4c>)
 800bd44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd48:	6413      	str	r3, [r2, #64]	@ 0x40
 800bd4a:	4b06      	ldr	r3, [pc, #24]	@ (800bd64 <HAL_MspInit+0x4c>)
 800bd4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd52:	603b      	str	r3, [r7, #0]
 800bd54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bd56:	bf00      	nop
 800bd58:	370c      	adds	r7, #12
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	40023800 	.word	0x40023800

0800bd68 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08c      	sub	sp, #48	@ 0x30
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd70:	f107 031c 	add.w	r3, r7, #28
 800bd74:	2200      	movs	r2, #0
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	605a      	str	r2, [r3, #4]
 800bd7a:	609a      	str	r2, [r3, #8]
 800bd7c:	60da      	str	r2, [r3, #12]
 800bd7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a45      	ldr	r2, [pc, #276]	@ (800be9c <HAL_SPI_MspInit+0x134>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d12c      	bne.n	800bde4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	61bb      	str	r3, [r7, #24]
 800bd8e:	4b44      	ldr	r3, [pc, #272]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800bd90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd92:	4a43      	ldr	r2, [pc, #268]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800bd94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bd98:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd9a:	4b41      	ldr	r3, [pc, #260]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800bd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bda2:	61bb      	str	r3, [r7, #24]
 800bda4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]
 800bdaa:	4b3d      	ldr	r3, [pc, #244]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800bdac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdae:	4a3c      	ldr	r2, [pc, #240]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800bdb0:	f043 0301 	orr.w	r3, r3, #1
 800bdb4:	6313      	str	r3, [r2, #48]	@ 0x30
 800bdb6:	4b3a      	ldr	r3, [pc, #232]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800bdb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	617b      	str	r3, [r7, #20]
 800bdc0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800bdc2:	23a0      	movs	r3, #160	@ 0xa0
 800bdc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdc6:	2302      	movs	r3, #2
 800bdc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800bdd2:	2305      	movs	r3, #5
 800bdd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdd6:	f107 031c 	add.w	r3, r7, #28
 800bdda:	4619      	mov	r1, r3
 800bddc:	4831      	ldr	r0, [pc, #196]	@ (800bea4 <HAL_SPI_MspInit+0x13c>)
 800bdde:	f001 f961 	bl	800d0a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800bde2:	e057      	b.n	800be94 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a2f      	ldr	r2, [pc, #188]	@ (800bea8 <HAL_SPI_MspInit+0x140>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d152      	bne.n	800be94 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800bdee:	2300      	movs	r3, #0
 800bdf0:	613b      	str	r3, [r7, #16]
 800bdf2:	4b2b      	ldr	r3, [pc, #172]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800bdf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdf6:	4a2a      	ldr	r2, [pc, #168]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800bdf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bdfc:	6413      	str	r3, [r2, #64]	@ 0x40
 800bdfe:	4b28      	ldr	r3, [pc, #160]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800be00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be06:	613b      	str	r3, [r7, #16]
 800be08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
 800be0e:	4b24      	ldr	r3, [pc, #144]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800be10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be12:	4a23      	ldr	r2, [pc, #140]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800be14:	f043 0304 	orr.w	r3, r3, #4
 800be18:	6313      	str	r3, [r2, #48]	@ 0x30
 800be1a:	4b21      	ldr	r3, [pc, #132]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800be1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be1e:	f003 0304 	and.w	r3, r3, #4
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be26:	2300      	movs	r3, #0
 800be28:	60bb      	str	r3, [r7, #8]
 800be2a:	4b1d      	ldr	r3, [pc, #116]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800be2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be2e:	4a1c      	ldr	r2, [pc, #112]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800be30:	f043 0302 	orr.w	r3, r3, #2
 800be34:	6313      	str	r3, [r2, #48]	@ 0x30
 800be36:	4b1a      	ldr	r3, [pc, #104]	@ (800bea0 <HAL_SPI_MspInit+0x138>)
 800be38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be3a:	f003 0302 	and.w	r3, r3, #2
 800be3e:	60bb      	str	r3, [r7, #8]
 800be40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800be42:	2302      	movs	r3, #2
 800be44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be46:	2302      	movs	r3, #2
 800be48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be4a:	2300      	movs	r3, #0
 800be4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be4e:	2303      	movs	r3, #3
 800be50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800be52:	2307      	movs	r3, #7
 800be54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be56:	f107 031c 	add.w	r3, r7, #28
 800be5a:	4619      	mov	r1, r3
 800be5c:	4813      	ldr	r0, [pc, #76]	@ (800beac <HAL_SPI_MspInit+0x144>)
 800be5e:	f001 f921 	bl	800d0a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800be62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800be66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be68:	2302      	movs	r3, #2
 800be6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be6c:	2300      	movs	r3, #0
 800be6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be70:	2303      	movs	r3, #3
 800be72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800be74:	2305      	movs	r3, #5
 800be76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be78:	f107 031c 	add.w	r3, r7, #28
 800be7c:	4619      	mov	r1, r3
 800be7e:	480c      	ldr	r0, [pc, #48]	@ (800beb0 <HAL_SPI_MspInit+0x148>)
 800be80:	f001 f910 	bl	800d0a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800be84:	2200      	movs	r2, #0
 800be86:	2105      	movs	r1, #5
 800be88:	2024      	movs	r0, #36	@ 0x24
 800be8a:	f001 f84f 	bl	800cf2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800be8e:	2024      	movs	r0, #36	@ 0x24
 800be90:	f001 f868 	bl	800cf64 <HAL_NVIC_EnableIRQ>
}
 800be94:	bf00      	nop
 800be96:	3730      	adds	r7, #48	@ 0x30
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	40013000 	.word	0x40013000
 800bea0:	40023800 	.word	0x40023800
 800bea4:	40020000 	.word	0x40020000
 800bea8:	40003800 	.word	0x40003800
 800beac:	40020800 	.word	0x40020800
 800beb0:	40020400 	.word	0x40020400

0800beb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08c      	sub	sp, #48	@ 0x30
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bebc:	f107 031c 	add.w	r3, r7, #28
 800bec0:	2200      	movs	r2, #0
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	605a      	str	r2, [r3, #4]
 800bec6:	609a      	str	r2, [r3, #8]
 800bec8:	60da      	str	r2, [r3, #12]
 800beca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a45      	ldr	r2, [pc, #276]	@ (800bfe8 <HAL_UART_MspInit+0x134>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d12c      	bne.n	800bf30 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800bed6:	2300      	movs	r3, #0
 800bed8:	61bb      	str	r3, [r7, #24]
 800beda:	4b44      	ldr	r3, [pc, #272]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bedc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bede:	4a43      	ldr	r2, [pc, #268]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bee4:	6413      	str	r3, [r2, #64]	@ 0x40
 800bee6:	4b41      	ldr	r3, [pc, #260]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800beee:	61bb      	str	r3, [r7, #24]
 800bef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bef2:	2300      	movs	r3, #0
 800bef4:	617b      	str	r3, [r7, #20]
 800bef6:	4b3d      	ldr	r3, [pc, #244]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800befa:	4a3c      	ldr	r2, [pc, #240]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800befc:	f043 0301 	orr.w	r3, r3, #1
 800bf00:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf02:	4b3a      	ldr	r3, [pc, #232]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf06:	f003 0301 	and.w	r3, r3, #1
 800bf0a:	617b      	str	r3, [r7, #20]
 800bf0c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bf0e:	230c      	movs	r3, #12
 800bf10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf12:	2302      	movs	r3, #2
 800bf14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bf1e:	2307      	movs	r3, #7
 800bf20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf22:	f107 031c 	add.w	r3, r7, #28
 800bf26:	4619      	mov	r1, r3
 800bf28:	4831      	ldr	r0, [pc, #196]	@ (800bff0 <HAL_UART_MspInit+0x13c>)
 800bf2a:	f001 f8bb 	bl	800d0a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800bf2e:	e057      	b.n	800bfe0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a2f      	ldr	r2, [pc, #188]	@ (800bff4 <HAL_UART_MspInit+0x140>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d152      	bne.n	800bfe0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	613b      	str	r3, [r7, #16]
 800bf3e:	4b2b      	ldr	r3, [pc, #172]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf42:	4a2a      	ldr	r2, [pc, #168]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bf48:	6413      	str	r3, [r2, #64]	@ 0x40
 800bf4a:	4b28      	ldr	r3, [pc, #160]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf52:	613b      	str	r3, [r7, #16]
 800bf54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf56:	2300      	movs	r3, #0
 800bf58:	60fb      	str	r3, [r7, #12]
 800bf5a:	4b24      	ldr	r3, [pc, #144]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5e:	4a23      	ldr	r2, [pc, #140]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf60:	f043 0304 	orr.w	r3, r3, #4
 800bf64:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf66:	4b21      	ldr	r3, [pc, #132]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf6a:	f003 0304 	and.w	r3, r3, #4
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf72:	2300      	movs	r3, #0
 800bf74:	60bb      	str	r3, [r7, #8]
 800bf76:	4b1d      	ldr	r3, [pc, #116]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf7a:	4a1c      	ldr	r2, [pc, #112]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf7c:	f043 0302 	orr.w	r3, r3, #2
 800bf80:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf82:	4b1a      	ldr	r3, [pc, #104]	@ (800bfec <HAL_UART_MspInit+0x138>)
 800bf84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf86:	f003 0302 	and.w	r3, r3, #2
 800bf8a:	60bb      	str	r3, [r7, #8]
 800bf8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800bf8e:	2320      	movs	r3, #32
 800bf90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf92:	2302      	movs	r3, #2
 800bf94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf96:	2300      	movs	r3, #0
 800bf98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bf9e:	2307      	movs	r3, #7
 800bfa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfa2:	f107 031c 	add.w	r3, r7, #28
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	4813      	ldr	r0, [pc, #76]	@ (800bff8 <HAL_UART_MspInit+0x144>)
 800bfaa:	f001 f87b 	bl	800d0a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800bfae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bfc0:	2307      	movs	r3, #7
 800bfc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfc4:	f107 031c 	add.w	r3, r7, #28
 800bfc8:	4619      	mov	r1, r3
 800bfca:	480c      	ldr	r0, [pc, #48]	@ (800bffc <HAL_UART_MspInit+0x148>)
 800bfcc:	f001 f86a 	bl	800d0a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	2106      	movs	r1, #6
 800bfd4:	2027      	movs	r0, #39	@ 0x27
 800bfd6:	f000 ffa9 	bl	800cf2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800bfda:	2027      	movs	r0, #39	@ 0x27
 800bfdc:	f000 ffc2 	bl	800cf64 <HAL_NVIC_EnableIRQ>
}
 800bfe0:	bf00      	nop
 800bfe2:	3730      	adds	r7, #48	@ 0x30
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	40004400 	.word	0x40004400
 800bfec:	40023800 	.word	0x40023800
 800bff0:	40020000 	.word	0x40020000
 800bff4:	40004800 	.word	0x40004800
 800bff8:	40020800 	.word	0x40020800
 800bffc:	40020400 	.word	0x40020400

0800c000 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b08c      	sub	sp, #48	@ 0x30
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800c008:	2300      	movs	r3, #0
 800c00a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800c010:	2300      	movs	r3, #0
 800c012:	60bb      	str	r3, [r7, #8]
 800c014:	4b2f      	ldr	r3, [pc, #188]	@ (800c0d4 <HAL_InitTick+0xd4>)
 800c016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c018:	4a2e      	ldr	r2, [pc, #184]	@ (800c0d4 <HAL_InitTick+0xd4>)
 800c01a:	f043 0301 	orr.w	r3, r3, #1
 800c01e:	6453      	str	r3, [r2, #68]	@ 0x44
 800c020:	4b2c      	ldr	r3, [pc, #176]	@ (800c0d4 <HAL_InitTick+0xd4>)
 800c022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c024:	f003 0301 	and.w	r3, r3, #1
 800c028:	60bb      	str	r3, [r7, #8]
 800c02a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c02c:	f107 020c 	add.w	r2, r7, #12
 800c030:	f107 0310 	add.w	r3, r7, #16
 800c034:	4611      	mov	r1, r2
 800c036:	4618      	mov	r0, r3
 800c038:	f001 fb7e 	bl	800d738 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800c03c:	f001 fb68 	bl	800d710 <HAL_RCC_GetPCLK2Freq>
 800c040:	4603      	mov	r3, r0
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c048:	4a23      	ldr	r2, [pc, #140]	@ (800c0d8 <HAL_InitTick+0xd8>)
 800c04a:	fba2 2303 	umull	r2, r3, r2, r3
 800c04e:	0c9b      	lsrs	r3, r3, #18
 800c050:	3b01      	subs	r3, #1
 800c052:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800c054:	4b21      	ldr	r3, [pc, #132]	@ (800c0dc <HAL_InitTick+0xdc>)
 800c056:	4a22      	ldr	r2, [pc, #136]	@ (800c0e0 <HAL_InitTick+0xe0>)
 800c058:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800c05a:	4b20      	ldr	r3, [pc, #128]	@ (800c0dc <HAL_InitTick+0xdc>)
 800c05c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800c060:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800c062:	4a1e      	ldr	r2, [pc, #120]	@ (800c0dc <HAL_InitTick+0xdc>)
 800c064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c066:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800c068:	4b1c      	ldr	r3, [pc, #112]	@ (800c0dc <HAL_InitTick+0xdc>)
 800c06a:	2200      	movs	r2, #0
 800c06c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c06e:	4b1b      	ldr	r3, [pc, #108]	@ (800c0dc <HAL_InitTick+0xdc>)
 800c070:	2200      	movs	r2, #0
 800c072:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c074:	4b19      	ldr	r3, [pc, #100]	@ (800c0dc <HAL_InitTick+0xdc>)
 800c076:	2200      	movs	r2, #0
 800c078:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800c07a:	4818      	ldr	r0, [pc, #96]	@ (800c0dc <HAL_InitTick+0xdc>)
 800c07c:	f002 fef1 	bl	800ee62 <HAL_TIM_Base_Init>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800c086:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d11b      	bne.n	800c0c6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800c08e:	4813      	ldr	r0, [pc, #76]	@ (800c0dc <HAL_InitTick+0xdc>)
 800c090:	f002 ff40 	bl	800ef14 <HAL_TIM_Base_Start_IT>
 800c094:	4603      	mov	r3, r0
 800c096:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800c09a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d111      	bne.n	800c0c6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c0a2:	2019      	movs	r0, #25
 800c0a4:	f000 ff5e 	bl	800cf64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b0f      	cmp	r3, #15
 800c0ac:	d808      	bhi.n	800c0c0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	2019      	movs	r0, #25
 800c0b4:	f000 ff3a 	bl	800cf2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c0b8:	4a0a      	ldr	r2, [pc, #40]	@ (800c0e4 <HAL_InitTick+0xe4>)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6013      	str	r3, [r2, #0]
 800c0be:	e002      	b.n	800c0c6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800c0c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3730      	adds	r7, #48	@ 0x30
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	40023800 	.word	0x40023800
 800c0d8:	431bde83 	.word	0x431bde83
 800c0dc:	20000418 	.word	0x20000418
 800c0e0:	40010000 	.word	0x40010000
 800c0e4:	20000018 	.word	0x20000018

0800c0e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c0ec:	bf00      	nop
 800c0ee:	e7fd      	b.n	800c0ec <NMI_Handler+0x4>

0800c0f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c0f4:	bf00      	nop
 800c0f6:	e7fd      	b.n	800c0f4 <HardFault_Handler+0x4>

0800c0f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c0fc:	bf00      	nop
 800c0fe:	e7fd      	b.n	800c0fc <MemManage_Handler+0x4>

0800c100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c100:	b480      	push	{r7}
 800c102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c104:	bf00      	nop
 800c106:	e7fd      	b.n	800c104 <BusFault_Handler+0x4>

0800c108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c108:	b480      	push	{r7}
 800c10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c10c:	bf00      	nop
 800c10e:	e7fd      	b.n	800c10c <UsageFault_Handler+0x4>

0800c110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c110:	b480      	push	{r7}
 800c112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c114:	bf00      	nop
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
	...

0800c120 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c124:	4802      	ldr	r0, [pc, #8]	@ (800c130 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800c126:	f002 ff65 	bl	800eff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800c12a:	bf00      	nop
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	20000418 	.word	0x20000418

0800c134 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800c138:	4802      	ldr	r0, [pc, #8]	@ (800c144 <SPI2_IRQHandler+0x10>)
 800c13a:	f002 fa6b 	bl	800e614 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800c13e:	bf00      	nop
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	20000330 	.word	0x20000330

0800c148 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800c14c:	4802      	ldr	r0, [pc, #8]	@ (800c158 <USART3_IRQHandler+0x10>)
 800c14e:	f003 fa23 	bl	800f598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800c152:	bf00      	nop
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	200003d0 	.word	0x200003d0

0800c15c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c15c:	b480      	push	{r7}
 800c15e:	af00      	add	r7, sp, #0
  return 1;
 800c160:	2301      	movs	r3, #1
}
 800c162:	4618      	mov	r0, r3
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <_kill>:

int _kill(int pid, int sig)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c176:	f007 ff63 	bl	8014040 <__errno>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2216      	movs	r2, #22
 800c17e:	601a      	str	r2, [r3, #0]
  return -1;
 800c180:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <_exit>:

void _exit (int status)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c194:	f04f 31ff 	mov.w	r1, #4294967295
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7ff ffe7 	bl	800c16c <_kill>
  while (1) {}    /* Make sure we hang here */
 800c19e:	bf00      	nop
 800c1a0:	e7fd      	b.n	800c19e <_exit+0x12>

0800c1a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b086      	sub	sp, #24
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	60f8      	str	r0, [r7, #12]
 800c1aa:	60b9      	str	r1, [r7, #8]
 800c1ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	617b      	str	r3, [r7, #20]
 800c1b2:	e00a      	b.n	800c1ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c1b4:	f3af 8000 	nop.w
 800c1b8:	4601      	mov	r1, r0
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	1c5a      	adds	r2, r3, #1
 800c1be:	60ba      	str	r2, [r7, #8]
 800c1c0:	b2ca      	uxtb	r2, r1
 800c1c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	617b      	str	r3, [r7, #20]
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	dbf0      	blt.n	800c1b4 <_read+0x12>
  }

  return len;
 800c1d2:	687b      	ldr	r3, [r7, #4]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	617b      	str	r3, [r7, #20]
 800c1ec:	e009      	b.n	800c202 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	1c5a      	adds	r2, r3, #1
 800c1f2:	60ba      	str	r2, [r7, #8]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7ff fb7c 	bl	800b8f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	3301      	adds	r3, #1
 800c200:	617b      	str	r3, [r7, #20]
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	429a      	cmp	r2, r3
 800c208:	dbf1      	blt.n	800c1ee <_write+0x12>
  }
  return len;
 800c20a:	687b      	ldr	r3, [r7, #4]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3718      	adds	r7, #24
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <_close>:

int _close(int file)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c21c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c220:	4618      	mov	r0, r3
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c23c:	605a      	str	r2, [r3, #4]
  return 0;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <_isatty>:

int _isatty(int file)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c254:	2301      	movs	r3, #1
}
 800c256:	4618      	mov	r0, r3
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c262:	b480      	push	{r7}
 800c264:	b085      	sub	sp, #20
 800c266:	af00      	add	r7, sp, #0
 800c268:	60f8      	str	r0, [r7, #12]
 800c26a:	60b9      	str	r1, [r7, #8]
 800c26c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c27c:	b480      	push	{r7}
 800c27e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c280:	4b07      	ldr	r3, [pc, #28]	@ (800c2a0 <SystemInit+0x24>)
 800c282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c286:	4a06      	ldr	r2, [pc, #24]	@ (800c2a0 <SystemInit+0x24>)
 800c288:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c28c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800c290:	4b03      	ldr	r3, [pc, #12]	@ (800c2a0 <SystemInit+0x24>)
 800c292:	4a04      	ldr	r2, [pc, #16]	@ (800c2a4 <SystemInit+0x28>)
 800c294:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c296:	bf00      	nop
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	e000ed00 	.word	0xe000ed00
 800c2a4:	08008000 	.word	0x08008000

0800c2a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c2ac:	f3bf 8f4f 	dsb	sy
}
 800c2b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c2b2:	4b06      	ldr	r3, [pc, #24]	@ (800c2cc <__NVIC_SystemReset+0x24>)
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c2ba:	4904      	ldr	r1, [pc, #16]	@ (800c2cc <__NVIC_SystemReset+0x24>)
 800c2bc:	4b04      	ldr	r3, [pc, #16]	@ (800c2d0 <__NVIC_SystemReset+0x28>)
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c2c2:	f3bf 8f4f 	dsb	sy
}
 800c2c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c2c8:	bf00      	nop
 800c2ca:	e7fd      	b.n	800c2c8 <__NVIC_SystemReset+0x20>
 800c2cc:	e000ed00 	.word	0xe000ed00
 800c2d0:	05fa0004 	.word	0x05fa0004

0800c2d4 <setup_freeRTOS>:
static uint8_t uartRxByte;

uint8_t spiRxBuffer[2];

void setup_freeRTOS(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af02      	add	r7, sp, #8
	spiQueue = xQueueCreate(10, sizeof(spiRxBuffer));
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2102      	movs	r1, #2
 800c2de:	200a      	movs	r0, #10
 800c2e0:	f004 f9e4 	bl	80106ac <xQueueGenericCreate>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	4a2f      	ldr	r2, [pc, #188]	@ (800c3a4 <setup_freeRTOS+0xd0>)
 800c2e8:	6013      	str	r3, [r2, #0]
	configASSERT(spiQueue != NULL);
 800c2ea:	4b2e      	ldr	r3, [pc, #184]	@ (800c3a4 <setup_freeRTOS+0xd0>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10b      	bne.n	800c30a <setup_freeRTOS+0x36>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800c304:	bf00      	nop
 800c306:	bf00      	nop
 800c308:	e7fd      	b.n	800c306 <setup_freeRTOS+0x32>

	HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 800c30a:	2202      	movs	r2, #2
 800c30c:	4926      	ldr	r1, [pc, #152]	@ (800c3a8 <setup_freeRTOS+0xd4>)
 800c30e:	4827      	ldr	r0, [pc, #156]	@ (800c3ac <setup_freeRTOS+0xd8>)
 800c310:	f002 f85a 	bl	800e3c8 <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800c314:	2201      	movs	r2, #1
 800c316:	4926      	ldr	r1, [pc, #152]	@ (800c3b0 <setup_freeRTOS+0xdc>)
 800c318:	4826      	ldr	r0, [pc, #152]	@ (800c3b4 <setup_freeRTOS+0xe0>)
 800c31a:	f003 f918 	bl	800f54e <HAL_UART_Receive_IT>


	status = xTaskCreate(SPI_handler, "SPIHandler", 512, NULL, 5, NULL);
 800c31e:	2300      	movs	r3, #0
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	2305      	movs	r3, #5
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	2300      	movs	r3, #0
 800c328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c32c:	4922      	ldr	r1, [pc, #136]	@ (800c3b8 <setup_freeRTOS+0xe4>)
 800c32e:	4823      	ldr	r0, [pc, #140]	@ (800c3bc <setup_freeRTOS+0xe8>)
 800c330:	f004 fe42 	bl	8010fb8 <xTaskCreate>
 800c334:	4603      	mov	r3, r0
 800c336:	4a22      	ldr	r2, [pc, #136]	@ (800c3c0 <setup_freeRTOS+0xec>)
 800c338:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800c33a:	4b21      	ldr	r3, [pc, #132]	@ (800c3c0 <setup_freeRTOS+0xec>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d00b      	beq.n	800c35a <setup_freeRTOS+0x86>
        __asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	60bb      	str	r3, [r7, #8]
    }
 800c354:	bf00      	nop
 800c356:	bf00      	nop
 800c358:	e7fd      	b.n	800c356 <setup_freeRTOS+0x82>

	status = xTaskCreate(UART_handler, "UARTHandler", 1024, NULL, 4, NULL);
 800c35a:	2300      	movs	r3, #0
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	2304      	movs	r3, #4
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	2300      	movs	r3, #0
 800c364:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c368:	4916      	ldr	r1, [pc, #88]	@ (800c3c4 <setup_freeRTOS+0xf0>)
 800c36a:	4817      	ldr	r0, [pc, #92]	@ (800c3c8 <setup_freeRTOS+0xf4>)
 800c36c:	f004 fe24 	bl	8010fb8 <xTaskCreate>
 800c370:	4603      	mov	r3, r0
 800c372:	4a13      	ldr	r2, [pc, #76]	@ (800c3c0 <setup_freeRTOS+0xec>)
 800c374:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800c376:	4b12      	ldr	r3, [pc, #72]	@ (800c3c0 <setup_freeRTOS+0xec>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d00b      	beq.n	800c396 <setup_freeRTOS+0xc2>
        __asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	607b      	str	r3, [r7, #4]
    }
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	e7fd      	b.n	800c392 <setup_freeRTOS+0xbe>

	vTaskStartScheduler();
 800c396:	f004 ff8b 	bl	80112b0 <vTaskStartScheduler>
}
 800c39a:	bf00      	nop
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000460 	.word	0x20000460
 800c3a8:	20000570 	.word	0x20000570
 800c3ac:	20000330 	.word	0x20000330
 800c3b0:	2000056c 	.word	0x2000056c
 800c3b4:	200003d0 	.word	0x200003d0
 800c3b8:	08016748 	.word	0x08016748
 800c3bc:	0800c3cd 	.word	0x0800c3cd
 800c3c0:	20000464 	.word	0x20000464
 800c3c4:	08016754 	.word	0x08016754
 800c3c8:	0800c799 	.word	0x0800c799

0800c3cc <SPI_handler>:

void SPI_handler(void *param)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08c      	sub	sp, #48	@ 0x30
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
    uint8_t localSpiRxBuffer[3] = {0};
 800c3d4:	f107 0308 	add.w	r3, r7, #8
 800c3d8:	2100      	movs	r1, #0
 800c3da:	460a      	mov	r2, r1
 800c3dc:	801a      	strh	r2, [r3, #0]
 800c3de:	460a      	mov	r2, r1
 800c3e0:	709a      	strb	r2, [r3, #2]
    uint8_t deviceState;
    GPIO_PinState state;

    while (1) {
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 800c3e2:	4bad      	ldr	r3, [pc, #692]	@ (800c698 <SPI_handler+0x2cc>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f107 0108 	add.w	r1, r7, #8
 800c3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f004 fb92 	bl	8010b18 <xQueueReceive>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d1f3      	bne.n	800c3e2 <SPI_handler+0x16>
        {
            printf("SPI Data Received: %s\n", localSpiRxBuffer);
 800c3fa:	f107 0308 	add.w	r3, r7, #8
 800c3fe:	4619      	mov	r1, r3
 800c400:	48a6      	ldr	r0, [pc, #664]	@ (800c69c <SPI_handler+0x2d0>)
 800c402:	f007 fbab 	bl	8013b5c <iprintf>
            if (strcmp((char *)localSpiRxBuffer, "L1") == 0)
 800c406:	f107 0308 	add.w	r3, r7, #8
 800c40a:	49a5      	ldr	r1, [pc, #660]	@ (800c6a0 <SPI_handler+0x2d4>)
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fb feff 	bl	8008210 <strcmp>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d156      	bne.n	800c4c6 <SPI_handler+0xfa>
            {
                HAL_GPIO_TogglePin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800c418:	2108      	movs	r1, #8
 800c41a:	48a2      	ldr	r0, [pc, #648]	@ (800c6a4 <SPI_handler+0x2d8>)
 800c41c:	f001 f807 	bl	800d42e <HAL_GPIO_TogglePin>
                state = HAL_GPIO_ReadPin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800c420:	2108      	movs	r1, #8
 800c422:	48a0      	ldr	r0, [pc, #640]	@ (800c6a4 <SPI_handler+0x2d8>)
 800c424:	f000 ffd2 	bl	800d3cc <HAL_GPIO_ReadPin>
 800c428:	4603      	mov	r3, r0
 800c42a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800c42e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c432:	2b01      	cmp	r3, #1
 800c434:	bf0c      	ite	eq
 800c436:	2301      	moveq	r3, #1
 800c438:	2300      	movne	r3, #0
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                if(deviceState == 1) print_To_display("Device 1 ON");
 800c440:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c444:	2b01      	cmp	r3, #1
 800c446:	d103      	bne.n	800c450 <SPI_handler+0x84>
 800c448:	4897      	ldr	r0, [pc, #604]	@ (800c6a8 <SPI_handler+0x2dc>)
 800c44a:	f7ff fa39 	bl	800b8c0 <print_To_display>
 800c44e:	e002      	b.n	800c456 <SPI_handler+0x8a>
                else print_To_display("Device 1 OFF");
 800c450:	4896      	ldr	r0, [pc, #600]	@ (800c6ac <SPI_handler+0x2e0>)
 800c452:	f7ff fa35 	bl	800b8c0 <print_To_display>

                cJSON *jsonObj = cJSON_CreateObject();
 800c456:	f7ff f903 	bl	800b660 <cJSON_CreateObject>
 800c45a:	6138      	str	r0, [r7, #16]
				if (jsonObj != NULL)
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 8183 	beq.w	800c76a <SPI_handler+0x39e>
				{
					cJSON_AddNumberToObject(jsonObj, "device1", deviceState);
 800c464:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fc f87b 	bl	8008564 <__aeabi_ui2d>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	ec43 2b10 	vmov	d0, r2, r3
 800c476:	498e      	ldr	r1, [pc, #568]	@ (800c6b0 <SPI_handler+0x2e4>)
 800c478:	6938      	ldr	r0, [r7, #16]
 800c47a:	f7ff f883 	bl	800b584 <cJSON_AddNumberToObject>
					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800c47e:	6938      	ldr	r0, [r7, #16]
 800c480:	f7fe fa2e 	bl	800a8e0 <cJSON_PrintUnformatted>
 800c484:	60f8      	str	r0, [r7, #12]
					if (jsonStr != NULL)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d018      	beq.n	800c4be <SPI_handler+0xf2>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f7fb fec9 	bl	8008224 <strlen>
 800c492:	4603      	mov	r3, r0
 800c494:	b29a      	uxth	r2, r3
 800c496:	f04f 33ff 	mov.w	r3, #4294967295
 800c49a:	68f9      	ldr	r1, [r7, #12]
 800c49c:	4885      	ldr	r0, [pc, #532]	@ (800c6b4 <SPI_handler+0x2e8>)
 800c49e:	f002 ffcb 	bl	800f438 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800c4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	4983      	ldr	r1, [pc, #524]	@ (800c6b8 <SPI_handler+0x2ec>)
 800c4aa:	4882      	ldr	r0, [pc, #520]	@ (800c6b4 <SPI_handler+0x2e8>)
 800c4ac:	f002 ffc4 	bl	800f438 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800c4b0:	68f9      	ldr	r1, [r7, #12]
 800c4b2:	4882      	ldr	r0, [pc, #520]	@ (800c6bc <SPI_handler+0x2f0>)
 800c4b4:	f007 fb52 	bl	8013b5c <iprintf>
						free(jsonStr);
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f006 fb93 	bl	8012be4 <free>
					}

					cJSON_Delete(jsonObj);
 800c4be:	6938      	ldr	r0, [r7, #16]
 800c4c0:	f7fd f960 	bl	8009784 <cJSON_Delete>
 800c4c4:	e151      	b.n	800c76a <SPI_handler+0x39e>
				}
            }
            else if(strcmp((char *)localSpiRxBuffer, "L2") == 0)
 800c4c6:	f107 0308 	add.w	r3, r7, #8
 800c4ca:	497d      	ldr	r1, [pc, #500]	@ (800c6c0 <SPI_handler+0x2f4>)
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fb fe9f 	bl	8008210 <strcmp>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d156      	bne.n	800c586 <SPI_handler+0x1ba>
            {
            	HAL_GPIO_TogglePin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 800c4d8:	2104      	movs	r1, #4
 800c4da:	4872      	ldr	r0, [pc, #456]	@ (800c6a4 <SPI_handler+0x2d8>)
 800c4dc:	f000 ffa7 	bl	800d42e <HAL_GPIO_TogglePin>
            	state = HAL_GPIO_ReadPin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 800c4e0:	2104      	movs	r1, #4
 800c4e2:	4870      	ldr	r0, [pc, #448]	@ (800c6a4 <SPI_handler+0x2d8>)
 800c4e4:	f000 ff72 	bl	800d3cc <HAL_GPIO_ReadPin>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800c4ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	bf0c      	ite	eq
 800c4f6:	2301      	moveq	r3, #1
 800c4f8:	2300      	movne	r3, #0
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				if(deviceState == 1) print_To_display("Device 2 ON");
 800c500:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c504:	2b01      	cmp	r3, #1
 800c506:	d103      	bne.n	800c510 <SPI_handler+0x144>
 800c508:	486e      	ldr	r0, [pc, #440]	@ (800c6c4 <SPI_handler+0x2f8>)
 800c50a:	f7ff f9d9 	bl	800b8c0 <print_To_display>
 800c50e:	e002      	b.n	800c516 <SPI_handler+0x14a>
				else print_To_display("Device 2 OFF");
 800c510:	486d      	ldr	r0, [pc, #436]	@ (800c6c8 <SPI_handler+0x2fc>)
 800c512:	f7ff f9d5 	bl	800b8c0 <print_To_display>

				cJSON *jsonObj = cJSON_CreateObject();
 800c516:	f7ff f8a3 	bl	800b660 <cJSON_CreateObject>
 800c51a:	61b8      	str	r0, [r7, #24]
				if (jsonObj != NULL)
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f000 8123 	beq.w	800c76a <SPI_handler+0x39e>
				{
					cJSON_AddNumberToObject(jsonObj, "device2", deviceState);
 800c524:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fc f81b 	bl	8008564 <__aeabi_ui2d>
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	ec43 2b10 	vmov	d0, r2, r3
 800c536:	4965      	ldr	r1, [pc, #404]	@ (800c6cc <SPI_handler+0x300>)
 800c538:	69b8      	ldr	r0, [r7, #24]
 800c53a:	f7ff f823 	bl	800b584 <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800c53e:	69b8      	ldr	r0, [r7, #24]
 800c540:	f7fe f9ce 	bl	800a8e0 <cJSON_PrintUnformatted>
 800c544:	6178      	str	r0, [r7, #20]
					if (jsonStr != NULL)
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d018      	beq.n	800c57e <SPI_handler+0x1b2>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800c54c:	6978      	ldr	r0, [r7, #20]
 800c54e:	f7fb fe69 	bl	8008224 <strlen>
 800c552:	4603      	mov	r3, r0
 800c554:	b29a      	uxth	r2, r3
 800c556:	f04f 33ff 	mov.w	r3, #4294967295
 800c55a:	6979      	ldr	r1, [r7, #20]
 800c55c:	4855      	ldr	r0, [pc, #340]	@ (800c6b4 <SPI_handler+0x2e8>)
 800c55e:	f002 ff6b 	bl	800f438 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800c562:	f04f 33ff 	mov.w	r3, #4294967295
 800c566:	2201      	movs	r2, #1
 800c568:	4953      	ldr	r1, [pc, #332]	@ (800c6b8 <SPI_handler+0x2ec>)
 800c56a:	4852      	ldr	r0, [pc, #328]	@ (800c6b4 <SPI_handler+0x2e8>)
 800c56c:	f002 ff64 	bl	800f438 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800c570:	6979      	ldr	r1, [r7, #20]
 800c572:	4852      	ldr	r0, [pc, #328]	@ (800c6bc <SPI_handler+0x2f0>)
 800c574:	f007 faf2 	bl	8013b5c <iprintf>
						free(jsonStr);
 800c578:	6978      	ldr	r0, [r7, #20]
 800c57a:	f006 fb33 	bl	8012be4 <free>
					}

					cJSON_Delete(jsonObj);
 800c57e:	69b8      	ldr	r0, [r7, #24]
 800c580:	f7fd f900 	bl	8009784 <cJSON_Delete>
 800c584:	e0f1      	b.n	800c76a <SPI_handler+0x39e>
				}
            }
            else if(strcmp((char *)localSpiRxBuffer, "L3") == 0)
 800c586:	f107 0308 	add.w	r3, r7, #8
 800c58a:	4951      	ldr	r1, [pc, #324]	@ (800c6d0 <SPI_handler+0x304>)
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fb fe3f 	bl	8008210 <strcmp>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d156      	bne.n	800c646 <SPI_handler+0x27a>
            {
				HAL_GPIO_TogglePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 800c598:	2102      	movs	r1, #2
 800c59a:	484e      	ldr	r0, [pc, #312]	@ (800c6d4 <SPI_handler+0x308>)
 800c59c:	f000 ff47 	bl	800d42e <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 800c5a0:	2102      	movs	r1, #2
 800c5a2:	484c      	ldr	r0, [pc, #304]	@ (800c6d4 <SPI_handler+0x308>)
 800c5a4:	f000 ff12 	bl	800d3cc <HAL_GPIO_ReadPin>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800c5ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	bf0c      	ite	eq
 800c5b6:	2301      	moveq	r3, #1
 800c5b8:	2300      	movne	r3, #0
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				if(deviceState == 1) print_To_display("Device 3 ON");
 800c5c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d103      	bne.n	800c5d0 <SPI_handler+0x204>
 800c5c8:	4843      	ldr	r0, [pc, #268]	@ (800c6d8 <SPI_handler+0x30c>)
 800c5ca:	f7ff f979 	bl	800b8c0 <print_To_display>
 800c5ce:	e002      	b.n	800c5d6 <SPI_handler+0x20a>
				else print_To_display("Device 3 OFF");
 800c5d0:	4842      	ldr	r0, [pc, #264]	@ (800c6dc <SPI_handler+0x310>)
 800c5d2:	f7ff f975 	bl	800b8c0 <print_To_display>

				cJSON *jsonObj = cJSON_CreateObject();
 800c5d6:	f7ff f843 	bl	800b660 <cJSON_CreateObject>
 800c5da:	6238      	str	r0, [r7, #32]
				if (jsonObj != NULL)
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f000 80c3 	beq.w	800c76a <SPI_handler+0x39e>
				{
					cJSON_AddNumberToObject(jsonObj, "device3", deviceState);
 800c5e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fb ffbb 	bl	8008564 <__aeabi_ui2d>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	ec43 2b10 	vmov	d0, r2, r3
 800c5f6:	493a      	ldr	r1, [pc, #232]	@ (800c6e0 <SPI_handler+0x314>)
 800c5f8:	6a38      	ldr	r0, [r7, #32]
 800c5fa:	f7fe ffc3 	bl	800b584 <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800c5fe:	6a38      	ldr	r0, [r7, #32]
 800c600:	f7fe f96e 	bl	800a8e0 <cJSON_PrintUnformatted>
 800c604:	61f8      	str	r0, [r7, #28]
					if (jsonStr != NULL)
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d018      	beq.n	800c63e <SPI_handler+0x272>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800c60c:	69f8      	ldr	r0, [r7, #28]
 800c60e:	f7fb fe09 	bl	8008224 <strlen>
 800c612:	4603      	mov	r3, r0
 800c614:	b29a      	uxth	r2, r3
 800c616:	f04f 33ff 	mov.w	r3, #4294967295
 800c61a:	69f9      	ldr	r1, [r7, #28]
 800c61c:	4825      	ldr	r0, [pc, #148]	@ (800c6b4 <SPI_handler+0x2e8>)
 800c61e:	f002 ff0b 	bl	800f438 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800c622:	f04f 33ff 	mov.w	r3, #4294967295
 800c626:	2201      	movs	r2, #1
 800c628:	4923      	ldr	r1, [pc, #140]	@ (800c6b8 <SPI_handler+0x2ec>)
 800c62a:	4822      	ldr	r0, [pc, #136]	@ (800c6b4 <SPI_handler+0x2e8>)
 800c62c:	f002 ff04 	bl	800f438 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800c630:	69f9      	ldr	r1, [r7, #28]
 800c632:	4822      	ldr	r0, [pc, #136]	@ (800c6bc <SPI_handler+0x2f0>)
 800c634:	f007 fa92 	bl	8013b5c <iprintf>
						free(jsonStr);
 800c638:	69f8      	ldr	r0, [r7, #28]
 800c63a:	f006 fad3 	bl	8012be4 <free>
					}

					cJSON_Delete(jsonObj);
 800c63e:	6a38      	ldr	r0, [r7, #32]
 800c640:	f7fd f8a0 	bl	8009784 <cJSON_Delete>
 800c644:	e091      	b.n	800c76a <SPI_handler+0x39e>
				}
			}
            else if(strcmp((char *)localSpiRxBuffer, "L4") == 0)
 800c646:	f107 0308 	add.w	r3, r7, #8
 800c64a:	4926      	ldr	r1, [pc, #152]	@ (800c6e4 <SPI_handler+0x318>)
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fb fddf 	bl	8008210 <strcmp>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	f040 8085 	bne.w	800c764 <SPI_handler+0x398>
            {
				HAL_GPIO_TogglePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 800c65a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c65e:	4822      	ldr	r0, [pc, #136]	@ (800c6e8 <SPI_handler+0x31c>)
 800c660:	f000 fee5 	bl	800d42e <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 800c664:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c668:	481f      	ldr	r0, [pc, #124]	@ (800c6e8 <SPI_handler+0x31c>)
 800c66a:	f000 feaf 	bl	800d3cc <HAL_GPIO_ReadPin>
 800c66e:	4603      	mov	r3, r0
 800c670:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800c674:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c678:	2b01      	cmp	r3, #1
 800c67a:	bf0c      	ite	eq
 800c67c:	2301      	moveq	r3, #1
 800c67e:	2300      	movne	r3, #0
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				if(deviceState == 1) print_To_display("Device 4 ON");
 800c686:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d130      	bne.n	800c6f0 <SPI_handler+0x324>
 800c68e:	4817      	ldr	r0, [pc, #92]	@ (800c6ec <SPI_handler+0x320>)
 800c690:	f7ff f916 	bl	800b8c0 <print_To_display>
 800c694:	e02f      	b.n	800c6f6 <SPI_handler+0x32a>
 800c696:	bf00      	nop
 800c698:	20000460 	.word	0x20000460
 800c69c:	08016760 	.word	0x08016760
 800c6a0:	08016778 	.word	0x08016778
 800c6a4:	40020800 	.word	0x40020800
 800c6a8:	0801677c 	.word	0x0801677c
 800c6ac:	08016788 	.word	0x08016788
 800c6b0:	08016798 	.word	0x08016798
 800c6b4:	200003d0 	.word	0x200003d0
 800c6b8:	080167a0 	.word	0x080167a0
 800c6bc:	080167a4 	.word	0x080167a4
 800c6c0:	080167bc 	.word	0x080167bc
 800c6c4:	080167c0 	.word	0x080167c0
 800c6c8:	080167cc 	.word	0x080167cc
 800c6cc:	080167dc 	.word	0x080167dc
 800c6d0:	080167e4 	.word	0x080167e4
 800c6d4:	40021c00 	.word	0x40021c00
 800c6d8:	080167e8 	.word	0x080167e8
 800c6dc:	080167f4 	.word	0x080167f4
 800c6e0:	08016804 	.word	0x08016804
 800c6e4:	0801680c 	.word	0x0801680c
 800c6e8:	40020400 	.word	0x40020400
 800c6ec:	08016810 	.word	0x08016810
				else print_To_display("Device 4 OFF");
 800c6f0:	4822      	ldr	r0, [pc, #136]	@ (800c77c <SPI_handler+0x3b0>)
 800c6f2:	f7ff f8e5 	bl	800b8c0 <print_To_display>

				cJSON *jsonObj = cJSON_CreateObject();
 800c6f6:	f7fe ffb3 	bl	800b660 <cJSON_CreateObject>
 800c6fa:	62b8      	str	r0, [r7, #40]	@ 0x28
				if (jsonObj != NULL)
 800c6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d033      	beq.n	800c76a <SPI_handler+0x39e>
				{
					cJSON_AddNumberToObject(jsonObj, "device4", deviceState);
 800c702:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c706:	4618      	mov	r0, r3
 800c708:	f7fb ff2c 	bl	8008564 <__aeabi_ui2d>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	ec43 2b10 	vmov	d0, r2, r3
 800c714:	491a      	ldr	r1, [pc, #104]	@ (800c780 <SPI_handler+0x3b4>)
 800c716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c718:	f7fe ff34 	bl	800b584 <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800c71c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c71e:	f7fe f8df 	bl	800a8e0 <cJSON_PrintUnformatted>
 800c722:	6278      	str	r0, [r7, #36]	@ 0x24
					if (jsonStr != NULL)
 800c724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c726:	2b00      	cmp	r3, #0
 800c728:	d018      	beq.n	800c75c <SPI_handler+0x390>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800c72a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c72c:	f7fb fd7a 	bl	8008224 <strlen>
 800c730:	4603      	mov	r3, r0
 800c732:	b29a      	uxth	r2, r3
 800c734:	f04f 33ff 	mov.w	r3, #4294967295
 800c738:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c73a:	4812      	ldr	r0, [pc, #72]	@ (800c784 <SPI_handler+0x3b8>)
 800c73c:	f002 fe7c 	bl	800f438 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800c740:	f04f 33ff 	mov.w	r3, #4294967295
 800c744:	2201      	movs	r2, #1
 800c746:	4910      	ldr	r1, [pc, #64]	@ (800c788 <SPI_handler+0x3bc>)
 800c748:	480e      	ldr	r0, [pc, #56]	@ (800c784 <SPI_handler+0x3b8>)
 800c74a:	f002 fe75 	bl	800f438 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800c74e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c750:	480e      	ldr	r0, [pc, #56]	@ (800c78c <SPI_handler+0x3c0>)
 800c752:	f007 fa03 	bl	8013b5c <iprintf>
						free(jsonStr);
 800c756:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c758:	f006 fa44 	bl	8012be4 <free>
					}

					cJSON_Delete(jsonObj);
 800c75c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c75e:	f7fd f811 	bl	8009784 <cJSON_Delete>
 800c762:	e002      	b.n	800c76a <SPI_handler+0x39e>
				}
			}
            else
            {
            	printf("junk data received on SPI\r\n");
 800c764:	480a      	ldr	r0, [pc, #40]	@ (800c790 <SPI_handler+0x3c4>)
 800c766:	f007 fa61 	bl	8013c2c <puts>
            }
            memset(localSpiRxBuffer, 0, sizeof(localSpiRxBuffer));
 800c76a:	f107 0308 	add.w	r3, r7, #8
 800c76e:	2203      	movs	r2, #3
 800c770:	2100      	movs	r1, #0
 800c772:	4618      	mov	r0, r3
 800c774:	f007 fbe0 	bl	8013f38 <memset>
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 800c778:	e633      	b.n	800c3e2 <SPI_handler+0x16>
 800c77a:	bf00      	nop
 800c77c:	0801681c 	.word	0x0801681c
 800c780:	0801682c 	.word	0x0801682c
 800c784:	200003d0 	.word	0x200003d0
 800c788:	080167a0 	.word	0x080167a0
 800c78c:	080167a4 	.word	0x080167a4
 800c790:	08016834 	.word	0x08016834
 800c794:	00000000 	.word	0x00000000

0800c798 <UART_handler>:
        }
    }
}

void UART_handler(void *param)
{
 800c798:	b590      	push	{r4, r7, lr}
 800c79a:	b0c5      	sub	sp, #276	@ 0x114
 800c79c:	af02      	add	r7, sp, #8
 800c79e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7a6:	6018      	str	r0, [r3, #0]
    uint8_t jsonBuffer[128];
    uint8_t index = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    bool collecting = false;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    while (1)
    {
        if (uartHead != uartTail)
 800c7b4:	4bcc      	ldr	r3, [pc, #816]	@ (800cae8 <UART_handler+0x350>)
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	4bcc      	ldr	r3, [pc, #816]	@ (800caec <UART_handler+0x354>)
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	f000 81de 	beq.w	800cb82 <UART_handler+0x3ea>
        {
            uint8_t byte = uartRingBuffer[uartTail];
 800c7c6:	4bc9      	ldr	r3, [pc, #804]	@ (800caec <UART_handler+0x354>)
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	4bc8      	ldr	r3, [pc, #800]	@ (800caf0 <UART_handler+0x358>)
 800c7d0:	5c9b      	ldrb	r3, [r3, r2]
 800c7d2:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
            uartTail = (uartTail + 1) % UART_RING_BUFFER_SIZE;
 800c7d6:	4bc5      	ldr	r3, [pc, #788]	@ (800caec <UART_handler+0x354>)
 800c7d8:	881b      	ldrh	r3, [r3, #0]
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	3301      	adds	r3, #1
 800c7de:	425a      	negs	r2, r3
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	b2d2      	uxtb	r2, r2
 800c7e4:	bf58      	it	pl
 800c7e6:	4253      	negpl	r3, r2
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	4bc0      	ldr	r3, [pc, #768]	@ (800caec <UART_handler+0x354>)
 800c7ec:	801a      	strh	r2, [r3, #0]

            if (byte == '{')
 800c7ee:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 800c7f2:	2b7b      	cmp	r3, #123	@ 0x7b
 800c7f4:	d112      	bne.n	800c81c <UART_handler+0x84>
            {
                collecting = true;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
                index = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
                jsonBuffer[index++] = byte;
 800c802:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c806:	1c5a      	adds	r2, r3, #1
 800c808:	f887 2107 	strb.w	r2, [r7, #263]	@ 0x107
 800c80c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c810:	443b      	add	r3, r7
 800c812:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 800c816:	f803 2cb4 	strb.w	r2, [r3, #-180]
 800c81a:	e7cb      	b.n	800c7b4 <UART_handler+0x1c>
            }
            else if (collecting)
 800c81c:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 81a7 	beq.w	800cb74 <UART_handler+0x3dc>
            {
                if (index < sizeof(jsonBuffer) - 1)
 800c826:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c82a:	2b7e      	cmp	r3, #126	@ 0x7e
 800c82c:	f200 819b 	bhi.w	800cb66 <UART_handler+0x3ce>
                {
                    jsonBuffer[index++] = byte;
 800c830:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	f887 2107 	strb.w	r2, [r7, #263]	@ 0x107
 800c83a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c83e:	443b      	add	r3, r7
 800c840:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 800c844:	f803 2cb4 	strb.w	r2, [r3, #-180]

                    if (byte == '}')
 800c848:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 800c84c:	2b7d      	cmp	r3, #125	@ 0x7d
 800c84e:	d1b1      	bne.n	800c7b4 <UART_handler+0x1c>
                    {
                        jsonBuffer[index] = '\0';
 800c850:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c854:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c858:	443b      	add	r3, r7
 800c85a:	2200      	movs	r2, #0
 800c85c:	f803 2cb4 	strb.w	r2, [r3, #-180]
                        printf("JSON received: %s\n", jsonBuffer);
 800c860:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c864:	4619      	mov	r1, r3
 800c866:	48a3      	ldr	r0, [pc, #652]	@ (800caf4 <UART_handler+0x35c>)
 800c868:	f007 f978 	bl	8013b5c <iprintf>

                        cJSON *json = cJSON_Parse((char *)jsonBuffer);
 800c86c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c870:	4618      	mov	r0, r3
 800c872:	f7fd ff9d 	bl	800a7b0 <cJSON_Parse>
 800c876:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
                        if (json)
 800c87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f000 8167 	beq.w	800cb52 <UART_handler+0x3ba>
                        {
                        	const char *devices[] = {"device1", "device2", "device3", "device4"};
 800c884:	4b9c      	ldr	r3, [pc, #624]	@ (800caf8 <UART_handler+0x360>)
 800c886:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800c88a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c88c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							GPIO_TypeDef* ports[] = {TOUCH_LED1_GPIO_Port, TOUCH_LED2_GPIO_Port, TOUCH_LED3_GPIO_Port, TOUCH_LED4_GPIO_Port};
 800c890:	4b9a      	ldr	r3, [pc, #616]	@ (800cafc <UART_handler+0x364>)
 800c892:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800c896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							uint16_t pins[] = {TOUCH_LED1_Pin, TOUCH_LED2_Pin, TOUCH_LED3_Pin, TOUCH_LED4_Pin};
 800c89c:	4a98      	ldr	r2, [pc, #608]	@ (800cb00 <UART_handler+0x368>)
 800c89e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c8a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8a6:	e883 0003 	stmia.w	r3, {r0, r1}

                        	cJSON *getCurrentStatus = cJSON_GetObjectItem(json, "request");
 800c8aa:	4996      	ldr	r1, [pc, #600]	@ (800cb04 <UART_handler+0x36c>)
 800c8ac:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800c8b0:	f7fe fdb2 	bl	800b418 <cJSON_GetObjectItem>
 800c8b4:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
                        	if(strcmp(getCurrentStatus->valuestring, "getCurrentStatus") == 0)
 800c8b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	4992      	ldr	r1, [pc, #584]	@ (800cb08 <UART_handler+0x370>)
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fb fca5 	bl	8008210 <strcmp>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d168      	bne.n	800c99e <UART_handler+0x206>
                        	{
                        		cJSON *resp = cJSON_CreateObject();
 800c8cc:	f7fe fec8 	bl	800b660 <cJSON_CreateObject>
 800c8d0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

								for (int i = 0; i < 4; i++)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c8da:	e035      	b.n	800c948 <UART_handler+0x1b0>
								{
									GPIO_PinState state = HAL_GPIO_ReadPin(ports[i], pins[i]);
 800c8dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c8e6:	443b      	add	r3, r7
 800c8e8:	f853 2cd4 	ldr.w	r2, [r3, #-212]
 800c8ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c8f6:	443b      	add	r3, r7
 800c8f8:	f833 3cdc 	ldrh.w	r3, [r3, #-220]
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	4610      	mov	r0, r2
 800c900:	f000 fd64 	bl	800d3cc <HAL_GPIO_ReadPin>
 800c904:	4603      	mov	r3, r0
 800c906:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
									cJSON_AddNumberToObject(resp, devices[i], (state == GPIO_PIN_SET) ? 1 : 0);
 800c90a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c914:	443b      	add	r3, r7
 800c916:	f853 2cc4 	ldr.w	r2, [r3, #-196]
 800c91a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d102      	bne.n	800c928 <UART_handler+0x190>
 800c922:	ed9f 7b6d 	vldr	d7, [pc, #436]	@ 800cad8 <UART_handler+0x340>
 800c926:	e001      	b.n	800c92c <UART_handler+0x194>
 800c928:	ed9f 7b6d 	vldr	d7, [pc, #436]	@ 800cae0 <UART_handler+0x348>
 800c92c:	eeb0 0a47 	vmov.f32	s0, s14
 800c930:	eef0 0a67 	vmov.f32	s1, s15
 800c934:	4611      	mov	r1, r2
 800c936:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800c93a:	f7fe fe23 	bl	800b584 <cJSON_AddNumberToObject>
								for (int i = 0; i < 4; i++)
 800c93e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c942:	3301      	adds	r3, #1
 800c944:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c948:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	ddc5      	ble.n	800c8dc <UART_handler+0x144>
								}

								char *respStr = cJSON_PrintUnformatted(resp);
 800c950:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800c954:	f7fd ffc4 	bl	800a8e0 <cJSON_PrintUnformatted>
 800c958:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
								if (respStr)
 800c95c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c960:	2b00      	cmp	r3, #0
 800c962:	d017      	beq.n	800c994 <UART_handler+0x1fc>
								{
									HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800c964:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800c968:	f7fb fc5c 	bl	8008224 <strlen>
 800c96c:	4603      	mov	r3, r0
 800c96e:	b29a      	uxth	r2, r3
 800c970:	f04f 33ff 	mov.w	r3, #4294967295
 800c974:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800c978:	4864      	ldr	r0, [pc, #400]	@ (800cb0c <UART_handler+0x374>)
 800c97a:	f002 fd5d 	bl	800f438 <HAL_UART_Transmit>
									HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800c97e:	f04f 33ff 	mov.w	r3, #4294967295
 800c982:	2201      	movs	r2, #1
 800c984:	4962      	ldr	r1, [pc, #392]	@ (800cb10 <UART_handler+0x378>)
 800c986:	4861      	ldr	r0, [pc, #388]	@ (800cb0c <UART_handler+0x374>)
 800c988:	f002 fd56 	bl	800f438 <HAL_UART_Transmit>
									free(respStr);
 800c98c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800c990:	f006 f928 	bl	8012be4 <free>
								}

								cJSON_Delete(resp);
 800c994:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800c998:	f7fc fef4 	bl	8009784 <cJSON_Delete>
 800c99c:	e0d4      	b.n	800cb48 <UART_handler+0x3b0>
                        	}
                        	else
                        	{
                        		for (int i = 0; i < 4; i++)
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c9a4:	e0cb      	b.n	800cb3e <UART_handler+0x3a6>
								{
									cJSON *item = cJSON_GetObjectItem(json, devices[i]);
 800c9a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c9b0:	443b      	add	r3, r7
 800c9b2:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800c9bc:	f7fe fd2c 	bl	800b418 <cJSON_GetObjectItem>
 800c9c0:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
									if (cJSON_IsNumber(item))
 800c9c4:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800c9c8:	f7fe fe5e 	bl	800b688 <cJSON_IsNumber>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 80b0 	beq.w	800cb34 <UART_handler+0x39c>
									{
										HAL_GPIO_WritePin(ports[i], pins[i], item->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800c9d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c9de:	443b      	add	r3, r7
 800c9e0:	f853 0cd4 	ldr.w	r0, [r3, #-212]
 800c9e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c9ee:	443b      	add	r3, r7
 800c9f0:	f833 1cdc 	ldrh.w	r1, [r3, #-220]
 800c9f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c9f8:	695b      	ldr	r3, [r3, #20]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	bf14      	ite	ne
 800c9fe:	2301      	movne	r3, #1
 800ca00:	2300      	moveq	r3, #0
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	461a      	mov	r2, r3
 800ca06:	f000 fcf9 	bl	800d3fc <HAL_GPIO_WritePin>
										GPIO_PinState state = HAL_GPIO_ReadPin(ports[i], pins[i]);
 800ca0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ca14:	443b      	add	r3, r7
 800ca16:	f853 2cd4 	ldr.w	r2, [r3, #-212]
 800ca1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ca24:	443b      	add	r3, r7
 800ca26:	f833 3cdc 	ldrh.w	r3, [r3, #-220]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	f000 fccd 	bl	800d3cc <HAL_GPIO_ReadPin>
 800ca32:	4603      	mov	r3, r0
 800ca34:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

										cJSON *resp = cJSON_CreateObject();
 800ca38:	f7fe fe12 	bl	800b660 <cJSON_CreateObject>
 800ca3c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
										cJSON_AddNumberToObject(resp, devices[i], (state == GPIO_PIN_SET) ? 1 : 0);
 800ca40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ca4a:	443b      	add	r3, r7
 800ca4c:	f853 2cc4 	ldr.w	r2, [r3, #-196]
 800ca50:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d102      	bne.n	800ca5e <UART_handler+0x2c6>
 800ca58:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800cad8 <UART_handler+0x340>
 800ca5c:	e001      	b.n	800ca62 <UART_handler+0x2ca>
 800ca5e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800cae0 <UART_handler+0x348>
 800ca62:	eeb0 0a47 	vmov.f32	s0, s14
 800ca66:	eef0 0a67 	vmov.f32	s1, s15
 800ca6a:	4611      	mov	r1, r2
 800ca6c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800ca70:	f7fe fd88 	bl	800b584 <cJSON_AddNumberToObject>
										char *respStr = cJSON_PrintUnformatted(resp);
 800ca74:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800ca78:	f7fd ff32 	bl	800a8e0 <cJSON_PrintUnformatted>
 800ca7c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
										if (respStr)
 800ca80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d017      	beq.n	800cab8 <UART_handler+0x320>
										{
											HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800ca88:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 800ca8c:	f7fb fbca 	bl	8008224 <strlen>
 800ca90:	4603      	mov	r3, r0
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	f04f 33ff 	mov.w	r3, #4294967295
 800ca98:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800ca9c:	481b      	ldr	r0, [pc, #108]	@ (800cb0c <UART_handler+0x374>)
 800ca9e:	f002 fccb 	bl	800f438 <HAL_UART_Transmit>
											HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800caa2:	f04f 33ff 	mov.w	r3, #4294967295
 800caa6:	2201      	movs	r2, #1
 800caa8:	4919      	ldr	r1, [pc, #100]	@ (800cb10 <UART_handler+0x378>)
 800caaa:	4818      	ldr	r0, [pc, #96]	@ (800cb0c <UART_handler+0x374>)
 800caac:	f002 fcc4 	bl	800f438 <HAL_UART_Transmit>
											free(respStr);
 800cab0:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 800cab4:	f006 f896 	bl	8012be4 <free>
										}
										cJSON_Delete(resp);
 800cab8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800cabc:	f7fc fe62 	bl	8009784 <cJSON_Delete>
										char displayMsg[32];
										snprintf(displayMsg, sizeof(displayMsg), "Device %d %s", i + 1, (state == GPIO_PIN_SET) ? "ON" : "OFF");
 800cac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d124      	bne.n	800cb18 <UART_handler+0x380>
 800cace:	4b11      	ldr	r3, [pc, #68]	@ (800cb14 <UART_handler+0x37c>)
 800cad0:	e023      	b.n	800cb1a <UART_handler+0x382>
 800cad2:	bf00      	nop
 800cad4:	f3af 8000 	nop.w
 800cad8:	00000000 	.word	0x00000000
 800cadc:	3ff00000 	.word	0x3ff00000
	...
 800cae8:	20000568 	.word	0x20000568
 800caec:	2000056a 	.word	0x2000056a
 800caf0:	20000468 	.word	0x20000468
 800caf4:	08016850 	.word	0x08016850
 800caf8:	080168a8 	.word	0x080168a8
 800cafc:	080168b8 	.word	0x080168b8
 800cb00:	080168c8 	.word	0x080168c8
 800cb04:	08016864 	.word	0x08016864
 800cb08:	0801686c 	.word	0x0801686c
 800cb0c:	200003d0 	.word	0x200003d0
 800cb10:	080167a0 	.word	0x080167a0
 800cb14:	08016880 	.word	0x08016880
 800cb18:	4b1c      	ldr	r3, [pc, #112]	@ (800cb8c <UART_handler+0x3f4>)
 800cb1a:	f107 000c 	add.w	r0, r7, #12
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	4613      	mov	r3, r2
 800cb22:	4a1b      	ldr	r2, [pc, #108]	@ (800cb90 <UART_handler+0x3f8>)
 800cb24:	2120      	movs	r1, #32
 800cb26:	f007 f889 	bl	8013c3c <sniprintf>
										print_To_display(displayMsg);
 800cb2a:	f107 030c 	add.w	r3, r7, #12
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fe fec6 	bl	800b8c0 <print_To_display>
                        		for (int i = 0; i < 4; i++)
 800cb34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cb3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	f77f af2f 	ble.w	800c9a6 <UART_handler+0x20e>
									}
								}
                        	}
                            cJSON_Delete(json);
 800cb48:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800cb4c:	f7fc fe1a 	bl	8009784 <cJSON_Delete>
 800cb50:	e002      	b.n	800cb58 <UART_handler+0x3c0>
                        }
                        else
                        {
                            printf("Invalid JSON!\n");
 800cb52:	4810      	ldr	r0, [pc, #64]	@ (800cb94 <UART_handler+0x3fc>)
 800cb54:	f007 f86a 	bl	8013c2c <puts>
                        }
                        collecting = false;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
                        index = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 800cb64:	e626      	b.n	800c7b4 <UART_handler+0x1c>
                    }
                }
                else
                {
                    collecting = false;
 800cb66:	2300      	movs	r3, #0
 800cb68:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
                    index = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 800cb72:	e61f      	b.n	800c7b4 <UART_handler+0x1c>
                }
            }
            else if (byte == BOOT_CMD)
 800cb74:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 800cb78:	2b50      	cmp	r3, #80	@ 0x50
 800cb7a:	f47f ae1b 	bne.w	800c7b4 <UART_handler+0x1c>
            {
                NVIC_SystemReset();
 800cb7e:	f7ff fb93 	bl	800c2a8 <__NVIC_SystemReset>
            }
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(5));
 800cb82:	2005      	movs	r0, #5
 800cb84:	f004 fb5e 	bl	8011244 <vTaskDelay>
        if (uartHead != uartTail)
 800cb88:	e614      	b.n	800c7b4 <UART_handler+0x1c>
 800cb8a:	bf00      	nop
 800cb8c:	08016884 	.word	0x08016884
 800cb90:	08016888 	.word	0x08016888
 800cb94:	08016898 	.word	0x08016898

0800cb98 <HAL_SPI_RxCpltCallback>:
    }
}


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a18      	ldr	r2, [pc, #96]	@ (800cc08 <HAL_SPI_RxCpltCallback+0x70>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d11e      	bne.n	800cbe8 <HAL_SPI_RxCpltCallback+0x50>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(spiQueue, spiRxBuffer, &xHigherPriorityTaskWoken);
 800cbae:	4b17      	ldr	r3, [pc, #92]	@ (800cc0c <HAL_SPI_RxCpltCallback+0x74>)
 800cbb0:	6818      	ldr	r0, [r3, #0]
 800cbb2:	f107 020c 	add.w	r2, r7, #12
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	4915      	ldr	r1, [pc, #84]	@ (800cc10 <HAL_SPI_RxCpltCallback+0x78>)
 800cbba:	f003 feff 	bl	80109bc <xQueueGenericSendFromISR>
        memset(spiRxBuffer, 0, sizeof(spiRxBuffer));
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	4813      	ldr	r0, [pc, #76]	@ (800cc10 <HAL_SPI_RxCpltCallback+0x78>)
 800cbc4:	f007 f9b8 	bl	8013f38 <memset>
        HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 800cbc8:	2202      	movs	r2, #2
 800cbca:	4911      	ldr	r1, [pc, #68]	@ (800cc10 <HAL_SPI_RxCpltCallback+0x78>)
 800cbcc:	4811      	ldr	r0, [pc, #68]	@ (800cc14 <HAL_SPI_RxCpltCallback+0x7c>)
 800cbce:	f001 fbfb 	bl	800e3c8 <HAL_SPI_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d007      	beq.n	800cbe8 <HAL_SPI_RxCpltCallback+0x50>
 800cbd8:	4b0f      	ldr	r3, [pc, #60]	@ (800cc18 <HAL_SPI_RxCpltCallback+0x80>)
 800cbda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	f3bf 8f6f 	isb	sy
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cbe8:	2300      	movs	r3, #0
 800cbea:	60bb      	str	r3, [r7, #8]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	60bb      	str	r3, [r7, #8]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	60bb      	str	r3, [r7, #8]
 800cbfc:	68bb      	ldr	r3, [r7, #8]
}
 800cbfe:	bf00      	nop
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	40003800 	.word	0x40003800
 800cc0c:	20000460 	.word	0x20000460
 800cc10:	20000570 	.word	0x20000570
 800cc14:	20000330 	.word	0x20000330
 800cc18:	e000ed04 	.word	0xe000ed04

0800cc1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a15      	ldr	r2, [pc, #84]	@ (800cc80 <HAL_UART_RxCpltCallback+0x64>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d123      	bne.n	800cc76 <HAL_UART_RxCpltCallback+0x5a>
        uint16_t nextHead = (uartHead + 1) % UART_RING_BUFFER_SIZE;
 800cc2e:	4b15      	ldr	r3, [pc, #84]	@ (800cc84 <HAL_UART_RxCpltCallback+0x68>)
 800cc30:	881b      	ldrh	r3, [r3, #0]
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	3301      	adds	r3, #1
 800cc36:	425a      	negs	r2, r3
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	b2d2      	uxtb	r2, r2
 800cc3c:	bf58      	it	pl
 800cc3e:	4253      	negpl	r3, r2
 800cc40:	81fb      	strh	r3, [r7, #14]

        if (nextHead != uartTail) {
 800cc42:	4b11      	ldr	r3, [pc, #68]	@ (800cc88 <HAL_UART_RxCpltCallback+0x6c>)
 800cc44:	881b      	ldrh	r3, [r3, #0]
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	89fa      	ldrh	r2, [r7, #14]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d00b      	beq.n	800cc66 <HAL_UART_RxCpltCallback+0x4a>
            uartRingBuffer[uartHead] = uartRxByte;
 800cc4e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc84 <HAL_UART_RxCpltCallback+0x68>)
 800cc50:	881b      	ldrh	r3, [r3, #0]
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	461a      	mov	r2, r3
 800cc56:	4b0d      	ldr	r3, [pc, #52]	@ (800cc8c <HAL_UART_RxCpltCallback+0x70>)
 800cc58:	7819      	ldrb	r1, [r3, #0]
 800cc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc90 <HAL_UART_RxCpltCallback+0x74>)
 800cc5c:	5499      	strb	r1, [r3, r2]
            uartHead = nextHead;
 800cc5e:	4a09      	ldr	r2, [pc, #36]	@ (800cc84 <HAL_UART_RxCpltCallback+0x68>)
 800cc60:	89fb      	ldrh	r3, [r7, #14]
 800cc62:	8013      	strh	r3, [r2, #0]
 800cc64:	e002      	b.n	800cc6c <HAL_UART_RxCpltCallback+0x50>
        } else {
            printf("UART ring buffer overflow!\n");
 800cc66:	480b      	ldr	r0, [pc, #44]	@ (800cc94 <HAL_UART_RxCpltCallback+0x78>)
 800cc68:	f006 ffe0 	bl	8013c2c <puts>
        }

        HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	4907      	ldr	r1, [pc, #28]	@ (800cc8c <HAL_UART_RxCpltCallback+0x70>)
 800cc70:	4809      	ldr	r0, [pc, #36]	@ (800cc98 <HAL_UART_RxCpltCallback+0x7c>)
 800cc72:	f002 fc6c 	bl	800f54e <HAL_UART_Receive_IT>
    }
}
 800cc76:	bf00      	nop
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	40004800 	.word	0x40004800
 800cc84:	20000568 	.word	0x20000568
 800cc88:	2000056a 	.word	0x2000056a
 800cc8c:	2000056c 	.word	0x2000056c
 800cc90:	20000468 	.word	0x20000468
 800cc94:	080168d0 	.word	0x080168d0
 800cc98:	200003d0 	.word	0x200003d0

0800cc9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800cc9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ccd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800cca0:	f7ff faec 	bl	800c27c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800cca4:	480c      	ldr	r0, [pc, #48]	@ (800ccd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800cca6:	490d      	ldr	r1, [pc, #52]	@ (800ccdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800cca8:	4a0d      	ldr	r2, [pc, #52]	@ (800cce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ccaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ccac:	e002      	b.n	800ccb4 <LoopCopyDataInit>

0800ccae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ccae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ccb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ccb2:	3304      	adds	r3, #4

0800ccb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ccb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ccb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ccb8:	d3f9      	bcc.n	800ccae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ccba:	4a0a      	ldr	r2, [pc, #40]	@ (800cce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ccbc:	4c0a      	ldr	r4, [pc, #40]	@ (800cce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ccbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ccc0:	e001      	b.n	800ccc6 <LoopFillZerobss>

0800ccc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ccc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ccc4:	3204      	adds	r2, #4

0800ccc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ccc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ccc8:	d3fb      	bcc.n	800ccc2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800ccca:	f007 f9bf 	bl	801404c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ccce:	f7fe fe23 	bl	800b918 <main>
  bx  lr    
 800ccd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ccd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ccd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ccdc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800cce0:	080174f8 	.word	0x080174f8
  ldr r2, =_sbss
 800cce4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800cce8:	20013470 	.word	0x20013470

0800ccec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ccec:	e7fe      	b.n	800ccec <ADC_IRQHandler>
	...

0800ccf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ccf4:	4b0e      	ldr	r3, [pc, #56]	@ (800cd30 <HAL_Init+0x40>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a0d      	ldr	r2, [pc, #52]	@ (800cd30 <HAL_Init+0x40>)
 800ccfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ccfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cd00:	4b0b      	ldr	r3, [pc, #44]	@ (800cd30 <HAL_Init+0x40>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a0a      	ldr	r2, [pc, #40]	@ (800cd30 <HAL_Init+0x40>)
 800cd06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cd0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cd0c:	4b08      	ldr	r3, [pc, #32]	@ (800cd30 <HAL_Init+0x40>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a07      	ldr	r2, [pc, #28]	@ (800cd30 <HAL_Init+0x40>)
 800cd12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cd18:	2003      	movs	r0, #3
 800cd1a:	f000 f8fc 	bl	800cf16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cd1e:	200f      	movs	r0, #15
 800cd20:	f7ff f96e 	bl	800c000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cd24:	f7fe fff8 	bl	800bd18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	40023c00 	.word	0x40023c00

0800cd34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cd34:	b480      	push	{r7}
 800cd36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cd38:	4b06      	ldr	r3, [pc, #24]	@ (800cd54 <HAL_IncTick+0x20>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	4b06      	ldr	r3, [pc, #24]	@ (800cd58 <HAL_IncTick+0x24>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4413      	add	r3, r2
 800cd44:	4a04      	ldr	r2, [pc, #16]	@ (800cd58 <HAL_IncTick+0x24>)
 800cd46:	6013      	str	r3, [r2, #0]
}
 800cd48:	bf00      	nop
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	2000001c 	.word	0x2000001c
 800cd58:	20000574 	.word	0x20000574

0800cd5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	af00      	add	r7, sp, #0
  return uwTick;
 800cd60:	4b03      	ldr	r3, [pc, #12]	@ (800cd70 <HAL_GetTick+0x14>)
 800cd62:	681b      	ldr	r3, [r3, #0]
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	20000574 	.word	0x20000574

0800cd74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cd7c:	f7ff ffee 	bl	800cd5c <HAL_GetTick>
 800cd80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8c:	d005      	beq.n	800cd9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cd8e:	4b0a      	ldr	r3, [pc, #40]	@ (800cdb8 <HAL_Delay+0x44>)
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	4413      	add	r3, r2
 800cd98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cd9a:	bf00      	nop
 800cd9c:	f7ff ffde 	bl	800cd5c <HAL_GetTick>
 800cda0:	4602      	mov	r2, r0
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d8f7      	bhi.n	800cd9c <HAL_Delay+0x28>
  {
  }
}
 800cdac:	bf00      	nop
 800cdae:	bf00      	nop
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	2000001c 	.word	0x2000001c

0800cdbc <__NVIC_SetPriorityGrouping>:
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f003 0307 	and.w	r3, r3, #7
 800cdca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cdcc:	4b0c      	ldr	r3, [pc, #48]	@ (800ce00 <__NVIC_SetPriorityGrouping+0x44>)
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800cdd8:	4013      	ands	r3, r2
 800cdda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cde4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800cde8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cdee:	4a04      	ldr	r2, [pc, #16]	@ (800ce00 <__NVIC_SetPriorityGrouping+0x44>)
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	60d3      	str	r3, [r2, #12]
}
 800cdf4:	bf00      	nop
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr
 800ce00:	e000ed00 	.word	0xe000ed00

0800ce04 <__NVIC_GetPriorityGrouping>:
{
 800ce04:	b480      	push	{r7}
 800ce06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ce08:	4b04      	ldr	r3, [pc, #16]	@ (800ce1c <__NVIC_GetPriorityGrouping+0x18>)
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	0a1b      	lsrs	r3, r3, #8
 800ce0e:	f003 0307 	and.w	r3, r3, #7
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	e000ed00 	.word	0xe000ed00

0800ce20 <__NVIC_EnableIRQ>:
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	db0b      	blt.n	800ce4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ce32:	79fb      	ldrb	r3, [r7, #7]
 800ce34:	f003 021f 	and.w	r2, r3, #31
 800ce38:	4907      	ldr	r1, [pc, #28]	@ (800ce58 <__NVIC_EnableIRQ+0x38>)
 800ce3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce3e:	095b      	lsrs	r3, r3, #5
 800ce40:	2001      	movs	r0, #1
 800ce42:	fa00 f202 	lsl.w	r2, r0, r2
 800ce46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ce4a:	bf00      	nop
 800ce4c:	370c      	adds	r7, #12
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	e000e100 	.word	0xe000e100

0800ce5c <__NVIC_SetPriority>:
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	4603      	mov	r3, r0
 800ce64:	6039      	str	r1, [r7, #0]
 800ce66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	db0a      	blt.n	800ce86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	490c      	ldr	r1, [pc, #48]	@ (800cea8 <__NVIC_SetPriority+0x4c>)
 800ce76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce7a:	0112      	lsls	r2, r2, #4
 800ce7c:	b2d2      	uxtb	r2, r2
 800ce7e:	440b      	add	r3, r1
 800ce80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ce84:	e00a      	b.n	800ce9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	4908      	ldr	r1, [pc, #32]	@ (800ceac <__NVIC_SetPriority+0x50>)
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	f003 030f 	and.w	r3, r3, #15
 800ce92:	3b04      	subs	r3, #4
 800ce94:	0112      	lsls	r2, r2, #4
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	440b      	add	r3, r1
 800ce9a:	761a      	strb	r2, [r3, #24]
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	e000e100 	.word	0xe000e100
 800ceac:	e000ed00 	.word	0xe000ed00

0800ceb0 <NVIC_EncodePriority>:
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b089      	sub	sp, #36	@ 0x24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f003 0307 	and.w	r3, r3, #7
 800cec2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	f1c3 0307 	rsb	r3, r3, #7
 800ceca:	2b04      	cmp	r3, #4
 800cecc:	bf28      	it	cs
 800cece:	2304      	movcs	r3, #4
 800ced0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	3304      	adds	r3, #4
 800ced6:	2b06      	cmp	r3, #6
 800ced8:	d902      	bls.n	800cee0 <NVIC_EncodePriority+0x30>
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	3b03      	subs	r3, #3
 800cede:	e000      	b.n	800cee2 <NVIC_EncodePriority+0x32>
 800cee0:	2300      	movs	r3, #0
 800cee2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cee4:	f04f 32ff 	mov.w	r2, #4294967295
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	fa02 f303 	lsl.w	r3, r2, r3
 800ceee:	43da      	mvns	r2, r3
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	401a      	ands	r2, r3
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cef8:	f04f 31ff 	mov.w	r1, #4294967295
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	fa01 f303 	lsl.w	r3, r1, r3
 800cf02:	43d9      	mvns	r1, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf08:	4313      	orrs	r3, r2
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3724      	adds	r7, #36	@ 0x24
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b082      	sub	sp, #8
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f7ff ff4c 	bl	800cdbc <__NVIC_SetPriorityGrouping>
}
 800cf24:	bf00      	nop
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	4603      	mov	r3, r0
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cf3e:	f7ff ff61 	bl	800ce04 <__NVIC_GetPriorityGrouping>
 800cf42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	68b9      	ldr	r1, [r7, #8]
 800cf48:	6978      	ldr	r0, [r7, #20]
 800cf4a:	f7ff ffb1 	bl	800ceb0 <NVIC_EncodePriority>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf54:	4611      	mov	r1, r2
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff ff80 	bl	800ce5c <__NVIC_SetPriority>
}
 800cf5c:	bf00      	nop
 800cf5e:	3718      	adds	r7, #24
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cf6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7ff ff54 	bl	800ce20 <__NVIC_EnableIRQ>
}
 800cf78:	bf00      	nop
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800cf8e:	f7ff fee5 	bl	800cd5c <HAL_GetTick>
 800cf92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d008      	beq.n	800cfb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2280      	movs	r2, #128	@ 0x80
 800cfa4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e052      	b.n	800d058 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f022 0216 	bic.w	r2, r2, #22
 800cfc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	695a      	ldr	r2, [r3, #20]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cfd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d103      	bne.n	800cfe2 <HAL_DMA_Abort+0x62>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d007      	beq.n	800cff2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f022 0208 	bic.w	r2, r2, #8
 800cff0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f022 0201 	bic.w	r2, r2, #1
 800d000:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d002:	e013      	b.n	800d02c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d004:	f7ff feaa 	bl	800cd5c <HAL_GetTick>
 800d008:	4602      	mov	r2, r0
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	2b05      	cmp	r3, #5
 800d010:	d90c      	bls.n	800d02c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2220      	movs	r2, #32
 800d016:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2203      	movs	r2, #3
 800d01c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e015      	b.n	800d058 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f003 0301 	and.w	r3, r3, #1
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1e4      	bne.n	800d004 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d03e:	223f      	movs	r2, #63	@ 0x3f
 800d040:	409a      	lsls	r2, r3
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b02      	cmp	r3, #2
 800d072:	d004      	beq.n	800d07e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2280      	movs	r2, #128	@ 0x80
 800d078:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e00c      	b.n	800d098 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2205      	movs	r2, #5
 800d082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f022 0201 	bic.w	r2, r2, #1
 800d094:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b089      	sub	sp, #36	@ 0x24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	61fb      	str	r3, [r7, #28]
 800d0be:	e165      	b.n	800d38c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	697a      	ldr	r2, [r7, #20]
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	f040 8154 	bne.w	800d386 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	f003 0303 	and.w	r3, r3, #3
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d005      	beq.n	800d0f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d130      	bne.n	800d158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	005b      	lsls	r3, r3, #1
 800d100:	2203      	movs	r2, #3
 800d102:	fa02 f303 	lsl.w	r3, r2, r3
 800d106:	43db      	mvns	r3, r3
 800d108:	69ba      	ldr	r2, [r7, #24]
 800d10a:	4013      	ands	r3, r2
 800d10c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	68da      	ldr	r2, [r3, #12]
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	fa02 f303 	lsl.w	r3, r2, r3
 800d11a:	69ba      	ldr	r2, [r7, #24]
 800d11c:	4313      	orrs	r3, r2
 800d11e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	69ba      	ldr	r2, [r7, #24]
 800d124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d12c:	2201      	movs	r2, #1
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	fa02 f303 	lsl.w	r3, r2, r3
 800d134:	43db      	mvns	r3, r3
 800d136:	69ba      	ldr	r2, [r7, #24]
 800d138:	4013      	ands	r3, r2
 800d13a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	091b      	lsrs	r3, r3, #4
 800d142:	f003 0201 	and.w	r2, r3, #1
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	fa02 f303 	lsl.w	r3, r2, r3
 800d14c:	69ba      	ldr	r2, [r7, #24]
 800d14e:	4313      	orrs	r3, r2
 800d150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	69ba      	ldr	r2, [r7, #24]
 800d156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	f003 0303 	and.w	r3, r3, #3
 800d160:	2b03      	cmp	r3, #3
 800d162:	d017      	beq.n	800d194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	2203      	movs	r2, #3
 800d170:	fa02 f303 	lsl.w	r3, r2, r3
 800d174:	43db      	mvns	r3, r3
 800d176:	69ba      	ldr	r2, [r7, #24]
 800d178:	4013      	ands	r3, r2
 800d17a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	689a      	ldr	r2, [r3, #8]
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	005b      	lsls	r3, r3, #1
 800d184:	fa02 f303 	lsl.w	r3, r2, r3
 800d188:	69ba      	ldr	r2, [r7, #24]
 800d18a:	4313      	orrs	r3, r2
 800d18c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	69ba      	ldr	r2, [r7, #24]
 800d192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	f003 0303 	and.w	r3, r3, #3
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d123      	bne.n	800d1e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	08da      	lsrs	r2, r3, #3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3208      	adds	r2, #8
 800d1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	f003 0307 	and.w	r3, r3, #7
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	220f      	movs	r2, #15
 800d1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1bc:	43db      	mvns	r3, r3
 800d1be:	69ba      	ldr	r2, [r7, #24]
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	691a      	ldr	r2, [r3, #16]
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	f003 0307 	and.w	r3, r3, #7
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d4:	69ba      	ldr	r2, [r7, #24]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	08da      	lsrs	r2, r3, #3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3208      	adds	r2, #8
 800d1e2:	69b9      	ldr	r1, [r7, #24]
 800d1e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	2203      	movs	r2, #3
 800d1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f8:	43db      	mvns	r3, r3
 800d1fa:	69ba      	ldr	r2, [r7, #24]
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	f003 0203 	and.w	r2, r3, #3
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	005b      	lsls	r3, r3, #1
 800d20c:	fa02 f303 	lsl.w	r3, r2, r3
 800d210:	69ba      	ldr	r2, [r7, #24]
 800d212:	4313      	orrs	r3, r2
 800d214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	69ba      	ldr	r2, [r7, #24]
 800d21a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 80ae 	beq.w	800d386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d22a:	2300      	movs	r3, #0
 800d22c:	60fb      	str	r3, [r7, #12]
 800d22e:	4b5d      	ldr	r3, [pc, #372]	@ (800d3a4 <HAL_GPIO_Init+0x300>)
 800d230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d232:	4a5c      	ldr	r2, [pc, #368]	@ (800d3a4 <HAL_GPIO_Init+0x300>)
 800d234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d238:	6453      	str	r3, [r2, #68]	@ 0x44
 800d23a:	4b5a      	ldr	r3, [pc, #360]	@ (800d3a4 <HAL_GPIO_Init+0x300>)
 800d23c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d23e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d242:	60fb      	str	r3, [r7, #12]
 800d244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d246:	4a58      	ldr	r2, [pc, #352]	@ (800d3a8 <HAL_GPIO_Init+0x304>)
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	089b      	lsrs	r3, r3, #2
 800d24c:	3302      	adds	r3, #2
 800d24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	f003 0303 	and.w	r3, r3, #3
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	220f      	movs	r2, #15
 800d25e:	fa02 f303 	lsl.w	r3, r2, r3
 800d262:	43db      	mvns	r3, r3
 800d264:	69ba      	ldr	r2, [r7, #24]
 800d266:	4013      	ands	r3, r2
 800d268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a4f      	ldr	r2, [pc, #316]	@ (800d3ac <HAL_GPIO_Init+0x308>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d025      	beq.n	800d2be <HAL_GPIO_Init+0x21a>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a4e      	ldr	r2, [pc, #312]	@ (800d3b0 <HAL_GPIO_Init+0x30c>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d01f      	beq.n	800d2ba <HAL_GPIO_Init+0x216>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4a4d      	ldr	r2, [pc, #308]	@ (800d3b4 <HAL_GPIO_Init+0x310>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d019      	beq.n	800d2b6 <HAL_GPIO_Init+0x212>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4a4c      	ldr	r2, [pc, #304]	@ (800d3b8 <HAL_GPIO_Init+0x314>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d013      	beq.n	800d2b2 <HAL_GPIO_Init+0x20e>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4a4b      	ldr	r2, [pc, #300]	@ (800d3bc <HAL_GPIO_Init+0x318>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d00d      	beq.n	800d2ae <HAL_GPIO_Init+0x20a>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a4a      	ldr	r2, [pc, #296]	@ (800d3c0 <HAL_GPIO_Init+0x31c>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d007      	beq.n	800d2aa <HAL_GPIO_Init+0x206>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a49      	ldr	r2, [pc, #292]	@ (800d3c4 <HAL_GPIO_Init+0x320>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d101      	bne.n	800d2a6 <HAL_GPIO_Init+0x202>
 800d2a2:	2306      	movs	r3, #6
 800d2a4:	e00c      	b.n	800d2c0 <HAL_GPIO_Init+0x21c>
 800d2a6:	2307      	movs	r3, #7
 800d2a8:	e00a      	b.n	800d2c0 <HAL_GPIO_Init+0x21c>
 800d2aa:	2305      	movs	r3, #5
 800d2ac:	e008      	b.n	800d2c0 <HAL_GPIO_Init+0x21c>
 800d2ae:	2304      	movs	r3, #4
 800d2b0:	e006      	b.n	800d2c0 <HAL_GPIO_Init+0x21c>
 800d2b2:	2303      	movs	r3, #3
 800d2b4:	e004      	b.n	800d2c0 <HAL_GPIO_Init+0x21c>
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	e002      	b.n	800d2c0 <HAL_GPIO_Init+0x21c>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e000      	b.n	800d2c0 <HAL_GPIO_Init+0x21c>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	69fa      	ldr	r2, [r7, #28]
 800d2c2:	f002 0203 	and.w	r2, r2, #3
 800d2c6:	0092      	lsls	r2, r2, #2
 800d2c8:	4093      	lsls	r3, r2
 800d2ca:	69ba      	ldr	r2, [r7, #24]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d2d0:	4935      	ldr	r1, [pc, #212]	@ (800d3a8 <HAL_GPIO_Init+0x304>)
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	089b      	lsrs	r3, r3, #2
 800d2d6:	3302      	adds	r3, #2
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d2de:	4b3a      	ldr	r3, [pc, #232]	@ (800d3c8 <HAL_GPIO_Init+0x324>)
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	43db      	mvns	r3, r3
 800d2e8:	69ba      	ldr	r2, [r7, #24]
 800d2ea:	4013      	ands	r3, r2
 800d2ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d003      	beq.n	800d302 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800d2fa:	69ba      	ldr	r2, [r7, #24]
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d302:	4a31      	ldr	r2, [pc, #196]	@ (800d3c8 <HAL_GPIO_Init+0x324>)
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d308:	4b2f      	ldr	r3, [pc, #188]	@ (800d3c8 <HAL_GPIO_Init+0x324>)
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	43db      	mvns	r3, r3
 800d312:	69ba      	ldr	r2, [r7, #24]
 800d314:	4013      	ands	r3, r2
 800d316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d320:	2b00      	cmp	r3, #0
 800d322:	d003      	beq.n	800d32c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800d324:	69ba      	ldr	r2, [r7, #24]
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	4313      	orrs	r3, r2
 800d32a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d32c:	4a26      	ldr	r2, [pc, #152]	@ (800d3c8 <HAL_GPIO_Init+0x324>)
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d332:	4b25      	ldr	r3, [pc, #148]	@ (800d3c8 <HAL_GPIO_Init+0x324>)
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	43db      	mvns	r3, r3
 800d33c:	69ba      	ldr	r2, [r7, #24]
 800d33e:	4013      	ands	r3, r2
 800d340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d003      	beq.n	800d356 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800d34e:	69ba      	ldr	r2, [r7, #24]
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	4313      	orrs	r3, r2
 800d354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d356:	4a1c      	ldr	r2, [pc, #112]	@ (800d3c8 <HAL_GPIO_Init+0x324>)
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d35c:	4b1a      	ldr	r3, [pc, #104]	@ (800d3c8 <HAL_GPIO_Init+0x324>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	43db      	mvns	r3, r3
 800d366:	69ba      	ldr	r2, [r7, #24]
 800d368:	4013      	ands	r3, r2
 800d36a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d378:	69ba      	ldr	r2, [r7, #24]
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d380:	4a11      	ldr	r2, [pc, #68]	@ (800d3c8 <HAL_GPIO_Init+0x324>)
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	3301      	adds	r3, #1
 800d38a:	61fb      	str	r3, [r7, #28]
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	2b0f      	cmp	r3, #15
 800d390:	f67f ae96 	bls.w	800d0c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop
 800d398:	3724      	adds	r7, #36	@ 0x24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	40023800 	.word	0x40023800
 800d3a8:	40013800 	.word	0x40013800
 800d3ac:	40020000 	.word	0x40020000
 800d3b0:	40020400 	.word	0x40020400
 800d3b4:	40020800 	.word	0x40020800
 800d3b8:	40020c00 	.word	0x40020c00
 800d3bc:	40021000 	.word	0x40021000
 800d3c0:	40021400 	.word	0x40021400
 800d3c4:	40021800 	.word	0x40021800
 800d3c8:	40013c00 	.word	0x40013c00

0800d3cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b085      	sub	sp, #20
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	691a      	ldr	r2, [r3, #16]
 800d3dc:	887b      	ldrh	r3, [r7, #2]
 800d3de:	4013      	ands	r3, r2
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d002      	beq.n	800d3ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	73fb      	strb	r3, [r7, #15]
 800d3e8:	e001      	b.n	800d3ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	807b      	strh	r3, [r7, #2]
 800d408:	4613      	mov	r3, r2
 800d40a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d40c:	787b      	ldrb	r3, [r7, #1]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d003      	beq.n	800d41a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d412:	887a      	ldrh	r2, [r7, #2]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d418:	e003      	b.n	800d422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d41a:	887b      	ldrh	r3, [r7, #2]
 800d41c:	041a      	lsls	r2, r3, #16
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	619a      	str	r2, [r3, #24]
}
 800d422:	bf00      	nop
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d42e:	b480      	push	{r7}
 800d430:	b085      	sub	sp, #20
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
 800d436:	460b      	mov	r3, r1
 800d438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	695b      	ldr	r3, [r3, #20]
 800d43e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d440:	887a      	ldrh	r2, [r7, #2]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	4013      	ands	r3, r2
 800d446:	041a      	lsls	r2, r3, #16
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	43d9      	mvns	r1, r3
 800d44c:	887b      	ldrh	r3, [r7, #2]
 800d44e:	400b      	ands	r3, r1
 800d450:	431a      	orrs	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	619a      	str	r2, [r3, #24]
}
 800d456:	bf00      	nop
 800d458:	3714      	adds	r7, #20
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
	...

0800d464 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800d46a:	2300      	movs	r3, #0
 800d46c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d46e:	2300      	movs	r3, #0
 800d470:	603b      	str	r3, [r7, #0]
 800d472:	4b20      	ldr	r3, [pc, #128]	@ (800d4f4 <HAL_PWREx_EnableOverDrive+0x90>)
 800d474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d476:	4a1f      	ldr	r2, [pc, #124]	@ (800d4f4 <HAL_PWREx_EnableOverDrive+0x90>)
 800d478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d47c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d47e:	4b1d      	ldr	r3, [pc, #116]	@ (800d4f4 <HAL_PWREx_EnableOverDrive+0x90>)
 800d480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d48a:	4b1b      	ldr	r3, [pc, #108]	@ (800d4f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800d48c:	2201      	movs	r2, #1
 800d48e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d490:	f7ff fc64 	bl	800cd5c <HAL_GetTick>
 800d494:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d496:	e009      	b.n	800d4ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d498:	f7ff fc60 	bl	800cd5c <HAL_GetTick>
 800d49c:	4602      	mov	r2, r0
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d4a6:	d901      	bls.n	800d4ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	e01f      	b.n	800d4ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d4ac:	4b13      	ldr	r3, [pc, #76]	@ (800d4fc <HAL_PWREx_EnableOverDrive+0x98>)
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d4b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4b8:	d1ee      	bne.n	800d498 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d4ba:	4b11      	ldr	r3, [pc, #68]	@ (800d500 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d4bc:	2201      	movs	r2, #1
 800d4be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d4c0:	f7ff fc4c 	bl	800cd5c <HAL_GetTick>
 800d4c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d4c6:	e009      	b.n	800d4dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d4c8:	f7ff fc48 	bl	800cd5c <HAL_GetTick>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d4d6:	d901      	bls.n	800d4dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	e007      	b.n	800d4ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d4dc:	4b07      	ldr	r3, [pc, #28]	@ (800d4fc <HAL_PWREx_EnableOverDrive+0x98>)
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4e8:	d1ee      	bne.n	800d4c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	40023800 	.word	0x40023800
 800d4f8:	420e0040 	.word	0x420e0040
 800d4fc:	40007000 	.word	0x40007000
 800d500:	420e0044 	.word	0x420e0044

0800d504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	e0cc      	b.n	800d6b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d518:	4b68      	ldr	r3, [pc, #416]	@ (800d6bc <HAL_RCC_ClockConfig+0x1b8>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 030f 	and.w	r3, r3, #15
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	429a      	cmp	r2, r3
 800d524:	d90c      	bls.n	800d540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d526:	4b65      	ldr	r3, [pc, #404]	@ (800d6bc <HAL_RCC_ClockConfig+0x1b8>)
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	b2d2      	uxtb	r2, r2
 800d52c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d52e:	4b63      	ldr	r3, [pc, #396]	@ (800d6bc <HAL_RCC_ClockConfig+0x1b8>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f003 030f 	and.w	r3, r3, #15
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d001      	beq.n	800d540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d53c:	2301      	movs	r3, #1
 800d53e:	e0b8      	b.n	800d6b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d020      	beq.n	800d58e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f003 0304 	and.w	r3, r3, #4
 800d554:	2b00      	cmp	r3, #0
 800d556:	d005      	beq.n	800d564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d558:	4b59      	ldr	r3, [pc, #356]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	4a58      	ldr	r2, [pc, #352]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d55e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800d562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f003 0308 	and.w	r3, r3, #8
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d005      	beq.n	800d57c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d570:	4b53      	ldr	r3, [pc, #332]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	4a52      	ldr	r2, [pc, #328]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800d57a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d57c:	4b50      	ldr	r3, [pc, #320]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	494d      	ldr	r1, [pc, #308]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d58a:	4313      	orrs	r3, r2
 800d58c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	2b00      	cmp	r3, #0
 800d598:	d044      	beq.n	800d624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d107      	bne.n	800d5b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d5a2:	4b47      	ldr	r3, [pc, #284]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d119      	bne.n	800d5e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e07f      	b.n	800d6b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d003      	beq.n	800d5c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d107      	bne.n	800d5d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5c2:	4b3f      	ldr	r3, [pc, #252]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d109      	bne.n	800d5e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e06f      	b.n	800d6b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d5d2:	4b3b      	ldr	r3, [pc, #236]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f003 0302 	and.w	r3, r3, #2
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d101      	bne.n	800d5e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e067      	b.n	800d6b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d5e2:	4b37      	ldr	r3, [pc, #220]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	f023 0203 	bic.w	r2, r3, #3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	4934      	ldr	r1, [pc, #208]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d5f4:	f7ff fbb2 	bl	800cd5c <HAL_GetTick>
 800d5f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5fa:	e00a      	b.n	800d612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5fc:	f7ff fbae 	bl	800cd5c <HAL_GetTick>
 800d600:	4602      	mov	r2, r0
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d901      	bls.n	800d612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d60e:	2303      	movs	r3, #3
 800d610:	e04f      	b.n	800d6b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d612:	4b2b      	ldr	r3, [pc, #172]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	f003 020c 	and.w	r2, r3, #12
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	429a      	cmp	r2, r3
 800d622:	d1eb      	bne.n	800d5fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d624:	4b25      	ldr	r3, [pc, #148]	@ (800d6bc <HAL_RCC_ClockConfig+0x1b8>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f003 030f 	and.w	r3, r3, #15
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d20c      	bcs.n	800d64c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d632:	4b22      	ldr	r3, [pc, #136]	@ (800d6bc <HAL_RCC_ClockConfig+0x1b8>)
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	b2d2      	uxtb	r2, r2
 800d638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d63a:	4b20      	ldr	r3, [pc, #128]	@ (800d6bc <HAL_RCC_ClockConfig+0x1b8>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f003 030f 	and.w	r3, r3, #15
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	429a      	cmp	r2, r3
 800d646:	d001      	beq.n	800d64c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d648:	2301      	movs	r3, #1
 800d64a:	e032      	b.n	800d6b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 0304 	and.w	r3, r3, #4
 800d654:	2b00      	cmp	r3, #0
 800d656:	d008      	beq.n	800d66a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d658:	4b19      	ldr	r3, [pc, #100]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d65a:	689b      	ldr	r3, [r3, #8]
 800d65c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	4916      	ldr	r1, [pc, #88]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d666:	4313      	orrs	r3, r2
 800d668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f003 0308 	and.w	r3, r3, #8
 800d672:	2b00      	cmp	r3, #0
 800d674:	d009      	beq.n	800d68a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d676:	4b12      	ldr	r3, [pc, #72]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	691b      	ldr	r3, [r3, #16]
 800d682:	00db      	lsls	r3, r3, #3
 800d684:	490e      	ldr	r1, [pc, #56]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d686:	4313      	orrs	r3, r2
 800d688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d68a:	f000 f887 	bl	800d79c <HAL_RCC_GetSysClockFreq>
 800d68e:	4602      	mov	r2, r0
 800d690:	4b0b      	ldr	r3, [pc, #44]	@ (800d6c0 <HAL_RCC_ClockConfig+0x1bc>)
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	091b      	lsrs	r3, r3, #4
 800d696:	f003 030f 	and.w	r3, r3, #15
 800d69a:	490a      	ldr	r1, [pc, #40]	@ (800d6c4 <HAL_RCC_ClockConfig+0x1c0>)
 800d69c:	5ccb      	ldrb	r3, [r1, r3]
 800d69e:	fa22 f303 	lsr.w	r3, r2, r3
 800d6a2:	4a09      	ldr	r2, [pc, #36]	@ (800d6c8 <HAL_RCC_ClockConfig+0x1c4>)
 800d6a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800d6a6:	4b09      	ldr	r3, [pc, #36]	@ (800d6cc <HAL_RCC_ClockConfig+0x1c8>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe fca8 	bl	800c000 <HAL_InitTick>

  return HAL_OK;
 800d6b0:	2300      	movs	r3, #0
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	40023c00 	.word	0x40023c00
 800d6c0:	40023800 	.word	0x40023800
 800d6c4:	080170f4 	.word	0x080170f4
 800d6c8:	20000014 	.word	0x20000014
 800d6cc:	20000018 	.word	0x20000018

0800d6d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d6d4:	4b03      	ldr	r3, [pc, #12]	@ (800d6e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	20000014 	.word	0x20000014

0800d6e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d6ec:	f7ff fff0 	bl	800d6d0 <HAL_RCC_GetHCLKFreq>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	4b05      	ldr	r3, [pc, #20]	@ (800d708 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	0a9b      	lsrs	r3, r3, #10
 800d6f8:	f003 0307 	and.w	r3, r3, #7
 800d6fc:	4903      	ldr	r1, [pc, #12]	@ (800d70c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d6fe:	5ccb      	ldrb	r3, [r1, r3]
 800d700:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d704:	4618      	mov	r0, r3
 800d706:	bd80      	pop	{r7, pc}
 800d708:	40023800 	.word	0x40023800
 800d70c:	08017104 	.word	0x08017104

0800d710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d714:	f7ff ffdc 	bl	800d6d0 <HAL_RCC_GetHCLKFreq>
 800d718:	4602      	mov	r2, r0
 800d71a:	4b05      	ldr	r3, [pc, #20]	@ (800d730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	0b5b      	lsrs	r3, r3, #13
 800d720:	f003 0307 	and.w	r3, r3, #7
 800d724:	4903      	ldr	r1, [pc, #12]	@ (800d734 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d726:	5ccb      	ldrb	r3, [r1, r3]
 800d728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	40023800 	.word	0x40023800
 800d734:	08017104 	.word	0x08017104

0800d738 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	220f      	movs	r2, #15
 800d746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d748:	4b12      	ldr	r3, [pc, #72]	@ (800d794 <HAL_RCC_GetClockConfig+0x5c>)
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	f003 0203 	and.w	r2, r3, #3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d754:	4b0f      	ldr	r3, [pc, #60]	@ (800d794 <HAL_RCC_GetClockConfig+0x5c>)
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d760:	4b0c      	ldr	r3, [pc, #48]	@ (800d794 <HAL_RCC_GetClockConfig+0x5c>)
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d76c:	4b09      	ldr	r3, [pc, #36]	@ (800d794 <HAL_RCC_GetClockConfig+0x5c>)
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	08db      	lsrs	r3, r3, #3
 800d772:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d77a:	4b07      	ldr	r3, [pc, #28]	@ (800d798 <HAL_RCC_GetClockConfig+0x60>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f003 020f 	and.w	r2, r3, #15
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	601a      	str	r2, [r3, #0]
}
 800d786:	bf00      	nop
 800d788:	370c      	adds	r7, #12
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	40023800 	.word	0x40023800
 800d798:	40023c00 	.word	0x40023c00

0800d79c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d79c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7a0:	b0a6      	sub	sp, #152	@ 0x98
 800d7a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d7c2:	4bc8      	ldr	r3, [pc, #800]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	f003 030c 	and.w	r3, r3, #12
 800d7ca:	2b0c      	cmp	r3, #12
 800d7cc:	f200 817e 	bhi.w	800dacc <HAL_RCC_GetSysClockFreq+0x330>
 800d7d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800d7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d6:	bf00      	nop
 800d7d8:	0800d80d 	.word	0x0800d80d
 800d7dc:	0800dacd 	.word	0x0800dacd
 800d7e0:	0800dacd 	.word	0x0800dacd
 800d7e4:	0800dacd 	.word	0x0800dacd
 800d7e8:	0800d815 	.word	0x0800d815
 800d7ec:	0800dacd 	.word	0x0800dacd
 800d7f0:	0800dacd 	.word	0x0800dacd
 800d7f4:	0800dacd 	.word	0x0800dacd
 800d7f8:	0800d81d 	.word	0x0800d81d
 800d7fc:	0800dacd 	.word	0x0800dacd
 800d800:	0800dacd 	.word	0x0800dacd
 800d804:	0800dacd 	.word	0x0800dacd
 800d808:	0800d987 	.word	0x0800d987
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d80c:	4bb6      	ldr	r3, [pc, #728]	@ (800dae8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800d80e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800d812:	e15f      	b.n	800dad4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d814:	4bb5      	ldr	r3, [pc, #724]	@ (800daec <HAL_RCC_GetSysClockFreq+0x350>)
 800d816:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800d81a:	e15b      	b.n	800dad4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d81c:	4bb1      	ldr	r3, [pc, #708]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d824:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d828:	4bae      	ldr	r3, [pc, #696]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d830:	2b00      	cmp	r3, #0
 800d832:	d031      	beq.n	800d898 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d834:	4bab      	ldr	r3, [pc, #684]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	099b      	lsrs	r3, r3, #6
 800d83a:	2200      	movs	r2, #0
 800d83c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d83e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d846:	663b      	str	r3, [r7, #96]	@ 0x60
 800d848:	2300      	movs	r3, #0
 800d84a:	667b      	str	r3, [r7, #100]	@ 0x64
 800d84c:	4ba7      	ldr	r3, [pc, #668]	@ (800daec <HAL_RCC_GetSysClockFreq+0x350>)
 800d84e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800d852:	462a      	mov	r2, r5
 800d854:	fb03 f202 	mul.w	r2, r3, r2
 800d858:	2300      	movs	r3, #0
 800d85a:	4621      	mov	r1, r4
 800d85c:	fb01 f303 	mul.w	r3, r1, r3
 800d860:	4413      	add	r3, r2
 800d862:	4aa2      	ldr	r2, [pc, #648]	@ (800daec <HAL_RCC_GetSysClockFreq+0x350>)
 800d864:	4621      	mov	r1, r4
 800d866:	fba1 1202 	umull	r1, r2, r1, r2
 800d86a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d86c:	460a      	mov	r2, r1
 800d86e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d870:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d872:	4413      	add	r3, r2
 800d874:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d87a:	2200      	movs	r2, #0
 800d87c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d87e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800d880:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d884:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800d888:	f7fb f9de 	bl	8008c48 <__aeabi_uldivmod>
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	4613      	mov	r3, r2
 800d892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d896:	e064      	b.n	800d962 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d898:	4b92      	ldr	r3, [pc, #584]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	099b      	lsrs	r3, r3, #6
 800d89e:	2200      	movs	r2, #0
 800d8a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8a2:	657a      	str	r2, [r7, #84]	@ 0x54
 800d8a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	f04f 0000 	mov.w	r0, #0
 800d8bc:	f04f 0100 	mov.w	r1, #0
 800d8c0:	0159      	lsls	r1, r3, #5
 800d8c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d8c6:	0150      	lsls	r0, r2, #5
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	1a51      	subs	r1, r2, r1
 800d8d0:	6139      	str	r1, [r7, #16]
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	eb63 0301 	sbc.w	r3, r3, r1
 800d8d8:	617b      	str	r3, [r7, #20]
 800d8da:	f04f 0200 	mov.w	r2, #0
 800d8de:	f04f 0300 	mov.w	r3, #0
 800d8e2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d8e6:	4659      	mov	r1, fp
 800d8e8:	018b      	lsls	r3, r1, #6
 800d8ea:	4651      	mov	r1, sl
 800d8ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d8f0:	4651      	mov	r1, sl
 800d8f2:	018a      	lsls	r2, r1, #6
 800d8f4:	4651      	mov	r1, sl
 800d8f6:	ebb2 0801 	subs.w	r8, r2, r1
 800d8fa:	4659      	mov	r1, fp
 800d8fc:	eb63 0901 	sbc.w	r9, r3, r1
 800d900:	f04f 0200 	mov.w	r2, #0
 800d904:	f04f 0300 	mov.w	r3, #0
 800d908:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d90c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d910:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d914:	4690      	mov	r8, r2
 800d916:	4699      	mov	r9, r3
 800d918:	4623      	mov	r3, r4
 800d91a:	eb18 0303 	adds.w	r3, r8, r3
 800d91e:	60bb      	str	r3, [r7, #8]
 800d920:	462b      	mov	r3, r5
 800d922:	eb49 0303 	adc.w	r3, r9, r3
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	f04f 0200 	mov.w	r2, #0
 800d92c:	f04f 0300 	mov.w	r3, #0
 800d930:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d934:	4629      	mov	r1, r5
 800d936:	028b      	lsls	r3, r1, #10
 800d938:	4621      	mov	r1, r4
 800d93a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d93e:	4621      	mov	r1, r4
 800d940:	028a      	lsls	r2, r1, #10
 800d942:	4610      	mov	r0, r2
 800d944:	4619      	mov	r1, r3
 800d946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d94a:	2200      	movs	r2, #0
 800d94c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d94e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d954:	f7fb f978 	bl	8008c48 <__aeabi_uldivmod>
 800d958:	4602      	mov	r2, r0
 800d95a:	460b      	mov	r3, r1
 800d95c:	4613      	mov	r3, r2
 800d95e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800d962:	4b60      	ldr	r3, [pc, #384]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	0c1b      	lsrs	r3, r3, #16
 800d968:	f003 0303 	and.w	r3, r3, #3
 800d96c:	3301      	adds	r3, #1
 800d96e:	005b      	lsls	r3, r3, #1
 800d970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800d974:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d97c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800d984:	e0a6      	b.n	800dad4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d986:	4b57      	ldr	r3, [pc, #348]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d98e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d992:	4b54      	ldr	r3, [pc, #336]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d02a      	beq.n	800d9f4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d99e:	4b51      	ldr	r3, [pc, #324]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	099b      	lsrs	r3, r3, #6
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d9a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	4b4e      	ldr	r3, [pc, #312]	@ (800daec <HAL_RCC_GetSysClockFreq+0x350>)
 800d9b4:	fb03 f201 	mul.w	r2, r3, r1
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	fb00 f303 	mul.w	r3, r0, r3
 800d9be:	4413      	add	r3, r2
 800d9c0:	4a4a      	ldr	r2, [pc, #296]	@ (800daec <HAL_RCC_GetSysClockFreq+0x350>)
 800d9c2:	fba0 1202 	umull	r1, r2, r0, r2
 800d9c6:	677a      	str	r2, [r7, #116]	@ 0x74
 800d9c8:	460a      	mov	r2, r1
 800d9ca:	673a      	str	r2, [r7, #112]	@ 0x70
 800d9cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d9ce:	4413      	add	r3, r2
 800d9d0:	677b      	str	r3, [r7, #116]	@ 0x74
 800d9d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9da:	637a      	str	r2, [r7, #52]	@ 0x34
 800d9dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d9e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800d9e4:	f7fb f930 	bl	8008c48 <__aeabi_uldivmod>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d9f2:	e05b      	b.n	800daac <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d9f4:	4b3b      	ldr	r3, [pc, #236]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	099b      	lsrs	r3, r3, #6
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da06:	623b      	str	r3, [r7, #32]
 800da08:	2300      	movs	r3, #0
 800da0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800da0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800da10:	4642      	mov	r2, r8
 800da12:	464b      	mov	r3, r9
 800da14:	f04f 0000 	mov.w	r0, #0
 800da18:	f04f 0100 	mov.w	r1, #0
 800da1c:	0159      	lsls	r1, r3, #5
 800da1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800da22:	0150      	lsls	r0, r2, #5
 800da24:	4602      	mov	r2, r0
 800da26:	460b      	mov	r3, r1
 800da28:	4641      	mov	r1, r8
 800da2a:	ebb2 0a01 	subs.w	sl, r2, r1
 800da2e:	4649      	mov	r1, r9
 800da30:	eb63 0b01 	sbc.w	fp, r3, r1
 800da34:	f04f 0200 	mov.w	r2, #0
 800da38:	f04f 0300 	mov.w	r3, #0
 800da3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800da40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800da44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800da48:	ebb2 040a 	subs.w	r4, r2, sl
 800da4c:	eb63 050b 	sbc.w	r5, r3, fp
 800da50:	f04f 0200 	mov.w	r2, #0
 800da54:	f04f 0300 	mov.w	r3, #0
 800da58:	00eb      	lsls	r3, r5, #3
 800da5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da5e:	00e2      	lsls	r2, r4, #3
 800da60:	4614      	mov	r4, r2
 800da62:	461d      	mov	r5, r3
 800da64:	4643      	mov	r3, r8
 800da66:	18e3      	adds	r3, r4, r3
 800da68:	603b      	str	r3, [r7, #0]
 800da6a:	464b      	mov	r3, r9
 800da6c:	eb45 0303 	adc.w	r3, r5, r3
 800da70:	607b      	str	r3, [r7, #4]
 800da72:	f04f 0200 	mov.w	r2, #0
 800da76:	f04f 0300 	mov.w	r3, #0
 800da7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800da7e:	4629      	mov	r1, r5
 800da80:	028b      	lsls	r3, r1, #10
 800da82:	4621      	mov	r1, r4
 800da84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800da88:	4621      	mov	r1, r4
 800da8a:	028a      	lsls	r2, r1, #10
 800da8c:	4610      	mov	r0, r2
 800da8e:	4619      	mov	r1, r3
 800da90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da94:	2200      	movs	r2, #0
 800da96:	61bb      	str	r3, [r7, #24]
 800da98:	61fa      	str	r2, [r7, #28]
 800da9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da9e:	f7fb f8d3 	bl	8008c48 <__aeabi_uldivmod>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	4613      	mov	r3, r2
 800daa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800daac:	4b0d      	ldr	r3, [pc, #52]	@ (800dae4 <HAL_RCC_GetSysClockFreq+0x348>)
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	0f1b      	lsrs	r3, r3, #28
 800dab2:	f003 0307 	and.w	r3, r3, #7
 800dab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800daba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dabe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800daca:	e003      	b.n	800dad4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dacc:	4b06      	ldr	r3, [pc, #24]	@ (800dae8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800dace:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800dad2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3798      	adds	r7, #152	@ 0x98
 800dadc:	46bd      	mov	sp, r7
 800dade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dae2:	bf00      	nop
 800dae4:	40023800 	.word	0x40023800
 800dae8:	00f42400 	.word	0x00f42400
 800daec:	017d7840 	.word	0x017d7840

0800daf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d101      	bne.n	800db02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e28d      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f003 0301 	and.w	r3, r3, #1
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	f000 8083 	beq.w	800dc16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800db10:	4b94      	ldr	r3, [pc, #592]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	f003 030c 	and.w	r3, r3, #12
 800db18:	2b04      	cmp	r3, #4
 800db1a:	d019      	beq.n	800db50 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800db1c:	4b91      	ldr	r3, [pc, #580]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db1e:	689b      	ldr	r3, [r3, #8]
 800db20:	f003 030c 	and.w	r3, r3, #12
        || \
 800db24:	2b08      	cmp	r3, #8
 800db26:	d106      	bne.n	800db36 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800db28:	4b8e      	ldr	r3, [pc, #568]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800db30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db34:	d00c      	beq.n	800db50 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800db36:	4b8b      	ldr	r3, [pc, #556]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800db3e:	2b0c      	cmp	r3, #12
 800db40:	d112      	bne.n	800db68 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800db42:	4b88      	ldr	r3, [pc, #544]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800db4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db4e:	d10b      	bne.n	800db68 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db50:	4b84      	ldr	r3, [pc, #528]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d05b      	beq.n	800dc14 <HAL_RCC_OscConfig+0x124>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d157      	bne.n	800dc14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800db64:	2301      	movs	r3, #1
 800db66:	e25a      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db70:	d106      	bne.n	800db80 <HAL_RCC_OscConfig+0x90>
 800db72:	4b7c      	ldr	r3, [pc, #496]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4a7b      	ldr	r2, [pc, #492]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db7c:	6013      	str	r3, [r2, #0]
 800db7e:	e01d      	b.n	800dbbc <HAL_RCC_OscConfig+0xcc>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800db88:	d10c      	bne.n	800dba4 <HAL_RCC_OscConfig+0xb4>
 800db8a:	4b76      	ldr	r3, [pc, #472]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a75      	ldr	r2, [pc, #468]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800db94:	6013      	str	r3, [r2, #0]
 800db96:	4b73      	ldr	r3, [pc, #460]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a72      	ldr	r2, [pc, #456]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800db9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dba0:	6013      	str	r3, [r2, #0]
 800dba2:	e00b      	b.n	800dbbc <HAL_RCC_OscConfig+0xcc>
 800dba4:	4b6f      	ldr	r3, [pc, #444]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a6e      	ldr	r2, [pc, #440]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dbaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dbae:	6013      	str	r3, [r2, #0]
 800dbb0:	4b6c      	ldr	r3, [pc, #432]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a6b      	ldr	r2, [pc, #428]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dbb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dbba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d013      	beq.n	800dbec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbc4:	f7ff f8ca 	bl	800cd5c <HAL_GetTick>
 800dbc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbca:	e008      	b.n	800dbde <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dbcc:	f7ff f8c6 	bl	800cd5c <HAL_GetTick>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	2b64      	cmp	r3, #100	@ 0x64
 800dbd8:	d901      	bls.n	800dbde <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800dbda:	2303      	movs	r3, #3
 800dbdc:	e21f      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbde:	4b61      	ldr	r3, [pc, #388]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0f0      	beq.n	800dbcc <HAL_RCC_OscConfig+0xdc>
 800dbea:	e014      	b.n	800dc16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbec:	f7ff f8b6 	bl	800cd5c <HAL_GetTick>
 800dbf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dbf2:	e008      	b.n	800dc06 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dbf4:	f7ff f8b2 	bl	800cd5c <HAL_GetTick>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	2b64      	cmp	r3, #100	@ 0x64
 800dc00:	d901      	bls.n	800dc06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800dc02:	2303      	movs	r3, #3
 800dc04:	e20b      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dc06:	4b57      	ldr	r3, [pc, #348]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1f0      	bne.n	800dbf4 <HAL_RCC_OscConfig+0x104>
 800dc12:	e000      	b.n	800dc16 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 0302 	and.w	r3, r3, #2
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d06f      	beq.n	800dd02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800dc22:	4b50      	ldr	r3, [pc, #320]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	f003 030c 	and.w	r3, r3, #12
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d017      	beq.n	800dc5e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800dc2e:	4b4d      	ldr	r3, [pc, #308]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	f003 030c 	and.w	r3, r3, #12
        || \
 800dc36:	2b08      	cmp	r3, #8
 800dc38:	d105      	bne.n	800dc46 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800dc3a:	4b4a      	ldr	r3, [pc, #296]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00b      	beq.n	800dc5e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dc46:	4b47      	ldr	r3, [pc, #284]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800dc4e:	2b0c      	cmp	r3, #12
 800dc50:	d11c      	bne.n	800dc8c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dc52:	4b44      	ldr	r3, [pc, #272]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d116      	bne.n	800dc8c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dc5e:	4b41      	ldr	r3, [pc, #260]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f003 0302 	and.w	r3, r3, #2
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d005      	beq.n	800dc76 <HAL_RCC_OscConfig+0x186>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d001      	beq.n	800dc76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e1d3      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc76:	4b3b      	ldr	r3, [pc, #236]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	00db      	lsls	r3, r3, #3
 800dc84:	4937      	ldr	r1, [pc, #220]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dc86:	4313      	orrs	r3, r2
 800dc88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dc8a:	e03a      	b.n	800dd02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d020      	beq.n	800dcd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dc94:	4b34      	ldr	r3, [pc, #208]	@ (800dd68 <HAL_RCC_OscConfig+0x278>)
 800dc96:	2201      	movs	r2, #1
 800dc98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc9a:	f7ff f85f 	bl	800cd5c <HAL_GetTick>
 800dc9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dca0:	e008      	b.n	800dcb4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dca2:	f7ff f85b 	bl	800cd5c <HAL_GetTick>
 800dca6:	4602      	mov	r2, r0
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d901      	bls.n	800dcb4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e1b4      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dcb4:	4b2b      	ldr	r3, [pc, #172]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f003 0302 	and.w	r3, r3, #2
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d0f0      	beq.n	800dca2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcc0:	4b28      	ldr	r3, [pc, #160]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	4925      	ldr	r1, [pc, #148]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	600b      	str	r3, [r1, #0]
 800dcd4:	e015      	b.n	800dd02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dcd6:	4b24      	ldr	r3, [pc, #144]	@ (800dd68 <HAL_RCC_OscConfig+0x278>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcdc:	f7ff f83e 	bl	800cd5c <HAL_GetTick>
 800dce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dce2:	e008      	b.n	800dcf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dce4:	f7ff f83a 	bl	800cd5c <HAL_GetTick>
 800dce8:	4602      	mov	r2, r0
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	1ad3      	subs	r3, r2, r3
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	d901      	bls.n	800dcf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	e193      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dcf6:	4b1b      	ldr	r3, [pc, #108]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f003 0302 	and.w	r3, r3, #2
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1f0      	bne.n	800dce4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f003 0308 	and.w	r3, r3, #8
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d036      	beq.n	800dd7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d016      	beq.n	800dd44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dd16:	4b15      	ldr	r3, [pc, #84]	@ (800dd6c <HAL_RCC_OscConfig+0x27c>)
 800dd18:	2201      	movs	r2, #1
 800dd1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd1c:	f7ff f81e 	bl	800cd5c <HAL_GetTick>
 800dd20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dd22:	e008      	b.n	800dd36 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dd24:	f7ff f81a 	bl	800cd5c <HAL_GetTick>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	1ad3      	subs	r3, r2, r3
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d901      	bls.n	800dd36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800dd32:	2303      	movs	r3, #3
 800dd34:	e173      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dd36:	4b0b      	ldr	r3, [pc, #44]	@ (800dd64 <HAL_RCC_OscConfig+0x274>)
 800dd38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd3a:	f003 0302 	and.w	r3, r3, #2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0f0      	beq.n	800dd24 <HAL_RCC_OscConfig+0x234>
 800dd42:	e01b      	b.n	800dd7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dd44:	4b09      	ldr	r3, [pc, #36]	@ (800dd6c <HAL_RCC_OscConfig+0x27c>)
 800dd46:	2200      	movs	r2, #0
 800dd48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd4a:	f7ff f807 	bl	800cd5c <HAL_GetTick>
 800dd4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dd50:	e00e      	b.n	800dd70 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dd52:	f7ff f803 	bl	800cd5c <HAL_GetTick>
 800dd56:	4602      	mov	r2, r0
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d907      	bls.n	800dd70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800dd60:	2303      	movs	r3, #3
 800dd62:	e15c      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
 800dd64:	40023800 	.word	0x40023800
 800dd68:	42470000 	.word	0x42470000
 800dd6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dd70:	4b8a      	ldr	r3, [pc, #552]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800dd72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd74:	f003 0302 	and.w	r3, r3, #2
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d1ea      	bne.n	800dd52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f003 0304 	and.w	r3, r3, #4
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f000 8097 	beq.w	800deb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dd8e:	4b83      	ldr	r3, [pc, #524]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800dd90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d10f      	bne.n	800ddba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	60bb      	str	r3, [r7, #8]
 800dd9e:	4b7f      	ldr	r3, [pc, #508]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800dda0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda2:	4a7e      	ldr	r2, [pc, #504]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800dda4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dda8:	6413      	str	r3, [r2, #64]	@ 0x40
 800ddaa:	4b7c      	ldr	r3, [pc, #496]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800ddac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ddb2:	60bb      	str	r3, [r7, #8]
 800ddb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ddba:	4b79      	ldr	r3, [pc, #484]	@ (800dfa0 <HAL_RCC_OscConfig+0x4b0>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d118      	bne.n	800ddf8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ddc6:	4b76      	ldr	r3, [pc, #472]	@ (800dfa0 <HAL_RCC_OscConfig+0x4b0>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a75      	ldr	r2, [pc, #468]	@ (800dfa0 <HAL_RCC_OscConfig+0x4b0>)
 800ddcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ddd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ddd2:	f7fe ffc3 	bl	800cd5c <HAL_GetTick>
 800ddd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ddd8:	e008      	b.n	800ddec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ddda:	f7fe ffbf 	bl	800cd5c <HAL_GetTick>
 800ddde:	4602      	mov	r2, r0
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	2b02      	cmp	r3, #2
 800dde6:	d901      	bls.n	800ddec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800dde8:	2303      	movs	r3, #3
 800ddea:	e118      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ddec:	4b6c      	ldr	r3, [pc, #432]	@ (800dfa0 <HAL_RCC_OscConfig+0x4b0>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d0f0      	beq.n	800ddda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d106      	bne.n	800de0e <HAL_RCC_OscConfig+0x31e>
 800de00:	4b66      	ldr	r3, [pc, #408]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de04:	4a65      	ldr	r2, [pc, #404]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de06:	f043 0301 	orr.w	r3, r3, #1
 800de0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800de0c:	e01c      	b.n	800de48 <HAL_RCC_OscConfig+0x358>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	2b05      	cmp	r3, #5
 800de14:	d10c      	bne.n	800de30 <HAL_RCC_OscConfig+0x340>
 800de16:	4b61      	ldr	r3, [pc, #388]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de1a:	4a60      	ldr	r2, [pc, #384]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de1c:	f043 0304 	orr.w	r3, r3, #4
 800de20:	6713      	str	r3, [r2, #112]	@ 0x70
 800de22:	4b5e      	ldr	r3, [pc, #376]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de26:	4a5d      	ldr	r2, [pc, #372]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de28:	f043 0301 	orr.w	r3, r3, #1
 800de2c:	6713      	str	r3, [r2, #112]	@ 0x70
 800de2e:	e00b      	b.n	800de48 <HAL_RCC_OscConfig+0x358>
 800de30:	4b5a      	ldr	r3, [pc, #360]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de34:	4a59      	ldr	r2, [pc, #356]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de36:	f023 0301 	bic.w	r3, r3, #1
 800de3a:	6713      	str	r3, [r2, #112]	@ 0x70
 800de3c:	4b57      	ldr	r3, [pc, #348]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de40:	4a56      	ldr	r2, [pc, #344]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de42:	f023 0304 	bic.w	r3, r3, #4
 800de46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d015      	beq.n	800de7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de50:	f7fe ff84 	bl	800cd5c <HAL_GetTick>
 800de54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de56:	e00a      	b.n	800de6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de58:	f7fe ff80 	bl	800cd5c <HAL_GetTick>
 800de5c:	4602      	mov	r2, r0
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de66:	4293      	cmp	r3, r2
 800de68:	d901      	bls.n	800de6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800de6a:	2303      	movs	r3, #3
 800de6c:	e0d7      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de6e:	4b4b      	ldr	r3, [pc, #300]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de72:	f003 0302 	and.w	r3, r3, #2
 800de76:	2b00      	cmp	r3, #0
 800de78:	d0ee      	beq.n	800de58 <HAL_RCC_OscConfig+0x368>
 800de7a:	e014      	b.n	800dea6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de7c:	f7fe ff6e 	bl	800cd5c <HAL_GetTick>
 800de80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800de82:	e00a      	b.n	800de9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de84:	f7fe ff6a 	bl	800cd5c <HAL_GetTick>
 800de88:	4602      	mov	r2, r0
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de92:	4293      	cmp	r3, r2
 800de94:	d901      	bls.n	800de9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800de96:	2303      	movs	r3, #3
 800de98:	e0c1      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800de9a:	4b40      	ldr	r3, [pc, #256]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800de9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de9e:	f003 0302 	and.w	r3, r3, #2
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1ee      	bne.n	800de84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d105      	bne.n	800deb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800deac:	4b3b      	ldr	r3, [pc, #236]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800deae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deb0:	4a3a      	ldr	r2, [pc, #232]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800deb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800deb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	699b      	ldr	r3, [r3, #24]
 800debc:	2b00      	cmp	r3, #0
 800debe:	f000 80ad 	beq.w	800e01c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dec2:	4b36      	ldr	r3, [pc, #216]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	f003 030c 	and.w	r3, r3, #12
 800deca:	2b08      	cmp	r3, #8
 800decc:	d060      	beq.n	800df90 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	699b      	ldr	r3, [r3, #24]
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d145      	bne.n	800df62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ded6:	4b33      	ldr	r3, [pc, #204]	@ (800dfa4 <HAL_RCC_OscConfig+0x4b4>)
 800ded8:	2200      	movs	r2, #0
 800deda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dedc:	f7fe ff3e 	bl	800cd5c <HAL_GetTick>
 800dee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dee2:	e008      	b.n	800def6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dee4:	f7fe ff3a 	bl	800cd5c <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	2b02      	cmp	r3, #2
 800def0:	d901      	bls.n	800def6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800def2:	2303      	movs	r3, #3
 800def4:	e093      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800def6:	4b29      	ldr	r3, [pc, #164]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1f0      	bne.n	800dee4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	69da      	ldr	r2, [r3, #28]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a1b      	ldr	r3, [r3, #32]
 800df0a:	431a      	orrs	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df10:	019b      	lsls	r3, r3, #6
 800df12:	431a      	orrs	r2, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df18:	085b      	lsrs	r3, r3, #1
 800df1a:	3b01      	subs	r3, #1
 800df1c:	041b      	lsls	r3, r3, #16
 800df1e:	431a      	orrs	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df24:	061b      	lsls	r3, r3, #24
 800df26:	431a      	orrs	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df2c:	071b      	lsls	r3, r3, #28
 800df2e:	491b      	ldr	r1, [pc, #108]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800df30:	4313      	orrs	r3, r2
 800df32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800df34:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa4 <HAL_RCC_OscConfig+0x4b4>)
 800df36:	2201      	movs	r2, #1
 800df38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df3a:	f7fe ff0f 	bl	800cd5c <HAL_GetTick>
 800df3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df40:	e008      	b.n	800df54 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df42:	f7fe ff0b 	bl	800cd5c <HAL_GetTick>
 800df46:	4602      	mov	r2, r0
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	1ad3      	subs	r3, r2, r3
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d901      	bls.n	800df54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800df50:	2303      	movs	r3, #3
 800df52:	e064      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df54:	4b11      	ldr	r3, [pc, #68]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d0f0      	beq.n	800df42 <HAL_RCC_OscConfig+0x452>
 800df60:	e05c      	b.n	800e01c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df62:	4b10      	ldr	r3, [pc, #64]	@ (800dfa4 <HAL_RCC_OscConfig+0x4b4>)
 800df64:	2200      	movs	r2, #0
 800df66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df68:	f7fe fef8 	bl	800cd5c <HAL_GetTick>
 800df6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df6e:	e008      	b.n	800df82 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df70:	f7fe fef4 	bl	800cd5c <HAL_GetTick>
 800df74:	4602      	mov	r2, r0
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d901      	bls.n	800df82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800df7e:	2303      	movs	r3, #3
 800df80:	e04d      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df82:	4b06      	ldr	r3, [pc, #24]	@ (800df9c <HAL_RCC_OscConfig+0x4ac>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d1f0      	bne.n	800df70 <HAL_RCC_OscConfig+0x480>
 800df8e:	e045      	b.n	800e01c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	699b      	ldr	r3, [r3, #24]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d107      	bne.n	800dfa8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e040      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
 800df9c:	40023800 	.word	0x40023800
 800dfa0:	40007000 	.word	0x40007000
 800dfa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dfa8:	4b1f      	ldr	r3, [pc, #124]	@ (800e028 <HAL_RCC_OscConfig+0x538>)
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	699b      	ldr	r3, [r3, #24]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d030      	beq.n	800e018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d129      	bne.n	800e018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d122      	bne.n	800e018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dfd2:	68fa      	ldr	r2, [r7, #12]
 800dfd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800dfd8:	4013      	ands	r3, r2
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800dfde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d119      	bne.n	800e018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfee:	085b      	lsrs	r3, r3, #1
 800dff0:	3b01      	subs	r3, #1
 800dff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d10f      	bne.n	800e018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e004:	429a      	cmp	r2, r3
 800e006:	d107      	bne.n	800e018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e012:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e014:	429a      	cmp	r2, r3
 800e016:	d001      	beq.n	800e01c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800e018:	2301      	movs	r3, #1
 800e01a:	e000      	b.n	800e01e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3718      	adds	r7, #24
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	40023800 	.word	0x40023800

0800e02c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d101      	bne.n	800e03e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e03a:	2301      	movs	r3, #1
 800e03c:	e07b      	b.n	800e136 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e042:	2b00      	cmp	r3, #0
 800e044:	d108      	bne.n	800e058 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e04e:	d009      	beq.n	800e064 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	61da      	str	r2, [r3, #28]
 800e056:	e005      	b.n	800e064 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2200      	movs	r2, #0
 800e062:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e070:	b2db      	uxtb	r3, r3
 800e072:	2b00      	cmp	r3, #0
 800e074:	d106      	bne.n	800e084 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7fd fe72 	bl	800bd68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2202      	movs	r2, #2
 800e088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e09a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e0ac:	431a      	orrs	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e0b6:	431a      	orrs	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	f003 0302 	and.w	r3, r3, #2
 800e0c0:	431a      	orrs	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	f003 0301 	and.w	r3, r3, #1
 800e0ca:	431a      	orrs	r2, r3
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e0d4:	431a      	orrs	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	69db      	ldr	r3, [r3, #28]
 800e0da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e0de:	431a      	orrs	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a1b      	ldr	r3, [r3, #32]
 800e0e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0e8:	ea42 0103 	orr.w	r1, r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	430a      	orrs	r2, r1
 800e0fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	699b      	ldr	r3, [r3, #24]
 800e100:	0c1b      	lsrs	r3, r3, #16
 800e102:	f003 0104 	and.w	r1, r3, #4
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e10a:	f003 0210 	and.w	r2, r3, #16
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	430a      	orrs	r2, r1
 800e114:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	69da      	ldr	r2, [r3, #28]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e124:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3708      	adds	r7, #8
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b088      	sub	sp, #32
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	60b9      	str	r1, [r7, #8]
 800e148:	603b      	str	r3, [r7, #0]
 800e14a:	4613      	mov	r3, r2
 800e14c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e14e:	f7fe fe05 	bl	800cd5c <HAL_GetTick>
 800e152:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800e154:	88fb      	ldrh	r3, [r7, #6]
 800e156:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	2b01      	cmp	r3, #1
 800e162:	d001      	beq.n	800e168 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800e164:	2302      	movs	r3, #2
 800e166:	e12a      	b.n	800e3be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <HAL_SPI_Transmit+0x36>
 800e16e:	88fb      	ldrh	r3, [r7, #6]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d101      	bne.n	800e178 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	e122      	b.n	800e3be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d101      	bne.n	800e186 <HAL_SPI_Transmit+0x48>
 800e182:	2302      	movs	r3, #2
 800e184:	e11b      	b.n	800e3be <HAL_SPI_Transmit+0x280>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2201      	movs	r2, #1
 800e18a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2203      	movs	r2, #3
 800e192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2200      	movs	r2, #0
 800e19a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	88fa      	ldrh	r2, [r7, #6]
 800e1a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	88fa      	ldrh	r2, [r7, #6]
 800e1ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1d4:	d10f      	bne.n	800e1f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e1e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e1f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e200:	2b40      	cmp	r3, #64	@ 0x40
 800e202:	d007      	beq.n	800e214 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e21c:	d152      	bne.n	800e2c4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d002      	beq.n	800e22c <HAL_SPI_Transmit+0xee>
 800e226:	8b7b      	ldrh	r3, [r7, #26]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d145      	bne.n	800e2b8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e230:	881a      	ldrh	r2, [r3, #0]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e23c:	1c9a      	adds	r2, r3, #2
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e246:	b29b      	uxth	r3, r3
 800e248:	3b01      	subs	r3, #1
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e250:	e032      	b.n	800e2b8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	f003 0302 	and.w	r3, r3, #2
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d112      	bne.n	800e286 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e264:	881a      	ldrh	r2, [r3, #0]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e270:	1c9a      	adds	r2, r3, #2
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	3b01      	subs	r3, #1
 800e27e:	b29a      	uxth	r2, r3
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	86da      	strh	r2, [r3, #54]	@ 0x36
 800e284:	e018      	b.n	800e2b8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e286:	f7fe fd69 	bl	800cd5c <HAL_GetTick>
 800e28a:	4602      	mov	r2, r0
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	683a      	ldr	r2, [r7, #0]
 800e292:	429a      	cmp	r2, r3
 800e294:	d803      	bhi.n	800e29e <HAL_SPI_Transmit+0x160>
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29c:	d102      	bne.n	800e2a4 <HAL_SPI_Transmit+0x166>
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d109      	bne.n	800e2b8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e2b4:	2303      	movs	r3, #3
 800e2b6:	e082      	b.n	800e3be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1c7      	bne.n	800e252 <HAL_SPI_Transmit+0x114>
 800e2c2:	e053      	b.n	800e36c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <HAL_SPI_Transmit+0x194>
 800e2cc:	8b7b      	ldrh	r3, [r7, #26]
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d147      	bne.n	800e362 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	330c      	adds	r3, #12
 800e2dc:	7812      	ldrb	r2, [r2, #0]
 800e2de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2e4:	1c5a      	adds	r2, r3, #1
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e2f8:	e033      	b.n	800e362 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	f003 0302 	and.w	r3, r3, #2
 800e304:	2b02      	cmp	r3, #2
 800e306:	d113      	bne.n	800e330 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	330c      	adds	r3, #12
 800e312:	7812      	ldrb	r2, [r2, #0]
 800e314:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e324:	b29b      	uxth	r3, r3
 800e326:	3b01      	subs	r3, #1
 800e328:	b29a      	uxth	r2, r3
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800e32e:	e018      	b.n	800e362 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e330:	f7fe fd14 	bl	800cd5c <HAL_GetTick>
 800e334:	4602      	mov	r2, r0
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	683a      	ldr	r2, [r7, #0]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d803      	bhi.n	800e348 <HAL_SPI_Transmit+0x20a>
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e346:	d102      	bne.n	800e34e <HAL_SPI_Transmit+0x210>
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d109      	bne.n	800e362 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2201      	movs	r2, #1
 800e352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2200      	movs	r2, #0
 800e35a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e35e:	2303      	movs	r3, #3
 800e360:	e02d      	b.n	800e3be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e366:	b29b      	uxth	r3, r3
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1c6      	bne.n	800e2fa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e36c:	69fa      	ldr	r2, [r7, #28]
 800e36e:	6839      	ldr	r1, [r7, #0]
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 fc6f 	bl	800ec54 <SPI_EndRxTxTransaction>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d002      	beq.n	800e382 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2220      	movs	r2, #32
 800e380:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10a      	bne.n	800e3a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e38a:	2300      	movs	r3, #0
 800e38c:	617b      	str	r3, [r7, #20]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	617b      	str	r3, [r7, #20]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	689b      	ldr	r3, [r3, #8]
 800e39c:	617b      	str	r3, [r7, #20]
 800e39e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e000      	b.n	800e3be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800e3bc:	2300      	movs	r3, #0
  }
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3720      	adds	r7, #32
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
	...

0800e3c8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d001      	beq.n	800e3e6 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800e3e2:	2302      	movs	r3, #2
 800e3e4:	e07f      	b.n	800e4e6 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d002      	beq.n	800e3f2 <HAL_SPI_Receive_IT+0x2a>
 800e3ec:	88fb      	ldrh	r3, [r7, #6]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d101      	bne.n	800e3f6 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e077      	b.n	800e4e6 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d110      	bne.n	800e420 <HAL_SPI_Receive_IT+0x58>
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e406:	d10b      	bne.n	800e420 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2204      	movs	r2, #4
 800e40c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800e410:	88fb      	ldrh	r3, [r7, #6]
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	68b9      	ldr	r1, [r7, #8]
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f000 f86e 	bl	800e4f8 <HAL_SPI_TransmitReceive_IT>
 800e41c:	4603      	mov	r3, r0
 800e41e:	e062      	b.n	800e4e6 <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e426:	2b01      	cmp	r3, #1
 800e428:	d101      	bne.n	800e42e <HAL_SPI_Receive_IT+0x66>
 800e42a:	2302      	movs	r3, #2
 800e42c:	e05b      	b.n	800e4e6 <HAL_SPI_Receive_IT+0x11e>
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2201      	movs	r2, #1
 800e432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2204      	movs	r2, #4
 800e43a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2200      	movs	r2, #0
 800e442:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	68ba      	ldr	r2, [r7, #8]
 800e448:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	88fa      	ldrh	r2, [r7, #6]
 800e44e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	88fa      	ldrh	r2, [r7, #6]
 800e454:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2200      	movs	r2, #0
 800e45a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2200      	movs	r2, #0
 800e46c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d003      	beq.n	800e47e <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	4a1d      	ldr	r2, [pc, #116]	@ (800e4f0 <HAL_SPI_Receive_IT+0x128>)
 800e47a:	641a      	str	r2, [r3, #64]	@ 0x40
 800e47c:	e002      	b.n	800e484 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	4a1c      	ldr	r2, [pc, #112]	@ (800e4f4 <HAL_SPI_Receive_IT+0x12c>)
 800e482:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e48c:	d10f      	bne.n	800e4ae <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e49c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e4ac:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4b8:	2b40      	cmp	r3, #64	@ 0x40
 800e4ba:	d007      	beq.n	800e4cc <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4ca:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	685a      	ldr	r2, [r3, #4]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800e4e2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e4e4:	2300      	movs	r3, #0
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	0800ea31 	.word	0x0800ea31
 800e4f4:	0800e9e7 	.word	0x0800e9e7

0800e4f8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b087      	sub	sp, #28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	607a      	str	r2, [r7, #4]
 800e504:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e50c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e514:	7dfb      	ldrb	r3, [r7, #23]
 800e516:	2b01      	cmp	r3, #1
 800e518:	d00c      	beq.n	800e534 <HAL_SPI_TransmitReceive_IT+0x3c>
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e520:	d106      	bne.n	800e530 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d102      	bne.n	800e530 <HAL_SPI_TransmitReceive_IT+0x38>
 800e52a:	7dfb      	ldrb	r3, [r7, #23]
 800e52c:	2b04      	cmp	r3, #4
 800e52e:	d001      	beq.n	800e534 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e530:	2302      	movs	r3, #2
 800e532:	e061      	b.n	800e5f8 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d005      	beq.n	800e546 <HAL_SPI_TransmitReceive_IT+0x4e>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <HAL_SPI_TransmitReceive_IT+0x4e>
 800e540:	887b      	ldrh	r3, [r7, #2]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d101      	bne.n	800e54a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800e546:	2301      	movs	r3, #1
 800e548:	e056      	b.n	800e5f8 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e550:	2b01      	cmp	r3, #1
 800e552:	d101      	bne.n	800e558 <HAL_SPI_TransmitReceive_IT+0x60>
 800e554:	2302      	movs	r3, #2
 800e556:	e04f      	b.n	800e5f8 <HAL_SPI_TransmitReceive_IT+0x100>
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e566:	b2db      	uxtb	r3, r3
 800e568:	2b04      	cmp	r3, #4
 800e56a:	d003      	beq.n	800e574 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2205      	movs	r2, #5
 800e570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2200      	movs	r2, #0
 800e578:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	887a      	ldrh	r2, [r7, #2]
 800e584:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	887a      	ldrh	r2, [r7, #2]
 800e58a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	887a      	ldrh	r2, [r7, #2]
 800e596:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	887a      	ldrh	r2, [r7, #2]
 800e59c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d006      	beq.n	800e5b4 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	4a16      	ldr	r2, [pc, #88]	@ (800e604 <HAL_SPI_TransmitReceive_IT+0x10c>)
 800e5aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	4a16      	ldr	r2, [pc, #88]	@ (800e608 <HAL_SPI_TransmitReceive_IT+0x110>)
 800e5b0:	645a      	str	r2, [r3, #68]	@ 0x44
 800e5b2:	e005      	b.n	800e5c0 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	4a15      	ldr	r2, [pc, #84]	@ (800e60c <HAL_SPI_TransmitReceive_IT+0x114>)
 800e5b8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	4a14      	ldr	r2, [pc, #80]	@ (800e610 <HAL_SPI_TransmitReceive_IT+0x118>)
 800e5be:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5ca:	2b40      	cmp	r3, #64	@ 0x40
 800e5cc:	d007      	beq.n	800e5de <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5dc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	685a      	ldr	r2, [r3, #4]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800e5f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	371c      	adds	r7, #28
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr
 800e604:	0800e929 	.word	0x0800e929
 800e608:	0800e989 	.word	0x0800e989
 800e60c:	0800e865 	.word	0x0800e865
 800e610:	0800e8c9 	.word	0x0800e8c9

0800e614 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b088      	sub	sp, #32
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	099b      	lsrs	r3, r3, #6
 800e630:	f003 0301 	and.w	r3, r3, #1
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10f      	bne.n	800e658 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d00a      	beq.n	800e658 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	099b      	lsrs	r3, r3, #6
 800e646:	f003 0301 	and.w	r3, r3, #1
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d004      	beq.n	800e658 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	4798      	blx	r3
    return;
 800e656:	e0d7      	b.n	800e808 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	085b      	lsrs	r3, r3, #1
 800e65c:	f003 0301 	and.w	r3, r3, #1
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00a      	beq.n	800e67a <HAL_SPI_IRQHandler+0x66>
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	09db      	lsrs	r3, r3, #7
 800e668:	f003 0301 	and.w	r3, r3, #1
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d004      	beq.n	800e67a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	4798      	blx	r3
    return;
 800e678:	e0c6      	b.n	800e808 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	095b      	lsrs	r3, r3, #5
 800e67e:	f003 0301 	and.w	r3, r3, #1
 800e682:	2b00      	cmp	r3, #0
 800e684:	d10c      	bne.n	800e6a0 <HAL_SPI_IRQHandler+0x8c>
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	099b      	lsrs	r3, r3, #6
 800e68a:	f003 0301 	and.w	r3, r3, #1
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d106      	bne.n	800e6a0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	0a1b      	lsrs	r3, r3, #8
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 80b4 	beq.w	800e808 <HAL_SPI_IRQHandler+0x1f4>
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	095b      	lsrs	r3, r3, #5
 800e6a4:	f003 0301 	and.w	r3, r3, #1
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f000 80ad 	beq.w	800e808 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	099b      	lsrs	r3, r3, #6
 800e6b2:	f003 0301 	and.w	r3, r3, #1
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d023      	beq.n	800e702 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d011      	beq.n	800e6ea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6ca:	f043 0204 	orr.w	r2, r3, #4
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	617b      	str	r3, [r7, #20]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	617b      	str	r3, [r7, #20]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	689b      	ldr	r3, [r3, #8]
 800e6e4:	617b      	str	r3, [r7, #20]
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	e00b      	b.n	800e702 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	613b      	str	r3, [r7, #16]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	613b      	str	r3, [r7, #16]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	613b      	str	r3, [r7, #16]
 800e6fe:	693b      	ldr	r3, [r7, #16]
        return;
 800e700:	e082      	b.n	800e808 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	095b      	lsrs	r3, r3, #5
 800e706:	f003 0301 	and.w	r3, r3, #1
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d014      	beq.n	800e738 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e712:	f043 0201 	orr.w	r2, r3, #1
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e71a:	2300      	movs	r3, #0
 800e71c:	60fb      	str	r3, [r7, #12]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	60fb      	str	r3, [r7, #12]
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e734:	601a      	str	r2, [r3, #0]
 800e736:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	0a1b      	lsrs	r3, r3, #8
 800e73c:	f003 0301 	and.w	r3, r3, #1
 800e740:	2b00      	cmp	r3, #0
 800e742:	d00c      	beq.n	800e75e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e748:	f043 0208 	orr.w	r2, r3, #8
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e750:	2300      	movs	r3, #0
 800e752:	60bb      	str	r3, [r7, #8]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	60bb      	str	r3, [r7, #8]
 800e75c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e762:	2b00      	cmp	r3, #0
 800e764:	d04f      	beq.n	800e806 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e774:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2201      	movs	r2, #1
 800e77a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	f003 0302 	and.w	r3, r3, #2
 800e784:	2b00      	cmp	r3, #0
 800e786:	d104      	bne.n	800e792 <HAL_SPI_IRQHandler+0x17e>
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d034      	beq.n	800e7fc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f022 0203 	bic.w	r2, r2, #3
 800e7a0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d011      	beq.n	800e7ce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7ae:	4a18      	ldr	r2, [pc, #96]	@ (800e810 <HAL_SPI_IRQHandler+0x1fc>)
 800e7b0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fe fc52 	bl	800d060 <HAL_DMA_Abort_IT>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d005      	beq.n	800e7ce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d016      	beq.n	800e804 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7da:	4a0d      	ldr	r2, [pc, #52]	@ (800e810 <HAL_SPI_IRQHandler+0x1fc>)
 800e7dc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe fc3c 	bl	800d060 <HAL_DMA_Abort_IT>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00a      	beq.n	800e804 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800e7fa:	e003      	b.n	800e804 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 f813 	bl	800e828 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e802:	e000      	b.n	800e806 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e804:	bf00      	nop
    return;
 800e806:	bf00      	nop
  }
}
 800e808:	3720      	adds	r7, #32
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	0800e83d 	.word	0x0800e83d

0800e814 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e81c:	bf00      	nop
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e830:	bf00      	nop
 800e832:	370c      	adds	r7, #12
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr

0800e83c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e848:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2200      	movs	r2, #0
 800e84e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f7ff ffe6 	bl	800e828 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e85c:	bf00      	nop
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f103 020c 	add.w	r2, r3, #12
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e878:	7812      	ldrb	r2, [r2, #0]
 800e87a:	b2d2      	uxtb	r2, r2
 800e87c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e882:	1c5a      	adds	r2, r3, #1
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	3b01      	subs	r3, #1
 800e890:	b29a      	uxth	r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d10f      	bne.n	800e8c0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	685a      	ldr	r2, [r3, #4]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e8ae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d102      	bne.n	800e8c0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f000 fa1e 	bl	800ecfc <SPI_CloseRxTx_ISR>
    }
  }
}
 800e8c0:	bf00      	nop
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	330c      	adds	r3, #12
 800e8da:	7812      	ldrb	r2, [r2, #0]
 800e8dc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8e2:	1c5a      	adds	r2, r3, #1
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10f      	bne.n	800e920 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e90e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e914:	b29b      	uxth	r3, r3
 800e916:	2b00      	cmp	r3, #0
 800e918:	d102      	bne.n	800e920 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 f9ee 	bl	800ecfc <SPI_CloseRxTx_ISR>
    }
  }
}
 800e920:	bf00      	nop
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	68da      	ldr	r2, [r3, #12]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e93a:	b292      	uxth	r2, r2
 800e93c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e942:	1c9a      	adds	r2, r3, #2
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	3b01      	subs	r3, #1
 800e950:	b29a      	uxth	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d10f      	bne.n	800e980 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	685a      	ldr	r2, [r3, #4]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e96e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e974:	b29b      	uxth	r3, r3
 800e976:	2b00      	cmp	r3, #0
 800e978:	d102      	bne.n	800e980 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 f9be 	bl	800ecfc <SPI_CloseRxTx_ISR>
    }
  }
}
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e994:	881a      	ldrh	r2, [r3, #0]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9a0:	1c9a      	adds	r2, r3, #2
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d10f      	bne.n	800e9de <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e9cc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d102      	bne.n	800e9de <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 f98f 	bl	800ecfc <SPI_CloseRxTx_ISR>
    }
  }
}
 800e9de:	bf00      	nop
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f103 020c 	add.w	r2, r3, #12
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9fa:	7812      	ldrb	r2, [r2, #0]
 800e9fc:	b2d2      	uxtb	r2, r2
 800e9fe:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea04:	1c5a      	adds	r2, r3, #1
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	3b01      	subs	r3, #1
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d102      	bne.n	800ea28 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 f9de 	bl	800ede4 <SPI_CloseRx_ISR>
  }
}
 800ea28:	bf00      	nop
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	68da      	ldr	r2, [r3, #12]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea42:	b292      	uxth	r2, r2
 800ea44:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea4a:	1c9a      	adds	r2, r3, #2
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	3b01      	subs	r3, #1
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d102      	bne.n	800ea6e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 f9bb 	bl	800ede4 <SPI_CloseRx_ISR>
  }
}
 800ea6e:	bf00      	nop
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
	...

0800ea78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b088      	sub	sp, #32
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	603b      	str	r3, [r7, #0]
 800ea84:	4613      	mov	r3, r2
 800ea86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ea88:	f7fe f968 	bl	800cd5c <HAL_GetTick>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea90:	1a9b      	subs	r3, r3, r2
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	4413      	add	r3, r2
 800ea96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ea98:	f7fe f960 	bl	800cd5c <HAL_GetTick>
 800ea9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ea9e:	4b39      	ldr	r3, [pc, #228]	@ (800eb84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	015b      	lsls	r3, r3, #5
 800eaa4:	0d1b      	lsrs	r3, r3, #20
 800eaa6:	69fa      	ldr	r2, [r7, #28]
 800eaa8:	fb02 f303 	mul.w	r3, r2, r3
 800eaac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eaae:	e055      	b.n	800eb5c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab6:	d051      	beq.n	800eb5c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eab8:	f7fe f950 	bl	800cd5c <HAL_GetTick>
 800eabc:	4602      	mov	r2, r0
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	69fa      	ldr	r2, [r7, #28]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d902      	bls.n	800eace <SPI_WaitFlagStateUntilTimeout+0x56>
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d13d      	bne.n	800eb4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	685a      	ldr	r2, [r3, #4]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800eadc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eae6:	d111      	bne.n	800eb0c <SPI_WaitFlagStateUntilTimeout+0x94>
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eaf0:	d004      	beq.n	800eafc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eafa:	d107      	bne.n	800eb0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb14:	d10f      	bne.n	800eb36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800eb24:	601a      	str	r2, [r3, #0]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800eb34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2201      	movs	r2, #1
 800eb3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800eb46:	2303      	movs	r3, #3
 800eb48:	e018      	b.n	800eb7c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d102      	bne.n	800eb56 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800eb50:	2300      	movs	r3, #0
 800eb52:	61fb      	str	r3, [r7, #28]
 800eb54:	e002      	b.n	800eb5c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	3b01      	subs	r3, #1
 800eb5a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	689a      	ldr	r2, [r3, #8]
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	4013      	ands	r3, r2
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	bf0c      	ite	eq
 800eb6c:	2301      	moveq	r3, #1
 800eb6e:	2300      	movne	r3, #0
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	461a      	mov	r2, r3
 800eb74:	79fb      	ldrb	r3, [r7, #7]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d19a      	bne.n	800eab0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3720      	adds	r7, #32
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	20000014 	.word	0x20000014

0800eb88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af02      	add	r7, sp, #8
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eb9c:	d111      	bne.n	800ebc2 <SPI_EndRxTransaction+0x3a>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eba6:	d004      	beq.n	800ebb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebb0:	d107      	bne.n	800ebc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ebc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ebca:	d12a      	bne.n	800ec22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebd4:	d012      	beq.n	800ebfc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	2180      	movs	r1, #128	@ 0x80
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f7ff ff49 	bl	800ea78 <SPI_WaitFlagStateUntilTimeout>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d02d      	beq.n	800ec48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebf0:	f043 0220 	orr.w	r2, r3, #32
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	e026      	b.n	800ec4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	9300      	str	r3, [sp, #0]
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	2200      	movs	r2, #0
 800ec04:	2101      	movs	r1, #1
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f7ff ff36 	bl	800ea78 <SPI_WaitFlagStateUntilTimeout>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d01a      	beq.n	800ec48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec16:	f043 0220 	orr.w	r2, r3, #32
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800ec1e:	2303      	movs	r3, #3
 800ec20:	e013      	b.n	800ec4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2101      	movs	r1, #1
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f7ff ff23 	bl	800ea78 <SPI_WaitFlagStateUntilTimeout>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d007      	beq.n	800ec48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec3c:	f043 0220 	orr.w	r2, r3, #32
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ec44:	2303      	movs	r3, #3
 800ec46:	e000      	b.n	800ec4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
	...

0800ec54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b088      	sub	sp, #32
 800ec58:	af02      	add	r7, sp, #8
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	9300      	str	r3, [sp, #0]
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	2201      	movs	r2, #1
 800ec68:	2102      	movs	r1, #2
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	f7ff ff04 	bl	800ea78 <SPI_WaitFlagStateUntilTimeout>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d007      	beq.n	800ec86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec7a:	f043 0220 	orr.w	r2, r3, #32
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ec82:	2303      	movs	r3, #3
 800ec84:	e032      	b.n	800ecec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ec86:	4b1b      	ldr	r3, [pc, #108]	@ (800ecf4 <SPI_EndRxTxTransaction+0xa0>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a1b      	ldr	r2, [pc, #108]	@ (800ecf8 <SPI_EndRxTxTransaction+0xa4>)
 800ec8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ec90:	0d5b      	lsrs	r3, r3, #21
 800ec92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ec96:	fb02 f303 	mul.w	r3, r2, r3
 800ec9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eca4:	d112      	bne.n	800eccc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	2200      	movs	r2, #0
 800ecae:	2180      	movs	r1, #128	@ 0x80
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7ff fee1 	bl	800ea78 <SPI_WaitFlagStateUntilTimeout>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d016      	beq.n	800ecea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecc0:	f043 0220 	orr.w	r2, r3, #32
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ecc8:	2303      	movs	r3, #3
 800ecca:	e00f      	b.n	800ecec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d00a      	beq.n	800ece8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ece2:	2b80      	cmp	r3, #128	@ 0x80
 800ece4:	d0f2      	beq.n	800eccc <SPI_EndRxTxTransaction+0x78>
 800ece6:	e000      	b.n	800ecea <SPI_EndRxTxTransaction+0x96>
        break;
 800ece8:	bf00      	nop
  }

  return HAL_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	20000014 	.word	0x20000014
 800ecf8:	165e9f81 	.word	0x165e9f81

0800ecfc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b086      	sub	sp, #24
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ed04:	4b35      	ldr	r3, [pc, #212]	@ (800eddc <SPI_CloseRxTx_ISR+0xe0>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a35      	ldr	r2, [pc, #212]	@ (800ede0 <SPI_CloseRxTx_ISR+0xe4>)
 800ed0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed0e:	0a5b      	lsrs	r3, r3, #9
 800ed10:	2264      	movs	r2, #100	@ 0x64
 800ed12:	fb02 f303 	mul.w	r3, r2, r3
 800ed16:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed18:	f7fe f820 	bl	800cd5c <HAL_GetTick>
 800ed1c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	685a      	ldr	r2, [r3, #4]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f022 0220 	bic.w	r2, r2, #32
 800ed2c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d106      	bne.n	800ed42 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed38:	f043 0220 	orr.w	r2, r3, #32
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ed40:	e009      	b.n	800ed56 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	3b01      	subs	r3, #1
 800ed46:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	f003 0302 	and.w	r3, r3, #2
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d0eb      	beq.n	800ed2e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ed56:	697a      	ldr	r2, [r7, #20]
 800ed58:	2164      	movs	r1, #100	@ 0x64
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7ff ff7a 	bl	800ec54 <SPI_EndRxTxTransaction>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d005      	beq.n	800ed72 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed6a:	f043 0220 	orr.w	r2, r3, #32
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10a      	bne.n	800ed90 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	60fb      	str	r3, [r7, #12]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	68db      	ldr	r3, [r3, #12]
 800ed84:	60fb      	str	r3, [r7, #12]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	60fb      	str	r3, [r7, #12]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d115      	bne.n	800edc4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b04      	cmp	r3, #4
 800eda2:	d107      	bne.n	800edb4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7fd fef3 	bl	800cb98 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800edb2:	e00e      	b.n	800edd2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7ff fd29 	bl	800e814 <HAL_SPI_TxRxCpltCallback>
}
 800edc2:	e006      	b.n	800edd2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7ff fd2b 	bl	800e828 <HAL_SPI_ErrorCallback>
}
 800edd2:	bf00      	nop
 800edd4:	3718      	adds	r7, #24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20000014 	.word	0x20000014
 800ede0:	057619f1 	.word	0x057619f1

0800ede4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800edfa:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800edfc:	f7fd ffae 	bl	800cd5c <HAL_GetTick>
 800ee00:	4603      	mov	r3, r0
 800ee02:	461a      	mov	r2, r3
 800ee04:	2164      	movs	r1, #100	@ 0x64
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f7ff febe 	bl	800eb88 <SPI_EndRxTransaction>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d005      	beq.n	800ee1e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee16:	f043 0220 	orr.w	r2, r3, #32
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10a      	bne.n	800ee3c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee26:	2300      	movs	r3, #0
 800ee28:	60fb      	str	r3, [r7, #12]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	60fb      	str	r3, [r7, #12]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d103      	bne.n	800ee54 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7fd fea3 	bl	800cb98 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ee52:	e002      	b.n	800ee5a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f7ff fce7 	bl	800e828 <HAL_SPI_ErrorCallback>
}
 800ee5a:	bf00      	nop
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b082      	sub	sp, #8
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d101      	bne.n	800ee74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	e041      	b.n	800eef8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d106      	bne.n	800ee8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 f839 	bl	800ef00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2202      	movs	r2, #2
 800ee92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	3304      	adds	r3, #4
 800ee9e:	4619      	mov	r1, r3
 800eea0:	4610      	mov	r0, r2
 800eea2:	f000 f9bf 	bl	800f224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2201      	movs	r2, #1
 800eec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2201      	movs	r2, #1
 800eed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2201      	movs	r2, #1
 800eeda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2201      	movs	r2, #1
 800eef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ef08:	bf00      	nop
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d001      	beq.n	800ef2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e04e      	b.n	800efca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2202      	movs	r2, #2
 800ef30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68da      	ldr	r2, [r3, #12]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f042 0201 	orr.w	r2, r2, #1
 800ef42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4a23      	ldr	r2, [pc, #140]	@ (800efd8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d022      	beq.n	800ef94 <HAL_TIM_Base_Start_IT+0x80>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef56:	d01d      	beq.n	800ef94 <HAL_TIM_Base_Start_IT+0x80>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a1f      	ldr	r2, [pc, #124]	@ (800efdc <HAL_TIM_Base_Start_IT+0xc8>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d018      	beq.n	800ef94 <HAL_TIM_Base_Start_IT+0x80>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a1e      	ldr	r2, [pc, #120]	@ (800efe0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d013      	beq.n	800ef94 <HAL_TIM_Base_Start_IT+0x80>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a1c      	ldr	r2, [pc, #112]	@ (800efe4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d00e      	beq.n	800ef94 <HAL_TIM_Base_Start_IT+0x80>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a1b      	ldr	r2, [pc, #108]	@ (800efe8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d009      	beq.n	800ef94 <HAL_TIM_Base_Start_IT+0x80>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a19      	ldr	r2, [pc, #100]	@ (800efec <HAL_TIM_Base_Start_IT+0xd8>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d004      	beq.n	800ef94 <HAL_TIM_Base_Start_IT+0x80>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4a18      	ldr	r2, [pc, #96]	@ (800eff0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d111      	bne.n	800efb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	f003 0307 	and.w	r3, r3, #7
 800ef9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2b06      	cmp	r3, #6
 800efa4:	d010      	beq.n	800efc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f042 0201 	orr.w	r2, r2, #1
 800efb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efb6:	e007      	b.n	800efc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f042 0201 	orr.w	r2, r2, #1
 800efc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3714      	adds	r7, #20
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	40010000 	.word	0x40010000
 800efdc:	40000400 	.word	0x40000400
 800efe0:	40000800 	.word	0x40000800
 800efe4:	40000c00 	.word	0x40000c00
 800efe8:	40010400 	.word	0x40010400
 800efec:	40014000 	.word	0x40014000
 800eff0:	40001800 	.word	0x40001800

0800eff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	691b      	ldr	r3, [r3, #16]
 800f00a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	f003 0302 	and.w	r3, r3, #2
 800f012:	2b00      	cmp	r3, #0
 800f014:	d020      	beq.n	800f058 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f003 0302 	and.w	r3, r3, #2
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d01b      	beq.n	800f058 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f06f 0202 	mvn.w	r2, #2
 800f028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2201      	movs	r2, #1
 800f02e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	699b      	ldr	r3, [r3, #24]
 800f036:	f003 0303 	and.w	r3, r3, #3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d003      	beq.n	800f046 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 f8d2 	bl	800f1e8 <HAL_TIM_IC_CaptureCallback>
 800f044:	e005      	b.n	800f052 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 f8c4 	bl	800f1d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f8d5 	bl	800f1fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2200      	movs	r2, #0
 800f056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	f003 0304 	and.w	r3, r3, #4
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d020      	beq.n	800f0a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f003 0304 	and.w	r3, r3, #4
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d01b      	beq.n	800f0a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f06f 0204 	mvn.w	r2, #4
 800f074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2202      	movs	r2, #2
 800f07a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	699b      	ldr	r3, [r3, #24]
 800f082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f086:	2b00      	cmp	r3, #0
 800f088:	d003      	beq.n	800f092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f8ac 	bl	800f1e8 <HAL_TIM_IC_CaptureCallback>
 800f090:	e005      	b.n	800f09e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f89e 	bl	800f1d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 f8af 	bl	800f1fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	f003 0308 	and.w	r3, r3, #8
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d020      	beq.n	800f0f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f003 0308 	and.w	r3, r3, #8
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d01b      	beq.n	800f0f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f06f 0208 	mvn.w	r2, #8
 800f0c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2204      	movs	r2, #4
 800f0c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	69db      	ldr	r3, [r3, #28]
 800f0ce:	f003 0303 	and.w	r3, r3, #3
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d003      	beq.n	800f0de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f886 	bl	800f1e8 <HAL_TIM_IC_CaptureCallback>
 800f0dc:	e005      	b.n	800f0ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f878 	bl	800f1d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 f889 	bl	800f1fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	f003 0310 	and.w	r3, r3, #16
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d020      	beq.n	800f13c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f003 0310 	and.w	r3, r3, #16
 800f100:	2b00      	cmp	r3, #0
 800f102:	d01b      	beq.n	800f13c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f06f 0210 	mvn.w	r2, #16
 800f10c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2208      	movs	r2, #8
 800f112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	69db      	ldr	r3, [r3, #28]
 800f11a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d003      	beq.n	800f12a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 f860 	bl	800f1e8 <HAL_TIM_IC_CaptureCallback>
 800f128:	e005      	b.n	800f136 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 f852 	bl	800f1d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f863 	bl	800f1fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	f003 0301 	and.w	r3, r3, #1
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00c      	beq.n	800f160 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f003 0301 	and.w	r3, r3, #1
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d007      	beq.n	800f160 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f06f 0201 	mvn.w	r2, #1
 800f158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7fc fdc4 	bl	800bce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00c      	beq.n	800f184 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f170:	2b00      	cmp	r3, #0
 800f172:	d007      	beq.n	800f184 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f17c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 f900 	bl	800f384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00c      	beq.n	800f1a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f194:	2b00      	cmp	r3, #0
 800f196:	d007      	beq.n	800f1a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 f834 	bl	800f210 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	f003 0320 	and.w	r3, r3, #32
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d00c      	beq.n	800f1cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f003 0320 	and.w	r3, r3, #32
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d007      	beq.n	800f1cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f06f 0220 	mvn.w	r2, #32
 800f1c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 f8d2 	bl	800f370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1cc:	bf00      	nop
 800f1ce:	3710      	adds	r7, #16
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f1dc:	bf00      	nop
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f1f0:	bf00      	nop
 800f1f2:	370c      	adds	r7, #12
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fa:	4770      	bx	lr

0800f1fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f204:	bf00      	nop
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f218:	bf00      	nop
 800f21a:	370c      	adds	r7, #12
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a43      	ldr	r2, [pc, #268]	@ (800f344 <TIM_Base_SetConfig+0x120>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d013      	beq.n	800f264 <TIM_Base_SetConfig+0x40>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f242:	d00f      	beq.n	800f264 <TIM_Base_SetConfig+0x40>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	4a40      	ldr	r2, [pc, #256]	@ (800f348 <TIM_Base_SetConfig+0x124>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d00b      	beq.n	800f264 <TIM_Base_SetConfig+0x40>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4a3f      	ldr	r2, [pc, #252]	@ (800f34c <TIM_Base_SetConfig+0x128>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d007      	beq.n	800f264 <TIM_Base_SetConfig+0x40>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4a3e      	ldr	r2, [pc, #248]	@ (800f350 <TIM_Base_SetConfig+0x12c>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d003      	beq.n	800f264 <TIM_Base_SetConfig+0x40>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4a3d      	ldr	r2, [pc, #244]	@ (800f354 <TIM_Base_SetConfig+0x130>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d108      	bne.n	800f276 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f26a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	68fa      	ldr	r2, [r7, #12]
 800f272:	4313      	orrs	r3, r2
 800f274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4a32      	ldr	r2, [pc, #200]	@ (800f344 <TIM_Base_SetConfig+0x120>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d02b      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f284:	d027      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	4a2f      	ldr	r2, [pc, #188]	@ (800f348 <TIM_Base_SetConfig+0x124>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d023      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4a2e      	ldr	r2, [pc, #184]	@ (800f34c <TIM_Base_SetConfig+0x128>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d01f      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4a2d      	ldr	r2, [pc, #180]	@ (800f350 <TIM_Base_SetConfig+0x12c>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d01b      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4a2c      	ldr	r2, [pc, #176]	@ (800f354 <TIM_Base_SetConfig+0x130>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d017      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4a2b      	ldr	r2, [pc, #172]	@ (800f358 <TIM_Base_SetConfig+0x134>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d013      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a2a      	ldr	r2, [pc, #168]	@ (800f35c <TIM_Base_SetConfig+0x138>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d00f      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4a29      	ldr	r2, [pc, #164]	@ (800f360 <TIM_Base_SetConfig+0x13c>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d00b      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4a28      	ldr	r2, [pc, #160]	@ (800f364 <TIM_Base_SetConfig+0x140>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d007      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4a27      	ldr	r2, [pc, #156]	@ (800f368 <TIM_Base_SetConfig+0x144>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d003      	beq.n	800f2d6 <TIM_Base_SetConfig+0xb2>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4a26      	ldr	r2, [pc, #152]	@ (800f36c <TIM_Base_SetConfig+0x148>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d108      	bne.n	800f2e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f2dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	695b      	ldr	r3, [r3, #20]
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	689a      	ldr	r2, [r3, #8]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a0e      	ldr	r2, [pc, #56]	@ (800f344 <TIM_Base_SetConfig+0x120>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d003      	beq.n	800f316 <TIM_Base_SetConfig+0xf2>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a10      	ldr	r2, [pc, #64]	@ (800f354 <TIM_Base_SetConfig+0x130>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d103      	bne.n	800f31e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	691a      	ldr	r2, [r3, #16]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f043 0204 	orr.w	r2, r3, #4
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2201      	movs	r2, #1
 800f32e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	601a      	str	r2, [r3, #0]
}
 800f336:	bf00      	nop
 800f338:	3714      	adds	r7, #20
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop
 800f344:	40010000 	.word	0x40010000
 800f348:	40000400 	.word	0x40000400
 800f34c:	40000800 	.word	0x40000800
 800f350:	40000c00 	.word	0x40000c00
 800f354:	40010400 	.word	0x40010400
 800f358:	40014000 	.word	0x40014000
 800f35c:	40014400 	.word	0x40014400
 800f360:	40014800 	.word	0x40014800
 800f364:	40001800 	.word	0x40001800
 800f368:	40001c00 	.word	0x40001c00
 800f36c:	40002000 	.word	0x40002000

0800f370 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f378:	bf00      	nop
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f38c:	bf00      	nop
 800f38e:	370c      	adds	r7, #12
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d101      	bne.n	800f3aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	e042      	b.n	800f430 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d106      	bne.n	800f3c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f7fc fd78 	bl	800beb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2224      	movs	r2, #36	@ 0x24
 800f3c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	68da      	ldr	r2, [r3, #12]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f3da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 fdd3 	bl	800ff88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	691a      	ldr	r2, [r3, #16]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f3f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	695a      	ldr	r2, [r3, #20]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68da      	ldr	r2, [r3, #12]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2220      	movs	r2, #32
 800f41c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2220      	movs	r2, #32
 800f424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b08a      	sub	sp, #40	@ 0x28
 800f43c:	af02      	add	r7, sp, #8
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	603b      	str	r3, [r7, #0]
 800f444:	4613      	mov	r3, r2
 800f446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f448:	2300      	movs	r3, #0
 800f44a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b20      	cmp	r3, #32
 800f456:	d175      	bne.n	800f544 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d002      	beq.n	800f464 <HAL_UART_Transmit+0x2c>
 800f45e:	88fb      	ldrh	r3, [r7, #6]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d101      	bne.n	800f468 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f464:	2301      	movs	r3, #1
 800f466:	e06e      	b.n	800f546 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2200      	movs	r2, #0
 800f46c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2221      	movs	r2, #33	@ 0x21
 800f472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f476:	f7fd fc71 	bl	800cd5c <HAL_GetTick>
 800f47a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	88fa      	ldrh	r2, [r7, #6]
 800f480:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	88fa      	ldrh	r2, [r7, #6]
 800f486:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f490:	d108      	bne.n	800f4a4 <HAL_UART_Transmit+0x6c>
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	691b      	ldr	r3, [r3, #16]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d104      	bne.n	800f4a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f49a:	2300      	movs	r3, #0
 800f49c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	61bb      	str	r3, [r7, #24]
 800f4a2:	e003      	b.n	800f4ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f4ac:	e02e      	b.n	800f50c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	2180      	movs	r1, #128	@ 0x80
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f000 fb37 	bl	800fb2c <UART_WaitOnFlagUntilTimeout>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d005      	beq.n	800f4d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2220      	movs	r2, #32
 800f4c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800f4cc:	2303      	movs	r3, #3
 800f4ce:	e03a      	b.n	800f546 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10b      	bne.n	800f4ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f4e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f4e6:	69bb      	ldr	r3, [r7, #24]
 800f4e8:	3302      	adds	r3, #2
 800f4ea:	61bb      	str	r3, [r7, #24]
 800f4ec:	e007      	b.n	800f4fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	781a      	ldrb	r2, [r3, #0]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f502:	b29b      	uxth	r3, r3
 800f504:	3b01      	subs	r3, #1
 800f506:	b29a      	uxth	r2, r3
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f510:	b29b      	uxth	r3, r3
 800f512:	2b00      	cmp	r3, #0
 800f514:	d1cb      	bne.n	800f4ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	2200      	movs	r2, #0
 800f51e:	2140      	movs	r1, #64	@ 0x40
 800f520:	68f8      	ldr	r0, [r7, #12]
 800f522:	f000 fb03 	bl	800fb2c <UART_WaitOnFlagUntilTimeout>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d005      	beq.n	800f538 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2220      	movs	r2, #32
 800f530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800f534:	2303      	movs	r3, #3
 800f536:	e006      	b.n	800f546 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2220      	movs	r2, #32
 800f53c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800f540:	2300      	movs	r3, #0
 800f542:	e000      	b.n	800f546 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800f544:	2302      	movs	r3, #2
  }
}
 800f546:	4618      	mov	r0, r3
 800f548:	3720      	adds	r7, #32
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b084      	sub	sp, #16
 800f552:	af00      	add	r7, sp, #0
 800f554:	60f8      	str	r0, [r7, #12]
 800f556:	60b9      	str	r1, [r7, #8]
 800f558:	4613      	mov	r3, r2
 800f55a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f562:	b2db      	uxtb	r3, r3
 800f564:	2b20      	cmp	r3, #32
 800f566:	d112      	bne.n	800f58e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d002      	beq.n	800f574 <HAL_UART_Receive_IT+0x26>
 800f56e:	88fb      	ldrh	r3, [r7, #6]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d101      	bne.n	800f578 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800f574:	2301      	movs	r3, #1
 800f576:	e00b      	b.n	800f590 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f57e:	88fb      	ldrh	r3, [r7, #6]
 800f580:	461a      	mov	r2, r3
 800f582:	68b9      	ldr	r1, [r7, #8]
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f000 fb2a 	bl	800fbde <UART_Start_Receive_IT>
 800f58a:	4603      	mov	r3, r0
 800f58c:	e000      	b.n	800f590 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800f58e:	2302      	movs	r3, #2
  }
}
 800f590:	4618      	mov	r0, r3
 800f592:	3710      	adds	r7, #16
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b0ba      	sub	sp, #232	@ 0xe8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	695b      	ldr	r3, [r3, #20]
 800f5ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5ce:	f003 030f 	and.w	r3, r3, #15
 800f5d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f5d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10f      	bne.n	800f5fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5e2:	f003 0320 	and.w	r3, r3, #32
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d009      	beq.n	800f5fe <HAL_UART_IRQHandler+0x66>
 800f5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5ee:	f003 0320 	and.w	r3, r3, #32
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d003      	beq.n	800f5fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 fc07 	bl	800fe0a <UART_Receive_IT>
      return;
 800f5fc:	e273      	b.n	800fae6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f5fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f602:	2b00      	cmp	r3, #0
 800f604:	f000 80de 	beq.w	800f7c4 <HAL_UART_IRQHandler+0x22c>
 800f608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f60c:	f003 0301 	and.w	r3, r3, #1
 800f610:	2b00      	cmp	r3, #0
 800f612:	d106      	bne.n	800f622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f618:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f000 80d1 	beq.w	800f7c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f626:	f003 0301 	and.w	r3, r3, #1
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00b      	beq.n	800f646 <HAL_UART_IRQHandler+0xae>
 800f62e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f636:	2b00      	cmp	r3, #0
 800f638:	d005      	beq.n	800f646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f63e:	f043 0201 	orr.w	r2, r3, #1
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f64a:	f003 0304 	and.w	r3, r3, #4
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00b      	beq.n	800f66a <HAL_UART_IRQHandler+0xd2>
 800f652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d005      	beq.n	800f66a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f662:	f043 0202 	orr.w	r2, r3, #2
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f66e:	f003 0302 	and.w	r3, r3, #2
 800f672:	2b00      	cmp	r3, #0
 800f674:	d00b      	beq.n	800f68e <HAL_UART_IRQHandler+0xf6>
 800f676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f67a:	f003 0301 	and.w	r3, r3, #1
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d005      	beq.n	800f68e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f686:	f043 0204 	orr.w	r2, r3, #4
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f692:	f003 0308 	and.w	r3, r3, #8
 800f696:	2b00      	cmp	r3, #0
 800f698:	d011      	beq.n	800f6be <HAL_UART_IRQHandler+0x126>
 800f69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f69e:	f003 0320 	and.w	r3, r3, #32
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d105      	bne.n	800f6b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f6a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d005      	beq.n	800f6be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6b6:	f043 0208 	orr.w	r2, r3, #8
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	f000 820a 	beq.w	800fadc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6cc:	f003 0320 	and.w	r3, r3, #32
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d008      	beq.n	800f6e6 <HAL_UART_IRQHandler+0x14e>
 800f6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6d8:	f003 0320 	and.w	r3, r3, #32
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d002      	beq.n	800f6e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 fb92 	bl	800fe0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	695b      	ldr	r3, [r3, #20]
 800f6ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6f0:	2b40      	cmp	r3, #64	@ 0x40
 800f6f2:	bf0c      	ite	eq
 800f6f4:	2301      	moveq	r3, #1
 800f6f6:	2300      	movne	r3, #0
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f702:	f003 0308 	and.w	r3, r3, #8
 800f706:	2b00      	cmp	r3, #0
 800f708:	d103      	bne.n	800f712 <HAL_UART_IRQHandler+0x17a>
 800f70a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d04f      	beq.n	800f7b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 fa9d 	bl	800fc52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	695b      	ldr	r3, [r3, #20]
 800f71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f722:	2b40      	cmp	r3, #64	@ 0x40
 800f724:	d141      	bne.n	800f7aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3314      	adds	r3, #20
 800f72c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f734:	e853 3f00 	ldrex	r3, [r3]
 800f738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f73c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	3314      	adds	r3, #20
 800f74e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f75a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f75e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f762:	e841 2300 	strex	r3, r2, [r1]
 800f766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f76a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1d9      	bne.n	800f726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f776:	2b00      	cmp	r3, #0
 800f778:	d013      	beq.n	800f7a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f77e:	4a8a      	ldr	r2, [pc, #552]	@ (800f9a8 <HAL_UART_IRQHandler+0x410>)
 800f780:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f786:	4618      	mov	r0, r3
 800f788:	f7fd fc6a 	bl	800d060 <HAL_DMA_Abort_IT>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d016      	beq.n	800f7c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f79c:	4610      	mov	r0, r2
 800f79e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7a0:	e00e      	b.n	800f7c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 f9ac 	bl	800fb00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7a8:	e00a      	b.n	800f7c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 f9a8 	bl	800fb00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7b0:	e006      	b.n	800f7c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f000 f9a4 	bl	800fb00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800f7be:	e18d      	b.n	800fadc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7c0:	bf00      	nop
    return;
 800f7c2:	e18b      	b.n	800fadc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	f040 8167 	bne.w	800fa9c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7d2:	f003 0310 	and.w	r3, r3, #16
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f000 8160 	beq.w	800fa9c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800f7dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7e0:	f003 0310 	and.w	r3, r3, #16
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f000 8159 	beq.w	800fa9c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	60bb      	str	r3, [r7, #8]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	60bb      	str	r3, [r7, #8]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	60bb      	str	r3, [r7, #8]
 800f7fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	695b      	ldr	r3, [r3, #20]
 800f806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f80a:	2b40      	cmp	r3, #64	@ 0x40
 800f80c:	f040 80ce 	bne.w	800f9ac <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f81c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f820:	2b00      	cmp	r3, #0
 800f822:	f000 80a9 	beq.w	800f978 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f82a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f82e:	429a      	cmp	r2, r3
 800f830:	f080 80a2 	bcs.w	800f978 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f83a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f840:	69db      	ldr	r3, [r3, #28]
 800f842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f846:	f000 8088 	beq.w	800f95a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	330c      	adds	r3, #12
 800f850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f854:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f858:	e853 3f00 	ldrex	r3, [r3]
 800f85c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	330c      	adds	r3, #12
 800f872:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800f876:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f87a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f87e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f882:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f886:	e841 2300 	strex	r3, r2, [r1]
 800f88a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f88e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f892:	2b00      	cmp	r3, #0
 800f894:	d1d9      	bne.n	800f84a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	3314      	adds	r3, #20
 800f89c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f89e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f8a0:	e853 3f00 	ldrex	r3, [r3]
 800f8a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f8a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f8a8:	f023 0301 	bic.w	r3, r3, #1
 800f8ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	3314      	adds	r3, #20
 800f8b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f8ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f8be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f8c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f8c6:	e841 2300 	strex	r3, r2, [r1]
 800f8ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f8cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1e1      	bne.n	800f896 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3314      	adds	r3, #20
 800f8d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f8dc:	e853 3f00 	ldrex	r3, [r3]
 800f8e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f8e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f8e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	3314      	adds	r3, #20
 800f8f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f8f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f8f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f8fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f8fe:	e841 2300 	strex	r3, r2, [r1]
 800f902:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1e3      	bne.n	800f8d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2220      	movs	r2, #32
 800f90e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	330c      	adds	r3, #12
 800f91e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f922:	e853 3f00 	ldrex	r3, [r3]
 800f926:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f92a:	f023 0310 	bic.w	r3, r3, #16
 800f92e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	330c      	adds	r3, #12
 800f938:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800f93c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f93e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f940:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f942:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f944:	e841 2300 	strex	r3, r2, [r1]
 800f948:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f94a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1e3      	bne.n	800f918 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f954:	4618      	mov	r0, r3
 800f956:	f7fd fb13 	bl	800cf80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2202      	movs	r2, #2
 800f95e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f968:	b29b      	uxth	r3, r3
 800f96a:	1ad3      	subs	r3, r2, r3
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	4619      	mov	r1, r3
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 f8cf 	bl	800fb14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f976:	e0b3      	b.n	800fae0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f97c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f980:	429a      	cmp	r2, r3
 800f982:	f040 80ad 	bne.w	800fae0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f98a:	69db      	ldr	r3, [r3, #28]
 800f98c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f990:	f040 80a6 	bne.w	800fae0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2202      	movs	r2, #2
 800f998:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f99e:	4619      	mov	r1, r3
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f8b7 	bl	800fb14 <HAL_UARTEx_RxEventCallback>
      return;
 800f9a6:	e09b      	b.n	800fae0 <HAL_UART_IRQHandler+0x548>
 800f9a8:	0800fd19 	.word	0x0800fd19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f000 808e 	beq.w	800fae4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800f9c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f000 8089 	beq.w	800fae4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	330c      	adds	r3, #12
 800f9d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9dc:	e853 3f00 	ldrex	r3, [r3]
 800f9e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f9e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	330c      	adds	r3, #12
 800f9f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800f9f6:	647a      	str	r2, [r7, #68]	@ 0x44
 800f9f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f9fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f9fe:	e841 2300 	strex	r3, r2, [r1]
 800fa02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fa04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1e3      	bne.n	800f9d2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	3314      	adds	r3, #20
 800fa10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa14:	e853 3f00 	ldrex	r3, [r3]
 800fa18:	623b      	str	r3, [r7, #32]
   return(result);
 800fa1a:	6a3b      	ldr	r3, [r7, #32]
 800fa1c:	f023 0301 	bic.w	r3, r3, #1
 800fa20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	3314      	adds	r3, #20
 800fa2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fa2e:	633a      	str	r2, [r7, #48]	@ 0x30
 800fa30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa36:	e841 2300 	strex	r3, r2, [r1]
 800fa3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d1e3      	bne.n	800fa0a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2220      	movs	r2, #32
 800fa46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	330c      	adds	r3, #12
 800fa56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	e853 3f00 	ldrex	r3, [r3]
 800fa5e:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f023 0310 	bic.w	r3, r3, #16
 800fa66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	330c      	adds	r3, #12
 800fa70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800fa74:	61fa      	str	r2, [r7, #28]
 800fa76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa78:	69b9      	ldr	r1, [r7, #24]
 800fa7a:	69fa      	ldr	r2, [r7, #28]
 800fa7c:	e841 2300 	strex	r3, r2, [r1]
 800fa80:	617b      	str	r3, [r7, #20]
   return(result);
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d1e3      	bne.n	800fa50 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2202      	movs	r2, #2
 800fa8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fa8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fa92:	4619      	mov	r1, r3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 f83d 	bl	800fb14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fa9a:	e023      	b.n	800fae4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fa9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800faa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d009      	beq.n	800fabc <HAL_UART_IRQHandler+0x524>
 800faa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800faac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d003      	beq.n	800fabc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f000 f940 	bl	800fd3a <UART_Transmit_IT>
    return;
 800faba:	e014      	b.n	800fae6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d00e      	beq.n	800fae6 <HAL_UART_IRQHandler+0x54e>
 800fac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800facc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d008      	beq.n	800fae6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 f980 	bl	800fdda <UART_EndTransmit_IT>
    return;
 800fada:	e004      	b.n	800fae6 <HAL_UART_IRQHandler+0x54e>
    return;
 800fadc:	bf00      	nop
 800fade:	e002      	b.n	800fae6 <HAL_UART_IRQHandler+0x54e>
      return;
 800fae0:	bf00      	nop
 800fae2:	e000      	b.n	800fae6 <HAL_UART_IRQHandler+0x54e>
      return;
 800fae4:	bf00      	nop
  }
}
 800fae6:	37e8      	adds	r7, #232	@ 0xe8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800faf4:	bf00      	nop
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fb08:	bf00      	nop
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fb20:	bf00      	nop
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b086      	sub	sp, #24
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	603b      	str	r3, [r7, #0]
 800fb38:	4613      	mov	r3, r2
 800fb3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb3c:	e03b      	b.n	800fbb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb3e:	6a3b      	ldr	r3, [r7, #32]
 800fb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb44:	d037      	beq.n	800fbb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb46:	f7fd f909 	bl	800cd5c <HAL_GetTick>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	1ad3      	subs	r3, r2, r3
 800fb50:	6a3a      	ldr	r2, [r7, #32]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d302      	bcc.n	800fb5c <UART_WaitOnFlagUntilTimeout+0x30>
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d101      	bne.n	800fb60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fb5c:	2303      	movs	r3, #3
 800fb5e:	e03a      	b.n	800fbd6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	f003 0304 	and.w	r3, r3, #4
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d023      	beq.n	800fbb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	2b80      	cmp	r3, #128	@ 0x80
 800fb72:	d020      	beq.n	800fbb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	2b40      	cmp	r3, #64	@ 0x40
 800fb78:	d01d      	beq.n	800fbb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f003 0308 	and.w	r3, r3, #8
 800fb84:	2b08      	cmp	r3, #8
 800fb86:	d116      	bne.n	800fbb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800fb88:	2300      	movs	r3, #0
 800fb8a:	617b      	str	r3, [r7, #20]
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	617b      	str	r3, [r7, #20]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	617b      	str	r3, [r7, #20]
 800fb9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f000 f857 	bl	800fc52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2208      	movs	r2, #8
 800fba8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e00f      	b.n	800fbd6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	4013      	ands	r3, r2
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	bf0c      	ite	eq
 800fbc6:	2301      	moveq	r3, #1
 800fbc8:	2300      	movne	r3, #0
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	461a      	mov	r2, r3
 800fbce:	79fb      	ldrb	r3, [r7, #7]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d0b4      	beq.n	800fb3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3718      	adds	r7, #24
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbde:	b480      	push	{r7}
 800fbe0:	b085      	sub	sp, #20
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	60f8      	str	r0, [r7, #12]
 800fbe6:	60b9      	str	r1, [r7, #8]
 800fbe8:	4613      	mov	r3, r2
 800fbea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	68ba      	ldr	r2, [r7, #8]
 800fbf0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	88fa      	ldrh	r2, [r7, #6]
 800fbf6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	88fa      	ldrh	r2, [r7, #6]
 800fbfc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2200      	movs	r2, #0
 800fc02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2222      	movs	r2, #34	@ 0x22
 800fc08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	691b      	ldr	r3, [r3, #16]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d007      	beq.n	800fc24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	68da      	ldr	r2, [r3, #12]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fc22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	695a      	ldr	r2, [r3, #20]
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f042 0201 	orr.w	r2, r2, #1
 800fc32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	68da      	ldr	r2, [r3, #12]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f042 0220 	orr.w	r2, r2, #32
 800fc42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fc44:	2300      	movs	r3, #0
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3714      	adds	r7, #20
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc52:	b480      	push	{r7}
 800fc54:	b095      	sub	sp, #84	@ 0x54
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	330c      	adds	r3, #12
 800fc60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc64:	e853 3f00 	ldrex	r3, [r3]
 800fc68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	330c      	adds	r3, #12
 800fc78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fc7a:	643a      	str	r2, [r7, #64]	@ 0x40
 800fc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc82:	e841 2300 	strex	r3, r2, [r1]
 800fc86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d1e5      	bne.n	800fc5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3314      	adds	r3, #20
 800fc94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc96:	6a3b      	ldr	r3, [r7, #32]
 800fc98:	e853 3f00 	ldrex	r3, [r3]
 800fc9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	f023 0301 	bic.w	r3, r3, #1
 800fca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	3314      	adds	r3, #20
 800fcac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fcb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fcb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcb6:	e841 2300 	strex	r3, r2, [r1]
 800fcba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d1e5      	bne.n	800fc8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcc6:	2b01      	cmp	r3, #1
 800fcc8:	d119      	bne.n	800fcfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	330c      	adds	r3, #12
 800fcd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	e853 3f00 	ldrex	r3, [r3]
 800fcd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	f023 0310 	bic.w	r3, r3, #16
 800fce0:	647b      	str	r3, [r7, #68]	@ 0x44
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	330c      	adds	r3, #12
 800fce8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fcea:	61ba      	str	r2, [r7, #24]
 800fcec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcee:	6979      	ldr	r1, [r7, #20]
 800fcf0:	69ba      	ldr	r2, [r7, #24]
 800fcf2:	e841 2300 	strex	r3, r2, [r1]
 800fcf6:	613b      	str	r3, [r7, #16]
   return(result);
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1e5      	bne.n	800fcca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2220      	movs	r2, #32
 800fd02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800fd0c:	bf00      	nop
 800fd0e:	3754      	adds	r7, #84	@ 0x54
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f7ff fee7 	bl	800fb00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd32:	bf00      	nop
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}

0800fd3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fd3a:	b480      	push	{r7}
 800fd3c:	b085      	sub	sp, #20
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b21      	cmp	r3, #33	@ 0x21
 800fd4c:	d13e      	bne.n	800fdcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd56:	d114      	bne.n	800fd82 <UART_Transmit_IT+0x48>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	691b      	ldr	r3, [r3, #16]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d110      	bne.n	800fd82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6a1b      	ldr	r3, [r3, #32]
 800fd64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	881b      	ldrh	r3, [r3, #0]
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fd74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6a1b      	ldr	r3, [r3, #32]
 800fd7a:	1c9a      	adds	r2, r3, #2
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	621a      	str	r2, [r3, #32]
 800fd80:	e008      	b.n	800fd94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a1b      	ldr	r3, [r3, #32]
 800fd86:	1c59      	adds	r1, r3, #1
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	6211      	str	r1, [r2, #32]
 800fd8c:	781a      	ldrb	r2, [r3, #0]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	3b01      	subs	r3, #1
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	4619      	mov	r1, r3
 800fda2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d10f      	bne.n	800fdc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68da      	ldr	r2, [r3, #12]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fdb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	68da      	ldr	r2, [r3, #12]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fdc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	e000      	b.n	800fdce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fdcc:	2302      	movs	r3, #2
  }
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3714      	adds	r7, #20
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr

0800fdda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b082      	sub	sp, #8
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	68da      	ldr	r2, [r3, #12]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fdf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2220      	movs	r2, #32
 800fdf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f7ff fe76 	bl	800faec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3708      	adds	r7, #8
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b08c      	sub	sp, #48	@ 0x30
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800fe16:	2300      	movs	r3, #0
 800fe18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	2b22      	cmp	r3, #34	@ 0x22
 800fe24:	f040 80aa 	bne.w	800ff7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe30:	d115      	bne.n	800fe5e <UART_Receive_IT+0x54>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d111      	bne.n	800fe5e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe4c:	b29a      	uxth	r2, r3
 800fe4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe56:	1c9a      	adds	r2, r3, #2
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	629a      	str	r2, [r3, #40]	@ 0x28
 800fe5c:	e024      	b.n	800fea8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	689b      	ldr	r3, [r3, #8]
 800fe68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe6c:	d007      	beq.n	800fe7e <UART_Receive_IT+0x74>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	689b      	ldr	r3, [r3, #8]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d10a      	bne.n	800fe8c <UART_Receive_IT+0x82>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	691b      	ldr	r3, [r3, #16]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d106      	bne.n	800fe8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	b2da      	uxtb	r2, r3
 800fe86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe88:	701a      	strb	r2, [r3, #0]
 800fe8a:	e008      	b.n	800fe9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe98:	b2da      	uxtb	r2, r3
 800fe9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fea2:	1c5a      	adds	r2, r3, #1
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800feac:	b29b      	uxth	r3, r3
 800feae:	3b01      	subs	r3, #1
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	4619      	mov	r1, r3
 800feb6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d15d      	bne.n	800ff78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	68da      	ldr	r2, [r3, #12]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f022 0220 	bic.w	r2, r2, #32
 800feca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	68da      	ldr	r2, [r3, #12]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800feda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	695a      	ldr	r2, [r3, #20]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f022 0201 	bic.w	r2, r2, #1
 800feea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2220      	movs	r2, #32
 800fef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d135      	bne.n	800ff6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	330c      	adds	r3, #12
 800ff0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	e853 3f00 	ldrex	r3, [r3]
 800ff16:	613b      	str	r3, [r7, #16]
   return(result);
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	f023 0310 	bic.w	r3, r3, #16
 800ff1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	330c      	adds	r3, #12
 800ff26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff28:	623a      	str	r2, [r7, #32]
 800ff2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff2c:	69f9      	ldr	r1, [r7, #28]
 800ff2e:	6a3a      	ldr	r2, [r7, #32]
 800ff30:	e841 2300 	strex	r3, r2, [r1]
 800ff34:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d1e5      	bne.n	800ff08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f003 0310 	and.w	r3, r3, #16
 800ff46:	2b10      	cmp	r3, #16
 800ff48:	d10a      	bne.n	800ff60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	60fb      	str	r3, [r7, #12]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	60fb      	str	r3, [r7, #12]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	60fb      	str	r3, [r7, #12]
 800ff5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ff64:	4619      	mov	r1, r3
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7ff fdd4 	bl	800fb14 <HAL_UARTEx_RxEventCallback>
 800ff6c:	e002      	b.n	800ff74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f7fc fe54 	bl	800cc1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ff74:	2300      	movs	r3, #0
 800ff76:	e002      	b.n	800ff7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	e000      	b.n	800ff7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ff7c:	2302      	movs	r3, #2
  }
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3730      	adds	r7, #48	@ 0x30
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
	...

0800ff88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ff8c:	b0c0      	sub	sp, #256	@ 0x100
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	691b      	ldr	r3, [r3, #16]
 800ff9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ffa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffa4:	68d9      	ldr	r1, [r3, #12]
 800ffa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	ea40 0301 	orr.w	r3, r0, r1
 800ffb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ffb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffb6:	689a      	ldr	r2, [r3, #8]
 800ffb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffbc:	691b      	ldr	r3, [r3, #16]
 800ffbe:	431a      	orrs	r2, r3
 800ffc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffc4:	695b      	ldr	r3, [r3, #20]
 800ffc6:	431a      	orrs	r2, r3
 800ffc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffcc:	69db      	ldr	r3, [r3, #28]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ffd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ffe0:	f021 010c 	bic.w	r1, r1, #12
 800ffe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ffee:	430b      	orrs	r3, r1
 800fff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	695b      	ldr	r3, [r3, #20]
 800fffa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800fffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010002:	6999      	ldr	r1, [r3, #24]
 8010004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	ea40 0301 	orr.w	r3, r0, r1
 801000e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	4b8f      	ldr	r3, [pc, #572]	@ (8010254 <UART_SetConfig+0x2cc>)
 8010018:	429a      	cmp	r2, r3
 801001a:	d005      	beq.n	8010028 <UART_SetConfig+0xa0>
 801001c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	4b8d      	ldr	r3, [pc, #564]	@ (8010258 <UART_SetConfig+0x2d0>)
 8010024:	429a      	cmp	r2, r3
 8010026:	d104      	bne.n	8010032 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010028:	f7fd fb72 	bl	800d710 <HAL_RCC_GetPCLK2Freq>
 801002c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010030:	e003      	b.n	801003a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010032:	f7fd fb59 	bl	800d6e8 <HAL_RCC_GetPCLK1Freq>
 8010036:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801003a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801003e:	69db      	ldr	r3, [r3, #28]
 8010040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010044:	f040 810c 	bne.w	8010260 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801004c:	2200      	movs	r2, #0
 801004e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010052:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010056:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801005a:	4622      	mov	r2, r4
 801005c:	462b      	mov	r3, r5
 801005e:	1891      	adds	r1, r2, r2
 8010060:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010062:	415b      	adcs	r3, r3
 8010064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010066:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801006a:	4621      	mov	r1, r4
 801006c:	eb12 0801 	adds.w	r8, r2, r1
 8010070:	4629      	mov	r1, r5
 8010072:	eb43 0901 	adc.w	r9, r3, r1
 8010076:	f04f 0200 	mov.w	r2, #0
 801007a:	f04f 0300 	mov.w	r3, #0
 801007e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801008a:	4690      	mov	r8, r2
 801008c:	4699      	mov	r9, r3
 801008e:	4623      	mov	r3, r4
 8010090:	eb18 0303 	adds.w	r3, r8, r3
 8010094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010098:	462b      	mov	r3, r5
 801009a:	eb49 0303 	adc.w	r3, r9, r3
 801009e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80100a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80100ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80100b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80100b6:	460b      	mov	r3, r1
 80100b8:	18db      	adds	r3, r3, r3
 80100ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80100bc:	4613      	mov	r3, r2
 80100be:	eb42 0303 	adc.w	r3, r2, r3
 80100c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80100c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80100c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80100cc:	f7f8 fdbc 	bl	8008c48 <__aeabi_uldivmod>
 80100d0:	4602      	mov	r2, r0
 80100d2:	460b      	mov	r3, r1
 80100d4:	4b61      	ldr	r3, [pc, #388]	@ (801025c <UART_SetConfig+0x2d4>)
 80100d6:	fba3 2302 	umull	r2, r3, r3, r2
 80100da:	095b      	lsrs	r3, r3, #5
 80100dc:	011c      	lsls	r4, r3, #4
 80100de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80100e2:	2200      	movs	r2, #0
 80100e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80100e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80100ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80100f0:	4642      	mov	r2, r8
 80100f2:	464b      	mov	r3, r9
 80100f4:	1891      	adds	r1, r2, r2
 80100f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80100f8:	415b      	adcs	r3, r3
 80100fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010100:	4641      	mov	r1, r8
 8010102:	eb12 0a01 	adds.w	sl, r2, r1
 8010106:	4649      	mov	r1, r9
 8010108:	eb43 0b01 	adc.w	fp, r3, r1
 801010c:	f04f 0200 	mov.w	r2, #0
 8010110:	f04f 0300 	mov.w	r3, #0
 8010114:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010118:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801011c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010120:	4692      	mov	sl, r2
 8010122:	469b      	mov	fp, r3
 8010124:	4643      	mov	r3, r8
 8010126:	eb1a 0303 	adds.w	r3, sl, r3
 801012a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801012e:	464b      	mov	r3, r9
 8010130:	eb4b 0303 	adc.w	r3, fp, r3
 8010134:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010144:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010148:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801014c:	460b      	mov	r3, r1
 801014e:	18db      	adds	r3, r3, r3
 8010150:	643b      	str	r3, [r7, #64]	@ 0x40
 8010152:	4613      	mov	r3, r2
 8010154:	eb42 0303 	adc.w	r3, r2, r3
 8010158:	647b      	str	r3, [r7, #68]	@ 0x44
 801015a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801015e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010162:	f7f8 fd71 	bl	8008c48 <__aeabi_uldivmod>
 8010166:	4602      	mov	r2, r0
 8010168:	460b      	mov	r3, r1
 801016a:	4611      	mov	r1, r2
 801016c:	4b3b      	ldr	r3, [pc, #236]	@ (801025c <UART_SetConfig+0x2d4>)
 801016e:	fba3 2301 	umull	r2, r3, r3, r1
 8010172:	095b      	lsrs	r3, r3, #5
 8010174:	2264      	movs	r2, #100	@ 0x64
 8010176:	fb02 f303 	mul.w	r3, r2, r3
 801017a:	1acb      	subs	r3, r1, r3
 801017c:	00db      	lsls	r3, r3, #3
 801017e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010182:	4b36      	ldr	r3, [pc, #216]	@ (801025c <UART_SetConfig+0x2d4>)
 8010184:	fba3 2302 	umull	r2, r3, r3, r2
 8010188:	095b      	lsrs	r3, r3, #5
 801018a:	005b      	lsls	r3, r3, #1
 801018c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010190:	441c      	add	r4, r3
 8010192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010196:	2200      	movs	r2, #0
 8010198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801019c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80101a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80101a4:	4642      	mov	r2, r8
 80101a6:	464b      	mov	r3, r9
 80101a8:	1891      	adds	r1, r2, r2
 80101aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80101ac:	415b      	adcs	r3, r3
 80101ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80101b4:	4641      	mov	r1, r8
 80101b6:	1851      	adds	r1, r2, r1
 80101b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80101ba:	4649      	mov	r1, r9
 80101bc:	414b      	adcs	r3, r1
 80101be:	637b      	str	r3, [r7, #52]	@ 0x34
 80101c0:	f04f 0200 	mov.w	r2, #0
 80101c4:	f04f 0300 	mov.w	r3, #0
 80101c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80101cc:	4659      	mov	r1, fp
 80101ce:	00cb      	lsls	r3, r1, #3
 80101d0:	4651      	mov	r1, sl
 80101d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80101d6:	4651      	mov	r1, sl
 80101d8:	00ca      	lsls	r2, r1, #3
 80101da:	4610      	mov	r0, r2
 80101dc:	4619      	mov	r1, r3
 80101de:	4603      	mov	r3, r0
 80101e0:	4642      	mov	r2, r8
 80101e2:	189b      	adds	r3, r3, r2
 80101e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80101e8:	464b      	mov	r3, r9
 80101ea:	460a      	mov	r2, r1
 80101ec:	eb42 0303 	adc.w	r3, r2, r3
 80101f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80101f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010200:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010208:	460b      	mov	r3, r1
 801020a:	18db      	adds	r3, r3, r3
 801020c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801020e:	4613      	mov	r3, r2
 8010210:	eb42 0303 	adc.w	r3, r2, r3
 8010214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801021a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801021e:	f7f8 fd13 	bl	8008c48 <__aeabi_uldivmod>
 8010222:	4602      	mov	r2, r0
 8010224:	460b      	mov	r3, r1
 8010226:	4b0d      	ldr	r3, [pc, #52]	@ (801025c <UART_SetConfig+0x2d4>)
 8010228:	fba3 1302 	umull	r1, r3, r3, r2
 801022c:	095b      	lsrs	r3, r3, #5
 801022e:	2164      	movs	r1, #100	@ 0x64
 8010230:	fb01 f303 	mul.w	r3, r1, r3
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	00db      	lsls	r3, r3, #3
 8010238:	3332      	adds	r3, #50	@ 0x32
 801023a:	4a08      	ldr	r2, [pc, #32]	@ (801025c <UART_SetConfig+0x2d4>)
 801023c:	fba2 2303 	umull	r2, r3, r2, r3
 8010240:	095b      	lsrs	r3, r3, #5
 8010242:	f003 0207 	and.w	r2, r3, #7
 8010246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4422      	add	r2, r4
 801024e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010250:	e106      	b.n	8010460 <UART_SetConfig+0x4d8>
 8010252:	bf00      	nop
 8010254:	40011000 	.word	0x40011000
 8010258:	40011400 	.word	0x40011400
 801025c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010264:	2200      	movs	r2, #0
 8010266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801026a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801026e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8010272:	4642      	mov	r2, r8
 8010274:	464b      	mov	r3, r9
 8010276:	1891      	adds	r1, r2, r2
 8010278:	6239      	str	r1, [r7, #32]
 801027a:	415b      	adcs	r3, r3
 801027c:	627b      	str	r3, [r7, #36]	@ 0x24
 801027e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010282:	4641      	mov	r1, r8
 8010284:	1854      	adds	r4, r2, r1
 8010286:	4649      	mov	r1, r9
 8010288:	eb43 0501 	adc.w	r5, r3, r1
 801028c:	f04f 0200 	mov.w	r2, #0
 8010290:	f04f 0300 	mov.w	r3, #0
 8010294:	00eb      	lsls	r3, r5, #3
 8010296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801029a:	00e2      	lsls	r2, r4, #3
 801029c:	4614      	mov	r4, r2
 801029e:	461d      	mov	r5, r3
 80102a0:	4643      	mov	r3, r8
 80102a2:	18e3      	adds	r3, r4, r3
 80102a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80102a8:	464b      	mov	r3, r9
 80102aa:	eb45 0303 	adc.w	r3, r5, r3
 80102ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80102b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80102be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80102c2:	f04f 0200 	mov.w	r2, #0
 80102c6:	f04f 0300 	mov.w	r3, #0
 80102ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80102ce:	4629      	mov	r1, r5
 80102d0:	008b      	lsls	r3, r1, #2
 80102d2:	4621      	mov	r1, r4
 80102d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80102d8:	4621      	mov	r1, r4
 80102da:	008a      	lsls	r2, r1, #2
 80102dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80102e0:	f7f8 fcb2 	bl	8008c48 <__aeabi_uldivmod>
 80102e4:	4602      	mov	r2, r0
 80102e6:	460b      	mov	r3, r1
 80102e8:	4b60      	ldr	r3, [pc, #384]	@ (801046c <UART_SetConfig+0x4e4>)
 80102ea:	fba3 2302 	umull	r2, r3, r3, r2
 80102ee:	095b      	lsrs	r3, r3, #5
 80102f0:	011c      	lsls	r4, r3, #4
 80102f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80102f6:	2200      	movs	r2, #0
 80102f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80102fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010300:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010304:	4642      	mov	r2, r8
 8010306:	464b      	mov	r3, r9
 8010308:	1891      	adds	r1, r2, r2
 801030a:	61b9      	str	r1, [r7, #24]
 801030c:	415b      	adcs	r3, r3
 801030e:	61fb      	str	r3, [r7, #28]
 8010310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010314:	4641      	mov	r1, r8
 8010316:	1851      	adds	r1, r2, r1
 8010318:	6139      	str	r1, [r7, #16]
 801031a:	4649      	mov	r1, r9
 801031c:	414b      	adcs	r3, r1
 801031e:	617b      	str	r3, [r7, #20]
 8010320:	f04f 0200 	mov.w	r2, #0
 8010324:	f04f 0300 	mov.w	r3, #0
 8010328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801032c:	4659      	mov	r1, fp
 801032e:	00cb      	lsls	r3, r1, #3
 8010330:	4651      	mov	r1, sl
 8010332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010336:	4651      	mov	r1, sl
 8010338:	00ca      	lsls	r2, r1, #3
 801033a:	4610      	mov	r0, r2
 801033c:	4619      	mov	r1, r3
 801033e:	4603      	mov	r3, r0
 8010340:	4642      	mov	r2, r8
 8010342:	189b      	adds	r3, r3, r2
 8010344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010348:	464b      	mov	r3, r9
 801034a:	460a      	mov	r2, r1
 801034c:	eb42 0303 	adc.w	r3, r2, r3
 8010350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801035e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010360:	f04f 0200 	mov.w	r2, #0
 8010364:	f04f 0300 	mov.w	r3, #0
 8010368:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801036c:	4649      	mov	r1, r9
 801036e:	008b      	lsls	r3, r1, #2
 8010370:	4641      	mov	r1, r8
 8010372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010376:	4641      	mov	r1, r8
 8010378:	008a      	lsls	r2, r1, #2
 801037a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801037e:	f7f8 fc63 	bl	8008c48 <__aeabi_uldivmod>
 8010382:	4602      	mov	r2, r0
 8010384:	460b      	mov	r3, r1
 8010386:	4611      	mov	r1, r2
 8010388:	4b38      	ldr	r3, [pc, #224]	@ (801046c <UART_SetConfig+0x4e4>)
 801038a:	fba3 2301 	umull	r2, r3, r3, r1
 801038e:	095b      	lsrs	r3, r3, #5
 8010390:	2264      	movs	r2, #100	@ 0x64
 8010392:	fb02 f303 	mul.w	r3, r2, r3
 8010396:	1acb      	subs	r3, r1, r3
 8010398:	011b      	lsls	r3, r3, #4
 801039a:	3332      	adds	r3, #50	@ 0x32
 801039c:	4a33      	ldr	r2, [pc, #204]	@ (801046c <UART_SetConfig+0x4e4>)
 801039e:	fba2 2303 	umull	r2, r3, r2, r3
 80103a2:	095b      	lsrs	r3, r3, #5
 80103a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80103a8:	441c      	add	r4, r3
 80103aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80103ae:	2200      	movs	r2, #0
 80103b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80103b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80103b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80103b8:	4642      	mov	r2, r8
 80103ba:	464b      	mov	r3, r9
 80103bc:	1891      	adds	r1, r2, r2
 80103be:	60b9      	str	r1, [r7, #8]
 80103c0:	415b      	adcs	r3, r3
 80103c2:	60fb      	str	r3, [r7, #12]
 80103c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80103c8:	4641      	mov	r1, r8
 80103ca:	1851      	adds	r1, r2, r1
 80103cc:	6039      	str	r1, [r7, #0]
 80103ce:	4649      	mov	r1, r9
 80103d0:	414b      	adcs	r3, r1
 80103d2:	607b      	str	r3, [r7, #4]
 80103d4:	f04f 0200 	mov.w	r2, #0
 80103d8:	f04f 0300 	mov.w	r3, #0
 80103dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80103e0:	4659      	mov	r1, fp
 80103e2:	00cb      	lsls	r3, r1, #3
 80103e4:	4651      	mov	r1, sl
 80103e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80103ea:	4651      	mov	r1, sl
 80103ec:	00ca      	lsls	r2, r1, #3
 80103ee:	4610      	mov	r0, r2
 80103f0:	4619      	mov	r1, r3
 80103f2:	4603      	mov	r3, r0
 80103f4:	4642      	mov	r2, r8
 80103f6:	189b      	adds	r3, r3, r2
 80103f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80103fa:	464b      	mov	r3, r9
 80103fc:	460a      	mov	r2, r1
 80103fe:	eb42 0303 	adc.w	r3, r2, r3
 8010402:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	663b      	str	r3, [r7, #96]	@ 0x60
 801040e:	667a      	str	r2, [r7, #100]	@ 0x64
 8010410:	f04f 0200 	mov.w	r2, #0
 8010414:	f04f 0300 	mov.w	r3, #0
 8010418:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 801041c:	4649      	mov	r1, r9
 801041e:	008b      	lsls	r3, r1, #2
 8010420:	4641      	mov	r1, r8
 8010422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010426:	4641      	mov	r1, r8
 8010428:	008a      	lsls	r2, r1, #2
 801042a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801042e:	f7f8 fc0b 	bl	8008c48 <__aeabi_uldivmod>
 8010432:	4602      	mov	r2, r0
 8010434:	460b      	mov	r3, r1
 8010436:	4b0d      	ldr	r3, [pc, #52]	@ (801046c <UART_SetConfig+0x4e4>)
 8010438:	fba3 1302 	umull	r1, r3, r3, r2
 801043c:	095b      	lsrs	r3, r3, #5
 801043e:	2164      	movs	r1, #100	@ 0x64
 8010440:	fb01 f303 	mul.w	r3, r1, r3
 8010444:	1ad3      	subs	r3, r2, r3
 8010446:	011b      	lsls	r3, r3, #4
 8010448:	3332      	adds	r3, #50	@ 0x32
 801044a:	4a08      	ldr	r2, [pc, #32]	@ (801046c <UART_SetConfig+0x4e4>)
 801044c:	fba2 2303 	umull	r2, r3, r2, r3
 8010450:	095b      	lsrs	r3, r3, #5
 8010452:	f003 020f 	and.w	r2, r3, #15
 8010456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4422      	add	r2, r4
 801045e:	609a      	str	r2, [r3, #8]
}
 8010460:	bf00      	nop
 8010462:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010466:	46bd      	mov	sp, r7
 8010468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801046c:	51eb851f 	.word	0x51eb851f

08010470 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f103 0208 	add.w	r2, r3, #8
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f04f 32ff 	mov.w	r2, #4294967295
 8010488:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f103 0208 	add.w	r2, r3, #8
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f103 0208 	add.w	r2, r3, #8
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2200      	movs	r2, #0
 80104a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80104a4:	bf00      	nop
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2200      	movs	r2, #0
 80104bc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80104be:	bf00      	nop
 80104c0:	370c      	adds	r7, #12
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80104ca:	b480      	push	{r7}
 80104cc:	b085      	sub	sp, #20
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
 80104d2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	68fa      	ldr	r2, [r7, #12]
 80104de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	689a      	ldr	r2, [r3, #8]
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	683a      	ldr	r2, [r7, #0]
 80104ee:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	683a      	ldr	r2, [r7, #0]
 80104f4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	1c5a      	adds	r2, r3, #1
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	601a      	str	r2, [r3, #0]
}
 8010506:	bf00      	nop
 8010508:	3714      	adds	r7, #20
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr

08010512 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8010512:	b480      	push	{r7}
 8010514:	b085      	sub	sp, #20
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
 801051a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010528:	d103      	bne.n	8010532 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	691b      	ldr	r3, [r3, #16]
 801052e:	60fb      	str	r3, [r7, #12]
 8010530:	e00c      	b.n	801054c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	3308      	adds	r3, #8
 8010536:	60fb      	str	r3, [r7, #12]
 8010538:	e002      	b.n	8010540 <vListInsert+0x2e>
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	60fb      	str	r3, [r7, #12]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	68ba      	ldr	r2, [r7, #8]
 8010548:	429a      	cmp	r2, r3
 801054a:	d2f6      	bcs.n	801053a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	685a      	ldr	r2, [r3, #4]
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	683a      	ldr	r2, [r7, #0]
 801055a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	683a      	ldr	r2, [r7, #0]
 8010566:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	1c5a      	adds	r2, r3, #1
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	601a      	str	r2, [r3, #0]
}
 8010578:	bf00      	nop
 801057a:	3714      	adds	r7, #20
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr

08010584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010584:	b480      	push	{r7}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	691b      	ldr	r3, [r3, #16]
 8010590:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	6892      	ldr	r2, [r2, #8]
 801059a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	6852      	ldr	r2, [r2, #4]
 80105a4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d103      	bne.n	80105b8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	689a      	ldr	r2, [r3, #8]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	1e5a      	subs	r2, r3, #1
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3714      	adds	r7, #20
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr

080105d8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d10b      	bne.n	8010604 <xQueueGenericReset+0x2c>
        __asm volatile
 80105ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105f0:	f383 8811 	msr	BASEPRI, r3
 80105f4:	f3bf 8f6f 	isb	sy
 80105f8:	f3bf 8f4f 	dsb	sy
 80105fc:	60bb      	str	r3, [r7, #8]
    }
 80105fe:	bf00      	nop
 8010600:	bf00      	nop
 8010602:	e7fd      	b.n	8010600 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8010604:	f001 ffba 	bl	801257c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010610:	68f9      	ldr	r1, [r7, #12]
 8010612:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010614:	fb01 f303 	mul.w	r3, r1, r3
 8010618:	441a      	add	r2, r3
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	2200      	movs	r2, #0
 8010622:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681a      	ldr	r2, [r3, #0]
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010634:	3b01      	subs	r3, #1
 8010636:	68f9      	ldr	r1, [r7, #12]
 8010638:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801063a:	fb01 f303 	mul.w	r3, r1, r3
 801063e:	441a      	add	r2, r3
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	22ff      	movs	r2, #255	@ 0xff
 8010648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	22ff      	movs	r2, #255	@ 0xff
 8010650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d114      	bne.n	8010684 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	691b      	ldr	r3, [r3, #16]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d01a      	beq.n	8010698 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	3310      	adds	r3, #16
 8010666:	4618      	mov	r0, r3
 8010668:	f001 f898 	bl	801179c <xTaskRemoveFromEventList>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d012      	beq.n	8010698 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8010672:	4b0d      	ldr	r3, [pc, #52]	@ (80106a8 <xQueueGenericReset+0xd0>)
 8010674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010678:	601a      	str	r2, [r3, #0]
 801067a:	f3bf 8f4f 	dsb	sy
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	e009      	b.n	8010698 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	3310      	adds	r3, #16
 8010688:	4618      	mov	r0, r3
 801068a:	f7ff fef1 	bl	8010470 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	3324      	adds	r3, #36	@ 0x24
 8010692:	4618      	mov	r0, r3
 8010694:	f7ff feec 	bl	8010470 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8010698:	f001 ffa2 	bl	80125e0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 801069c:	2301      	movs	r3, #1
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	e000ed04 	.word	0xe000ed04

080106ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b08c      	sub	sp, #48	@ 0x30
 80106b0:	af02      	add	r7, sp, #8
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	4613      	mov	r3, r2
 80106b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d10b      	bne.n	80106d8 <xQueueGenericCreate+0x2c>
        __asm volatile
 80106c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c4:	f383 8811 	msr	BASEPRI, r3
 80106c8:	f3bf 8f6f 	isb	sy
 80106cc:	f3bf 8f4f 	dsb	sy
 80106d0:	61bb      	str	r3, [r7, #24]
    }
 80106d2:	bf00      	nop
 80106d4:	bf00      	nop
 80106d6:	e7fd      	b.n	80106d4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	68ba      	ldr	r2, [r7, #8]
 80106dc:	fb02 f303 	mul.w	r3, r2, r3
 80106e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d006      	beq.n	80106f6 <xQueueGenericCreate+0x4a>
 80106e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80106f0:	68fa      	ldr	r2, [r7, #12]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d101      	bne.n	80106fa <xQueueGenericCreate+0x4e>
 80106f6:	2301      	movs	r3, #1
 80106f8:	e000      	b.n	80106fc <xQueueGenericCreate+0x50>
 80106fa:	2300      	movs	r3, #0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10b      	bne.n	8010718 <xQueueGenericCreate+0x6c>
        __asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	617b      	str	r3, [r7, #20]
    }
 8010712:	bf00      	nop
 8010714:	bf00      	nop
 8010716:	e7fd      	b.n	8010714 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8010718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 801071e:	d90b      	bls.n	8010738 <xQueueGenericCreate+0x8c>
        __asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	613b      	str	r3, [r7, #16]
    }
 8010732:	bf00      	nop
 8010734:	bf00      	nop
 8010736:	e7fd      	b.n	8010734 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073a:	3350      	adds	r3, #80	@ 0x50
 801073c:	4618      	mov	r0, r3
 801073e:	f002 f847 	bl	80127d0 <pvPortMalloc>
 8010742:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8010744:	6a3b      	ldr	r3, [r7, #32]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00d      	beq.n	8010766 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801074a:	6a3b      	ldr	r3, [r7, #32]
 801074c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801074e:	69fb      	ldr	r3, [r7, #28]
 8010750:	3350      	adds	r3, #80	@ 0x50
 8010752:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010754:	79fa      	ldrb	r2, [r7, #7]
 8010756:	6a3b      	ldr	r3, [r7, #32]
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	4613      	mov	r3, r2
 801075c:	69fa      	ldr	r2, [r7, #28]
 801075e:	68b9      	ldr	r1, [r7, #8]
 8010760:	68f8      	ldr	r0, [r7, #12]
 8010762:	f000 f805 	bl	8010770 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8010766:	6a3b      	ldr	r3, [r7, #32]
    }
 8010768:	4618      	mov	r0, r3
 801076a:	3728      	adds	r7, #40	@ 0x28
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d103      	bne.n	801078c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010784:	69bb      	ldr	r3, [r7, #24]
 8010786:	69ba      	ldr	r2, [r7, #24]
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	e002      	b.n	8010792 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801078c:	69bb      	ldr	r3, [r7, #24]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	68ba      	ldr	r2, [r7, #8]
 801079c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801079e:	2101      	movs	r1, #1
 80107a0:	69b8      	ldr	r0, [r7, #24]
 80107a2:	f7ff ff19 	bl	80105d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	78fa      	ldrb	r2, [r7, #3]
 80107aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80107ae:	bf00      	nop
 80107b0:	3710      	adds	r7, #16
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
	...

080107b8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b08e      	sub	sp, #56	@ 0x38
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	607a      	str	r2, [r7, #4]
 80107c4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80107c6:	2300      	movs	r3, #0
 80107c8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80107ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d10b      	bne.n	80107ec <xQueueGenericSend+0x34>
        __asm volatile
 80107d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107d8:	f383 8811 	msr	BASEPRI, r3
 80107dc:	f3bf 8f6f 	isb	sy
 80107e0:	f3bf 8f4f 	dsb	sy
 80107e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80107e6:	bf00      	nop
 80107e8:	bf00      	nop
 80107ea:	e7fd      	b.n	80107e8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d103      	bne.n	80107fa <xQueueGenericSend+0x42>
 80107f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d101      	bne.n	80107fe <xQueueGenericSend+0x46>
 80107fa:	2301      	movs	r3, #1
 80107fc:	e000      	b.n	8010800 <xQueueGenericSend+0x48>
 80107fe:	2300      	movs	r3, #0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d10b      	bne.n	801081c <xQueueGenericSend+0x64>
        __asm volatile
 8010804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010808:	f383 8811 	msr	BASEPRI, r3
 801080c:	f3bf 8f6f 	isb	sy
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8010816:	bf00      	nop
 8010818:	bf00      	nop
 801081a:	e7fd      	b.n	8010818 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	2b02      	cmp	r3, #2
 8010820:	d103      	bne.n	801082a <xQueueGenericSend+0x72>
 8010822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010826:	2b01      	cmp	r3, #1
 8010828:	d101      	bne.n	801082e <xQueueGenericSend+0x76>
 801082a:	2301      	movs	r3, #1
 801082c:	e000      	b.n	8010830 <xQueueGenericSend+0x78>
 801082e:	2300      	movs	r3, #0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d10b      	bne.n	801084c <xQueueGenericSend+0x94>
        __asm volatile
 8010834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	623b      	str	r3, [r7, #32]
    }
 8010846:	bf00      	nop
 8010848:	bf00      	nop
 801084a:	e7fd      	b.n	8010848 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801084c:	f001 f946 	bl	8011adc <xTaskGetSchedulerState>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d102      	bne.n	801085c <xQueueGenericSend+0xa4>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d101      	bne.n	8010860 <xQueueGenericSend+0xa8>
 801085c:	2301      	movs	r3, #1
 801085e:	e000      	b.n	8010862 <xQueueGenericSend+0xaa>
 8010860:	2300      	movs	r3, #0
 8010862:	2b00      	cmp	r3, #0
 8010864:	d10b      	bne.n	801087e <xQueueGenericSend+0xc6>
        __asm volatile
 8010866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801086a:	f383 8811 	msr	BASEPRI, r3
 801086e:	f3bf 8f6f 	isb	sy
 8010872:	f3bf 8f4f 	dsb	sy
 8010876:	61fb      	str	r3, [r7, #28]
    }
 8010878:	bf00      	nop
 801087a:	bf00      	nop
 801087c:	e7fd      	b.n	801087a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801087e:	f001 fe7d 	bl	801257c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801088a:	429a      	cmp	r2, r3
 801088c:	d302      	bcc.n	8010894 <xQueueGenericSend+0xdc>
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	2b02      	cmp	r3, #2
 8010892:	d129      	bne.n	80108e8 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010894:	683a      	ldr	r2, [r7, #0]
 8010896:	68b9      	ldr	r1, [r7, #8]
 8010898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801089a:	f000 fa1f 	bl	8010cdc <prvCopyDataToQueue>
 801089e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d010      	beq.n	80108ca <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108aa:	3324      	adds	r3, #36	@ 0x24
 80108ac:	4618      	mov	r0, r3
 80108ae:	f000 ff75 	bl	801179c <xTaskRemoveFromEventList>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d013      	beq.n	80108e0 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80108b8:	4b3f      	ldr	r3, [pc, #252]	@ (80109b8 <xQueueGenericSend+0x200>)
 80108ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108be:	601a      	str	r2, [r3, #0]
 80108c0:	f3bf 8f4f 	dsb	sy
 80108c4:	f3bf 8f6f 	isb	sy
 80108c8:	e00a      	b.n	80108e0 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80108ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d007      	beq.n	80108e0 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80108d0:	4b39      	ldr	r3, [pc, #228]	@ (80109b8 <xQueueGenericSend+0x200>)
 80108d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108d6:	601a      	str	r2, [r3, #0]
 80108d8:	f3bf 8f4f 	dsb	sy
 80108dc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80108e0:	f001 fe7e 	bl	80125e0 <vPortExitCritical>
                return pdPASS;
 80108e4:	2301      	movs	r3, #1
 80108e6:	e063      	b.n	80109b0 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d103      	bne.n	80108f6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80108ee:	f001 fe77 	bl	80125e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80108f2:	2300      	movs	r3, #0
 80108f4:	e05c      	b.n	80109b0 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80108f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d106      	bne.n	801090a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80108fc:	f107 0314 	add.w	r3, r7, #20
 8010900:	4618      	mov	r0, r3
 8010902:	f000 ffaf 	bl	8011864 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8010906:	2301      	movs	r3, #1
 8010908:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 801090a:	f001 fe69 	bl	80125e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801090e:	f000 fd21 	bl	8011354 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8010912:	f001 fe33 	bl	801257c <vPortEnterCritical>
 8010916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801091c:	b25b      	sxtb	r3, r3
 801091e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010922:	d103      	bne.n	801092c <xQueueGenericSend+0x174>
 8010924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010926:	2200      	movs	r2, #0
 8010928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801092c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010932:	b25b      	sxtb	r3, r3
 8010934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010938:	d103      	bne.n	8010942 <xQueueGenericSend+0x18a>
 801093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093c:	2200      	movs	r2, #0
 801093e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010942:	f001 fe4d 	bl	80125e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010946:	1d3a      	adds	r2, r7, #4
 8010948:	f107 0314 	add.w	r3, r7, #20
 801094c:	4611      	mov	r1, r2
 801094e:	4618      	mov	r0, r3
 8010950:	f000 ff9e 	bl	8011890 <xTaskCheckForTimeOut>
 8010954:	4603      	mov	r3, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d124      	bne.n	80109a4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801095a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801095c:	f000 fab6 	bl	8010ecc <prvIsQueueFull>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d018      	beq.n	8010998 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010968:	3310      	adds	r3, #16
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	4611      	mov	r1, r2
 801096e:	4618      	mov	r0, r3
 8010970:	f000 fec2 	bl	80116f8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8010974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010976:	f000 fa41 	bl	8010dfc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 801097a:	f000 fcf9 	bl	8011370 <xTaskResumeAll>
 801097e:	4603      	mov	r3, r0
 8010980:	2b00      	cmp	r3, #0
 8010982:	f47f af7c 	bne.w	801087e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8010986:	4b0c      	ldr	r3, [pc, #48]	@ (80109b8 <xQueueGenericSend+0x200>)
 8010988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	f3bf 8f4f 	dsb	sy
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	e772      	b.n	801087e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8010998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801099a:	f000 fa2f 	bl	8010dfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801099e:	f000 fce7 	bl	8011370 <xTaskResumeAll>
 80109a2:	e76c      	b.n	801087e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80109a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80109a6:	f000 fa29 	bl	8010dfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80109aa:	f000 fce1 	bl	8011370 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80109ae:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3738      	adds	r7, #56	@ 0x38
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	e000ed04 	.word	0xe000ed04

080109bc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b090      	sub	sp, #64	@ 0x40
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	60f8      	str	r0, [r7, #12]
 80109c4:	60b9      	str	r1, [r7, #8]
 80109c6:	607a      	str	r2, [r7, #4]
 80109c8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80109ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d10b      	bne.n	80109ec <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80109d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d8:	f383 8811 	msr	BASEPRI, r3
 80109dc:	f3bf 8f6f 	isb	sy
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80109e6:	bf00      	nop
 80109e8:	bf00      	nop
 80109ea:	e7fd      	b.n	80109e8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d103      	bne.n	80109fa <xQueueGenericSendFromISR+0x3e>
 80109f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d101      	bne.n	80109fe <xQueueGenericSendFromISR+0x42>
 80109fa:	2301      	movs	r3, #1
 80109fc:	e000      	b.n	8010a00 <xQueueGenericSendFromISR+0x44>
 80109fe:	2300      	movs	r3, #0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d10b      	bne.n	8010a1c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8010a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a08:	f383 8811 	msr	BASEPRI, r3
 8010a0c:	f3bf 8f6f 	isb	sy
 8010a10:	f3bf 8f4f 	dsb	sy
 8010a14:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8010a16:	bf00      	nop
 8010a18:	bf00      	nop
 8010a1a:	e7fd      	b.n	8010a18 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	2b02      	cmp	r3, #2
 8010a20:	d103      	bne.n	8010a2a <xQueueGenericSendFromISR+0x6e>
 8010a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d101      	bne.n	8010a2e <xQueueGenericSendFromISR+0x72>
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e000      	b.n	8010a30 <xQueueGenericSendFromISR+0x74>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d10b      	bne.n	8010a4c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8010a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a38:	f383 8811 	msr	BASEPRI, r3
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	f3bf 8f4f 	dsb	sy
 8010a44:	623b      	str	r3, [r7, #32]
    }
 8010a46:	bf00      	nop
 8010a48:	bf00      	nop
 8010a4a:	e7fd      	b.n	8010a48 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a4c:	f001 fe7e 	bl	801274c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8010a50:	f3ef 8211 	mrs	r2, BASEPRI
 8010a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a58:	f383 8811 	msr	BASEPRI, r3
 8010a5c:	f3bf 8f6f 	isb	sy
 8010a60:	f3bf 8f4f 	dsb	sy
 8010a64:	61fa      	str	r2, [r7, #28]
 8010a66:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8010a68:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d302      	bcc.n	8010a7e <xQueueGenericSendFromISR+0xc2>
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	2b02      	cmp	r3, #2
 8010a7c:	d13f      	bne.n	8010afe <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8010a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010a84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a8e:	683a      	ldr	r2, [r7, #0]
 8010a90:	68b9      	ldr	r1, [r7, #8]
 8010a92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010a94:	f000 f922 	bl	8010cdc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8010a98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa0:	d112      	bne.n	8010ac8 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d026      	beq.n	8010af8 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aac:	3324      	adds	r3, #36	@ 0x24
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 fe74 	bl	801179c <xTaskRemoveFromEventList>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d01e      	beq.n	8010af8 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d01b      	beq.n	8010af8 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	601a      	str	r2, [r3, #0]
 8010ac6:	e017      	b.n	8010af8 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8010ac8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010acc:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ace:	d10b      	bne.n	8010ae8 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8010ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ad4:	f383 8811 	msr	BASEPRI, r3
 8010ad8:	f3bf 8f6f 	isb	sy
 8010adc:	f3bf 8f4f 	dsb	sy
 8010ae0:	617b      	str	r3, [r7, #20]
    }
 8010ae2:	bf00      	nop
 8010ae4:	bf00      	nop
 8010ae6:	e7fd      	b.n	8010ae4 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010aec:	3301      	adds	r3, #1
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	b25a      	sxtb	r2, r3
 8010af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8010af8:	2301      	movs	r3, #1
 8010afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8010afc:	e001      	b.n	8010b02 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8010afe:	2300      	movs	r3, #0
 8010b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b04:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8010b0c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8010b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3740      	adds	r7, #64	@ 0x40
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b08c      	sub	sp, #48	@ 0x30
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8010b24:	2300      	movs	r3, #0
 8010b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8010b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d10b      	bne.n	8010b4a <xQueueReceive+0x32>
        __asm volatile
 8010b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b36:	f383 8811 	msr	BASEPRI, r3
 8010b3a:	f3bf 8f6f 	isb	sy
 8010b3e:	f3bf 8f4f 	dsb	sy
 8010b42:	623b      	str	r3, [r7, #32]
    }
 8010b44:	bf00      	nop
 8010b46:	bf00      	nop
 8010b48:	e7fd      	b.n	8010b46 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d103      	bne.n	8010b58 <xQueueReceive+0x40>
 8010b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d101      	bne.n	8010b5c <xQueueReceive+0x44>
 8010b58:	2301      	movs	r3, #1
 8010b5a:	e000      	b.n	8010b5e <xQueueReceive+0x46>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d10b      	bne.n	8010b7a <xQueueReceive+0x62>
        __asm volatile
 8010b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b66:	f383 8811 	msr	BASEPRI, r3
 8010b6a:	f3bf 8f6f 	isb	sy
 8010b6e:	f3bf 8f4f 	dsb	sy
 8010b72:	61fb      	str	r3, [r7, #28]
    }
 8010b74:	bf00      	nop
 8010b76:	bf00      	nop
 8010b78:	e7fd      	b.n	8010b76 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b7a:	f000 ffaf 	bl	8011adc <xTaskGetSchedulerState>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d102      	bne.n	8010b8a <xQueueReceive+0x72>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d101      	bne.n	8010b8e <xQueueReceive+0x76>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e000      	b.n	8010b90 <xQueueReceive+0x78>
 8010b8e:	2300      	movs	r3, #0
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d10b      	bne.n	8010bac <xQueueReceive+0x94>
        __asm volatile
 8010b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b98:	f383 8811 	msr	BASEPRI, r3
 8010b9c:	f3bf 8f6f 	isb	sy
 8010ba0:	f3bf 8f4f 	dsb	sy
 8010ba4:	61bb      	str	r3, [r7, #24]
    }
 8010ba6:	bf00      	nop
 8010ba8:	bf00      	nop
 8010baa:	e7fd      	b.n	8010ba8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8010bac:	f001 fce6 	bl	801257c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bb4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d01f      	beq.n	8010bfc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010bbc:	68b9      	ldr	r1, [r7, #8]
 8010bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010bc0:	f000 f8f6 	bl	8010db0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc6:	1e5a      	subs	r2, r3, #1
 8010bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bca:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bce:	691b      	ldr	r3, [r3, #16]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d00f      	beq.n	8010bf4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bd6:	3310      	adds	r3, #16
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f000 fddf 	bl	801179c <xTaskRemoveFromEventList>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d007      	beq.n	8010bf4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8010be4:	4b3c      	ldr	r3, [pc, #240]	@ (8010cd8 <xQueueReceive+0x1c0>)
 8010be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	f3bf 8f4f 	dsb	sy
 8010bf0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8010bf4:	f001 fcf4 	bl	80125e0 <vPortExitCritical>
                return pdPASS;
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e069      	b.n	8010cd0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d103      	bne.n	8010c0a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8010c02:	f001 fced 	bl	80125e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8010c06:	2300      	movs	r3, #0
 8010c08:	e062      	b.n	8010cd0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8010c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d106      	bne.n	8010c1e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8010c10:	f107 0310 	add.w	r3, r7, #16
 8010c14:	4618      	mov	r0, r3
 8010c16:	f000 fe25 	bl	8011864 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8010c1e:	f001 fcdf 	bl	80125e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8010c22:	f000 fb97 	bl	8011354 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8010c26:	f001 fca9 	bl	801257c <vPortEnterCritical>
 8010c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c30:	b25b      	sxtb	r3, r3
 8010c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c36:	d103      	bne.n	8010c40 <xQueueReceive+0x128>
 8010c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c46:	b25b      	sxtb	r3, r3
 8010c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c4c:	d103      	bne.n	8010c56 <xQueueReceive+0x13e>
 8010c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c50:	2200      	movs	r2, #0
 8010c52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010c56:	f001 fcc3 	bl	80125e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c5a:	1d3a      	adds	r2, r7, #4
 8010c5c:	f107 0310 	add.w	r3, r7, #16
 8010c60:	4611      	mov	r1, r2
 8010c62:	4618      	mov	r0, r3
 8010c64:	f000 fe14 	bl	8011890 <xTaskCheckForTimeOut>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d123      	bne.n	8010cb6 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010c70:	f000 f916 	bl	8010ea0 <prvIsQueueEmpty>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d017      	beq.n	8010caa <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c7c:	3324      	adds	r3, #36	@ 0x24
 8010c7e:	687a      	ldr	r2, [r7, #4]
 8010c80:	4611      	mov	r1, r2
 8010c82:	4618      	mov	r0, r3
 8010c84:	f000 fd38 	bl	80116f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8010c88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010c8a:	f000 f8b7 	bl	8010dfc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8010c8e:	f000 fb6f 	bl	8011370 <xTaskResumeAll>
 8010c92:	4603      	mov	r3, r0
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d189      	bne.n	8010bac <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8010c98:	4b0f      	ldr	r3, [pc, #60]	@ (8010cd8 <xQueueReceive+0x1c0>)
 8010c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c9e:	601a      	str	r2, [r3, #0]
 8010ca0:	f3bf 8f4f 	dsb	sy
 8010ca4:	f3bf 8f6f 	isb	sy
 8010ca8:	e780      	b.n	8010bac <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8010caa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010cac:	f000 f8a6 	bl	8010dfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8010cb0:	f000 fb5e 	bl	8011370 <xTaskResumeAll>
 8010cb4:	e77a      	b.n	8010bac <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8010cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010cb8:	f000 f8a0 	bl	8010dfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8010cbc:	f000 fb58 	bl	8011370 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010cc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010cc2:	f000 f8ed 	bl	8010ea0 <prvIsQueueEmpty>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f43f af6f 	beq.w	8010bac <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8010cce:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3730      	adds	r7, #48	@ 0x30
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	e000ed04 	.word	0xe000ed04

08010cdc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b086      	sub	sp, #24
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cf0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d10d      	bne.n	8010d16 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d14d      	bne.n	8010d9e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f000 ff06 	bl	8011b18 <xTaskPriorityDisinherit>
 8010d0c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2200      	movs	r2, #0
 8010d12:	609a      	str	r2, [r3, #8]
 8010d14:	e043      	b.n	8010d9e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d119      	bne.n	8010d50 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	6858      	ldr	r0, [r3, #4]
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d24:	461a      	mov	r2, r3
 8010d26:	68b9      	ldr	r1, [r7, #8]
 8010d28:	f003 f9b7 	bl	801409a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	685a      	ldr	r2, [r3, #4]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d34:	441a      	add	r2, r3
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	685a      	ldr	r2, [r3, #4]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	689b      	ldr	r3, [r3, #8]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d32b      	bcc.n	8010d9e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	605a      	str	r2, [r3, #4]
 8010d4e:	e026      	b.n	8010d9e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	68d8      	ldr	r0, [r3, #12]
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d58:	461a      	mov	r2, r3
 8010d5a:	68b9      	ldr	r1, [r7, #8]
 8010d5c:	f003 f99d 	bl	801409a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	68da      	ldr	r2, [r3, #12]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d68:	425b      	negs	r3, r3
 8010d6a:	441a      	add	r2, r3
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	68da      	ldr	r2, [r3, #12]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d207      	bcs.n	8010d8c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	689a      	ldr	r2, [r3, #8]
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d84:	425b      	negs	r3, r3
 8010d86:	441a      	add	r2, r3
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b02      	cmp	r3, #2
 8010d90:	d105      	bne.n	8010d9e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	3b01      	subs	r3, #1
 8010d9c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	1c5a      	adds	r2, r3, #1
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8010da6:	697b      	ldr	r3, [r7, #20]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3718      	adds	r7, #24
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d018      	beq.n	8010df4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	68da      	ldr	r2, [r3, #12]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dca:	441a      	add	r2, r3
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	68da      	ldr	r2, [r3, #12]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	689b      	ldr	r3, [r3, #8]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d303      	bcc.n	8010de4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	68d9      	ldr	r1, [r3, #12]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dec:	461a      	mov	r2, r3
 8010dee:	6838      	ldr	r0, [r7, #0]
 8010df0:	f003 f953 	bl	801409a <memcpy>
    }
}
 8010df4:	bf00      	nop
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8010e04:	f001 fbba 	bl	801257c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010e0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e10:	e011      	b.n	8010e36 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d012      	beq.n	8010e40 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	3324      	adds	r3, #36	@ 0x24
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f000 fcbc 	bl	801179c <xTaskRemoveFromEventList>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d001      	beq.n	8010e2e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8010e2a:	f000 fd99 	bl	8011960 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8010e2e:	7bfb      	ldrb	r3, [r7, #15]
 8010e30:	3b01      	subs	r3, #1
 8010e32:	b2db      	uxtb	r3, r3
 8010e34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	dce9      	bgt.n	8010e12 <prvUnlockQueue+0x16>
 8010e3e:	e000      	b.n	8010e42 <prvUnlockQueue+0x46>
                        break;
 8010e40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	22ff      	movs	r2, #255	@ 0xff
 8010e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8010e4a:	f001 fbc9 	bl	80125e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8010e4e:	f001 fb95 	bl	801257c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010e58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e5a:	e011      	b.n	8010e80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	691b      	ldr	r3, [r3, #16]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d012      	beq.n	8010e8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	3310      	adds	r3, #16
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f000 fc97 	bl	801179c <xTaskRemoveFromEventList>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d001      	beq.n	8010e78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8010e74:	f000 fd74 	bl	8011960 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8010e78:	7bbb      	ldrb	r3, [r7, #14]
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	b2db      	uxtb	r3, r3
 8010e7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	dce9      	bgt.n	8010e5c <prvUnlockQueue+0x60>
 8010e88:	e000      	b.n	8010e8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8010e8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	22ff      	movs	r2, #255	@ 0xff
 8010e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8010e94:	f001 fba4 	bl	80125e0 <vPortExitCritical>
}
 8010e98:	bf00      	nop
 8010e9a:	3710      	adds	r7, #16
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8010ea8:	f001 fb68 	bl	801257c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d102      	bne.n	8010eba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	60fb      	str	r3, [r7, #12]
 8010eb8:	e001      	b.n	8010ebe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8010ebe:	f001 fb8f 	bl	80125e0 <vPortExitCritical>

    return xReturn;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3710      	adds	r7, #16
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b084      	sub	sp, #16
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8010ed4:	f001 fb52 	bl	801257c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d102      	bne.n	8010eea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	60fb      	str	r3, [r7, #12]
 8010ee8:	e001      	b.n	8010eee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8010eea:	2300      	movs	r3, #0
 8010eec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8010eee:	f001 fb77 	bl	80125e0 <vPortExitCritical>

    return xReturn;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3710      	adds	r7, #16
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8010efc:	b480      	push	{r7}
 8010efe:	b085      	sub	sp, #20
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f06:	2300      	movs	r3, #0
 8010f08:	60fb      	str	r3, [r7, #12]
 8010f0a:	e014      	b.n	8010f36 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8010f4c <vQueueAddToRegistry+0x50>)
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d10b      	bne.n	8010f30 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010f18:	490c      	ldr	r1, [pc, #48]	@ (8010f4c <vQueueAddToRegistry+0x50>)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	683a      	ldr	r2, [r7, #0]
 8010f1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8010f22:	4a0a      	ldr	r2, [pc, #40]	@ (8010f4c <vQueueAddToRegistry+0x50>)
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	00db      	lsls	r3, r3, #3
 8010f28:	4413      	add	r3, r2
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8010f2e:	e006      	b.n	8010f3e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	3301      	adds	r3, #1
 8010f34:	60fb      	str	r3, [r7, #12]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2b07      	cmp	r3, #7
 8010f3a:	d9e7      	bls.n	8010f0c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8010f3c:	bf00      	nop
 8010f3e:	bf00      	nop
 8010f40:	3714      	adds	r7, #20
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr
 8010f4a:	bf00      	nop
 8010f4c:	20000578 	.word	0x20000578

08010f50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b086      	sub	sp, #24
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8010f60:	f001 fb0c 	bl	801257c <vPortEnterCritical>
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010f6a:	b25b      	sxtb	r3, r3
 8010f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f70:	d103      	bne.n	8010f7a <vQueueWaitForMessageRestricted+0x2a>
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	2200      	movs	r2, #0
 8010f76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010f80:	b25b      	sxtb	r3, r3
 8010f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f86:	d103      	bne.n	8010f90 <vQueueWaitForMessageRestricted+0x40>
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010f90:	f001 fb26 	bl	80125e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d106      	bne.n	8010faa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	3324      	adds	r3, #36	@ 0x24
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	68b9      	ldr	r1, [r7, #8]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f000 fbcd 	bl	8011744 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8010faa:	6978      	ldr	r0, [r7, #20]
 8010fac:	f7ff ff26 	bl	8010dfc <prvUnlockQueue>
    }
 8010fb0:	bf00      	nop
 8010fb2:	3718      	adds	r7, #24
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b08c      	sub	sp, #48	@ 0x30
 8010fbc:	af04      	add	r7, sp, #16
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	603b      	str	r3, [r7, #0]
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010fc8:	88fb      	ldrh	r3, [r7, #6]
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f001 fbff 	bl	80127d0 <pvPortMalloc>
 8010fd2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d00e      	beq.n	8010ff8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010fda:	2058      	movs	r0, #88	@ 0x58
 8010fdc:	f001 fbf8 	bl	80127d0 <pvPortMalloc>
 8010fe0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d003      	beq.n	8010ff0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	631a      	str	r2, [r3, #48]	@ 0x30
 8010fee:	e005      	b.n	8010ffc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8010ff0:	6978      	ldr	r0, [r7, #20]
 8010ff2:	f001 fccf 	bl	8012994 <vPortFree>
 8010ff6:	e001      	b.n	8010ffc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8010ffc:	69fb      	ldr	r3, [r7, #28]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d013      	beq.n	801102a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011002:	88fa      	ldrh	r2, [r7, #6]
 8011004:	2300      	movs	r3, #0
 8011006:	9303      	str	r3, [sp, #12]
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	9302      	str	r3, [sp, #8]
 801100c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801100e:	9301      	str	r3, [sp, #4]
 8011010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	68b9      	ldr	r1, [r7, #8]
 8011018:	68f8      	ldr	r0, [r7, #12]
 801101a:	f000 f80e 	bl	801103a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 801101e:	69f8      	ldr	r0, [r7, #28]
 8011020:	f000 f8a2 	bl	8011168 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8011024:	2301      	movs	r3, #1
 8011026:	61bb      	str	r3, [r7, #24]
 8011028:	e002      	b.n	8011030 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801102a:	f04f 33ff 	mov.w	r3, #4294967295
 801102e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8011030:	69bb      	ldr	r3, [r7, #24]
    }
 8011032:	4618      	mov	r0, r3
 8011034:	3720      	adds	r7, #32
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}

0801103a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 801103a:	b580      	push	{r7, lr}
 801103c:	b088      	sub	sp, #32
 801103e:	af00      	add	r7, sp, #0
 8011040:	60f8      	str	r0, [r7, #12]
 8011042:	60b9      	str	r1, [r7, #8]
 8011044:	607a      	str	r2, [r7, #4]
 8011046:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801104a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	461a      	mov	r2, r3
 8011052:	21a5      	movs	r1, #165	@ 0xa5
 8011054:	f002 ff70 	bl	8013f38 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801105a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011062:	3b01      	subs	r3, #1
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	4413      	add	r3, r2
 8011068:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	f023 0307 	bic.w	r3, r3, #7
 8011070:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011072:	69bb      	ldr	r3, [r7, #24]
 8011074:	f003 0307 	and.w	r3, r3, #7
 8011078:	2b00      	cmp	r3, #0
 801107a:	d00b      	beq.n	8011094 <prvInitialiseNewTask+0x5a>
        __asm volatile
 801107c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011080:	f383 8811 	msr	BASEPRI, r3
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	f3bf 8f4f 	dsb	sy
 801108c:	617b      	str	r3, [r7, #20]
    }
 801108e:	bf00      	nop
 8011090:	bf00      	nop
 8011092:	e7fd      	b.n	8011090 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d01f      	beq.n	80110da <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801109a:	2300      	movs	r3, #0
 801109c:	61fb      	str	r3, [r7, #28]
 801109e:	e012      	b.n	80110c6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80110a0:	68ba      	ldr	r2, [r7, #8]
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	4413      	add	r3, r2
 80110a6:	7819      	ldrb	r1, [r3, #0]
 80110a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	4413      	add	r3, r2
 80110ae:	3334      	adds	r3, #52	@ 0x34
 80110b0:	460a      	mov	r2, r1
 80110b2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	4413      	add	r3, r2
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d006      	beq.n	80110ce <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	3301      	adds	r3, #1
 80110c4:	61fb      	str	r3, [r7, #28]
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	2b09      	cmp	r3, #9
 80110ca:	d9e9      	bls.n	80110a0 <prvInitialiseNewTask+0x66>
 80110cc:	e000      	b.n	80110d0 <prvInitialiseNewTask+0x96>
            {
                break;
 80110ce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80110d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110d2:	2200      	movs	r2, #0
 80110d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80110d8:	e003      	b.n	80110e2 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80110da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110dc:	2200      	movs	r2, #0
 80110de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80110e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e4:	2b04      	cmp	r3, #4
 80110e6:	d901      	bls.n	80110ec <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80110e8:	2304      	movs	r3, #4
 80110ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80110ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80110f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110f6:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80110f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110fa:	2200      	movs	r2, #0
 80110fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80110fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011100:	3304      	adds	r3, #4
 8011102:	4618      	mov	r0, r3
 8011104:	f7ff f9d4 	bl	80104b0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801110a:	3318      	adds	r3, #24
 801110c:	4618      	mov	r0, r3
 801110e:	f7ff f9cf 	bl	80104b0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011116:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801111a:	f1c3 0205 	rsb	r2, r3, #5
 801111e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011120:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011126:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8011128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801112a:	3350      	adds	r3, #80	@ 0x50
 801112c:	2204      	movs	r2, #4
 801112e:	2100      	movs	r1, #0
 8011130:	4618      	mov	r0, r3
 8011132:	f002 ff01 	bl	8013f38 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8011136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011138:	3354      	adds	r3, #84	@ 0x54
 801113a:	2201      	movs	r2, #1
 801113c:	2100      	movs	r1, #0
 801113e:	4618      	mov	r0, r3
 8011140:	f002 fefa 	bl	8013f38 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011144:	683a      	ldr	r2, [r7, #0]
 8011146:	68f9      	ldr	r1, [r7, #12]
 8011148:	69b8      	ldr	r0, [r7, #24]
 801114a:	f001 f8e5 	bl	8012318 <pxPortInitialiseStack>
 801114e:	4602      	mov	r2, r0
 8011150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011152:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8011154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011156:	2b00      	cmp	r3, #0
 8011158:	d002      	beq.n	8011160 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801115a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801115c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801115e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8011160:	bf00      	nop
 8011162:	3720      	adds	r7, #32
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8011170:	f001 fa04 	bl	801257c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8011174:	4b2c      	ldr	r3, [pc, #176]	@ (8011228 <prvAddNewTaskToReadyList+0xc0>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	3301      	adds	r3, #1
 801117a:	4a2b      	ldr	r2, [pc, #172]	@ (8011228 <prvAddNewTaskToReadyList+0xc0>)
 801117c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 801117e:	4b2b      	ldr	r3, [pc, #172]	@ (801122c <prvAddNewTaskToReadyList+0xc4>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d109      	bne.n	801119a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8011186:	4a29      	ldr	r2, [pc, #164]	@ (801122c <prvAddNewTaskToReadyList+0xc4>)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801118c:	4b26      	ldr	r3, [pc, #152]	@ (8011228 <prvAddNewTaskToReadyList+0xc0>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b01      	cmp	r3, #1
 8011192:	d110      	bne.n	80111b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8011194:	f000 fc08 	bl	80119a8 <prvInitialiseTaskLists>
 8011198:	e00d      	b.n	80111b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 801119a:	4b25      	ldr	r3, [pc, #148]	@ (8011230 <prvAddNewTaskToReadyList+0xc8>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d109      	bne.n	80111b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80111a2:	4b22      	ldr	r3, [pc, #136]	@ (801122c <prvAddNewTaskToReadyList+0xc4>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d802      	bhi.n	80111b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80111b0:	4a1e      	ldr	r2, [pc, #120]	@ (801122c <prvAddNewTaskToReadyList+0xc4>)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80111b6:	4b1f      	ldr	r3, [pc, #124]	@ (8011234 <prvAddNewTaskToReadyList+0xcc>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	3301      	adds	r3, #1
 80111bc:	4a1d      	ldr	r2, [pc, #116]	@ (8011234 <prvAddNewTaskToReadyList+0xcc>)
 80111be:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80111c0:	4b1c      	ldr	r3, [pc, #112]	@ (8011234 <prvAddNewTaskToReadyList+0xcc>)
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111cc:	2201      	movs	r2, #1
 80111ce:	409a      	lsls	r2, r3
 80111d0:	4b19      	ldr	r3, [pc, #100]	@ (8011238 <prvAddNewTaskToReadyList+0xd0>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	4313      	orrs	r3, r2
 80111d6:	4a18      	ldr	r2, [pc, #96]	@ (8011238 <prvAddNewTaskToReadyList+0xd0>)
 80111d8:	6013      	str	r3, [r2, #0]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111de:	4613      	mov	r3, r2
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	4413      	add	r3, r2
 80111e4:	009b      	lsls	r3, r3, #2
 80111e6:	4a15      	ldr	r2, [pc, #84]	@ (801123c <prvAddNewTaskToReadyList+0xd4>)
 80111e8:	441a      	add	r2, r3
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	3304      	adds	r3, #4
 80111ee:	4619      	mov	r1, r3
 80111f0:	4610      	mov	r0, r2
 80111f2:	f7ff f96a 	bl	80104ca <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80111f6:	f001 f9f3 	bl	80125e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80111fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011230 <prvAddNewTaskToReadyList+0xc8>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d00e      	beq.n	8011220 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011202:	4b0a      	ldr	r3, [pc, #40]	@ (801122c <prvAddNewTaskToReadyList+0xc4>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801120c:	429a      	cmp	r2, r3
 801120e:	d207      	bcs.n	8011220 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8011210:	4b0b      	ldr	r3, [pc, #44]	@ (8011240 <prvAddNewTaskToReadyList+0xd8>)
 8011212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011216:	601a      	str	r2, [r3, #0]
 8011218:	f3bf 8f4f 	dsb	sy
 801121c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8011220:	bf00      	nop
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	20000690 	.word	0x20000690
 801122c:	200005b8 	.word	0x200005b8
 8011230:	2000069c 	.word	0x2000069c
 8011234:	200006ac 	.word	0x200006ac
 8011238:	20000698 	.word	0x20000698
 801123c:	200005bc 	.word	0x200005bc
 8011240:	e000ed04 	.word	0xe000ed04

08011244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8011244:	b580      	push	{r7, lr}
 8011246:	b084      	sub	sp, #16
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 801124c:	2300      	movs	r3, #0
 801124e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d018      	beq.n	8011288 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8011256:	4b14      	ldr	r3, [pc, #80]	@ (80112a8 <vTaskDelay+0x64>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00b      	beq.n	8011276 <vTaskDelay+0x32>
        __asm volatile
 801125e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011262:	f383 8811 	msr	BASEPRI, r3
 8011266:	f3bf 8f6f 	isb	sy
 801126a:	f3bf 8f4f 	dsb	sy
 801126e:	60bb      	str	r3, [r7, #8]
    }
 8011270:	bf00      	nop
 8011272:	bf00      	nop
 8011274:	e7fd      	b.n	8011272 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8011276:	f000 f86d 	bl	8011354 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801127a:	2100      	movs	r1, #0
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f000 fcc7 	bl	8011c10 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8011282:	f000 f875 	bl	8011370 <xTaskResumeAll>
 8011286:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d107      	bne.n	801129e <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 801128e:	4b07      	ldr	r3, [pc, #28]	@ (80112ac <vTaskDelay+0x68>)
 8011290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011294:	601a      	str	r2, [r3, #0]
 8011296:	f3bf 8f4f 	dsb	sy
 801129a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 801129e:	bf00      	nop
 80112a0:	3710      	adds	r7, #16
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	200006b8 	.word	0x200006b8
 80112ac:	e000ed04 	.word	0xe000ed04

080112b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80112b6:	4b20      	ldr	r3, [pc, #128]	@ (8011338 <vTaskStartScheduler+0x88>)
 80112b8:	9301      	str	r3, [sp, #4]
 80112ba:	2300      	movs	r3, #0
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	2300      	movs	r3, #0
 80112c0:	2282      	movs	r2, #130	@ 0x82
 80112c2:	491e      	ldr	r1, [pc, #120]	@ (801133c <vTaskStartScheduler+0x8c>)
 80112c4:	481e      	ldr	r0, [pc, #120]	@ (8011340 <vTaskStartScheduler+0x90>)
 80112c6:	f7ff fe77 	bl	8010fb8 <xTaskCreate>
 80112ca:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d102      	bne.n	80112d8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80112d2:	f000 fd03 	bl	8011cdc <xTimerCreateTimerTask>
 80112d6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d116      	bne.n	801130c <vTaskStartScheduler+0x5c>
        __asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	60bb      	str	r3, [r7, #8]
    }
 80112f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80112f2:	4b14      	ldr	r3, [pc, #80]	@ (8011344 <vTaskStartScheduler+0x94>)
 80112f4:	f04f 32ff 	mov.w	r2, #4294967295
 80112f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80112fa:	4b13      	ldr	r3, [pc, #76]	@ (8011348 <vTaskStartScheduler+0x98>)
 80112fc:	2201      	movs	r2, #1
 80112fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011300:	4b12      	ldr	r3, [pc, #72]	@ (801134c <vTaskStartScheduler+0x9c>)
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8011306:	f001 f895 	bl	8012434 <xPortStartScheduler>
 801130a:	e00f      	b.n	801132c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011312:	d10b      	bne.n	801132c <vTaskStartScheduler+0x7c>
        __asm volatile
 8011314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011318:	f383 8811 	msr	BASEPRI, r3
 801131c:	f3bf 8f6f 	isb	sy
 8011320:	f3bf 8f4f 	dsb	sy
 8011324:	607b      	str	r3, [r7, #4]
    }
 8011326:	bf00      	nop
 8011328:	bf00      	nop
 801132a:	e7fd      	b.n	8011328 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 801132c:	4b08      	ldr	r3, [pc, #32]	@ (8011350 <vTaskStartScheduler+0xa0>)
 801132e:	681b      	ldr	r3, [r3, #0]
}
 8011330:	bf00      	nop
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	200006b4 	.word	0x200006b4
 801133c:	080168ec 	.word	0x080168ec
 8011340:	08011979 	.word	0x08011979
 8011344:	200006b0 	.word	0x200006b0
 8011348:	2000069c 	.word	0x2000069c
 801134c:	20000694 	.word	0x20000694
 8011350:	0801710c 	.word	0x0801710c

08011354 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011354:	b480      	push	{r7}
 8011356:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8011358:	4b04      	ldr	r3, [pc, #16]	@ (801136c <vTaskSuspendAll+0x18>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	3301      	adds	r3, #1
 801135e:	4a03      	ldr	r2, [pc, #12]	@ (801136c <vTaskSuspendAll+0x18>)
 8011360:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8011362:	bf00      	nop
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr
 801136c:	200006b8 	.word	0x200006b8

08011370 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8011376:	2300      	movs	r3, #0
 8011378:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 801137a:	2300      	movs	r3, #0
 801137c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 801137e:	4b42      	ldr	r3, [pc, #264]	@ (8011488 <xTaskResumeAll+0x118>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d10b      	bne.n	801139e <xTaskResumeAll+0x2e>
        __asm volatile
 8011386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801138a:	f383 8811 	msr	BASEPRI, r3
 801138e:	f3bf 8f6f 	isb	sy
 8011392:	f3bf 8f4f 	dsb	sy
 8011396:	603b      	str	r3, [r7, #0]
    }
 8011398:	bf00      	nop
 801139a:	bf00      	nop
 801139c:	e7fd      	b.n	801139a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 801139e:	f001 f8ed 	bl	801257c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80113a2:	4b39      	ldr	r3, [pc, #228]	@ (8011488 <xTaskResumeAll+0x118>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	3b01      	subs	r3, #1
 80113a8:	4a37      	ldr	r2, [pc, #220]	@ (8011488 <xTaskResumeAll+0x118>)
 80113aa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113ac:	4b36      	ldr	r3, [pc, #216]	@ (8011488 <xTaskResumeAll+0x118>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d161      	bne.n	8011478 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80113b4:	4b35      	ldr	r3, [pc, #212]	@ (801148c <xTaskResumeAll+0x11c>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d05d      	beq.n	8011478 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80113bc:	e02e      	b.n	801141c <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113be:	4b34      	ldr	r3, [pc, #208]	@ (8011490 <xTaskResumeAll+0x120>)
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	3318      	adds	r3, #24
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff f8da 	bl	8010584 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	3304      	adds	r3, #4
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7ff f8d5 	bl	8010584 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113de:	2201      	movs	r2, #1
 80113e0:	409a      	lsls	r2, r3
 80113e2:	4b2c      	ldr	r3, [pc, #176]	@ (8011494 <xTaskResumeAll+0x124>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	4313      	orrs	r3, r2
 80113e8:	4a2a      	ldr	r2, [pc, #168]	@ (8011494 <xTaskResumeAll+0x124>)
 80113ea:	6013      	str	r3, [r2, #0]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113f0:	4613      	mov	r3, r2
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	4413      	add	r3, r2
 80113f6:	009b      	lsls	r3, r3, #2
 80113f8:	4a27      	ldr	r2, [pc, #156]	@ (8011498 <xTaskResumeAll+0x128>)
 80113fa:	441a      	add	r2, r3
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	3304      	adds	r3, #4
 8011400:	4619      	mov	r1, r3
 8011402:	4610      	mov	r0, r2
 8011404:	f7ff f861 	bl	80104ca <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801140c:	4b23      	ldr	r3, [pc, #140]	@ (801149c <xTaskResumeAll+0x12c>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011412:	429a      	cmp	r2, r3
 8011414:	d302      	bcc.n	801141c <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8011416:	4b22      	ldr	r3, [pc, #136]	@ (80114a0 <xTaskResumeAll+0x130>)
 8011418:	2201      	movs	r2, #1
 801141a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801141c:	4b1c      	ldr	r3, [pc, #112]	@ (8011490 <xTaskResumeAll+0x120>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1cc      	bne.n	80113be <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d001      	beq.n	801142e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 801142a:	f000 fb3b 	bl	8011aa4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801142e:	4b1d      	ldr	r3, [pc, #116]	@ (80114a4 <xTaskResumeAll+0x134>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d010      	beq.n	801145c <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 801143a:	f000 f847 	bl	80114cc <xTaskIncrementTick>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d002      	beq.n	801144a <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8011444:	4b16      	ldr	r3, [pc, #88]	@ (80114a0 <xTaskResumeAll+0x130>)
 8011446:	2201      	movs	r2, #1
 8011448:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	3b01      	subs	r3, #1
 801144e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d1f1      	bne.n	801143a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8011456:	4b13      	ldr	r3, [pc, #76]	@ (80114a4 <xTaskResumeAll+0x134>)
 8011458:	2200      	movs	r2, #0
 801145a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 801145c:	4b10      	ldr	r3, [pc, #64]	@ (80114a0 <xTaskResumeAll+0x130>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d009      	beq.n	8011478 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8011464:	2301      	movs	r3, #1
 8011466:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8011468:	4b0f      	ldr	r3, [pc, #60]	@ (80114a8 <xTaskResumeAll+0x138>)
 801146a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801146e:	601a      	str	r2, [r3, #0]
 8011470:	f3bf 8f4f 	dsb	sy
 8011474:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8011478:	f001 f8b2 	bl	80125e0 <vPortExitCritical>

    return xAlreadyYielded;
 801147c:	68bb      	ldr	r3, [r7, #8]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	200006b8 	.word	0x200006b8
 801148c:	20000690 	.word	0x20000690
 8011490:	20000650 	.word	0x20000650
 8011494:	20000698 	.word	0x20000698
 8011498:	200005bc 	.word	0x200005bc
 801149c:	200005b8 	.word	0x200005b8
 80114a0:	200006a4 	.word	0x200006a4
 80114a4:	200006a0 	.word	0x200006a0
 80114a8:	e000ed04 	.word	0xe000ed04

080114ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80114b2:	4b05      	ldr	r3, [pc, #20]	@ (80114c8 <xTaskGetTickCount+0x1c>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80114b8:	687b      	ldr	r3, [r7, #4]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	370c      	adds	r7, #12
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr
 80114c6:	bf00      	nop
 80114c8:	20000694 	.word	0x20000694

080114cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b086      	sub	sp, #24
 80114d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80114d2:	2300      	movs	r3, #0
 80114d4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114d6:	4b4f      	ldr	r3, [pc, #316]	@ (8011614 <xTaskIncrementTick+0x148>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	f040 808f 	bne.w	80115fe <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80114e0:	4b4d      	ldr	r3, [pc, #308]	@ (8011618 <xTaskIncrementTick+0x14c>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	3301      	adds	r3, #1
 80114e6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80114e8:	4a4b      	ldr	r2, [pc, #300]	@ (8011618 <xTaskIncrementTick+0x14c>)
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d121      	bne.n	8011538 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80114f4:	4b49      	ldr	r3, [pc, #292]	@ (801161c <xTaskIncrementTick+0x150>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00b      	beq.n	8011516 <xTaskIncrementTick+0x4a>
        __asm volatile
 80114fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011502:	f383 8811 	msr	BASEPRI, r3
 8011506:	f3bf 8f6f 	isb	sy
 801150a:	f3bf 8f4f 	dsb	sy
 801150e:	603b      	str	r3, [r7, #0]
    }
 8011510:	bf00      	nop
 8011512:	bf00      	nop
 8011514:	e7fd      	b.n	8011512 <xTaskIncrementTick+0x46>
 8011516:	4b41      	ldr	r3, [pc, #260]	@ (801161c <xTaskIncrementTick+0x150>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	60fb      	str	r3, [r7, #12]
 801151c:	4b40      	ldr	r3, [pc, #256]	@ (8011620 <xTaskIncrementTick+0x154>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	4a3e      	ldr	r2, [pc, #248]	@ (801161c <xTaskIncrementTick+0x150>)
 8011522:	6013      	str	r3, [r2, #0]
 8011524:	4a3e      	ldr	r2, [pc, #248]	@ (8011620 <xTaskIncrementTick+0x154>)
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	6013      	str	r3, [r2, #0]
 801152a:	4b3e      	ldr	r3, [pc, #248]	@ (8011624 <xTaskIncrementTick+0x158>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	3301      	adds	r3, #1
 8011530:	4a3c      	ldr	r2, [pc, #240]	@ (8011624 <xTaskIncrementTick+0x158>)
 8011532:	6013      	str	r3, [r2, #0]
 8011534:	f000 fab6 	bl	8011aa4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8011538:	4b3b      	ldr	r3, [pc, #236]	@ (8011628 <xTaskIncrementTick+0x15c>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	693a      	ldr	r2, [r7, #16]
 801153e:	429a      	cmp	r2, r3
 8011540:	d348      	bcc.n	80115d4 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011542:	4b36      	ldr	r3, [pc, #216]	@ (801161c <xTaskIncrementTick+0x150>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d104      	bne.n	8011556 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801154c:	4b36      	ldr	r3, [pc, #216]	@ (8011628 <xTaskIncrementTick+0x15c>)
 801154e:	f04f 32ff 	mov.w	r2, #4294967295
 8011552:	601a      	str	r2, [r3, #0]
                    break;
 8011554:	e03e      	b.n	80115d4 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011556:	4b31      	ldr	r3, [pc, #196]	@ (801161c <xTaskIncrementTick+0x150>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8011566:	693a      	ldr	r2, [r7, #16]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	429a      	cmp	r2, r3
 801156c:	d203      	bcs.n	8011576 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 801156e:	4a2e      	ldr	r2, [pc, #184]	@ (8011628 <xTaskIncrementTick+0x15c>)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011574:	e02e      	b.n	80115d4 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	3304      	adds	r3, #4
 801157a:	4618      	mov	r0, r3
 801157c:	f7ff f802 	bl	8010584 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011584:	2b00      	cmp	r3, #0
 8011586:	d004      	beq.n	8011592 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	3318      	adds	r3, #24
 801158c:	4618      	mov	r0, r3
 801158e:	f7fe fff9 	bl	8010584 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011596:	2201      	movs	r2, #1
 8011598:	409a      	lsls	r2, r3
 801159a:	4b24      	ldr	r3, [pc, #144]	@ (801162c <xTaskIncrementTick+0x160>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	4313      	orrs	r3, r2
 80115a0:	4a22      	ldr	r2, [pc, #136]	@ (801162c <xTaskIncrementTick+0x160>)
 80115a2:	6013      	str	r3, [r2, #0]
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115a8:	4613      	mov	r3, r2
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	4413      	add	r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	4a1f      	ldr	r2, [pc, #124]	@ (8011630 <xTaskIncrementTick+0x164>)
 80115b2:	441a      	add	r2, r3
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	3304      	adds	r3, #4
 80115b8:	4619      	mov	r1, r3
 80115ba:	4610      	mov	r0, r2
 80115bc:	f7fe ff85 	bl	80104ca <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115c4:	4b1b      	ldr	r3, [pc, #108]	@ (8011634 <xTaskIncrementTick+0x168>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d3b9      	bcc.n	8011542 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80115ce:	2301      	movs	r3, #1
 80115d0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115d2:	e7b6      	b.n	8011542 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80115d4:	4b17      	ldr	r3, [pc, #92]	@ (8011634 <xTaskIncrementTick+0x168>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115da:	4915      	ldr	r1, [pc, #84]	@ (8011630 <xTaskIncrementTick+0x164>)
 80115dc:	4613      	mov	r3, r2
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	4413      	add	r3, r2
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	440b      	add	r3, r1
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d901      	bls.n	80115f0 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 80115ec:	2301      	movs	r3, #1
 80115ee:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80115f0:	4b11      	ldr	r3, [pc, #68]	@ (8011638 <xTaskIncrementTick+0x16c>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d007      	beq.n	8011608 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 80115f8:	2301      	movs	r3, #1
 80115fa:	617b      	str	r3, [r7, #20]
 80115fc:	e004      	b.n	8011608 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80115fe:	4b0f      	ldr	r3, [pc, #60]	@ (801163c <xTaskIncrementTick+0x170>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	3301      	adds	r3, #1
 8011604:	4a0d      	ldr	r2, [pc, #52]	@ (801163c <xTaskIncrementTick+0x170>)
 8011606:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8011608:	697b      	ldr	r3, [r7, #20]
}
 801160a:	4618      	mov	r0, r3
 801160c:	3718      	adds	r7, #24
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	200006b8 	.word	0x200006b8
 8011618:	20000694 	.word	0x20000694
 801161c:	20000648 	.word	0x20000648
 8011620:	2000064c 	.word	0x2000064c
 8011624:	200006a8 	.word	0x200006a8
 8011628:	200006b0 	.word	0x200006b0
 801162c:	20000698 	.word	0x20000698
 8011630:	200005bc 	.word	0x200005bc
 8011634:	200005b8 	.word	0x200005b8
 8011638:	200006a4 	.word	0x200006a4
 801163c:	200006a0 	.word	0x200006a0

08011640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011640:	b480      	push	{r7}
 8011642:	b087      	sub	sp, #28
 8011644:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011646:	4b27      	ldr	r3, [pc, #156]	@ (80116e4 <vTaskSwitchContext+0xa4>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d003      	beq.n	8011656 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 801164e:	4b26      	ldr	r3, [pc, #152]	@ (80116e8 <vTaskSwitchContext+0xa8>)
 8011650:	2201      	movs	r2, #1
 8011652:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8011654:	e040      	b.n	80116d8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8011656:	4b24      	ldr	r3, [pc, #144]	@ (80116e8 <vTaskSwitchContext+0xa8>)
 8011658:	2200      	movs	r2, #0
 801165a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801165c:	4b23      	ldr	r3, [pc, #140]	@ (80116ec <vTaskSwitchContext+0xac>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	fab3 f383 	clz	r3, r3
 8011668:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 801166a:	7afb      	ldrb	r3, [r7, #11]
 801166c:	f1c3 031f 	rsb	r3, r3, #31
 8011670:	617b      	str	r3, [r7, #20]
 8011672:	491f      	ldr	r1, [pc, #124]	@ (80116f0 <vTaskSwitchContext+0xb0>)
 8011674:	697a      	ldr	r2, [r7, #20]
 8011676:	4613      	mov	r3, r2
 8011678:	009b      	lsls	r3, r3, #2
 801167a:	4413      	add	r3, r2
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	440b      	add	r3, r1
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d10b      	bne.n	801169e <vTaskSwitchContext+0x5e>
        __asm volatile
 8011686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801168a:	f383 8811 	msr	BASEPRI, r3
 801168e:	f3bf 8f6f 	isb	sy
 8011692:	f3bf 8f4f 	dsb	sy
 8011696:	607b      	str	r3, [r7, #4]
    }
 8011698:	bf00      	nop
 801169a:	bf00      	nop
 801169c:	e7fd      	b.n	801169a <vTaskSwitchContext+0x5a>
 801169e:	697a      	ldr	r2, [r7, #20]
 80116a0:	4613      	mov	r3, r2
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	4413      	add	r3, r2
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	4a11      	ldr	r2, [pc, #68]	@ (80116f0 <vTaskSwitchContext+0xb0>)
 80116aa:	4413      	add	r3, r2
 80116ac:	613b      	str	r3, [r7, #16]
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	685b      	ldr	r3, [r3, #4]
 80116b2:	685a      	ldr	r2, [r3, #4]
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	605a      	str	r2, [r3, #4]
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	685a      	ldr	r2, [r3, #4]
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	3308      	adds	r3, #8
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d104      	bne.n	80116ce <vTaskSwitchContext+0x8e>
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	685a      	ldr	r2, [r3, #4]
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	605a      	str	r2, [r3, #4]
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	68db      	ldr	r3, [r3, #12]
 80116d4:	4a07      	ldr	r2, [pc, #28]	@ (80116f4 <vTaskSwitchContext+0xb4>)
 80116d6:	6013      	str	r3, [r2, #0]
}
 80116d8:	bf00      	nop
 80116da:	371c      	adds	r7, #28
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr
 80116e4:	200006b8 	.word	0x200006b8
 80116e8:	200006a4 	.word	0x200006a4
 80116ec:	20000698 	.word	0x20000698
 80116f0:	200005bc 	.word	0x200005bc
 80116f4:	200005b8 	.word	0x200005b8

080116f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d10b      	bne.n	8011720 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8011708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801170c:	f383 8811 	msr	BASEPRI, r3
 8011710:	f3bf 8f6f 	isb	sy
 8011714:	f3bf 8f4f 	dsb	sy
 8011718:	60fb      	str	r3, [r7, #12]
    }
 801171a:	bf00      	nop
 801171c:	bf00      	nop
 801171e:	e7fd      	b.n	801171c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011720:	4b07      	ldr	r3, [pc, #28]	@ (8011740 <vTaskPlaceOnEventList+0x48>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	3318      	adds	r3, #24
 8011726:	4619      	mov	r1, r3
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f7fe fef2 	bl	8010512 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801172e:	2101      	movs	r1, #1
 8011730:	6838      	ldr	r0, [r7, #0]
 8011732:	f000 fa6d 	bl	8011c10 <prvAddCurrentTaskToDelayedList>
}
 8011736:	bf00      	nop
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	200005b8 	.word	0x200005b8

08011744 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8011744:	b580      	push	{r7, lr}
 8011746:	b086      	sub	sp, #24
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d10b      	bne.n	801176e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8011756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801175a:	f383 8811 	msr	BASEPRI, r3
 801175e:	f3bf 8f6f 	isb	sy
 8011762:	f3bf 8f4f 	dsb	sy
 8011766:	617b      	str	r3, [r7, #20]
    }
 8011768:	bf00      	nop
 801176a:	bf00      	nop
 801176c:	e7fd      	b.n	801176a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801176e:	4b0a      	ldr	r3, [pc, #40]	@ (8011798 <vTaskPlaceOnEventListRestricted+0x54>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	3318      	adds	r3, #24
 8011774:	4619      	mov	r1, r3
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f7fe fea7 	bl	80104ca <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d002      	beq.n	8011788 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8011782:	f04f 33ff 	mov.w	r3, #4294967295
 8011786:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011788:	6879      	ldr	r1, [r7, #4]
 801178a:	68b8      	ldr	r0, [r7, #8]
 801178c:	f000 fa40 	bl	8011c10 <prvAddCurrentTaskToDelayedList>
    }
 8011790:	bf00      	nop
 8011792:	3718      	adds	r7, #24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}
 8011798:	200005b8 	.word	0x200005b8

0801179c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d10b      	bne.n	80117ca <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80117b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117b6:	f383 8811 	msr	BASEPRI, r3
 80117ba:	f3bf 8f6f 	isb	sy
 80117be:	f3bf 8f4f 	dsb	sy
 80117c2:	60fb      	str	r3, [r7, #12]
    }
 80117c4:	bf00      	nop
 80117c6:	bf00      	nop
 80117c8:	e7fd      	b.n	80117c6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	3318      	adds	r3, #24
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7fe fed8 	bl	8010584 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117d4:	4b1d      	ldr	r3, [pc, #116]	@ (801184c <xTaskRemoveFromEventList+0xb0>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d11c      	bne.n	8011816 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	3304      	adds	r3, #4
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7fe fecf 	bl	8010584 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117ea:	2201      	movs	r2, #1
 80117ec:	409a      	lsls	r2, r3
 80117ee:	4b18      	ldr	r3, [pc, #96]	@ (8011850 <xTaskRemoveFromEventList+0xb4>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	4313      	orrs	r3, r2
 80117f4:	4a16      	ldr	r2, [pc, #88]	@ (8011850 <xTaskRemoveFromEventList+0xb4>)
 80117f6:	6013      	str	r3, [r2, #0]
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117fc:	4613      	mov	r3, r2
 80117fe:	009b      	lsls	r3, r3, #2
 8011800:	4413      	add	r3, r2
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	4a13      	ldr	r2, [pc, #76]	@ (8011854 <xTaskRemoveFromEventList+0xb8>)
 8011806:	441a      	add	r2, r3
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	3304      	adds	r3, #4
 801180c:	4619      	mov	r1, r3
 801180e:	4610      	mov	r0, r2
 8011810:	f7fe fe5b 	bl	80104ca <vListInsertEnd>
 8011814:	e005      	b.n	8011822 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	3318      	adds	r3, #24
 801181a:	4619      	mov	r1, r3
 801181c:	480e      	ldr	r0, [pc, #56]	@ (8011858 <xTaskRemoveFromEventList+0xbc>)
 801181e:	f7fe fe54 	bl	80104ca <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011826:	4b0d      	ldr	r3, [pc, #52]	@ (801185c <xTaskRemoveFromEventList+0xc0>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801182c:	429a      	cmp	r2, r3
 801182e:	d905      	bls.n	801183c <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8011830:	2301      	movs	r3, #1
 8011832:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8011834:	4b0a      	ldr	r3, [pc, #40]	@ (8011860 <xTaskRemoveFromEventList+0xc4>)
 8011836:	2201      	movs	r2, #1
 8011838:	601a      	str	r2, [r3, #0]
 801183a:	e001      	b.n	8011840 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 801183c:	2300      	movs	r3, #0
 801183e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8011840:	697b      	ldr	r3, [r7, #20]
}
 8011842:	4618      	mov	r0, r3
 8011844:	3718      	adds	r7, #24
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop
 801184c:	200006b8 	.word	0x200006b8
 8011850:	20000698 	.word	0x20000698
 8011854:	200005bc 	.word	0x200005bc
 8011858:	20000650 	.word	0x20000650
 801185c:	200005b8 	.word	0x200005b8
 8011860:	200006a4 	.word	0x200006a4

08011864 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011864:	b480      	push	{r7}
 8011866:	b083      	sub	sp, #12
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 801186c:	4b06      	ldr	r3, [pc, #24]	@ (8011888 <vTaskInternalSetTimeOutState+0x24>)
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8011874:	4b05      	ldr	r3, [pc, #20]	@ (801188c <vTaskInternalSetTimeOutState+0x28>)
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	605a      	str	r2, [r3, #4]
}
 801187c:	bf00      	nop
 801187e:	370c      	adds	r7, #12
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	200006a8 	.word	0x200006a8
 801188c:	20000694 	.word	0x20000694

08011890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b088      	sub	sp, #32
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10b      	bne.n	80118b8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80118a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118a4:	f383 8811 	msr	BASEPRI, r3
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	f3bf 8f4f 	dsb	sy
 80118b0:	613b      	str	r3, [r7, #16]
    }
 80118b2:	bf00      	nop
 80118b4:	bf00      	nop
 80118b6:	e7fd      	b.n	80118b4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d10b      	bne.n	80118d6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80118be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118c2:	f383 8811 	msr	BASEPRI, r3
 80118c6:	f3bf 8f6f 	isb	sy
 80118ca:	f3bf 8f4f 	dsb	sy
 80118ce:	60fb      	str	r3, [r7, #12]
    }
 80118d0:	bf00      	nop
 80118d2:	bf00      	nop
 80118d4:	e7fd      	b.n	80118d2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80118d6:	f000 fe51 	bl	801257c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80118da:	4b1f      	ldr	r3, [pc, #124]	@ (8011958 <xTaskCheckForTimeOut+0xc8>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	685b      	ldr	r3, [r3, #4]
 80118e4:	69ba      	ldr	r2, [r7, #24]
 80118e6:	1ad3      	subs	r3, r2, r3
 80118e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f2:	d102      	bne.n	80118fa <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80118f4:	2300      	movs	r3, #0
 80118f6:	61fb      	str	r3, [r7, #28]
 80118f8:	e026      	b.n	8011948 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	4b17      	ldr	r3, [pc, #92]	@ (801195c <xTaskCheckForTimeOut+0xcc>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	429a      	cmp	r2, r3
 8011904:	d00a      	beq.n	801191c <xTaskCheckForTimeOut+0x8c>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	69ba      	ldr	r2, [r7, #24]
 801190c:	429a      	cmp	r2, r3
 801190e:	d305      	bcc.n	801191c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8011910:	2301      	movs	r3, #1
 8011912:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	2200      	movs	r2, #0
 8011918:	601a      	str	r2, [r3, #0]
 801191a:	e015      	b.n	8011948 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	697a      	ldr	r2, [r7, #20]
 8011922:	429a      	cmp	r2, r3
 8011924:	d20b      	bcs.n	801193e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	1ad2      	subs	r2, r2, r3
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f7ff ff96 	bl	8011864 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8011938:	2300      	movs	r3, #0
 801193a:	61fb      	str	r3, [r7, #28]
 801193c:	e004      	b.n	8011948 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	2200      	movs	r2, #0
 8011942:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8011944:	2301      	movs	r3, #1
 8011946:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8011948:	f000 fe4a 	bl	80125e0 <vPortExitCritical>

    return xReturn;
 801194c:	69fb      	ldr	r3, [r7, #28]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3720      	adds	r7, #32
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	20000694 	.word	0x20000694
 801195c:	200006a8 	.word	0x200006a8

08011960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011960:	b480      	push	{r7}
 8011962:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8011964:	4b03      	ldr	r3, [pc, #12]	@ (8011974 <vTaskMissedYield+0x14>)
 8011966:	2201      	movs	r2, #1
 8011968:	601a      	str	r2, [r3, #0]
}
 801196a:	bf00      	nop
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr
 8011974:	200006a4 	.word	0x200006a4

08011978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8011980:	f000 f852 	bl	8011a28 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011984:	4b06      	ldr	r3, [pc, #24]	@ (80119a0 <prvIdleTask+0x28>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	2b01      	cmp	r3, #1
 801198a:	d9f9      	bls.n	8011980 <prvIdleTask+0x8>
                {
                    taskYIELD();
 801198c:	4b05      	ldr	r3, [pc, #20]	@ (80119a4 <prvIdleTask+0x2c>)
 801198e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011992:	601a      	str	r2, [r3, #0]
 8011994:	f3bf 8f4f 	dsb	sy
 8011998:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 801199c:	e7f0      	b.n	8011980 <prvIdleTask+0x8>
 801199e:	bf00      	nop
 80119a0:	200005bc 	.word	0x200005bc
 80119a4:	e000ed04 	.word	0xe000ed04

080119a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80119ae:	2300      	movs	r3, #0
 80119b0:	607b      	str	r3, [r7, #4]
 80119b2:	e00c      	b.n	80119ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	4613      	mov	r3, r2
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	4413      	add	r3, r2
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	4a12      	ldr	r2, [pc, #72]	@ (8011a08 <prvInitialiseTaskLists+0x60>)
 80119c0:	4413      	add	r3, r2
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fe fd54 	bl	8010470 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	3301      	adds	r3, #1
 80119cc:	607b      	str	r3, [r7, #4]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2b04      	cmp	r3, #4
 80119d2:	d9ef      	bls.n	80119b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80119d4:	480d      	ldr	r0, [pc, #52]	@ (8011a0c <prvInitialiseTaskLists+0x64>)
 80119d6:	f7fe fd4b 	bl	8010470 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80119da:	480d      	ldr	r0, [pc, #52]	@ (8011a10 <prvInitialiseTaskLists+0x68>)
 80119dc:	f7fe fd48 	bl	8010470 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80119e0:	480c      	ldr	r0, [pc, #48]	@ (8011a14 <prvInitialiseTaskLists+0x6c>)
 80119e2:	f7fe fd45 	bl	8010470 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80119e6:	480c      	ldr	r0, [pc, #48]	@ (8011a18 <prvInitialiseTaskLists+0x70>)
 80119e8:	f7fe fd42 	bl	8010470 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80119ec:	480b      	ldr	r0, [pc, #44]	@ (8011a1c <prvInitialiseTaskLists+0x74>)
 80119ee:	f7fe fd3f 	bl	8010470 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80119f2:	4b0b      	ldr	r3, [pc, #44]	@ (8011a20 <prvInitialiseTaskLists+0x78>)
 80119f4:	4a05      	ldr	r2, [pc, #20]	@ (8011a0c <prvInitialiseTaskLists+0x64>)
 80119f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80119f8:	4b0a      	ldr	r3, [pc, #40]	@ (8011a24 <prvInitialiseTaskLists+0x7c>)
 80119fa:	4a05      	ldr	r2, [pc, #20]	@ (8011a10 <prvInitialiseTaskLists+0x68>)
 80119fc:	601a      	str	r2, [r3, #0]
}
 80119fe:	bf00      	nop
 8011a00:	3708      	adds	r7, #8
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	200005bc 	.word	0x200005bc
 8011a0c:	20000620 	.word	0x20000620
 8011a10:	20000634 	.word	0x20000634
 8011a14:	20000650 	.word	0x20000650
 8011a18:	20000664 	.word	0x20000664
 8011a1c:	2000067c 	.word	0x2000067c
 8011a20:	20000648 	.word	0x20000648
 8011a24:	2000064c 	.word	0x2000064c

08011a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011a2e:	e019      	b.n	8011a64 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8011a30:	f000 fda4 	bl	801257c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a34:	4b10      	ldr	r3, [pc, #64]	@ (8011a78 <prvCheckTasksWaitingTermination+0x50>)
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	3304      	adds	r3, #4
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7fe fd9f 	bl	8010584 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8011a46:	4b0d      	ldr	r3, [pc, #52]	@ (8011a7c <prvCheckTasksWaitingTermination+0x54>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	3b01      	subs	r3, #1
 8011a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8011a7c <prvCheckTasksWaitingTermination+0x54>)
 8011a4e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8011a50:	4b0b      	ldr	r3, [pc, #44]	@ (8011a80 <prvCheckTasksWaitingTermination+0x58>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	3b01      	subs	r3, #1
 8011a56:	4a0a      	ldr	r2, [pc, #40]	@ (8011a80 <prvCheckTasksWaitingTermination+0x58>)
 8011a58:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8011a5a:	f000 fdc1 	bl	80125e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 f810 	bl	8011a84 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011a64:	4b06      	ldr	r3, [pc, #24]	@ (8011a80 <prvCheckTasksWaitingTermination+0x58>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d1e1      	bne.n	8011a30 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8011a6c:	bf00      	nop
 8011a6e:	bf00      	nop
 8011a70:	3708      	adds	r7, #8
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	20000664 	.word	0x20000664
 8011a7c:	20000690 	.word	0x20000690
 8011a80:	20000678 	.word	0x20000678

08011a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a90:	4618      	mov	r0, r3
 8011a92:	f000 ff7f 	bl	8012994 <vPortFree>
                vPortFree( pxTCB );
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f000 ff7c 	bl	8012994 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8011ad4 <prvResetNextTaskUnblockTime+0x30>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d104      	bne.n	8011abc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8011ab2:	4b09      	ldr	r3, [pc, #36]	@ (8011ad8 <prvResetNextTaskUnblockTime+0x34>)
 8011ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ab8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8011aba:	e005      	b.n	8011ac8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011abc:	4b05      	ldr	r3, [pc, #20]	@ (8011ad4 <prvResetNextTaskUnblockTime+0x30>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	68db      	ldr	r3, [r3, #12]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	4a04      	ldr	r2, [pc, #16]	@ (8011ad8 <prvResetNextTaskUnblockTime+0x34>)
 8011ac6:	6013      	str	r3, [r2, #0]
}
 8011ac8:	bf00      	nop
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop
 8011ad4:	20000648 	.word	0x20000648
 8011ad8:	200006b0 	.word	0x200006b0

08011adc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8011adc:	b480      	push	{r7}
 8011ade:	b083      	sub	sp, #12
 8011ae0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8011ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8011b10 <xTaskGetSchedulerState+0x34>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d102      	bne.n	8011af0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8011aea:	2301      	movs	r3, #1
 8011aec:	607b      	str	r3, [r7, #4]
 8011aee:	e008      	b.n	8011b02 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011af0:	4b08      	ldr	r3, [pc, #32]	@ (8011b14 <xTaskGetSchedulerState+0x38>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d102      	bne.n	8011afe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8011af8:	2302      	movs	r3, #2
 8011afa:	607b      	str	r3, [r7, #4]
 8011afc:	e001      	b.n	8011b02 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8011afe:	2300      	movs	r3, #0
 8011b00:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8011b02:	687b      	ldr	r3, [r7, #4]
    }
 8011b04:	4618      	mov	r0, r3
 8011b06:	370c      	adds	r7, #12
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr
 8011b10:	2000069c 	.word	0x2000069c
 8011b14:	200006b8 	.word	0x200006b8

08011b18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b086      	sub	sp, #24
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8011b24:	2300      	movs	r3, #0
 8011b26:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d065      	beq.n	8011bfa <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8011b2e:	4b35      	ldr	r3, [pc, #212]	@ (8011c04 <xTaskPriorityDisinherit+0xec>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	693a      	ldr	r2, [r7, #16]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d00b      	beq.n	8011b50 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8011b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b3c:	f383 8811 	msr	BASEPRI, r3
 8011b40:	f3bf 8f6f 	isb	sy
 8011b44:	f3bf 8f4f 	dsb	sy
 8011b48:	60fb      	str	r3, [r7, #12]
    }
 8011b4a:	bf00      	nop
 8011b4c:	bf00      	nop
 8011b4e:	e7fd      	b.n	8011b4c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d10b      	bne.n	8011b70 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8011b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b5c:	f383 8811 	msr	BASEPRI, r3
 8011b60:	f3bf 8f6f 	isb	sy
 8011b64:	f3bf 8f4f 	dsb	sy
 8011b68:	60bb      	str	r3, [r7, #8]
    }
 8011b6a:	bf00      	nop
 8011b6c:	bf00      	nop
 8011b6e:	e7fd      	b.n	8011b6c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b74:	1e5a      	subs	r2, r3, #1
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d039      	beq.n	8011bfa <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d135      	bne.n	8011bfa <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	3304      	adds	r3, #4
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fe fcf6 	bl	8010584 <uxListRemove>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d10a      	bne.n	8011bb4 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ba8:	43da      	mvns	r2, r3
 8011baa:	4b17      	ldr	r3, [pc, #92]	@ (8011c08 <xTaskPriorityDisinherit+0xf0>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4013      	ands	r3, r2
 8011bb0:	4a15      	ldr	r2, [pc, #84]	@ (8011c08 <xTaskPriorityDisinherit+0xf0>)
 8011bb2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bc0:	f1c3 0205 	rsb	r2, r3, #5
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bcc:	2201      	movs	r2, #1
 8011bce:	409a      	lsls	r2, r3
 8011bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8011c08 <xTaskPriorityDisinherit+0xf0>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4313      	orrs	r3, r2
 8011bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8011c08 <xTaskPriorityDisinherit+0xf0>)
 8011bd8:	6013      	str	r3, [r2, #0]
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bde:	4613      	mov	r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	4413      	add	r3, r2
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	4a09      	ldr	r2, [pc, #36]	@ (8011c0c <xTaskPriorityDisinherit+0xf4>)
 8011be8:	441a      	add	r2, r3
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	3304      	adds	r3, #4
 8011bee:	4619      	mov	r1, r3
 8011bf0:	4610      	mov	r0, r2
 8011bf2:	f7fe fc6a 	bl	80104ca <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8011bfa:	697b      	ldr	r3, [r7, #20]
    }
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3718      	adds	r7, #24
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	200005b8 	.word	0x200005b8
 8011c08:	20000698 	.word	0x20000698
 8011c0c:	200005bc 	.word	0x200005bc

08011c10 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8011c1a:	4b29      	ldr	r3, [pc, #164]	@ (8011cc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c20:	4b28      	ldr	r3, [pc, #160]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	3304      	adds	r3, #4
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7fe fcac 	bl	8010584 <uxListRemove>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d10b      	bne.n	8011c4a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011c32:	4b24      	ldr	r3, [pc, #144]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c38:	2201      	movs	r2, #1
 8011c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c3e:	43da      	mvns	r2, r3
 8011c40:	4b21      	ldr	r3, [pc, #132]	@ (8011cc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	4013      	ands	r3, r2
 8011c46:	4a20      	ldr	r2, [pc, #128]	@ (8011cc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c50:	d10a      	bne.n	8011c68 <prvAddCurrentTaskToDelayedList+0x58>
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d007      	beq.n	8011c68 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c58:	4b1a      	ldr	r3, [pc, #104]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	3304      	adds	r3, #4
 8011c5e:	4619      	mov	r1, r3
 8011c60:	481a      	ldr	r0, [pc, #104]	@ (8011ccc <prvAddCurrentTaskToDelayedList+0xbc>)
 8011c62:	f7fe fc32 	bl	80104ca <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8011c66:	e026      	b.n	8011cb6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8011c68:	68fa      	ldr	r2, [r7, #12]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c70:	4b14      	ldr	r3, [pc, #80]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8011c78:	68ba      	ldr	r2, [r7, #8]
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d209      	bcs.n	8011c94 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c80:	4b13      	ldr	r3, [pc, #76]	@ (8011cd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	4b0f      	ldr	r3, [pc, #60]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	3304      	adds	r3, #4
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	f7fe fc40 	bl	8010512 <vListInsert>
}
 8011c92:	e010      	b.n	8011cb6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c94:	4b0f      	ldr	r3, [pc, #60]	@ (8011cd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	4b0a      	ldr	r3, [pc, #40]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	3304      	adds	r3, #4
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	4610      	mov	r0, r2
 8011ca2:	f7fe fc36 	bl	8010512 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8011ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8011cd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	68ba      	ldr	r2, [r7, #8]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d202      	bcs.n	8011cb6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8011cb0:	4a09      	ldr	r2, [pc, #36]	@ (8011cd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	6013      	str	r3, [r2, #0]
}
 8011cb6:	bf00      	nop
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20000694 	.word	0x20000694
 8011cc4:	200005b8 	.word	0x200005b8
 8011cc8:	20000698 	.word	0x20000698
 8011ccc:	2000067c 	.word	0x2000067c
 8011cd0:	2000064c 	.word	0x2000064c
 8011cd4:	20000648 	.word	0x20000648
 8011cd8:	200006b0 	.word	0x200006b0

08011cdc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b084      	sub	sp, #16
 8011ce0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8011ce6:	f000 fae1 	bl	80122ac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8011cea:	4b12      	ldr	r3, [pc, #72]	@ (8011d34 <xTimerCreateTimerTask+0x58>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d00b      	beq.n	8011d0a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8011cf2:	4b11      	ldr	r3, [pc, #68]	@ (8011d38 <xTimerCreateTimerTask+0x5c>)
 8011cf4:	9301      	str	r3, [sp, #4]
 8011cf6:	2302      	movs	r3, #2
 8011cf8:	9300      	str	r3, [sp, #0]
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8011d00:	490e      	ldr	r1, [pc, #56]	@ (8011d3c <xTimerCreateTimerTask+0x60>)
 8011d02:	480f      	ldr	r0, [pc, #60]	@ (8011d40 <xTimerCreateTimerTask+0x64>)
 8011d04:	f7ff f958 	bl	8010fb8 <xTaskCreate>
 8011d08:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d10b      	bne.n	8011d28 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8011d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d14:	f383 8811 	msr	BASEPRI, r3
 8011d18:	f3bf 8f6f 	isb	sy
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	603b      	str	r3, [r7, #0]
    }
 8011d22:	bf00      	nop
 8011d24:	bf00      	nop
 8011d26:	e7fd      	b.n	8011d24 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8011d28:	687b      	ldr	r3, [r7, #4]
    }
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3708      	adds	r7, #8
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	bf00      	nop
 8011d34:	200006ec 	.word	0x200006ec
 8011d38:	200006f0 	.word	0x200006f0
 8011d3c:	080168f4 	.word	0x080168f4
 8011d40:	08011e7d 	.word	0x08011e7d

08011d44 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b08a      	sub	sp, #40	@ 0x28
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	607a      	str	r2, [r7, #4]
 8011d50:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8011d52:	2300      	movs	r3, #0
 8011d54:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d10b      	bne.n	8011d74 <xTimerGenericCommand+0x30>
        __asm volatile
 8011d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d60:	f383 8811 	msr	BASEPRI, r3
 8011d64:	f3bf 8f6f 	isb	sy
 8011d68:	f3bf 8f4f 	dsb	sy
 8011d6c:	623b      	str	r3, [r7, #32]
    }
 8011d6e:	bf00      	nop
 8011d70:	bf00      	nop
 8011d72:	e7fd      	b.n	8011d70 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8011d74:	4b19      	ldr	r3, [pc, #100]	@ (8011ddc <xTimerGenericCommand+0x98>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d02a      	beq.n	8011dd2 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	2b05      	cmp	r3, #5
 8011d8c:	dc18      	bgt.n	8011dc0 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011d8e:	f7ff fea5 	bl	8011adc <xTaskGetSchedulerState>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b02      	cmp	r3, #2
 8011d96:	d109      	bne.n	8011dac <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011d98:	4b10      	ldr	r3, [pc, #64]	@ (8011ddc <xTimerGenericCommand+0x98>)
 8011d9a:	6818      	ldr	r0, [r3, #0]
 8011d9c:	f107 0114 	add.w	r1, r7, #20
 8011da0:	2300      	movs	r3, #0
 8011da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011da4:	f7fe fd08 	bl	80107b8 <xQueueGenericSend>
 8011da8:	6278      	str	r0, [r7, #36]	@ 0x24
 8011daa:	e012      	b.n	8011dd2 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011dac:	4b0b      	ldr	r3, [pc, #44]	@ (8011ddc <xTimerGenericCommand+0x98>)
 8011dae:	6818      	ldr	r0, [r3, #0]
 8011db0:	f107 0114 	add.w	r1, r7, #20
 8011db4:	2300      	movs	r3, #0
 8011db6:	2200      	movs	r2, #0
 8011db8:	f7fe fcfe 	bl	80107b8 <xQueueGenericSend>
 8011dbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8011dbe:	e008      	b.n	8011dd2 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011dc0:	4b06      	ldr	r3, [pc, #24]	@ (8011ddc <xTimerGenericCommand+0x98>)
 8011dc2:	6818      	ldr	r0, [r3, #0]
 8011dc4:	f107 0114 	add.w	r1, r7, #20
 8011dc8:	2300      	movs	r3, #0
 8011dca:	683a      	ldr	r2, [r7, #0]
 8011dcc:	f7fe fdf6 	bl	80109bc <xQueueGenericSendFromISR>
 8011dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8011dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3728      	adds	r7, #40	@ 0x28
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}
 8011ddc:	200006ec 	.word	0x200006ec

08011de0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b088      	sub	sp, #32
 8011de4:	af02      	add	r7, sp, #8
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dea:	4b23      	ldr	r3, [pc, #140]	@ (8011e78 <prvProcessExpiredTimer+0x98>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	3304      	adds	r3, #4
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7fe fbc3 	bl	8010584 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e04:	f003 0304 	and.w	r3, r3, #4
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d023      	beq.n	8011e54 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	699a      	ldr	r2, [r3, #24]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	18d1      	adds	r1, r2, r3
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	683a      	ldr	r2, [r7, #0]
 8011e18:	6978      	ldr	r0, [r7, #20]
 8011e1a:	f000 f8d5 	bl	8011fc8 <prvInsertTimerInActiveList>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d020      	beq.n	8011e66 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e24:	2300      	movs	r3, #0
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	2300      	movs	r3, #0
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	6978      	ldr	r0, [r7, #20]
 8011e30:	f7ff ff88 	bl	8011d44 <xTimerGenericCommand>
 8011e34:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d114      	bne.n	8011e66 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8011e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e40:	f383 8811 	msr	BASEPRI, r3
 8011e44:	f3bf 8f6f 	isb	sy
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	60fb      	str	r3, [r7, #12]
    }
 8011e4e:	bf00      	nop
 8011e50:	bf00      	nop
 8011e52:	e7fd      	b.n	8011e50 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e5a:	f023 0301 	bic.w	r3, r3, #1
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	6a1b      	ldr	r3, [r3, #32]
 8011e6a:	6978      	ldr	r0, [r7, #20]
 8011e6c:	4798      	blx	r3
    }
 8011e6e:	bf00      	nop
 8011e70:	3718      	adds	r7, #24
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	200006e4 	.word	0x200006e4

08011e7c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e84:	f107 0308 	add.w	r3, r7, #8
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f000 f859 	bl	8011f40 <prvGetNextExpireTime>
 8011e8e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	4619      	mov	r1, r3
 8011e94:	68f8      	ldr	r0, [r7, #12]
 8011e96:	f000 f805 	bl	8011ea4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8011e9a:	f000 f8d7 	bl	801204c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e9e:	bf00      	nop
 8011ea0:	e7f0      	b.n	8011e84 <prvTimerTask+0x8>
	...

08011ea4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b084      	sub	sp, #16
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8011eae:	f7ff fa51 	bl	8011354 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011eb2:	f107 0308 	add.w	r3, r7, #8
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f000 f866 	bl	8011f88 <prvSampleTimeNow>
 8011ebc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d130      	bne.n	8011f26 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d10a      	bne.n	8011ee0 <prvProcessTimerOrBlockTask+0x3c>
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d806      	bhi.n	8011ee0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8011ed2:	f7ff fa4d 	bl	8011370 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011ed6:	68f9      	ldr	r1, [r7, #12]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f7ff ff81 	bl	8011de0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8011ede:	e024      	b.n	8011f2a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d008      	beq.n	8011ef8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011ee6:	4b13      	ldr	r3, [pc, #76]	@ (8011f34 <prvProcessTimerOrBlockTask+0x90>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d101      	bne.n	8011ef4 <prvProcessTimerOrBlockTask+0x50>
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	e000      	b.n	8011ef6 <prvProcessTimerOrBlockTask+0x52>
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8011f38 <prvProcessTimerOrBlockTask+0x94>)
 8011efa:	6818      	ldr	r0, [r3, #0]
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	1ad3      	subs	r3, r2, r3
 8011f02:	683a      	ldr	r2, [r7, #0]
 8011f04:	4619      	mov	r1, r3
 8011f06:	f7ff f823 	bl	8010f50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8011f0a:	f7ff fa31 	bl	8011370 <xTaskResumeAll>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d10a      	bne.n	8011f2a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8011f14:	4b09      	ldr	r3, [pc, #36]	@ (8011f3c <prvProcessTimerOrBlockTask+0x98>)
 8011f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f1a:	601a      	str	r2, [r3, #0]
 8011f1c:	f3bf 8f4f 	dsb	sy
 8011f20:	f3bf 8f6f 	isb	sy
    }
 8011f24:	e001      	b.n	8011f2a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8011f26:	f7ff fa23 	bl	8011370 <xTaskResumeAll>
    }
 8011f2a:	bf00      	nop
 8011f2c:	3710      	adds	r7, #16
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	200006e8 	.word	0x200006e8
 8011f38:	200006ec 	.word	0x200006ec
 8011f3c:	e000ed04 	.word	0xe000ed04

08011f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8011f40:	b480      	push	{r7}
 8011f42:	b085      	sub	sp, #20
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011f48:	4b0e      	ldr	r3, [pc, #56]	@ (8011f84 <prvGetNextExpireTime+0x44>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d101      	bne.n	8011f56 <prvGetNextExpireTime+0x16>
 8011f52:	2201      	movs	r2, #1
 8011f54:	e000      	b.n	8011f58 <prvGetNextExpireTime+0x18>
 8011f56:	2200      	movs	r2, #0
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d105      	bne.n	8011f70 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f64:	4b07      	ldr	r3, [pc, #28]	@ (8011f84 <prvGetNextExpireTime+0x44>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	60fb      	str	r3, [r7, #12]
 8011f6e:	e001      	b.n	8011f74 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8011f70:	2300      	movs	r3, #0
 8011f72:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8011f74:	68fb      	ldr	r3, [r7, #12]
    }
 8011f76:	4618      	mov	r0, r3
 8011f78:	3714      	adds	r7, #20
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	200006e4 	.word	0x200006e4

08011f88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8011f90:	f7ff fa8c 	bl	80114ac <xTaskGetTickCount>
 8011f94:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8011f96:	4b0b      	ldr	r3, [pc, #44]	@ (8011fc4 <prvSampleTimeNow+0x3c>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d205      	bcs.n	8011fac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8011fa0:	f000 f91e 	bl	80121e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	601a      	str	r2, [r3, #0]
 8011faa:	e002      	b.n	8011fb2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8011fb2:	4a04      	ldr	r2, [pc, #16]	@ (8011fc4 <prvSampleTimeNow+0x3c>)
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
    }
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	200006f4 	.word	0x200006f4

08011fc8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b086      	sub	sp, #24
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
 8011fd4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	68ba      	ldr	r2, [r7, #8]
 8011fde:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	68fa      	ldr	r2, [r7, #12]
 8011fe4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8011fe6:	68ba      	ldr	r2, [r7, #8]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d812      	bhi.n	8012014 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	1ad2      	subs	r2, r2, r3
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	699b      	ldr	r3, [r3, #24]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d302      	bcc.n	8012002 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	617b      	str	r3, [r7, #20]
 8012000:	e01b      	b.n	801203a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012002:	4b10      	ldr	r3, [pc, #64]	@ (8012044 <prvInsertTimerInActiveList+0x7c>)
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	3304      	adds	r3, #4
 801200a:	4619      	mov	r1, r3
 801200c:	4610      	mov	r0, r2
 801200e:	f7fe fa80 	bl	8010512 <vListInsert>
 8012012:	e012      	b.n	801203a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	429a      	cmp	r2, r3
 801201a:	d206      	bcs.n	801202a <prvInsertTimerInActiveList+0x62>
 801201c:	68ba      	ldr	r2, [r7, #8]
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	429a      	cmp	r2, r3
 8012022:	d302      	bcc.n	801202a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8012024:	2301      	movs	r3, #1
 8012026:	617b      	str	r3, [r7, #20]
 8012028:	e007      	b.n	801203a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801202a:	4b07      	ldr	r3, [pc, #28]	@ (8012048 <prvInsertTimerInActiveList+0x80>)
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	3304      	adds	r3, #4
 8012032:	4619      	mov	r1, r3
 8012034:	4610      	mov	r0, r2
 8012036:	f7fe fa6c 	bl	8010512 <vListInsert>
            }
        }

        return xProcessTimerNow;
 801203a:	697b      	ldr	r3, [r7, #20]
    }
 801203c:	4618      	mov	r0, r3
 801203e:	3718      	adds	r7, #24
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	200006e8 	.word	0x200006e8
 8012048:	200006e4 	.word	0x200006e4

0801204c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 801204c:	b580      	push	{r7, lr}
 801204e:	b08c      	sub	sp, #48	@ 0x30
 8012050:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012052:	e0b2      	b.n	80121ba <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	2b00      	cmp	r3, #0
 8012058:	f2c0 80af 	blt.w	80121ba <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012062:	695b      	ldr	r3, [r3, #20]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d004      	beq.n	8012072 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801206a:	3304      	adds	r3, #4
 801206c:	4618      	mov	r0, r3
 801206e:	f7fe fa89 	bl	8010584 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012072:	1d3b      	adds	r3, r7, #4
 8012074:	4618      	mov	r0, r3
 8012076:	f7ff ff87 	bl	8011f88 <prvSampleTimeNow>
 801207a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	2b09      	cmp	r3, #9
 8012080:	f200 8098 	bhi.w	80121b4 <prvProcessReceivedCommands+0x168>
 8012084:	a201      	add	r2, pc, #4	@ (adr r2, 801208c <prvProcessReceivedCommands+0x40>)
 8012086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801208a:	bf00      	nop
 801208c:	080120b5 	.word	0x080120b5
 8012090:	080120b5 	.word	0x080120b5
 8012094:	080120b5 	.word	0x080120b5
 8012098:	0801212b 	.word	0x0801212b
 801209c:	0801213f 	.word	0x0801213f
 80120a0:	0801218b 	.word	0x0801218b
 80120a4:	080120b5 	.word	0x080120b5
 80120a8:	080120b5 	.word	0x080120b5
 80120ac:	0801212b 	.word	0x0801212b
 80120b0:	0801213f 	.word	0x0801213f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80120ba:	f043 0301 	orr.w	r3, r3, #1
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80120c6:	68fa      	ldr	r2, [r7, #12]
 80120c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ca:	699b      	ldr	r3, [r3, #24]
 80120cc:	18d1      	adds	r1, r2, r3
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	6a3a      	ldr	r2, [r7, #32]
 80120d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120d4:	f7ff ff78 	bl	8011fc8 <prvInsertTimerInActiveList>
 80120d8:	4603      	mov	r3, r0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d06c      	beq.n	80121b8 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80120de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e0:	6a1b      	ldr	r3, [r3, #32]
 80120e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120e4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80120e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80120ec:	f003 0304 	and.w	r3, r3, #4
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d061      	beq.n	80121b8 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80120f4:	68fa      	ldr	r2, [r7, #12]
 80120f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120f8:	699b      	ldr	r3, [r3, #24]
 80120fa:	441a      	add	r2, r3
 80120fc:	2300      	movs	r3, #0
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	2300      	movs	r3, #0
 8012102:	2100      	movs	r1, #0
 8012104:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012106:	f7ff fe1d 	bl	8011d44 <xTimerGenericCommand>
 801210a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d152      	bne.n	80121b8 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8012112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012116:	f383 8811 	msr	BASEPRI, r3
 801211a:	f3bf 8f6f 	isb	sy
 801211e:	f3bf 8f4f 	dsb	sy
 8012122:	61bb      	str	r3, [r7, #24]
    }
 8012124:	bf00      	nop
 8012126:	bf00      	nop
 8012128:	e7fd      	b.n	8012126 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801212c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012130:	f023 0301 	bic.w	r3, r3, #1
 8012134:	b2da      	uxtb	r2, r3
 8012136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012138:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 801213c:	e03d      	b.n	80121ba <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012140:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012144:	f043 0301 	orr.w	r3, r3, #1
 8012148:	b2da      	uxtb	r2, r3
 801214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012150:	68fa      	ldr	r2, [r7, #12]
 8012152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012154:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012158:	699b      	ldr	r3, [r3, #24]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d10b      	bne.n	8012176 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 801215e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012162:	f383 8811 	msr	BASEPRI, r3
 8012166:	f3bf 8f6f 	isb	sy
 801216a:	f3bf 8f4f 	dsb	sy
 801216e:	617b      	str	r3, [r7, #20]
    }
 8012170:	bf00      	nop
 8012172:	bf00      	nop
 8012174:	e7fd      	b.n	8012172 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012178:	699a      	ldr	r2, [r3, #24]
 801217a:	6a3b      	ldr	r3, [r7, #32]
 801217c:	18d1      	adds	r1, r2, r3
 801217e:	6a3b      	ldr	r3, [r7, #32]
 8012180:	6a3a      	ldr	r2, [r7, #32]
 8012182:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012184:	f7ff ff20 	bl	8011fc8 <prvInsertTimerInActiveList>
                        break;
 8012188:	e017      	b.n	80121ba <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801218c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012190:	f003 0302 	and.w	r3, r3, #2
 8012194:	2b00      	cmp	r3, #0
 8012196:	d103      	bne.n	80121a0 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8012198:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801219a:	f000 fbfb 	bl	8012994 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 801219e:	e00c      	b.n	80121ba <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80121a6:	f023 0301 	bic.w	r3, r3, #1
 80121aa:	b2da      	uxtb	r2, r3
 80121ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80121b2:	e002      	b.n	80121ba <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80121b4:	bf00      	nop
 80121b6:	e000      	b.n	80121ba <prvProcessReceivedCommands+0x16e>
                        break;
 80121b8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121ba:	4b08      	ldr	r3, [pc, #32]	@ (80121dc <prvProcessReceivedCommands+0x190>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	f107 0108 	add.w	r1, r7, #8
 80121c2:	2200      	movs	r2, #0
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7fe fca7 	bl	8010b18 <xQueueReceive>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f47f af41 	bne.w	8012054 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80121d2:	bf00      	nop
 80121d4:	bf00      	nop
 80121d6:	3728      	adds	r7, #40	@ 0x28
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}
 80121dc:	200006ec 	.word	0x200006ec

080121e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b088      	sub	sp, #32
 80121e4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80121e6:	e049      	b.n	801227c <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80121e8:	4b2e      	ldr	r3, [pc, #184]	@ (80122a4 <prvSwitchTimerLists+0xc4>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121f2:	4b2c      	ldr	r3, [pc, #176]	@ (80122a4 <prvSwitchTimerLists+0xc4>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	68db      	ldr	r3, [r3, #12]
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	3304      	adds	r3, #4
 8012200:	4618      	mov	r0, r3
 8012202:	f7fe f9bf 	bl	8010584 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	6a1b      	ldr	r3, [r3, #32]
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012214:	f003 0304 	and.w	r3, r3, #4
 8012218:	2b00      	cmp	r3, #0
 801221a:	d02f      	beq.n	801227c <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	699b      	ldr	r3, [r3, #24]
 8012220:	693a      	ldr	r2, [r7, #16]
 8012222:	4413      	add	r3, r2
 8012224:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8012226:	68ba      	ldr	r2, [r7, #8]
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	429a      	cmp	r2, r3
 801222c:	d90e      	bls.n	801224c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	68ba      	ldr	r2, [r7, #8]
 8012232:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	68fa      	ldr	r2, [r7, #12]
 8012238:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801223a:	4b1a      	ldr	r3, [pc, #104]	@ (80122a4 <prvSwitchTimerLists+0xc4>)
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	3304      	adds	r3, #4
 8012242:	4619      	mov	r1, r3
 8012244:	4610      	mov	r0, r2
 8012246:	f7fe f964 	bl	8010512 <vListInsert>
 801224a:	e017      	b.n	801227c <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801224c:	2300      	movs	r3, #0
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	2300      	movs	r3, #0
 8012252:	693a      	ldr	r2, [r7, #16]
 8012254:	2100      	movs	r1, #0
 8012256:	68f8      	ldr	r0, [r7, #12]
 8012258:	f7ff fd74 	bl	8011d44 <xTimerGenericCommand>
 801225c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d10b      	bne.n	801227c <prvSwitchTimerLists+0x9c>
        __asm volatile
 8012264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012268:	f383 8811 	msr	BASEPRI, r3
 801226c:	f3bf 8f6f 	isb	sy
 8012270:	f3bf 8f4f 	dsb	sy
 8012274:	603b      	str	r3, [r7, #0]
    }
 8012276:	bf00      	nop
 8012278:	bf00      	nop
 801227a:	e7fd      	b.n	8012278 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801227c:	4b09      	ldr	r3, [pc, #36]	@ (80122a4 <prvSwitchTimerLists+0xc4>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d1b0      	bne.n	80121e8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8012286:	4b07      	ldr	r3, [pc, #28]	@ (80122a4 <prvSwitchTimerLists+0xc4>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 801228c:	4b06      	ldr	r3, [pc, #24]	@ (80122a8 <prvSwitchTimerLists+0xc8>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4a04      	ldr	r2, [pc, #16]	@ (80122a4 <prvSwitchTimerLists+0xc4>)
 8012292:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8012294:	4a04      	ldr	r2, [pc, #16]	@ (80122a8 <prvSwitchTimerLists+0xc8>)
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	6013      	str	r3, [r2, #0]
    }
 801229a:	bf00      	nop
 801229c:	3718      	adds	r7, #24
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	200006e4 	.word	0x200006e4
 80122a8:	200006e8 	.word	0x200006e8

080122ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80122ac:	b580      	push	{r7, lr}
 80122ae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80122b0:	f000 f964 	bl	801257c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80122b4:	4b12      	ldr	r3, [pc, #72]	@ (8012300 <prvCheckForValidListAndQueue+0x54>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d11d      	bne.n	80122f8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80122bc:	4811      	ldr	r0, [pc, #68]	@ (8012304 <prvCheckForValidListAndQueue+0x58>)
 80122be:	f7fe f8d7 	bl	8010470 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80122c2:	4811      	ldr	r0, [pc, #68]	@ (8012308 <prvCheckForValidListAndQueue+0x5c>)
 80122c4:	f7fe f8d4 	bl	8010470 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80122c8:	4b10      	ldr	r3, [pc, #64]	@ (801230c <prvCheckForValidListAndQueue+0x60>)
 80122ca:	4a0e      	ldr	r2, [pc, #56]	@ (8012304 <prvCheckForValidListAndQueue+0x58>)
 80122cc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80122ce:	4b10      	ldr	r3, [pc, #64]	@ (8012310 <prvCheckForValidListAndQueue+0x64>)
 80122d0:	4a0d      	ldr	r2, [pc, #52]	@ (8012308 <prvCheckForValidListAndQueue+0x5c>)
 80122d2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80122d4:	2200      	movs	r2, #0
 80122d6:	210c      	movs	r1, #12
 80122d8:	200a      	movs	r0, #10
 80122da:	f7fe f9e7 	bl	80106ac <xQueueGenericCreate>
 80122de:	4603      	mov	r3, r0
 80122e0:	4a07      	ldr	r2, [pc, #28]	@ (8012300 <prvCheckForValidListAndQueue+0x54>)
 80122e2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80122e4:	4b06      	ldr	r3, [pc, #24]	@ (8012300 <prvCheckForValidListAndQueue+0x54>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d005      	beq.n	80122f8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80122ec:	4b04      	ldr	r3, [pc, #16]	@ (8012300 <prvCheckForValidListAndQueue+0x54>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4908      	ldr	r1, [pc, #32]	@ (8012314 <prvCheckForValidListAndQueue+0x68>)
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7fe fe02 	bl	8010efc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80122f8:	f000 f972 	bl	80125e0 <vPortExitCritical>
    }
 80122fc:	bf00      	nop
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	200006ec 	.word	0x200006ec
 8012304:	200006bc 	.word	0x200006bc
 8012308:	200006d0 	.word	0x200006d0
 801230c:	200006e4 	.word	0x200006e4
 8012310:	200006e8 	.word	0x200006e8
 8012314:	080168fc 	.word	0x080168fc

08012318 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8012318:	b480      	push	{r7}
 801231a:	b085      	sub	sp, #20
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	3b04      	subs	r3, #4
 8012328:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012330:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	3b04      	subs	r3, #4
 8012336:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	f023 0201 	bic.w	r2, r3, #1
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	3b04      	subs	r3, #4
 8012346:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8012348:	4a0c      	ldr	r2, [pc, #48]	@ (801237c <pxPortInitialiseStack+0x64>)
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3b14      	subs	r3, #20
 8012352:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	3b04      	subs	r3, #4
 801235e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	f06f 0202 	mvn.w	r2, #2
 8012366:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	3b20      	subs	r3, #32
 801236c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 801236e:	68fb      	ldr	r3, [r7, #12]
}
 8012370:	4618      	mov	r0, r3
 8012372:	3714      	adds	r7, #20
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr
 801237c:	08012381 	.word	0x08012381

08012380 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012380:	b480      	push	{r7}
 8012382:	b085      	sub	sp, #20
 8012384:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8012386:	2300      	movs	r3, #0
 8012388:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 801238a:	4b13      	ldr	r3, [pc, #76]	@ (80123d8 <prvTaskExitError+0x58>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012392:	d00b      	beq.n	80123ac <prvTaskExitError+0x2c>
        __asm volatile
 8012394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012398:	f383 8811 	msr	BASEPRI, r3
 801239c:	f3bf 8f6f 	isb	sy
 80123a0:	f3bf 8f4f 	dsb	sy
 80123a4:	60fb      	str	r3, [r7, #12]
    }
 80123a6:	bf00      	nop
 80123a8:	bf00      	nop
 80123aa:	e7fd      	b.n	80123a8 <prvTaskExitError+0x28>
        __asm volatile
 80123ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123b0:	f383 8811 	msr	BASEPRI, r3
 80123b4:	f3bf 8f6f 	isb	sy
 80123b8:	f3bf 8f4f 	dsb	sy
 80123bc:	60bb      	str	r3, [r7, #8]
    }
 80123be:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80123c0:	bf00      	nop
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d0fc      	beq.n	80123c2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80123c8:	bf00      	nop
 80123ca:	bf00      	nop
 80123cc:	3714      	adds	r7, #20
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop
 80123d8:	20000020 	.word	0x20000020
 80123dc:	00000000 	.word	0x00000000

080123e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80123e0:	4b07      	ldr	r3, [pc, #28]	@ (8012400 <pxCurrentTCBConst2>)
 80123e2:	6819      	ldr	r1, [r3, #0]
 80123e4:	6808      	ldr	r0, [r1, #0]
 80123e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ea:	f380 8809 	msr	PSP, r0
 80123ee:	f3bf 8f6f 	isb	sy
 80123f2:	f04f 0000 	mov.w	r0, #0
 80123f6:	f380 8811 	msr	BASEPRI, r0
 80123fa:	4770      	bx	lr
 80123fc:	f3af 8000 	nop.w

08012400 <pxCurrentTCBConst2>:
 8012400:	200005b8 	.word	0x200005b8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8012404:	bf00      	nop
 8012406:	bf00      	nop

08012408 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8012408:	4808      	ldr	r0, [pc, #32]	@ (801242c <prvPortStartFirstTask+0x24>)
 801240a:	6800      	ldr	r0, [r0, #0]
 801240c:	6800      	ldr	r0, [r0, #0]
 801240e:	f380 8808 	msr	MSP, r0
 8012412:	f04f 0000 	mov.w	r0, #0
 8012416:	f380 8814 	msr	CONTROL, r0
 801241a:	b662      	cpsie	i
 801241c:	b661      	cpsie	f
 801241e:	f3bf 8f4f 	dsb	sy
 8012422:	f3bf 8f6f 	isb	sy
 8012426:	df00      	svc	0
 8012428:	bf00      	nop
 801242a:	0000      	.short	0x0000
 801242c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8012430:	bf00      	nop
 8012432:	bf00      	nop

08012434 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b086      	sub	sp, #24
 8012438:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801243a:	4b47      	ldr	r3, [pc, #284]	@ (8012558 <xPortStartScheduler+0x124>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	4a47      	ldr	r2, [pc, #284]	@ (801255c <xPortStartScheduler+0x128>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d10b      	bne.n	801245c <xPortStartScheduler+0x28>
        __asm volatile
 8012444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012448:	f383 8811 	msr	BASEPRI, r3
 801244c:	f3bf 8f6f 	isb	sy
 8012450:	f3bf 8f4f 	dsb	sy
 8012454:	60fb      	str	r3, [r7, #12]
    }
 8012456:	bf00      	nop
 8012458:	bf00      	nop
 801245a:	e7fd      	b.n	8012458 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801245c:	4b3e      	ldr	r3, [pc, #248]	@ (8012558 <xPortStartScheduler+0x124>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	4a3f      	ldr	r2, [pc, #252]	@ (8012560 <xPortStartScheduler+0x12c>)
 8012462:	4293      	cmp	r3, r2
 8012464:	d10b      	bne.n	801247e <xPortStartScheduler+0x4a>
        __asm volatile
 8012466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801246a:	f383 8811 	msr	BASEPRI, r3
 801246e:	f3bf 8f6f 	isb	sy
 8012472:	f3bf 8f4f 	dsb	sy
 8012476:	613b      	str	r3, [r7, #16]
    }
 8012478:	bf00      	nop
 801247a:	bf00      	nop
 801247c:	e7fd      	b.n	801247a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801247e:	4b39      	ldr	r3, [pc, #228]	@ (8012564 <xPortStartScheduler+0x130>)
 8012480:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	b2db      	uxtb	r3, r3
 8012488:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	22ff      	movs	r2, #255	@ 0xff
 801248e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	b2db      	uxtb	r3, r3
 8012496:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012498:	78fb      	ldrb	r3, [r7, #3]
 801249a:	b2db      	uxtb	r3, r3
 801249c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80124a0:	b2da      	uxtb	r2, r3
 80124a2:	4b31      	ldr	r3, [pc, #196]	@ (8012568 <xPortStartScheduler+0x134>)
 80124a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80124a6:	4b31      	ldr	r3, [pc, #196]	@ (801256c <xPortStartScheduler+0x138>)
 80124a8:	2207      	movs	r2, #7
 80124aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80124ac:	e009      	b.n	80124c2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80124ae:	4b2f      	ldr	r3, [pc, #188]	@ (801256c <xPortStartScheduler+0x138>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	3b01      	subs	r3, #1
 80124b4:	4a2d      	ldr	r2, [pc, #180]	@ (801256c <xPortStartScheduler+0x138>)
 80124b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80124b8:	78fb      	ldrb	r3, [r7, #3]
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	005b      	lsls	r3, r3, #1
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80124c2:	78fb      	ldrb	r3, [r7, #3]
 80124c4:	b2db      	uxtb	r3, r3
 80124c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80124ca:	2b80      	cmp	r3, #128	@ 0x80
 80124cc:	d0ef      	beq.n	80124ae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80124ce:	4b27      	ldr	r3, [pc, #156]	@ (801256c <xPortStartScheduler+0x138>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	f1c3 0307 	rsb	r3, r3, #7
 80124d6:	2b04      	cmp	r3, #4
 80124d8:	d00b      	beq.n	80124f2 <xPortStartScheduler+0xbe>
        __asm volatile
 80124da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124de:	f383 8811 	msr	BASEPRI, r3
 80124e2:	f3bf 8f6f 	isb	sy
 80124e6:	f3bf 8f4f 	dsb	sy
 80124ea:	60bb      	str	r3, [r7, #8]
    }
 80124ec:	bf00      	nop
 80124ee:	bf00      	nop
 80124f0:	e7fd      	b.n	80124ee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80124f2:	4b1e      	ldr	r3, [pc, #120]	@ (801256c <xPortStartScheduler+0x138>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	021b      	lsls	r3, r3, #8
 80124f8:	4a1c      	ldr	r2, [pc, #112]	@ (801256c <xPortStartScheduler+0x138>)
 80124fa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80124fc:	4b1b      	ldr	r3, [pc, #108]	@ (801256c <xPortStartScheduler+0x138>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012504:	4a19      	ldr	r2, [pc, #100]	@ (801256c <xPortStartScheduler+0x138>)
 8012506:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	b2da      	uxtb	r2, r3
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8012510:	4b17      	ldr	r3, [pc, #92]	@ (8012570 <xPortStartScheduler+0x13c>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a16      	ldr	r2, [pc, #88]	@ (8012570 <xPortStartScheduler+0x13c>)
 8012516:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801251a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 801251c:	4b14      	ldr	r3, [pc, #80]	@ (8012570 <xPortStartScheduler+0x13c>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4a13      	ldr	r2, [pc, #76]	@ (8012570 <xPortStartScheduler+0x13c>)
 8012522:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012526:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8012528:	f000 f8e0 	bl	80126ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 801252c:	4b11      	ldr	r3, [pc, #68]	@ (8012574 <xPortStartScheduler+0x140>)
 801252e:	2200      	movs	r2, #0
 8012530:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8012532:	f000 f8ff 	bl	8012734 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012536:	4b10      	ldr	r3, [pc, #64]	@ (8012578 <xPortStartScheduler+0x144>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a0f      	ldr	r2, [pc, #60]	@ (8012578 <xPortStartScheduler+0x144>)
 801253c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012540:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8012542:	f7ff ff61 	bl	8012408 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8012546:	f7ff f87b 	bl	8011640 <vTaskSwitchContext>
    prvTaskExitError();
 801254a:	f7ff ff19 	bl	8012380 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 801254e:	2300      	movs	r3, #0
}
 8012550:	4618      	mov	r0, r3
 8012552:	3718      	adds	r7, #24
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	e000ed00 	.word	0xe000ed00
 801255c:	410fc271 	.word	0x410fc271
 8012560:	410fc270 	.word	0x410fc270
 8012564:	e000e400 	.word	0xe000e400
 8012568:	200006f8 	.word	0x200006f8
 801256c:	200006fc 	.word	0x200006fc
 8012570:	e000ed20 	.word	0xe000ed20
 8012574:	20000020 	.word	0x20000020
 8012578:	e000ef34 	.word	0xe000ef34

0801257c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
        __asm volatile
 8012582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012586:	f383 8811 	msr	BASEPRI, r3
 801258a:	f3bf 8f6f 	isb	sy
 801258e:	f3bf 8f4f 	dsb	sy
 8012592:	607b      	str	r3, [r7, #4]
    }
 8012594:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8012596:	4b10      	ldr	r3, [pc, #64]	@ (80125d8 <vPortEnterCritical+0x5c>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	3301      	adds	r3, #1
 801259c:	4a0e      	ldr	r2, [pc, #56]	@ (80125d8 <vPortEnterCritical+0x5c>)
 801259e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80125a0:	4b0d      	ldr	r3, [pc, #52]	@ (80125d8 <vPortEnterCritical+0x5c>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d110      	bne.n	80125ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80125a8:	4b0c      	ldr	r3, [pc, #48]	@ (80125dc <vPortEnterCritical+0x60>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d00b      	beq.n	80125ca <vPortEnterCritical+0x4e>
        __asm volatile
 80125b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125b6:	f383 8811 	msr	BASEPRI, r3
 80125ba:	f3bf 8f6f 	isb	sy
 80125be:	f3bf 8f4f 	dsb	sy
 80125c2:	603b      	str	r3, [r7, #0]
    }
 80125c4:	bf00      	nop
 80125c6:	bf00      	nop
 80125c8:	e7fd      	b.n	80125c6 <vPortEnterCritical+0x4a>
    }
}
 80125ca:	bf00      	nop
 80125cc:	370c      	adds	r7, #12
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr
 80125d6:	bf00      	nop
 80125d8:	20000020 	.word	0x20000020
 80125dc:	e000ed04 	.word	0xe000ed04

080125e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80125e0:	b480      	push	{r7}
 80125e2:	b083      	sub	sp, #12
 80125e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80125e6:	4b12      	ldr	r3, [pc, #72]	@ (8012630 <vPortExitCritical+0x50>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d10b      	bne.n	8012606 <vPortExitCritical+0x26>
        __asm volatile
 80125ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125f2:	f383 8811 	msr	BASEPRI, r3
 80125f6:	f3bf 8f6f 	isb	sy
 80125fa:	f3bf 8f4f 	dsb	sy
 80125fe:	607b      	str	r3, [r7, #4]
    }
 8012600:	bf00      	nop
 8012602:	bf00      	nop
 8012604:	e7fd      	b.n	8012602 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8012606:	4b0a      	ldr	r3, [pc, #40]	@ (8012630 <vPortExitCritical+0x50>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	3b01      	subs	r3, #1
 801260c:	4a08      	ldr	r2, [pc, #32]	@ (8012630 <vPortExitCritical+0x50>)
 801260e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8012610:	4b07      	ldr	r3, [pc, #28]	@ (8012630 <vPortExitCritical+0x50>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d105      	bne.n	8012624 <vPortExitCritical+0x44>
 8012618:	2300      	movs	r3, #0
 801261a:	603b      	str	r3, [r7, #0]
        __asm volatile
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	f383 8811 	msr	BASEPRI, r3
    }
 8012622:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8012624:	bf00      	nop
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr
 8012630:	20000020 	.word	0x20000020
	...

08012640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8012640:	f3ef 8009 	mrs	r0, PSP
 8012644:	f3bf 8f6f 	isb	sy
 8012648:	4b15      	ldr	r3, [pc, #84]	@ (80126a0 <pxCurrentTCBConst>)
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	f01e 0f10 	tst.w	lr, #16
 8012650:	bf08      	it	eq
 8012652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801265a:	6010      	str	r0, [r2, #0]
 801265c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012664:	f380 8811 	msr	BASEPRI, r0
 8012668:	f3bf 8f4f 	dsb	sy
 801266c:	f3bf 8f6f 	isb	sy
 8012670:	f7fe ffe6 	bl	8011640 <vTaskSwitchContext>
 8012674:	f04f 0000 	mov.w	r0, #0
 8012678:	f380 8811 	msr	BASEPRI, r0
 801267c:	bc09      	pop	{r0, r3}
 801267e:	6819      	ldr	r1, [r3, #0]
 8012680:	6808      	ldr	r0, [r1, #0]
 8012682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012686:	f01e 0f10 	tst.w	lr, #16
 801268a:	bf08      	it	eq
 801268c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012690:	f380 8809 	msr	PSP, r0
 8012694:	f3bf 8f6f 	isb	sy
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	f3af 8000 	nop.w

080126a0 <pxCurrentTCBConst>:
 80126a0:	200005b8 	.word	0x200005b8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80126a4:	bf00      	nop
 80126a6:	bf00      	nop

080126a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
        __asm volatile
 80126ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126b2:	f383 8811 	msr	BASEPRI, r3
 80126b6:	f3bf 8f6f 	isb	sy
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	607b      	str	r3, [r7, #4]
    }
 80126c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80126c2:	f7fe ff03 	bl	80114cc <xTaskIncrementTick>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d003      	beq.n	80126d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80126cc:	4b06      	ldr	r3, [pc, #24]	@ (80126e8 <SysTick_Handler+0x40>)
 80126ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126d2:	601a      	str	r2, [r3, #0]
 80126d4:	2300      	movs	r3, #0
 80126d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	f383 8811 	msr	BASEPRI, r3
    }
 80126de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80126e0:	bf00      	nop
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	e000ed04 	.word	0xe000ed04

080126ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80126ec:	b480      	push	{r7}
 80126ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80126f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012720 <vPortSetupTimerInterrupt+0x34>)
 80126f2:	2200      	movs	r2, #0
 80126f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80126f6:	4b0b      	ldr	r3, [pc, #44]	@ (8012724 <vPortSetupTimerInterrupt+0x38>)
 80126f8:	2200      	movs	r2, #0
 80126fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80126fc:	4b0a      	ldr	r3, [pc, #40]	@ (8012728 <vPortSetupTimerInterrupt+0x3c>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	4a0a      	ldr	r2, [pc, #40]	@ (801272c <vPortSetupTimerInterrupt+0x40>)
 8012702:	fba2 2303 	umull	r2, r3, r2, r3
 8012706:	099b      	lsrs	r3, r3, #6
 8012708:	4a09      	ldr	r2, [pc, #36]	@ (8012730 <vPortSetupTimerInterrupt+0x44>)
 801270a:	3b01      	subs	r3, #1
 801270c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801270e:	4b04      	ldr	r3, [pc, #16]	@ (8012720 <vPortSetupTimerInterrupt+0x34>)
 8012710:	2207      	movs	r2, #7
 8012712:	601a      	str	r2, [r3, #0]
}
 8012714:	bf00      	nop
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	e000e010 	.word	0xe000e010
 8012724:	e000e018 	.word	0xe000e018
 8012728:	20000014 	.word	0x20000014
 801272c:	10624dd3 	.word	0x10624dd3
 8012730:	e000e014 	.word	0xe000e014

08012734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8012734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012744 <vPortEnableVFP+0x10>
 8012738:	6801      	ldr	r1, [r0, #0]
 801273a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801273e:	6001      	str	r1, [r0, #0]
 8012740:	4770      	bx	lr
 8012742:	0000      	.short	0x0000
 8012744:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8012748:	bf00      	nop
 801274a:	bf00      	nop

0801274c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 801274c:	b480      	push	{r7}
 801274e:	b085      	sub	sp, #20
 8012750:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8012752:	f3ef 8305 	mrs	r3, IPSR
 8012756:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	2b0f      	cmp	r3, #15
 801275c:	d915      	bls.n	801278a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801275e:	4a18      	ldr	r2, [pc, #96]	@ (80127c0 <vPortValidateInterruptPriority+0x74>)
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	4413      	add	r3, r2
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012768:	4b16      	ldr	r3, [pc, #88]	@ (80127c4 <vPortValidateInterruptPriority+0x78>)
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	7afa      	ldrb	r2, [r7, #11]
 801276e:	429a      	cmp	r2, r3
 8012770:	d20b      	bcs.n	801278a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8012772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012776:	f383 8811 	msr	BASEPRI, r3
 801277a:	f3bf 8f6f 	isb	sy
 801277e:	f3bf 8f4f 	dsb	sy
 8012782:	607b      	str	r3, [r7, #4]
    }
 8012784:	bf00      	nop
 8012786:	bf00      	nop
 8012788:	e7fd      	b.n	8012786 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801278a:	4b0f      	ldr	r3, [pc, #60]	@ (80127c8 <vPortValidateInterruptPriority+0x7c>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012792:	4b0e      	ldr	r3, [pc, #56]	@ (80127cc <vPortValidateInterruptPriority+0x80>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	429a      	cmp	r2, r3
 8012798:	d90b      	bls.n	80127b2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 801279a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801279e:	f383 8811 	msr	BASEPRI, r3
 80127a2:	f3bf 8f6f 	isb	sy
 80127a6:	f3bf 8f4f 	dsb	sy
 80127aa:	603b      	str	r3, [r7, #0]
    }
 80127ac:	bf00      	nop
 80127ae:	bf00      	nop
 80127b0:	e7fd      	b.n	80127ae <vPortValidateInterruptPriority+0x62>
    }
 80127b2:	bf00      	nop
 80127b4:	3714      	adds	r7, #20
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	e000e3f0 	.word	0xe000e3f0
 80127c4:	200006f8 	.word	0x200006f8
 80127c8:	e000ed0c 	.word	0xe000ed0c
 80127cc:	200006fc 	.word	0x200006fc

080127d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b08a      	sub	sp, #40	@ 0x28
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80127d8:	2300      	movs	r3, #0
 80127da:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80127dc:	f7fe fdba 	bl	8011354 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80127e0:	4b66      	ldr	r3, [pc, #408]	@ (801297c <pvPortMalloc+0x1ac>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d101      	bne.n	80127ec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80127e8:	f000 f938 	bl	8012a5c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80127ec:	4b64      	ldr	r3, [pc, #400]	@ (8012980 <pvPortMalloc+0x1b0>)
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	4013      	ands	r3, r2
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f040 80a9 	bne.w	801294c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d02e      	beq.n	801285e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8012800:	2208      	movs	r2, #8
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8012806:	687a      	ldr	r2, [r7, #4]
 8012808:	429a      	cmp	r2, r3
 801280a:	d228      	bcs.n	801285e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 801280c:	2208      	movs	r2, #8
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	4413      	add	r3, r2
 8012812:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f003 0307 	and.w	r3, r3, #7
 801281a:	2b00      	cmp	r3, #0
 801281c:	d022      	beq.n	8012864 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f023 0307 	bic.w	r3, r3, #7
 8012824:	3308      	adds	r3, #8
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	429a      	cmp	r2, r3
 801282a:	d215      	bcs.n	8012858 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f023 0307 	bic.w	r3, r3, #7
 8012832:	3308      	adds	r3, #8
 8012834:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f003 0307 	and.w	r3, r3, #7
 801283c:	2b00      	cmp	r3, #0
 801283e:	d011      	beq.n	8012864 <pvPortMalloc+0x94>
        __asm volatile
 8012840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012844:	f383 8811 	msr	BASEPRI, r3
 8012848:	f3bf 8f6f 	isb	sy
 801284c:	f3bf 8f4f 	dsb	sy
 8012850:	617b      	str	r3, [r7, #20]
    }
 8012852:	bf00      	nop
 8012854:	bf00      	nop
 8012856:	e7fd      	b.n	8012854 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8012858:	2300      	movs	r3, #0
 801285a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801285c:	e002      	b.n	8012864 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 801285e:	2300      	movs	r3, #0
 8012860:	607b      	str	r3, [r7, #4]
 8012862:	e000      	b.n	8012866 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012864:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d06f      	beq.n	801294c <pvPortMalloc+0x17c>
 801286c:	4b45      	ldr	r3, [pc, #276]	@ (8012984 <pvPortMalloc+0x1b4>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	429a      	cmp	r2, r3
 8012874:	d86a      	bhi.n	801294c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8012876:	4b44      	ldr	r3, [pc, #272]	@ (8012988 <pvPortMalloc+0x1b8>)
 8012878:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 801287a:	4b43      	ldr	r3, [pc, #268]	@ (8012988 <pvPortMalloc+0x1b8>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012880:	e004      	b.n	801288c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8012882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012884:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8012886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	429a      	cmp	r2, r3
 8012894:	d903      	bls.n	801289e <pvPortMalloc+0xce>
 8012896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d1f1      	bne.n	8012882 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 801289e:	4b37      	ldr	r3, [pc, #220]	@ (801297c <pvPortMalloc+0x1ac>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d051      	beq.n	801294c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80128a8:	6a3b      	ldr	r3, [r7, #32]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	2208      	movs	r2, #8
 80128ae:	4413      	add	r3, r2
 80128b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80128b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128b4:	681a      	ldr	r2, [r3, #0]
 80128b6:	6a3b      	ldr	r3, [r7, #32]
 80128b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80128ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128bc:	685a      	ldr	r2, [r3, #4]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	1ad2      	subs	r2, r2, r3
 80128c2:	2308      	movs	r3, #8
 80128c4:	005b      	lsls	r3, r3, #1
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d920      	bls.n	801290c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80128ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	4413      	add	r3, r2
 80128d0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	f003 0307 	and.w	r3, r3, #7
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d00b      	beq.n	80128f4 <pvPortMalloc+0x124>
        __asm volatile
 80128dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128e0:	f383 8811 	msr	BASEPRI, r3
 80128e4:	f3bf 8f6f 	isb	sy
 80128e8:	f3bf 8f4f 	dsb	sy
 80128ec:	613b      	str	r3, [r7, #16]
    }
 80128ee:	bf00      	nop
 80128f0:	bf00      	nop
 80128f2:	e7fd      	b.n	80128f0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80128f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f6:	685a      	ldr	r2, [r3, #4]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	1ad2      	subs	r2, r2, r3
 80128fc:	69bb      	ldr	r3, [r7, #24]
 80128fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8012900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012906:	69b8      	ldr	r0, [r7, #24]
 8012908:	f000 f90a 	bl	8012b20 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801290c:	4b1d      	ldr	r3, [pc, #116]	@ (8012984 <pvPortMalloc+0x1b4>)
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	1ad3      	subs	r3, r2, r3
 8012916:	4a1b      	ldr	r2, [pc, #108]	@ (8012984 <pvPortMalloc+0x1b4>)
 8012918:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801291a:	4b1a      	ldr	r3, [pc, #104]	@ (8012984 <pvPortMalloc+0x1b4>)
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	4b1b      	ldr	r3, [pc, #108]	@ (801298c <pvPortMalloc+0x1bc>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	429a      	cmp	r2, r3
 8012924:	d203      	bcs.n	801292e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012926:	4b17      	ldr	r3, [pc, #92]	@ (8012984 <pvPortMalloc+0x1b4>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4a18      	ldr	r2, [pc, #96]	@ (801298c <pvPortMalloc+0x1bc>)
 801292c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 801292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012930:	685a      	ldr	r2, [r3, #4]
 8012932:	4b13      	ldr	r3, [pc, #76]	@ (8012980 <pvPortMalloc+0x1b0>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	431a      	orrs	r2, r3
 8012938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801293a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 801293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801293e:	2200      	movs	r2, #0
 8012940:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8012942:	4b13      	ldr	r3, [pc, #76]	@ (8012990 <pvPortMalloc+0x1c0>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	3301      	adds	r3, #1
 8012948:	4a11      	ldr	r2, [pc, #68]	@ (8012990 <pvPortMalloc+0x1c0>)
 801294a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 801294c:	f7fe fd10 	bl	8011370 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	f003 0307 	and.w	r3, r3, #7
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00b      	beq.n	8012972 <pvPortMalloc+0x1a2>
        __asm volatile
 801295a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801295e:	f383 8811 	msr	BASEPRI, r3
 8012962:	f3bf 8f6f 	isb	sy
 8012966:	f3bf 8f4f 	dsb	sy
 801296a:	60fb      	str	r3, [r7, #12]
    }
 801296c:	bf00      	nop
 801296e:	bf00      	nop
 8012970:	e7fd      	b.n	801296e <pvPortMalloc+0x19e>
    return pvReturn;
 8012972:	69fb      	ldr	r3, [r7, #28]
}
 8012974:	4618      	mov	r0, r3
 8012976:	3728      	adds	r7, #40	@ 0x28
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	20013308 	.word	0x20013308
 8012980:	2001331c 	.word	0x2001331c
 8012984:	2001330c 	.word	0x2001330c
 8012988:	20013300 	.word	0x20013300
 801298c:	20013310 	.word	0x20013310
 8012990:	20013314 	.word	0x20013314

08012994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b086      	sub	sp, #24
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d04f      	beq.n	8012a46 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80129a6:	2308      	movs	r3, #8
 80129a8:	425b      	negs	r3, r3
 80129aa:	697a      	ldr	r2, [r7, #20]
 80129ac:	4413      	add	r3, r2
 80129ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	685a      	ldr	r2, [r3, #4]
 80129b8:	4b25      	ldr	r3, [pc, #148]	@ (8012a50 <vPortFree+0xbc>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	4013      	ands	r3, r2
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d10b      	bne.n	80129da <vPortFree+0x46>
        __asm volatile
 80129c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129c6:	f383 8811 	msr	BASEPRI, r3
 80129ca:	f3bf 8f6f 	isb	sy
 80129ce:	f3bf 8f4f 	dsb	sy
 80129d2:	60fb      	str	r3, [r7, #12]
    }
 80129d4:	bf00      	nop
 80129d6:	bf00      	nop
 80129d8:	e7fd      	b.n	80129d6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d00b      	beq.n	80129fa <vPortFree+0x66>
        __asm volatile
 80129e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129e6:	f383 8811 	msr	BASEPRI, r3
 80129ea:	f3bf 8f6f 	isb	sy
 80129ee:	f3bf 8f4f 	dsb	sy
 80129f2:	60bb      	str	r3, [r7, #8]
    }
 80129f4:	bf00      	nop
 80129f6:	bf00      	nop
 80129f8:	e7fd      	b.n	80129f6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	685a      	ldr	r2, [r3, #4]
 80129fe:	4b14      	ldr	r3, [pc, #80]	@ (8012a50 <vPortFree+0xbc>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4013      	ands	r3, r2
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d01e      	beq.n	8012a46 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d11a      	bne.n	8012a46 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	685a      	ldr	r2, [r3, #4]
 8012a14:	4b0e      	ldr	r3, [pc, #56]	@ (8012a50 <vPortFree+0xbc>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	43db      	mvns	r3, r3
 8012a1a:	401a      	ands	r2, r3
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8012a20:	f7fe fc98 	bl	8011354 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	685a      	ldr	r2, [r3, #4]
 8012a28:	4b0a      	ldr	r3, [pc, #40]	@ (8012a54 <vPortFree+0xc0>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	4a09      	ldr	r2, [pc, #36]	@ (8012a54 <vPortFree+0xc0>)
 8012a30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012a32:	6938      	ldr	r0, [r7, #16]
 8012a34:	f000 f874 	bl	8012b20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8012a38:	4b07      	ldr	r3, [pc, #28]	@ (8012a58 <vPortFree+0xc4>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	4a06      	ldr	r2, [pc, #24]	@ (8012a58 <vPortFree+0xc4>)
 8012a40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8012a42:	f7fe fc95 	bl	8011370 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8012a46:	bf00      	nop
 8012a48:	3718      	adds	r7, #24
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	2001331c 	.word	0x2001331c
 8012a54:	2001330c 	.word	0x2001330c
 8012a58:	20013318 	.word	0x20013318

08012a5c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8012a5c:	b480      	push	{r7}
 8012a5e:	b085      	sub	sp, #20
 8012a60:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012a62:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8012a66:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8012a68:	4b27      	ldr	r3, [pc, #156]	@ (8012b08 <prvHeapInit+0xac>)
 8012a6a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f003 0307 	and.w	r3, r3, #7
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d00c      	beq.n	8012a90 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	3307      	adds	r3, #7
 8012a7a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	f023 0307 	bic.w	r3, r3, #7
 8012a82:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012a84:	68ba      	ldr	r2, [r7, #8]
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8012b08 <prvHeapInit+0xac>)
 8012a8c:	4413      	add	r3, r2
 8012a8e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012a94:	4a1d      	ldr	r2, [pc, #116]	@ (8012b0c <prvHeapInit+0xb0>)
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8012a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8012b0c <prvHeapInit+0xb0>)
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	68ba      	ldr	r2, [r7, #8]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8012aa8:	2208      	movs	r2, #8
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	1a9b      	subs	r3, r3, r2
 8012aae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	f023 0307 	bic.w	r3, r3, #7
 8012ab6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	4a15      	ldr	r2, [pc, #84]	@ (8012b10 <prvHeapInit+0xb4>)
 8012abc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8012abe:	4b14      	ldr	r3, [pc, #80]	@ (8012b10 <prvHeapInit+0xb4>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8012ac6:	4b12      	ldr	r3, [pc, #72]	@ (8012b10 <prvHeapInit+0xb4>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	2200      	movs	r2, #0
 8012acc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	68fa      	ldr	r2, [r7, #12]
 8012ad6:	1ad2      	subs	r2, r2, r3
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012adc:	4b0c      	ldr	r3, [pc, #48]	@ (8012b10 <prvHeapInit+0xb4>)
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8012b14 <prvHeapInit+0xb8>)
 8012aea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	4a09      	ldr	r2, [pc, #36]	@ (8012b18 <prvHeapInit+0xbc>)
 8012af2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012af4:	4b09      	ldr	r3, [pc, #36]	@ (8012b1c <prvHeapInit+0xc0>)
 8012af6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012afa:	601a      	str	r2, [r3, #0]
}
 8012afc:	bf00      	nop
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr
 8012b08:	20000700 	.word	0x20000700
 8012b0c:	20013300 	.word	0x20013300
 8012b10:	20013308 	.word	0x20013308
 8012b14:	20013310 	.word	0x20013310
 8012b18:	2001330c 	.word	0x2001330c
 8012b1c:	2001331c 	.word	0x2001331c

08012b20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8012b20:	b480      	push	{r7}
 8012b22:	b085      	sub	sp, #20
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012b28:	4b28      	ldr	r3, [pc, #160]	@ (8012bcc <prvInsertBlockIntoFreeList+0xac>)
 8012b2a:	60fb      	str	r3, [r7, #12]
 8012b2c:	e002      	b.n	8012b34 <prvInsertBlockIntoFreeList+0x14>
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	60fb      	str	r3, [r7, #12]
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	687a      	ldr	r2, [r7, #4]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d8f7      	bhi.n	8012b2e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	68ba      	ldr	r2, [r7, #8]
 8012b48:	4413      	add	r3, r2
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d108      	bne.n	8012b62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	685a      	ldr	r2, [r3, #4]
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	441a      	add	r2, r3
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	68ba      	ldr	r2, [r7, #8]
 8012b6c:	441a      	add	r2, r3
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d118      	bne.n	8012ba8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	4b15      	ldr	r3, [pc, #84]	@ (8012bd0 <prvInsertBlockIntoFreeList+0xb0>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d00d      	beq.n	8012b9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	685a      	ldr	r2, [r3, #4]
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	441a      	add	r2, r3
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	601a      	str	r2, [r3, #0]
 8012b9c:	e008      	b.n	8012bb0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8012bd0 <prvInsertBlockIntoFreeList+0xb0>)
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	601a      	str	r2, [r3, #0]
 8012ba6:	e003      	b.n	8012bb0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8012bb0:	68fa      	ldr	r2, [r7, #12]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d002      	beq.n	8012bbe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	687a      	ldr	r2, [r7, #4]
 8012bbc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8012bbe:	bf00      	nop
 8012bc0:	3714      	adds	r7, #20
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc8:	4770      	bx	lr
 8012bca:	bf00      	nop
 8012bcc:	20013300 	.word	0x20013300
 8012bd0:	20013308 	.word	0x20013308

08012bd4 <malloc>:
 8012bd4:	4b02      	ldr	r3, [pc, #8]	@ (8012be0 <malloc+0xc>)
 8012bd6:	4601      	mov	r1, r0
 8012bd8:	6818      	ldr	r0, [r3, #0]
 8012bda:	f000 b82d 	b.w	8012c38 <_malloc_r>
 8012bde:	bf00      	nop
 8012be0:	2000019c 	.word	0x2000019c

08012be4 <free>:
 8012be4:	4b02      	ldr	r3, [pc, #8]	@ (8012bf0 <free+0xc>)
 8012be6:	4601      	mov	r1, r0
 8012be8:	6818      	ldr	r0, [r3, #0]
 8012bea:	f001 ba6d 	b.w	80140c8 <_free_r>
 8012bee:	bf00      	nop
 8012bf0:	2000019c 	.word	0x2000019c

08012bf4 <sbrk_aligned>:
 8012bf4:	b570      	push	{r4, r5, r6, lr}
 8012bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8012c34 <sbrk_aligned+0x40>)
 8012bf8:	460c      	mov	r4, r1
 8012bfa:	6831      	ldr	r1, [r6, #0]
 8012bfc:	4605      	mov	r5, r0
 8012bfe:	b911      	cbnz	r1, 8012c06 <sbrk_aligned+0x12>
 8012c00:	f001 f9fc 	bl	8013ffc <_sbrk_r>
 8012c04:	6030      	str	r0, [r6, #0]
 8012c06:	4621      	mov	r1, r4
 8012c08:	4628      	mov	r0, r5
 8012c0a:	f001 f9f7 	bl	8013ffc <_sbrk_r>
 8012c0e:	1c43      	adds	r3, r0, #1
 8012c10:	d103      	bne.n	8012c1a <sbrk_aligned+0x26>
 8012c12:	f04f 34ff 	mov.w	r4, #4294967295
 8012c16:	4620      	mov	r0, r4
 8012c18:	bd70      	pop	{r4, r5, r6, pc}
 8012c1a:	1cc4      	adds	r4, r0, #3
 8012c1c:	f024 0403 	bic.w	r4, r4, #3
 8012c20:	42a0      	cmp	r0, r4
 8012c22:	d0f8      	beq.n	8012c16 <sbrk_aligned+0x22>
 8012c24:	1a21      	subs	r1, r4, r0
 8012c26:	4628      	mov	r0, r5
 8012c28:	f001 f9e8 	bl	8013ffc <_sbrk_r>
 8012c2c:	3001      	adds	r0, #1
 8012c2e:	d1f2      	bne.n	8012c16 <sbrk_aligned+0x22>
 8012c30:	e7ef      	b.n	8012c12 <sbrk_aligned+0x1e>
 8012c32:	bf00      	nop
 8012c34:	20013320 	.word	0x20013320

08012c38 <_malloc_r>:
 8012c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c3c:	1ccd      	adds	r5, r1, #3
 8012c3e:	f025 0503 	bic.w	r5, r5, #3
 8012c42:	3508      	adds	r5, #8
 8012c44:	2d0c      	cmp	r5, #12
 8012c46:	bf38      	it	cc
 8012c48:	250c      	movcc	r5, #12
 8012c4a:	2d00      	cmp	r5, #0
 8012c4c:	4606      	mov	r6, r0
 8012c4e:	db01      	blt.n	8012c54 <_malloc_r+0x1c>
 8012c50:	42a9      	cmp	r1, r5
 8012c52:	d904      	bls.n	8012c5e <_malloc_r+0x26>
 8012c54:	230c      	movs	r3, #12
 8012c56:	6033      	str	r3, [r6, #0]
 8012c58:	2000      	movs	r0, #0
 8012c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d34 <_malloc_r+0xfc>
 8012c62:	f000 f869 	bl	8012d38 <__malloc_lock>
 8012c66:	f8d8 3000 	ldr.w	r3, [r8]
 8012c6a:	461c      	mov	r4, r3
 8012c6c:	bb44      	cbnz	r4, 8012cc0 <_malloc_r+0x88>
 8012c6e:	4629      	mov	r1, r5
 8012c70:	4630      	mov	r0, r6
 8012c72:	f7ff ffbf 	bl	8012bf4 <sbrk_aligned>
 8012c76:	1c43      	adds	r3, r0, #1
 8012c78:	4604      	mov	r4, r0
 8012c7a:	d158      	bne.n	8012d2e <_malloc_r+0xf6>
 8012c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8012c80:	4627      	mov	r7, r4
 8012c82:	2f00      	cmp	r7, #0
 8012c84:	d143      	bne.n	8012d0e <_malloc_r+0xd6>
 8012c86:	2c00      	cmp	r4, #0
 8012c88:	d04b      	beq.n	8012d22 <_malloc_r+0xea>
 8012c8a:	6823      	ldr	r3, [r4, #0]
 8012c8c:	4639      	mov	r1, r7
 8012c8e:	4630      	mov	r0, r6
 8012c90:	eb04 0903 	add.w	r9, r4, r3
 8012c94:	f001 f9b2 	bl	8013ffc <_sbrk_r>
 8012c98:	4581      	cmp	r9, r0
 8012c9a:	d142      	bne.n	8012d22 <_malloc_r+0xea>
 8012c9c:	6821      	ldr	r1, [r4, #0]
 8012c9e:	1a6d      	subs	r5, r5, r1
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	f7ff ffa6 	bl	8012bf4 <sbrk_aligned>
 8012ca8:	3001      	adds	r0, #1
 8012caa:	d03a      	beq.n	8012d22 <_malloc_r+0xea>
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	442b      	add	r3, r5
 8012cb0:	6023      	str	r3, [r4, #0]
 8012cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8012cb6:	685a      	ldr	r2, [r3, #4]
 8012cb8:	bb62      	cbnz	r2, 8012d14 <_malloc_r+0xdc>
 8012cba:	f8c8 7000 	str.w	r7, [r8]
 8012cbe:	e00f      	b.n	8012ce0 <_malloc_r+0xa8>
 8012cc0:	6822      	ldr	r2, [r4, #0]
 8012cc2:	1b52      	subs	r2, r2, r5
 8012cc4:	d420      	bmi.n	8012d08 <_malloc_r+0xd0>
 8012cc6:	2a0b      	cmp	r2, #11
 8012cc8:	d917      	bls.n	8012cfa <_malloc_r+0xc2>
 8012cca:	1961      	adds	r1, r4, r5
 8012ccc:	42a3      	cmp	r3, r4
 8012cce:	6025      	str	r5, [r4, #0]
 8012cd0:	bf18      	it	ne
 8012cd2:	6059      	strne	r1, [r3, #4]
 8012cd4:	6863      	ldr	r3, [r4, #4]
 8012cd6:	bf08      	it	eq
 8012cd8:	f8c8 1000 	streq.w	r1, [r8]
 8012cdc:	5162      	str	r2, [r4, r5]
 8012cde:	604b      	str	r3, [r1, #4]
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	f000 f82f 	bl	8012d44 <__malloc_unlock>
 8012ce6:	f104 000b 	add.w	r0, r4, #11
 8012cea:	1d23      	adds	r3, r4, #4
 8012cec:	f020 0007 	bic.w	r0, r0, #7
 8012cf0:	1ac2      	subs	r2, r0, r3
 8012cf2:	bf1c      	itt	ne
 8012cf4:	1a1b      	subne	r3, r3, r0
 8012cf6:	50a3      	strne	r3, [r4, r2]
 8012cf8:	e7af      	b.n	8012c5a <_malloc_r+0x22>
 8012cfa:	6862      	ldr	r2, [r4, #4]
 8012cfc:	42a3      	cmp	r3, r4
 8012cfe:	bf0c      	ite	eq
 8012d00:	f8c8 2000 	streq.w	r2, [r8]
 8012d04:	605a      	strne	r2, [r3, #4]
 8012d06:	e7eb      	b.n	8012ce0 <_malloc_r+0xa8>
 8012d08:	4623      	mov	r3, r4
 8012d0a:	6864      	ldr	r4, [r4, #4]
 8012d0c:	e7ae      	b.n	8012c6c <_malloc_r+0x34>
 8012d0e:	463c      	mov	r4, r7
 8012d10:	687f      	ldr	r7, [r7, #4]
 8012d12:	e7b6      	b.n	8012c82 <_malloc_r+0x4a>
 8012d14:	461a      	mov	r2, r3
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	42a3      	cmp	r3, r4
 8012d1a:	d1fb      	bne.n	8012d14 <_malloc_r+0xdc>
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	6053      	str	r3, [r2, #4]
 8012d20:	e7de      	b.n	8012ce0 <_malloc_r+0xa8>
 8012d22:	230c      	movs	r3, #12
 8012d24:	6033      	str	r3, [r6, #0]
 8012d26:	4630      	mov	r0, r6
 8012d28:	f000 f80c 	bl	8012d44 <__malloc_unlock>
 8012d2c:	e794      	b.n	8012c58 <_malloc_r+0x20>
 8012d2e:	6005      	str	r5, [r0, #0]
 8012d30:	e7d6      	b.n	8012ce0 <_malloc_r+0xa8>
 8012d32:	bf00      	nop
 8012d34:	20013324 	.word	0x20013324

08012d38 <__malloc_lock>:
 8012d38:	4801      	ldr	r0, [pc, #4]	@ (8012d40 <__malloc_lock+0x8>)
 8012d3a:	f001 b9ac 	b.w	8014096 <__retarget_lock_acquire_recursive>
 8012d3e:	bf00      	nop
 8012d40:	20013468 	.word	0x20013468

08012d44 <__malloc_unlock>:
 8012d44:	4801      	ldr	r0, [pc, #4]	@ (8012d4c <__malloc_unlock+0x8>)
 8012d46:	f001 b9a7 	b.w	8014098 <__retarget_lock_release_recursive>
 8012d4a:	bf00      	nop
 8012d4c:	20013468 	.word	0x20013468

08012d50 <realloc>:
 8012d50:	4b02      	ldr	r3, [pc, #8]	@ (8012d5c <realloc+0xc>)
 8012d52:	460a      	mov	r2, r1
 8012d54:	4601      	mov	r1, r0
 8012d56:	6818      	ldr	r0, [r3, #0]
 8012d58:	f000 b802 	b.w	8012d60 <_realloc_r>
 8012d5c:	2000019c 	.word	0x2000019c

08012d60 <_realloc_r>:
 8012d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d64:	4607      	mov	r7, r0
 8012d66:	4614      	mov	r4, r2
 8012d68:	460d      	mov	r5, r1
 8012d6a:	b921      	cbnz	r1, 8012d76 <_realloc_r+0x16>
 8012d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d70:	4611      	mov	r1, r2
 8012d72:	f7ff bf61 	b.w	8012c38 <_malloc_r>
 8012d76:	b92a      	cbnz	r2, 8012d84 <_realloc_r+0x24>
 8012d78:	f001 f9a6 	bl	80140c8 <_free_r>
 8012d7c:	4625      	mov	r5, r4
 8012d7e:	4628      	mov	r0, r5
 8012d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d84:	f002 f9e0 	bl	8015148 <_malloc_usable_size_r>
 8012d88:	4284      	cmp	r4, r0
 8012d8a:	4606      	mov	r6, r0
 8012d8c:	d802      	bhi.n	8012d94 <_realloc_r+0x34>
 8012d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012d92:	d8f4      	bhi.n	8012d7e <_realloc_r+0x1e>
 8012d94:	4621      	mov	r1, r4
 8012d96:	4638      	mov	r0, r7
 8012d98:	f7ff ff4e 	bl	8012c38 <_malloc_r>
 8012d9c:	4680      	mov	r8, r0
 8012d9e:	b908      	cbnz	r0, 8012da4 <_realloc_r+0x44>
 8012da0:	4645      	mov	r5, r8
 8012da2:	e7ec      	b.n	8012d7e <_realloc_r+0x1e>
 8012da4:	42b4      	cmp	r4, r6
 8012da6:	4622      	mov	r2, r4
 8012da8:	4629      	mov	r1, r5
 8012daa:	bf28      	it	cs
 8012dac:	4632      	movcs	r2, r6
 8012dae:	f001 f974 	bl	801409a <memcpy>
 8012db2:	4629      	mov	r1, r5
 8012db4:	4638      	mov	r0, r7
 8012db6:	f001 f987 	bl	80140c8 <_free_r>
 8012dba:	e7f1      	b.n	8012da0 <_realloc_r+0x40>

08012dbc <sulp>:
 8012dbc:	b570      	push	{r4, r5, r6, lr}
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	460d      	mov	r5, r1
 8012dc2:	ec45 4b10 	vmov	d0, r4, r5
 8012dc6:	4616      	mov	r6, r2
 8012dc8:	f002 f880 	bl	8014ecc <__ulp>
 8012dcc:	ec51 0b10 	vmov	r0, r1, d0
 8012dd0:	b17e      	cbz	r6, 8012df2 <sulp+0x36>
 8012dd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012dd6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	dd09      	ble.n	8012df2 <sulp+0x36>
 8012dde:	051b      	lsls	r3, r3, #20
 8012de0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012de4:	2400      	movs	r4, #0
 8012de6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012dea:	4622      	mov	r2, r4
 8012dec:	462b      	mov	r3, r5
 8012dee:	f7f5 fc33 	bl	8008658 <__aeabi_dmul>
 8012df2:	ec41 0b10 	vmov	d0, r0, r1
 8012df6:	bd70      	pop	{r4, r5, r6, pc}

08012df8 <_strtod_l>:
 8012df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dfc:	b09f      	sub	sp, #124	@ 0x7c
 8012dfe:	460c      	mov	r4, r1
 8012e00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012e02:	2200      	movs	r2, #0
 8012e04:	921a      	str	r2, [sp, #104]	@ 0x68
 8012e06:	9005      	str	r0, [sp, #20]
 8012e08:	f04f 0a00 	mov.w	sl, #0
 8012e0c:	f04f 0b00 	mov.w	fp, #0
 8012e10:	460a      	mov	r2, r1
 8012e12:	9219      	str	r2, [sp, #100]	@ 0x64
 8012e14:	7811      	ldrb	r1, [r2, #0]
 8012e16:	292b      	cmp	r1, #43	@ 0x2b
 8012e18:	d04a      	beq.n	8012eb0 <_strtod_l+0xb8>
 8012e1a:	d838      	bhi.n	8012e8e <_strtod_l+0x96>
 8012e1c:	290d      	cmp	r1, #13
 8012e1e:	d832      	bhi.n	8012e86 <_strtod_l+0x8e>
 8012e20:	2908      	cmp	r1, #8
 8012e22:	d832      	bhi.n	8012e8a <_strtod_l+0x92>
 8012e24:	2900      	cmp	r1, #0
 8012e26:	d03b      	beq.n	8012ea0 <_strtod_l+0xa8>
 8012e28:	2200      	movs	r2, #0
 8012e2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8012e2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012e2e:	782a      	ldrb	r2, [r5, #0]
 8012e30:	2a30      	cmp	r2, #48	@ 0x30
 8012e32:	f040 80b2 	bne.w	8012f9a <_strtod_l+0x1a2>
 8012e36:	786a      	ldrb	r2, [r5, #1]
 8012e38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012e3c:	2a58      	cmp	r2, #88	@ 0x58
 8012e3e:	d16e      	bne.n	8012f1e <_strtod_l+0x126>
 8012e40:	9302      	str	r3, [sp, #8]
 8012e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e44:	9301      	str	r3, [sp, #4]
 8012e46:	ab1a      	add	r3, sp, #104	@ 0x68
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	4a8f      	ldr	r2, [pc, #572]	@ (8013088 <_strtod_l+0x290>)
 8012e4c:	9805      	ldr	r0, [sp, #20]
 8012e4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012e50:	a919      	add	r1, sp, #100	@ 0x64
 8012e52:	f001 f9eb 	bl	801422c <__gethex>
 8012e56:	f010 060f 	ands.w	r6, r0, #15
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	d005      	beq.n	8012e6a <_strtod_l+0x72>
 8012e5e:	2e06      	cmp	r6, #6
 8012e60:	d128      	bne.n	8012eb4 <_strtod_l+0xbc>
 8012e62:	3501      	adds	r5, #1
 8012e64:	2300      	movs	r3, #0
 8012e66:	9519      	str	r5, [sp, #100]	@ 0x64
 8012e68:	930e      	str	r3, [sp, #56]	@ 0x38
 8012e6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	f040 858e 	bne.w	801398e <_strtod_l+0xb96>
 8012e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e74:	b1cb      	cbz	r3, 8012eaa <_strtod_l+0xb2>
 8012e76:	4652      	mov	r2, sl
 8012e78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012e7c:	ec43 2b10 	vmov	d0, r2, r3
 8012e80:	b01f      	add	sp, #124	@ 0x7c
 8012e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e86:	2920      	cmp	r1, #32
 8012e88:	d1ce      	bne.n	8012e28 <_strtod_l+0x30>
 8012e8a:	3201      	adds	r2, #1
 8012e8c:	e7c1      	b.n	8012e12 <_strtod_l+0x1a>
 8012e8e:	292d      	cmp	r1, #45	@ 0x2d
 8012e90:	d1ca      	bne.n	8012e28 <_strtod_l+0x30>
 8012e92:	2101      	movs	r1, #1
 8012e94:	910e      	str	r1, [sp, #56]	@ 0x38
 8012e96:	1c51      	adds	r1, r2, #1
 8012e98:	9119      	str	r1, [sp, #100]	@ 0x64
 8012e9a:	7852      	ldrb	r2, [r2, #1]
 8012e9c:	2a00      	cmp	r2, #0
 8012e9e:	d1c5      	bne.n	8012e2c <_strtod_l+0x34>
 8012ea0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012ea2:	9419      	str	r4, [sp, #100]	@ 0x64
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	f040 8570 	bne.w	801398a <_strtod_l+0xb92>
 8012eaa:	4652      	mov	r2, sl
 8012eac:	465b      	mov	r3, fp
 8012eae:	e7e5      	b.n	8012e7c <_strtod_l+0x84>
 8012eb0:	2100      	movs	r1, #0
 8012eb2:	e7ef      	b.n	8012e94 <_strtod_l+0x9c>
 8012eb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012eb6:	b13a      	cbz	r2, 8012ec8 <_strtod_l+0xd0>
 8012eb8:	2135      	movs	r1, #53	@ 0x35
 8012eba:	a81c      	add	r0, sp, #112	@ 0x70
 8012ebc:	f002 f900 	bl	80150c0 <__copybits>
 8012ec0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012ec2:	9805      	ldr	r0, [sp, #20]
 8012ec4:	f001 fcd6 	bl	8014874 <_Bfree>
 8012ec8:	3e01      	subs	r6, #1
 8012eca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012ecc:	2e04      	cmp	r6, #4
 8012ece:	d806      	bhi.n	8012ede <_strtod_l+0xe6>
 8012ed0:	e8df f006 	tbb	[pc, r6]
 8012ed4:	201d0314 	.word	0x201d0314
 8012ed8:	14          	.byte	0x14
 8012ed9:	00          	.byte	0x00
 8012eda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8012ede:	05e1      	lsls	r1, r4, #23
 8012ee0:	bf48      	it	mi
 8012ee2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012ee6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012eea:	0d1b      	lsrs	r3, r3, #20
 8012eec:	051b      	lsls	r3, r3, #20
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d1bb      	bne.n	8012e6a <_strtod_l+0x72>
 8012ef2:	f001 f8a5 	bl	8014040 <__errno>
 8012ef6:	2322      	movs	r3, #34	@ 0x22
 8012ef8:	6003      	str	r3, [r0, #0]
 8012efa:	e7b6      	b.n	8012e6a <_strtod_l+0x72>
 8012efc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012f00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012f04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012f08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012f0c:	e7e7      	b.n	8012ede <_strtod_l+0xe6>
 8012f0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013090 <_strtod_l+0x298>
 8012f12:	e7e4      	b.n	8012ede <_strtod_l+0xe6>
 8012f14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012f18:	f04f 3aff 	mov.w	sl, #4294967295
 8012f1c:	e7df      	b.n	8012ede <_strtod_l+0xe6>
 8012f1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012f20:	1c5a      	adds	r2, r3, #1
 8012f22:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f24:	785b      	ldrb	r3, [r3, #1]
 8012f26:	2b30      	cmp	r3, #48	@ 0x30
 8012f28:	d0f9      	beq.n	8012f1e <_strtod_l+0x126>
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d09d      	beq.n	8012e6a <_strtod_l+0x72>
 8012f2e:	2301      	movs	r3, #1
 8012f30:	2700      	movs	r7, #0
 8012f32:	9308      	str	r3, [sp, #32]
 8012f34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012f36:	930c      	str	r3, [sp, #48]	@ 0x30
 8012f38:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012f3a:	46b9      	mov	r9, r7
 8012f3c:	220a      	movs	r2, #10
 8012f3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012f40:	7805      	ldrb	r5, [r0, #0]
 8012f42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012f46:	b2d9      	uxtb	r1, r3
 8012f48:	2909      	cmp	r1, #9
 8012f4a:	d928      	bls.n	8012f9e <_strtod_l+0x1a6>
 8012f4c:	494f      	ldr	r1, [pc, #316]	@ (801308c <_strtod_l+0x294>)
 8012f4e:	2201      	movs	r2, #1
 8012f50:	f000 fffa 	bl	8013f48 <strncmp>
 8012f54:	2800      	cmp	r0, #0
 8012f56:	d032      	beq.n	8012fbe <_strtod_l+0x1c6>
 8012f58:	2000      	movs	r0, #0
 8012f5a:	462a      	mov	r2, r5
 8012f5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8012f5e:	464d      	mov	r5, r9
 8012f60:	4603      	mov	r3, r0
 8012f62:	2a65      	cmp	r2, #101	@ 0x65
 8012f64:	d001      	beq.n	8012f6a <_strtod_l+0x172>
 8012f66:	2a45      	cmp	r2, #69	@ 0x45
 8012f68:	d114      	bne.n	8012f94 <_strtod_l+0x19c>
 8012f6a:	b91d      	cbnz	r5, 8012f74 <_strtod_l+0x17c>
 8012f6c:	9a08      	ldr	r2, [sp, #32]
 8012f6e:	4302      	orrs	r2, r0
 8012f70:	d096      	beq.n	8012ea0 <_strtod_l+0xa8>
 8012f72:	2500      	movs	r5, #0
 8012f74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012f76:	1c62      	adds	r2, r4, #1
 8012f78:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f7a:	7862      	ldrb	r2, [r4, #1]
 8012f7c:	2a2b      	cmp	r2, #43	@ 0x2b
 8012f7e:	d07a      	beq.n	8013076 <_strtod_l+0x27e>
 8012f80:	2a2d      	cmp	r2, #45	@ 0x2d
 8012f82:	d07e      	beq.n	8013082 <_strtod_l+0x28a>
 8012f84:	f04f 0c00 	mov.w	ip, #0
 8012f88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012f8c:	2909      	cmp	r1, #9
 8012f8e:	f240 8085 	bls.w	801309c <_strtod_l+0x2a4>
 8012f92:	9419      	str	r4, [sp, #100]	@ 0x64
 8012f94:	f04f 0800 	mov.w	r8, #0
 8012f98:	e0a5      	b.n	80130e6 <_strtod_l+0x2ee>
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	e7c8      	b.n	8012f30 <_strtod_l+0x138>
 8012f9e:	f1b9 0f08 	cmp.w	r9, #8
 8012fa2:	bfd8      	it	le
 8012fa4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012fa6:	f100 0001 	add.w	r0, r0, #1
 8012faa:	bfda      	itte	le
 8012fac:	fb02 3301 	mlale	r3, r2, r1, r3
 8012fb0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012fb2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012fb6:	f109 0901 	add.w	r9, r9, #1
 8012fba:	9019      	str	r0, [sp, #100]	@ 0x64
 8012fbc:	e7bf      	b.n	8012f3e <_strtod_l+0x146>
 8012fbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012fc0:	1c5a      	adds	r2, r3, #1
 8012fc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8012fc4:	785a      	ldrb	r2, [r3, #1]
 8012fc6:	f1b9 0f00 	cmp.w	r9, #0
 8012fca:	d03b      	beq.n	8013044 <_strtod_l+0x24c>
 8012fcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8012fce:	464d      	mov	r5, r9
 8012fd0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012fd4:	2b09      	cmp	r3, #9
 8012fd6:	d912      	bls.n	8012ffe <_strtod_l+0x206>
 8012fd8:	2301      	movs	r3, #1
 8012fda:	e7c2      	b.n	8012f62 <_strtod_l+0x16a>
 8012fdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012fde:	1c5a      	adds	r2, r3, #1
 8012fe0:	9219      	str	r2, [sp, #100]	@ 0x64
 8012fe2:	785a      	ldrb	r2, [r3, #1]
 8012fe4:	3001      	adds	r0, #1
 8012fe6:	2a30      	cmp	r2, #48	@ 0x30
 8012fe8:	d0f8      	beq.n	8012fdc <_strtod_l+0x1e4>
 8012fea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012fee:	2b08      	cmp	r3, #8
 8012ff0:	f200 84d2 	bhi.w	8013998 <_strtod_l+0xba0>
 8012ff4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012ff6:	900a      	str	r0, [sp, #40]	@ 0x28
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	930c      	str	r3, [sp, #48]	@ 0x30
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	3a30      	subs	r2, #48	@ 0x30
 8013000:	f100 0301 	add.w	r3, r0, #1
 8013004:	d018      	beq.n	8013038 <_strtod_l+0x240>
 8013006:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013008:	4419      	add	r1, r3
 801300a:	910a      	str	r1, [sp, #40]	@ 0x28
 801300c:	462e      	mov	r6, r5
 801300e:	f04f 0e0a 	mov.w	lr, #10
 8013012:	1c71      	adds	r1, r6, #1
 8013014:	eba1 0c05 	sub.w	ip, r1, r5
 8013018:	4563      	cmp	r3, ip
 801301a:	dc15      	bgt.n	8013048 <_strtod_l+0x250>
 801301c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013020:	182b      	adds	r3, r5, r0
 8013022:	2b08      	cmp	r3, #8
 8013024:	f105 0501 	add.w	r5, r5, #1
 8013028:	4405      	add	r5, r0
 801302a:	dc1a      	bgt.n	8013062 <_strtod_l+0x26a>
 801302c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801302e:	230a      	movs	r3, #10
 8013030:	fb03 2301 	mla	r3, r3, r1, r2
 8013034:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013036:	2300      	movs	r3, #0
 8013038:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801303a:	1c51      	adds	r1, r2, #1
 801303c:	9119      	str	r1, [sp, #100]	@ 0x64
 801303e:	7852      	ldrb	r2, [r2, #1]
 8013040:	4618      	mov	r0, r3
 8013042:	e7c5      	b.n	8012fd0 <_strtod_l+0x1d8>
 8013044:	4648      	mov	r0, r9
 8013046:	e7ce      	b.n	8012fe6 <_strtod_l+0x1ee>
 8013048:	2e08      	cmp	r6, #8
 801304a:	dc05      	bgt.n	8013058 <_strtod_l+0x260>
 801304c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801304e:	fb0e f606 	mul.w	r6, lr, r6
 8013052:	960b      	str	r6, [sp, #44]	@ 0x2c
 8013054:	460e      	mov	r6, r1
 8013056:	e7dc      	b.n	8013012 <_strtod_l+0x21a>
 8013058:	2910      	cmp	r1, #16
 801305a:	bfd8      	it	le
 801305c:	fb0e f707 	mulle.w	r7, lr, r7
 8013060:	e7f8      	b.n	8013054 <_strtod_l+0x25c>
 8013062:	2b0f      	cmp	r3, #15
 8013064:	bfdc      	itt	le
 8013066:	230a      	movle	r3, #10
 8013068:	fb03 2707 	mlale	r7, r3, r7, r2
 801306c:	e7e3      	b.n	8013036 <_strtod_l+0x23e>
 801306e:	2300      	movs	r3, #0
 8013070:	930a      	str	r3, [sp, #40]	@ 0x28
 8013072:	2301      	movs	r3, #1
 8013074:	e77a      	b.n	8012f6c <_strtod_l+0x174>
 8013076:	f04f 0c00 	mov.w	ip, #0
 801307a:	1ca2      	adds	r2, r4, #2
 801307c:	9219      	str	r2, [sp, #100]	@ 0x64
 801307e:	78a2      	ldrb	r2, [r4, #2]
 8013080:	e782      	b.n	8012f88 <_strtod_l+0x190>
 8013082:	f04f 0c01 	mov.w	ip, #1
 8013086:	e7f8      	b.n	801307a <_strtod_l+0x282>
 8013088:	080172a8 	.word	0x080172a8
 801308c:	08017110 	.word	0x08017110
 8013090:	7ff00000 	.word	0x7ff00000
 8013094:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013096:	1c51      	adds	r1, r2, #1
 8013098:	9119      	str	r1, [sp, #100]	@ 0x64
 801309a:	7852      	ldrb	r2, [r2, #1]
 801309c:	2a30      	cmp	r2, #48	@ 0x30
 801309e:	d0f9      	beq.n	8013094 <_strtod_l+0x29c>
 80130a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80130a4:	2908      	cmp	r1, #8
 80130a6:	f63f af75 	bhi.w	8012f94 <_strtod_l+0x19c>
 80130aa:	3a30      	subs	r2, #48	@ 0x30
 80130ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80130ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80130b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80130b2:	f04f 080a 	mov.w	r8, #10
 80130b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80130b8:	1c56      	adds	r6, r2, #1
 80130ba:	9619      	str	r6, [sp, #100]	@ 0x64
 80130bc:	7852      	ldrb	r2, [r2, #1]
 80130be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80130c2:	f1be 0f09 	cmp.w	lr, #9
 80130c6:	d939      	bls.n	801313c <_strtod_l+0x344>
 80130c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80130ca:	1a76      	subs	r6, r6, r1
 80130cc:	2e08      	cmp	r6, #8
 80130ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80130d2:	dc03      	bgt.n	80130dc <_strtod_l+0x2e4>
 80130d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80130d6:	4588      	cmp	r8, r1
 80130d8:	bfa8      	it	ge
 80130da:	4688      	movge	r8, r1
 80130dc:	f1bc 0f00 	cmp.w	ip, #0
 80130e0:	d001      	beq.n	80130e6 <_strtod_l+0x2ee>
 80130e2:	f1c8 0800 	rsb	r8, r8, #0
 80130e6:	2d00      	cmp	r5, #0
 80130e8:	d14e      	bne.n	8013188 <_strtod_l+0x390>
 80130ea:	9908      	ldr	r1, [sp, #32]
 80130ec:	4308      	orrs	r0, r1
 80130ee:	f47f aebc 	bne.w	8012e6a <_strtod_l+0x72>
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	f47f aed4 	bne.w	8012ea0 <_strtod_l+0xa8>
 80130f8:	2a69      	cmp	r2, #105	@ 0x69
 80130fa:	d028      	beq.n	801314e <_strtod_l+0x356>
 80130fc:	dc25      	bgt.n	801314a <_strtod_l+0x352>
 80130fe:	2a49      	cmp	r2, #73	@ 0x49
 8013100:	d025      	beq.n	801314e <_strtod_l+0x356>
 8013102:	2a4e      	cmp	r2, #78	@ 0x4e
 8013104:	f47f aecc 	bne.w	8012ea0 <_strtod_l+0xa8>
 8013108:	499a      	ldr	r1, [pc, #616]	@ (8013374 <_strtod_l+0x57c>)
 801310a:	a819      	add	r0, sp, #100	@ 0x64
 801310c:	f001 fab0 	bl	8014670 <__match>
 8013110:	2800      	cmp	r0, #0
 8013112:	f43f aec5 	beq.w	8012ea0 <_strtod_l+0xa8>
 8013116:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	2b28      	cmp	r3, #40	@ 0x28
 801311c:	d12e      	bne.n	801317c <_strtod_l+0x384>
 801311e:	4996      	ldr	r1, [pc, #600]	@ (8013378 <_strtod_l+0x580>)
 8013120:	aa1c      	add	r2, sp, #112	@ 0x70
 8013122:	a819      	add	r0, sp, #100	@ 0x64
 8013124:	f001 fab8 	bl	8014698 <__hexnan>
 8013128:	2805      	cmp	r0, #5
 801312a:	d127      	bne.n	801317c <_strtod_l+0x384>
 801312c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801312e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013132:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013136:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801313a:	e696      	b.n	8012e6a <_strtod_l+0x72>
 801313c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801313e:	fb08 2101 	mla	r1, r8, r1, r2
 8013142:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013146:	9209      	str	r2, [sp, #36]	@ 0x24
 8013148:	e7b5      	b.n	80130b6 <_strtod_l+0x2be>
 801314a:	2a6e      	cmp	r2, #110	@ 0x6e
 801314c:	e7da      	b.n	8013104 <_strtod_l+0x30c>
 801314e:	498b      	ldr	r1, [pc, #556]	@ (801337c <_strtod_l+0x584>)
 8013150:	a819      	add	r0, sp, #100	@ 0x64
 8013152:	f001 fa8d 	bl	8014670 <__match>
 8013156:	2800      	cmp	r0, #0
 8013158:	f43f aea2 	beq.w	8012ea0 <_strtod_l+0xa8>
 801315c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801315e:	4988      	ldr	r1, [pc, #544]	@ (8013380 <_strtod_l+0x588>)
 8013160:	3b01      	subs	r3, #1
 8013162:	a819      	add	r0, sp, #100	@ 0x64
 8013164:	9319      	str	r3, [sp, #100]	@ 0x64
 8013166:	f001 fa83 	bl	8014670 <__match>
 801316a:	b910      	cbnz	r0, 8013172 <_strtod_l+0x37a>
 801316c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801316e:	3301      	adds	r3, #1
 8013170:	9319      	str	r3, [sp, #100]	@ 0x64
 8013172:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8013390 <_strtod_l+0x598>
 8013176:	f04f 0a00 	mov.w	sl, #0
 801317a:	e676      	b.n	8012e6a <_strtod_l+0x72>
 801317c:	4881      	ldr	r0, [pc, #516]	@ (8013384 <_strtod_l+0x58c>)
 801317e:	f000 ff9b 	bl	80140b8 <nan>
 8013182:	ec5b ab10 	vmov	sl, fp, d0
 8013186:	e670      	b.n	8012e6a <_strtod_l+0x72>
 8013188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801318a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801318c:	eba8 0303 	sub.w	r3, r8, r3
 8013190:	f1b9 0f00 	cmp.w	r9, #0
 8013194:	bf08      	it	eq
 8013196:	46a9      	moveq	r9, r5
 8013198:	2d10      	cmp	r5, #16
 801319a:	9309      	str	r3, [sp, #36]	@ 0x24
 801319c:	462c      	mov	r4, r5
 801319e:	bfa8      	it	ge
 80131a0:	2410      	movge	r4, #16
 80131a2:	f7f5 f9df 	bl	8008564 <__aeabi_ui2d>
 80131a6:	2d09      	cmp	r5, #9
 80131a8:	4682      	mov	sl, r0
 80131aa:	468b      	mov	fp, r1
 80131ac:	dc13      	bgt.n	80131d6 <_strtod_l+0x3de>
 80131ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	f43f ae5a 	beq.w	8012e6a <_strtod_l+0x72>
 80131b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131b8:	dd78      	ble.n	80132ac <_strtod_l+0x4b4>
 80131ba:	2b16      	cmp	r3, #22
 80131bc:	dc5f      	bgt.n	801327e <_strtod_l+0x486>
 80131be:	4972      	ldr	r1, [pc, #456]	@ (8013388 <_strtod_l+0x590>)
 80131c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80131c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131c8:	4652      	mov	r2, sl
 80131ca:	465b      	mov	r3, fp
 80131cc:	f7f5 fa44 	bl	8008658 <__aeabi_dmul>
 80131d0:	4682      	mov	sl, r0
 80131d2:	468b      	mov	fp, r1
 80131d4:	e649      	b.n	8012e6a <_strtod_l+0x72>
 80131d6:	4b6c      	ldr	r3, [pc, #432]	@ (8013388 <_strtod_l+0x590>)
 80131d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80131dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80131e0:	f7f5 fa3a 	bl	8008658 <__aeabi_dmul>
 80131e4:	4682      	mov	sl, r0
 80131e6:	4638      	mov	r0, r7
 80131e8:	468b      	mov	fp, r1
 80131ea:	f7f5 f9bb 	bl	8008564 <__aeabi_ui2d>
 80131ee:	4602      	mov	r2, r0
 80131f0:	460b      	mov	r3, r1
 80131f2:	4650      	mov	r0, sl
 80131f4:	4659      	mov	r1, fp
 80131f6:	f7f5 f879 	bl	80082ec <__adddf3>
 80131fa:	2d0f      	cmp	r5, #15
 80131fc:	4682      	mov	sl, r0
 80131fe:	468b      	mov	fp, r1
 8013200:	ddd5      	ble.n	80131ae <_strtod_l+0x3b6>
 8013202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013204:	1b2c      	subs	r4, r5, r4
 8013206:	441c      	add	r4, r3
 8013208:	2c00      	cmp	r4, #0
 801320a:	f340 8093 	ble.w	8013334 <_strtod_l+0x53c>
 801320e:	f014 030f 	ands.w	r3, r4, #15
 8013212:	d00a      	beq.n	801322a <_strtod_l+0x432>
 8013214:	495c      	ldr	r1, [pc, #368]	@ (8013388 <_strtod_l+0x590>)
 8013216:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801321a:	4652      	mov	r2, sl
 801321c:	465b      	mov	r3, fp
 801321e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013222:	f7f5 fa19 	bl	8008658 <__aeabi_dmul>
 8013226:	4682      	mov	sl, r0
 8013228:	468b      	mov	fp, r1
 801322a:	f034 040f 	bics.w	r4, r4, #15
 801322e:	d073      	beq.n	8013318 <_strtod_l+0x520>
 8013230:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013234:	dd49      	ble.n	80132ca <_strtod_l+0x4d2>
 8013236:	2400      	movs	r4, #0
 8013238:	46a0      	mov	r8, r4
 801323a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801323c:	46a1      	mov	r9, r4
 801323e:	9a05      	ldr	r2, [sp, #20]
 8013240:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8013390 <_strtod_l+0x598>
 8013244:	2322      	movs	r3, #34	@ 0x22
 8013246:	6013      	str	r3, [r2, #0]
 8013248:	f04f 0a00 	mov.w	sl, #0
 801324c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801324e:	2b00      	cmp	r3, #0
 8013250:	f43f ae0b 	beq.w	8012e6a <_strtod_l+0x72>
 8013254:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013256:	9805      	ldr	r0, [sp, #20]
 8013258:	f001 fb0c 	bl	8014874 <_Bfree>
 801325c:	9805      	ldr	r0, [sp, #20]
 801325e:	4649      	mov	r1, r9
 8013260:	f001 fb08 	bl	8014874 <_Bfree>
 8013264:	9805      	ldr	r0, [sp, #20]
 8013266:	4641      	mov	r1, r8
 8013268:	f001 fb04 	bl	8014874 <_Bfree>
 801326c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801326e:	9805      	ldr	r0, [sp, #20]
 8013270:	f001 fb00 	bl	8014874 <_Bfree>
 8013274:	9805      	ldr	r0, [sp, #20]
 8013276:	4621      	mov	r1, r4
 8013278:	f001 fafc 	bl	8014874 <_Bfree>
 801327c:	e5f5      	b.n	8012e6a <_strtod_l+0x72>
 801327e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013280:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013284:	4293      	cmp	r3, r2
 8013286:	dbbc      	blt.n	8013202 <_strtod_l+0x40a>
 8013288:	4c3f      	ldr	r4, [pc, #252]	@ (8013388 <_strtod_l+0x590>)
 801328a:	f1c5 050f 	rsb	r5, r5, #15
 801328e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013292:	4652      	mov	r2, sl
 8013294:	465b      	mov	r3, fp
 8013296:	e9d1 0100 	ldrd	r0, r1, [r1]
 801329a:	f7f5 f9dd 	bl	8008658 <__aeabi_dmul>
 801329e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132a0:	1b5d      	subs	r5, r3, r5
 80132a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80132a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80132aa:	e78f      	b.n	80131cc <_strtod_l+0x3d4>
 80132ac:	3316      	adds	r3, #22
 80132ae:	dba8      	blt.n	8013202 <_strtod_l+0x40a>
 80132b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132b2:	eba3 0808 	sub.w	r8, r3, r8
 80132b6:	4b34      	ldr	r3, [pc, #208]	@ (8013388 <_strtod_l+0x590>)
 80132b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80132bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80132c0:	4650      	mov	r0, sl
 80132c2:	4659      	mov	r1, fp
 80132c4:	f7f5 faf2 	bl	80088ac <__aeabi_ddiv>
 80132c8:	e782      	b.n	80131d0 <_strtod_l+0x3d8>
 80132ca:	2300      	movs	r3, #0
 80132cc:	4f2f      	ldr	r7, [pc, #188]	@ (801338c <_strtod_l+0x594>)
 80132ce:	1124      	asrs	r4, r4, #4
 80132d0:	4650      	mov	r0, sl
 80132d2:	4659      	mov	r1, fp
 80132d4:	461e      	mov	r6, r3
 80132d6:	2c01      	cmp	r4, #1
 80132d8:	dc21      	bgt.n	801331e <_strtod_l+0x526>
 80132da:	b10b      	cbz	r3, 80132e0 <_strtod_l+0x4e8>
 80132dc:	4682      	mov	sl, r0
 80132de:	468b      	mov	fp, r1
 80132e0:	492a      	ldr	r1, [pc, #168]	@ (801338c <_strtod_l+0x594>)
 80132e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80132e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80132ea:	4652      	mov	r2, sl
 80132ec:	465b      	mov	r3, fp
 80132ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132f2:	f7f5 f9b1 	bl	8008658 <__aeabi_dmul>
 80132f6:	4b26      	ldr	r3, [pc, #152]	@ (8013390 <_strtod_l+0x598>)
 80132f8:	460a      	mov	r2, r1
 80132fa:	400b      	ands	r3, r1
 80132fc:	4925      	ldr	r1, [pc, #148]	@ (8013394 <_strtod_l+0x59c>)
 80132fe:	428b      	cmp	r3, r1
 8013300:	4682      	mov	sl, r0
 8013302:	d898      	bhi.n	8013236 <_strtod_l+0x43e>
 8013304:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013308:	428b      	cmp	r3, r1
 801330a:	bf86      	itte	hi
 801330c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8013398 <_strtod_l+0x5a0>
 8013310:	f04f 3aff 	movhi.w	sl, #4294967295
 8013314:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013318:	2300      	movs	r3, #0
 801331a:	9308      	str	r3, [sp, #32]
 801331c:	e076      	b.n	801340c <_strtod_l+0x614>
 801331e:	07e2      	lsls	r2, r4, #31
 8013320:	d504      	bpl.n	801332c <_strtod_l+0x534>
 8013322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013326:	f7f5 f997 	bl	8008658 <__aeabi_dmul>
 801332a:	2301      	movs	r3, #1
 801332c:	3601      	adds	r6, #1
 801332e:	1064      	asrs	r4, r4, #1
 8013330:	3708      	adds	r7, #8
 8013332:	e7d0      	b.n	80132d6 <_strtod_l+0x4de>
 8013334:	d0f0      	beq.n	8013318 <_strtod_l+0x520>
 8013336:	4264      	negs	r4, r4
 8013338:	f014 020f 	ands.w	r2, r4, #15
 801333c:	d00a      	beq.n	8013354 <_strtod_l+0x55c>
 801333e:	4b12      	ldr	r3, [pc, #72]	@ (8013388 <_strtod_l+0x590>)
 8013340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013344:	4650      	mov	r0, sl
 8013346:	4659      	mov	r1, fp
 8013348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334c:	f7f5 faae 	bl	80088ac <__aeabi_ddiv>
 8013350:	4682      	mov	sl, r0
 8013352:	468b      	mov	fp, r1
 8013354:	1124      	asrs	r4, r4, #4
 8013356:	d0df      	beq.n	8013318 <_strtod_l+0x520>
 8013358:	2c1f      	cmp	r4, #31
 801335a:	dd1f      	ble.n	801339c <_strtod_l+0x5a4>
 801335c:	2400      	movs	r4, #0
 801335e:	46a0      	mov	r8, r4
 8013360:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013362:	46a1      	mov	r9, r4
 8013364:	9a05      	ldr	r2, [sp, #20]
 8013366:	2322      	movs	r3, #34	@ 0x22
 8013368:	f04f 0a00 	mov.w	sl, #0
 801336c:	f04f 0b00 	mov.w	fp, #0
 8013370:	6013      	str	r3, [r2, #0]
 8013372:	e76b      	b.n	801324c <_strtod_l+0x454>
 8013374:	0801711b 	.word	0x0801711b
 8013378:	08017294 	.word	0x08017294
 801337c:	08017112 	.word	0x08017112
 8013380:	08017115 	.word	0x08017115
 8013384:	08017290 	.word	0x08017290
 8013388:	08017420 	.word	0x08017420
 801338c:	080173f8 	.word	0x080173f8
 8013390:	7ff00000 	.word	0x7ff00000
 8013394:	7ca00000 	.word	0x7ca00000
 8013398:	7fefffff 	.word	0x7fefffff
 801339c:	f014 0310 	ands.w	r3, r4, #16
 80133a0:	bf18      	it	ne
 80133a2:	236a      	movne	r3, #106	@ 0x6a
 80133a4:	4ea9      	ldr	r6, [pc, #676]	@ (801364c <_strtod_l+0x854>)
 80133a6:	9308      	str	r3, [sp, #32]
 80133a8:	4650      	mov	r0, sl
 80133aa:	4659      	mov	r1, fp
 80133ac:	2300      	movs	r3, #0
 80133ae:	07e7      	lsls	r7, r4, #31
 80133b0:	d504      	bpl.n	80133bc <_strtod_l+0x5c4>
 80133b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80133b6:	f7f5 f94f 	bl	8008658 <__aeabi_dmul>
 80133ba:	2301      	movs	r3, #1
 80133bc:	1064      	asrs	r4, r4, #1
 80133be:	f106 0608 	add.w	r6, r6, #8
 80133c2:	d1f4      	bne.n	80133ae <_strtod_l+0x5b6>
 80133c4:	b10b      	cbz	r3, 80133ca <_strtod_l+0x5d2>
 80133c6:	4682      	mov	sl, r0
 80133c8:	468b      	mov	fp, r1
 80133ca:	9b08      	ldr	r3, [sp, #32]
 80133cc:	b1b3      	cbz	r3, 80133fc <_strtod_l+0x604>
 80133ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80133d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	4659      	mov	r1, fp
 80133da:	dd0f      	ble.n	80133fc <_strtod_l+0x604>
 80133dc:	2b1f      	cmp	r3, #31
 80133de:	dd56      	ble.n	801348e <_strtod_l+0x696>
 80133e0:	2b34      	cmp	r3, #52	@ 0x34
 80133e2:	bfde      	ittt	le
 80133e4:	f04f 33ff 	movle.w	r3, #4294967295
 80133e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80133ec:	4093      	lslle	r3, r2
 80133ee:	f04f 0a00 	mov.w	sl, #0
 80133f2:	bfcc      	ite	gt
 80133f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80133f8:	ea03 0b01 	andle.w	fp, r3, r1
 80133fc:	2200      	movs	r2, #0
 80133fe:	2300      	movs	r3, #0
 8013400:	4650      	mov	r0, sl
 8013402:	4659      	mov	r1, fp
 8013404:	f7f5 fb90 	bl	8008b28 <__aeabi_dcmpeq>
 8013408:	2800      	cmp	r0, #0
 801340a:	d1a7      	bne.n	801335c <_strtod_l+0x564>
 801340c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801340e:	9300      	str	r3, [sp, #0]
 8013410:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013412:	9805      	ldr	r0, [sp, #20]
 8013414:	462b      	mov	r3, r5
 8013416:	464a      	mov	r2, r9
 8013418:	f001 fa94 	bl	8014944 <__s2b>
 801341c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801341e:	2800      	cmp	r0, #0
 8013420:	f43f af09 	beq.w	8013236 <_strtod_l+0x43e>
 8013424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013426:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013428:	2a00      	cmp	r2, #0
 801342a:	eba3 0308 	sub.w	r3, r3, r8
 801342e:	bfa8      	it	ge
 8013430:	2300      	movge	r3, #0
 8013432:	9312      	str	r3, [sp, #72]	@ 0x48
 8013434:	2400      	movs	r4, #0
 8013436:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801343a:	9316      	str	r3, [sp, #88]	@ 0x58
 801343c:	46a0      	mov	r8, r4
 801343e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013440:	9805      	ldr	r0, [sp, #20]
 8013442:	6859      	ldr	r1, [r3, #4]
 8013444:	f001 f9d6 	bl	80147f4 <_Balloc>
 8013448:	4681      	mov	r9, r0
 801344a:	2800      	cmp	r0, #0
 801344c:	f43f aef7 	beq.w	801323e <_strtod_l+0x446>
 8013450:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013452:	691a      	ldr	r2, [r3, #16]
 8013454:	3202      	adds	r2, #2
 8013456:	f103 010c 	add.w	r1, r3, #12
 801345a:	0092      	lsls	r2, r2, #2
 801345c:	300c      	adds	r0, #12
 801345e:	f000 fe1c 	bl	801409a <memcpy>
 8013462:	ec4b ab10 	vmov	d0, sl, fp
 8013466:	9805      	ldr	r0, [sp, #20]
 8013468:	aa1c      	add	r2, sp, #112	@ 0x70
 801346a:	a91b      	add	r1, sp, #108	@ 0x6c
 801346c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013470:	f001 fd9c 	bl	8014fac <__d2b>
 8013474:	901a      	str	r0, [sp, #104]	@ 0x68
 8013476:	2800      	cmp	r0, #0
 8013478:	f43f aee1 	beq.w	801323e <_strtod_l+0x446>
 801347c:	9805      	ldr	r0, [sp, #20]
 801347e:	2101      	movs	r1, #1
 8013480:	f001 faf6 	bl	8014a70 <__i2b>
 8013484:	4680      	mov	r8, r0
 8013486:	b948      	cbnz	r0, 801349c <_strtod_l+0x6a4>
 8013488:	f04f 0800 	mov.w	r8, #0
 801348c:	e6d7      	b.n	801323e <_strtod_l+0x446>
 801348e:	f04f 32ff 	mov.w	r2, #4294967295
 8013492:	fa02 f303 	lsl.w	r3, r2, r3
 8013496:	ea03 0a0a 	and.w	sl, r3, sl
 801349a:	e7af      	b.n	80133fc <_strtod_l+0x604>
 801349c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801349e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80134a0:	2d00      	cmp	r5, #0
 80134a2:	bfab      	itete	ge
 80134a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80134a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80134a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80134aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80134ac:	bfac      	ite	ge
 80134ae:	18ef      	addge	r7, r5, r3
 80134b0:	1b5e      	sublt	r6, r3, r5
 80134b2:	9b08      	ldr	r3, [sp, #32]
 80134b4:	1aed      	subs	r5, r5, r3
 80134b6:	4415      	add	r5, r2
 80134b8:	4b65      	ldr	r3, [pc, #404]	@ (8013650 <_strtod_l+0x858>)
 80134ba:	3d01      	subs	r5, #1
 80134bc:	429d      	cmp	r5, r3
 80134be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80134c2:	da50      	bge.n	8013566 <_strtod_l+0x76e>
 80134c4:	1b5b      	subs	r3, r3, r5
 80134c6:	2b1f      	cmp	r3, #31
 80134c8:	eba2 0203 	sub.w	r2, r2, r3
 80134cc:	f04f 0101 	mov.w	r1, #1
 80134d0:	dc3d      	bgt.n	801354e <_strtod_l+0x756>
 80134d2:	fa01 f303 	lsl.w	r3, r1, r3
 80134d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80134d8:	2300      	movs	r3, #0
 80134da:	9310      	str	r3, [sp, #64]	@ 0x40
 80134dc:	18bd      	adds	r5, r7, r2
 80134de:	9b08      	ldr	r3, [sp, #32]
 80134e0:	42af      	cmp	r7, r5
 80134e2:	4416      	add	r6, r2
 80134e4:	441e      	add	r6, r3
 80134e6:	463b      	mov	r3, r7
 80134e8:	bfa8      	it	ge
 80134ea:	462b      	movge	r3, r5
 80134ec:	42b3      	cmp	r3, r6
 80134ee:	bfa8      	it	ge
 80134f0:	4633      	movge	r3, r6
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	bfc2      	ittt	gt
 80134f6:	1aed      	subgt	r5, r5, r3
 80134f8:	1af6      	subgt	r6, r6, r3
 80134fa:	1aff      	subgt	r7, r7, r3
 80134fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80134fe:	2b00      	cmp	r3, #0
 8013500:	dd16      	ble.n	8013530 <_strtod_l+0x738>
 8013502:	4641      	mov	r1, r8
 8013504:	9805      	ldr	r0, [sp, #20]
 8013506:	461a      	mov	r2, r3
 8013508:	f001 fb6a 	bl	8014be0 <__pow5mult>
 801350c:	4680      	mov	r8, r0
 801350e:	2800      	cmp	r0, #0
 8013510:	d0ba      	beq.n	8013488 <_strtod_l+0x690>
 8013512:	4601      	mov	r1, r0
 8013514:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013516:	9805      	ldr	r0, [sp, #20]
 8013518:	f001 fac0 	bl	8014a9c <__multiply>
 801351c:	900a      	str	r0, [sp, #40]	@ 0x28
 801351e:	2800      	cmp	r0, #0
 8013520:	f43f ae8d 	beq.w	801323e <_strtod_l+0x446>
 8013524:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013526:	9805      	ldr	r0, [sp, #20]
 8013528:	f001 f9a4 	bl	8014874 <_Bfree>
 801352c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801352e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013530:	2d00      	cmp	r5, #0
 8013532:	dc1d      	bgt.n	8013570 <_strtod_l+0x778>
 8013534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013536:	2b00      	cmp	r3, #0
 8013538:	dd23      	ble.n	8013582 <_strtod_l+0x78a>
 801353a:	4649      	mov	r1, r9
 801353c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801353e:	9805      	ldr	r0, [sp, #20]
 8013540:	f001 fb4e 	bl	8014be0 <__pow5mult>
 8013544:	4681      	mov	r9, r0
 8013546:	b9e0      	cbnz	r0, 8013582 <_strtod_l+0x78a>
 8013548:	f04f 0900 	mov.w	r9, #0
 801354c:	e677      	b.n	801323e <_strtod_l+0x446>
 801354e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013552:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013556:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801355a:	35e2      	adds	r5, #226	@ 0xe2
 801355c:	fa01 f305 	lsl.w	r3, r1, r5
 8013560:	9310      	str	r3, [sp, #64]	@ 0x40
 8013562:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013564:	e7ba      	b.n	80134dc <_strtod_l+0x6e4>
 8013566:	2300      	movs	r3, #0
 8013568:	9310      	str	r3, [sp, #64]	@ 0x40
 801356a:	2301      	movs	r3, #1
 801356c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801356e:	e7b5      	b.n	80134dc <_strtod_l+0x6e4>
 8013570:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013572:	9805      	ldr	r0, [sp, #20]
 8013574:	462a      	mov	r2, r5
 8013576:	f001 fb8d 	bl	8014c94 <__lshift>
 801357a:	901a      	str	r0, [sp, #104]	@ 0x68
 801357c:	2800      	cmp	r0, #0
 801357e:	d1d9      	bne.n	8013534 <_strtod_l+0x73c>
 8013580:	e65d      	b.n	801323e <_strtod_l+0x446>
 8013582:	2e00      	cmp	r6, #0
 8013584:	dd07      	ble.n	8013596 <_strtod_l+0x79e>
 8013586:	4649      	mov	r1, r9
 8013588:	9805      	ldr	r0, [sp, #20]
 801358a:	4632      	mov	r2, r6
 801358c:	f001 fb82 	bl	8014c94 <__lshift>
 8013590:	4681      	mov	r9, r0
 8013592:	2800      	cmp	r0, #0
 8013594:	d0d8      	beq.n	8013548 <_strtod_l+0x750>
 8013596:	2f00      	cmp	r7, #0
 8013598:	dd08      	ble.n	80135ac <_strtod_l+0x7b4>
 801359a:	4641      	mov	r1, r8
 801359c:	9805      	ldr	r0, [sp, #20]
 801359e:	463a      	mov	r2, r7
 80135a0:	f001 fb78 	bl	8014c94 <__lshift>
 80135a4:	4680      	mov	r8, r0
 80135a6:	2800      	cmp	r0, #0
 80135a8:	f43f ae49 	beq.w	801323e <_strtod_l+0x446>
 80135ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80135ae:	9805      	ldr	r0, [sp, #20]
 80135b0:	464a      	mov	r2, r9
 80135b2:	f001 fbf7 	bl	8014da4 <__mdiff>
 80135b6:	4604      	mov	r4, r0
 80135b8:	2800      	cmp	r0, #0
 80135ba:	f43f ae40 	beq.w	801323e <_strtod_l+0x446>
 80135be:	68c3      	ldr	r3, [r0, #12]
 80135c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80135c2:	2300      	movs	r3, #0
 80135c4:	60c3      	str	r3, [r0, #12]
 80135c6:	4641      	mov	r1, r8
 80135c8:	f001 fbd0 	bl	8014d6c <__mcmp>
 80135cc:	2800      	cmp	r0, #0
 80135ce:	da45      	bge.n	801365c <_strtod_l+0x864>
 80135d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135d2:	ea53 030a 	orrs.w	r3, r3, sl
 80135d6:	d16b      	bne.n	80136b0 <_strtod_l+0x8b8>
 80135d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d167      	bne.n	80136b0 <_strtod_l+0x8b8>
 80135e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80135e4:	0d1b      	lsrs	r3, r3, #20
 80135e6:	051b      	lsls	r3, r3, #20
 80135e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80135ec:	d960      	bls.n	80136b0 <_strtod_l+0x8b8>
 80135ee:	6963      	ldr	r3, [r4, #20]
 80135f0:	b913      	cbnz	r3, 80135f8 <_strtod_l+0x800>
 80135f2:	6923      	ldr	r3, [r4, #16]
 80135f4:	2b01      	cmp	r3, #1
 80135f6:	dd5b      	ble.n	80136b0 <_strtod_l+0x8b8>
 80135f8:	4621      	mov	r1, r4
 80135fa:	2201      	movs	r2, #1
 80135fc:	9805      	ldr	r0, [sp, #20]
 80135fe:	f001 fb49 	bl	8014c94 <__lshift>
 8013602:	4641      	mov	r1, r8
 8013604:	4604      	mov	r4, r0
 8013606:	f001 fbb1 	bl	8014d6c <__mcmp>
 801360a:	2800      	cmp	r0, #0
 801360c:	dd50      	ble.n	80136b0 <_strtod_l+0x8b8>
 801360e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013612:	9a08      	ldr	r2, [sp, #32]
 8013614:	0d1b      	lsrs	r3, r3, #20
 8013616:	051b      	lsls	r3, r3, #20
 8013618:	2a00      	cmp	r2, #0
 801361a:	d06a      	beq.n	80136f2 <_strtod_l+0x8fa>
 801361c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013620:	d867      	bhi.n	80136f2 <_strtod_l+0x8fa>
 8013622:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013626:	f67f ae9d 	bls.w	8013364 <_strtod_l+0x56c>
 801362a:	4b0a      	ldr	r3, [pc, #40]	@ (8013654 <_strtod_l+0x85c>)
 801362c:	4650      	mov	r0, sl
 801362e:	4659      	mov	r1, fp
 8013630:	2200      	movs	r2, #0
 8013632:	f7f5 f811 	bl	8008658 <__aeabi_dmul>
 8013636:	4b08      	ldr	r3, [pc, #32]	@ (8013658 <_strtod_l+0x860>)
 8013638:	400b      	ands	r3, r1
 801363a:	4682      	mov	sl, r0
 801363c:	468b      	mov	fp, r1
 801363e:	2b00      	cmp	r3, #0
 8013640:	f47f ae08 	bne.w	8013254 <_strtod_l+0x45c>
 8013644:	9a05      	ldr	r2, [sp, #20]
 8013646:	2322      	movs	r3, #34	@ 0x22
 8013648:	6013      	str	r3, [r2, #0]
 801364a:	e603      	b.n	8013254 <_strtod_l+0x45c>
 801364c:	080172c0 	.word	0x080172c0
 8013650:	fffffc02 	.word	0xfffffc02
 8013654:	39500000 	.word	0x39500000
 8013658:	7ff00000 	.word	0x7ff00000
 801365c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013660:	d165      	bne.n	801372e <_strtod_l+0x936>
 8013662:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013664:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013668:	b35a      	cbz	r2, 80136c2 <_strtod_l+0x8ca>
 801366a:	4a9f      	ldr	r2, [pc, #636]	@ (80138e8 <_strtod_l+0xaf0>)
 801366c:	4293      	cmp	r3, r2
 801366e:	d12b      	bne.n	80136c8 <_strtod_l+0x8d0>
 8013670:	9b08      	ldr	r3, [sp, #32]
 8013672:	4651      	mov	r1, sl
 8013674:	b303      	cbz	r3, 80136b8 <_strtod_l+0x8c0>
 8013676:	4b9d      	ldr	r3, [pc, #628]	@ (80138ec <_strtod_l+0xaf4>)
 8013678:	465a      	mov	r2, fp
 801367a:	4013      	ands	r3, r2
 801367c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013680:	f04f 32ff 	mov.w	r2, #4294967295
 8013684:	d81b      	bhi.n	80136be <_strtod_l+0x8c6>
 8013686:	0d1b      	lsrs	r3, r3, #20
 8013688:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801368c:	fa02 f303 	lsl.w	r3, r2, r3
 8013690:	4299      	cmp	r1, r3
 8013692:	d119      	bne.n	80136c8 <_strtod_l+0x8d0>
 8013694:	4b96      	ldr	r3, [pc, #600]	@ (80138f0 <_strtod_l+0xaf8>)
 8013696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013698:	429a      	cmp	r2, r3
 801369a:	d102      	bne.n	80136a2 <_strtod_l+0x8aa>
 801369c:	3101      	adds	r1, #1
 801369e:	f43f adce 	beq.w	801323e <_strtod_l+0x446>
 80136a2:	4b92      	ldr	r3, [pc, #584]	@ (80138ec <_strtod_l+0xaf4>)
 80136a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80136a6:	401a      	ands	r2, r3
 80136a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80136ac:	f04f 0a00 	mov.w	sl, #0
 80136b0:	9b08      	ldr	r3, [sp, #32]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d1b9      	bne.n	801362a <_strtod_l+0x832>
 80136b6:	e5cd      	b.n	8013254 <_strtod_l+0x45c>
 80136b8:	f04f 33ff 	mov.w	r3, #4294967295
 80136bc:	e7e8      	b.n	8013690 <_strtod_l+0x898>
 80136be:	4613      	mov	r3, r2
 80136c0:	e7e6      	b.n	8013690 <_strtod_l+0x898>
 80136c2:	ea53 030a 	orrs.w	r3, r3, sl
 80136c6:	d0a2      	beq.n	801360e <_strtod_l+0x816>
 80136c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80136ca:	b1db      	cbz	r3, 8013704 <_strtod_l+0x90c>
 80136cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80136ce:	4213      	tst	r3, r2
 80136d0:	d0ee      	beq.n	80136b0 <_strtod_l+0x8b8>
 80136d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136d4:	9a08      	ldr	r2, [sp, #32]
 80136d6:	4650      	mov	r0, sl
 80136d8:	4659      	mov	r1, fp
 80136da:	b1bb      	cbz	r3, 801370c <_strtod_l+0x914>
 80136dc:	f7ff fb6e 	bl	8012dbc <sulp>
 80136e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80136e4:	ec53 2b10 	vmov	r2, r3, d0
 80136e8:	f7f4 fe00 	bl	80082ec <__adddf3>
 80136ec:	4682      	mov	sl, r0
 80136ee:	468b      	mov	fp, r1
 80136f0:	e7de      	b.n	80136b0 <_strtod_l+0x8b8>
 80136f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80136f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80136fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80136fe:	f04f 3aff 	mov.w	sl, #4294967295
 8013702:	e7d5      	b.n	80136b0 <_strtod_l+0x8b8>
 8013704:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013706:	ea13 0f0a 	tst.w	r3, sl
 801370a:	e7e1      	b.n	80136d0 <_strtod_l+0x8d8>
 801370c:	f7ff fb56 	bl	8012dbc <sulp>
 8013710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013714:	ec53 2b10 	vmov	r2, r3, d0
 8013718:	f7f4 fde6 	bl	80082e8 <__aeabi_dsub>
 801371c:	2200      	movs	r2, #0
 801371e:	2300      	movs	r3, #0
 8013720:	4682      	mov	sl, r0
 8013722:	468b      	mov	fp, r1
 8013724:	f7f5 fa00 	bl	8008b28 <__aeabi_dcmpeq>
 8013728:	2800      	cmp	r0, #0
 801372a:	d0c1      	beq.n	80136b0 <_strtod_l+0x8b8>
 801372c:	e61a      	b.n	8013364 <_strtod_l+0x56c>
 801372e:	4641      	mov	r1, r8
 8013730:	4620      	mov	r0, r4
 8013732:	f001 fc93 	bl	801505c <__ratio>
 8013736:	ec57 6b10 	vmov	r6, r7, d0
 801373a:	2200      	movs	r2, #0
 801373c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013740:	4630      	mov	r0, r6
 8013742:	4639      	mov	r1, r7
 8013744:	f7f5 fa04 	bl	8008b50 <__aeabi_dcmple>
 8013748:	2800      	cmp	r0, #0
 801374a:	d06f      	beq.n	801382c <_strtod_l+0xa34>
 801374c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801374e:	2b00      	cmp	r3, #0
 8013750:	d17a      	bne.n	8013848 <_strtod_l+0xa50>
 8013752:	f1ba 0f00 	cmp.w	sl, #0
 8013756:	d158      	bne.n	801380a <_strtod_l+0xa12>
 8013758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801375a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801375e:	2b00      	cmp	r3, #0
 8013760:	d15a      	bne.n	8013818 <_strtod_l+0xa20>
 8013762:	4b64      	ldr	r3, [pc, #400]	@ (80138f4 <_strtod_l+0xafc>)
 8013764:	2200      	movs	r2, #0
 8013766:	4630      	mov	r0, r6
 8013768:	4639      	mov	r1, r7
 801376a:	f7f5 f9e7 	bl	8008b3c <__aeabi_dcmplt>
 801376e:	2800      	cmp	r0, #0
 8013770:	d159      	bne.n	8013826 <_strtod_l+0xa2e>
 8013772:	4630      	mov	r0, r6
 8013774:	4639      	mov	r1, r7
 8013776:	4b60      	ldr	r3, [pc, #384]	@ (80138f8 <_strtod_l+0xb00>)
 8013778:	2200      	movs	r2, #0
 801377a:	f7f4 ff6d 	bl	8008658 <__aeabi_dmul>
 801377e:	4606      	mov	r6, r0
 8013780:	460f      	mov	r7, r1
 8013782:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013786:	9606      	str	r6, [sp, #24]
 8013788:	9307      	str	r3, [sp, #28]
 801378a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801378e:	4d57      	ldr	r5, [pc, #348]	@ (80138ec <_strtod_l+0xaf4>)
 8013790:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013796:	401d      	ands	r5, r3
 8013798:	4b58      	ldr	r3, [pc, #352]	@ (80138fc <_strtod_l+0xb04>)
 801379a:	429d      	cmp	r5, r3
 801379c:	f040 80b2 	bne.w	8013904 <_strtod_l+0xb0c>
 80137a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80137a6:	ec4b ab10 	vmov	d0, sl, fp
 80137aa:	f001 fb8f 	bl	8014ecc <__ulp>
 80137ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80137b2:	ec51 0b10 	vmov	r0, r1, d0
 80137b6:	f7f4 ff4f 	bl	8008658 <__aeabi_dmul>
 80137ba:	4652      	mov	r2, sl
 80137bc:	465b      	mov	r3, fp
 80137be:	f7f4 fd95 	bl	80082ec <__adddf3>
 80137c2:	460b      	mov	r3, r1
 80137c4:	4949      	ldr	r1, [pc, #292]	@ (80138ec <_strtod_l+0xaf4>)
 80137c6:	4a4e      	ldr	r2, [pc, #312]	@ (8013900 <_strtod_l+0xb08>)
 80137c8:	4019      	ands	r1, r3
 80137ca:	4291      	cmp	r1, r2
 80137cc:	4682      	mov	sl, r0
 80137ce:	d942      	bls.n	8013856 <_strtod_l+0xa5e>
 80137d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80137d2:	4b47      	ldr	r3, [pc, #284]	@ (80138f0 <_strtod_l+0xaf8>)
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d103      	bne.n	80137e0 <_strtod_l+0x9e8>
 80137d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137da:	3301      	adds	r3, #1
 80137dc:	f43f ad2f 	beq.w	801323e <_strtod_l+0x446>
 80137e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80138f0 <_strtod_l+0xaf8>
 80137e4:	f04f 3aff 	mov.w	sl, #4294967295
 80137e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80137ea:	9805      	ldr	r0, [sp, #20]
 80137ec:	f001 f842 	bl	8014874 <_Bfree>
 80137f0:	9805      	ldr	r0, [sp, #20]
 80137f2:	4649      	mov	r1, r9
 80137f4:	f001 f83e 	bl	8014874 <_Bfree>
 80137f8:	9805      	ldr	r0, [sp, #20]
 80137fa:	4641      	mov	r1, r8
 80137fc:	f001 f83a 	bl	8014874 <_Bfree>
 8013800:	9805      	ldr	r0, [sp, #20]
 8013802:	4621      	mov	r1, r4
 8013804:	f001 f836 	bl	8014874 <_Bfree>
 8013808:	e619      	b.n	801343e <_strtod_l+0x646>
 801380a:	f1ba 0f01 	cmp.w	sl, #1
 801380e:	d103      	bne.n	8013818 <_strtod_l+0xa20>
 8013810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013812:	2b00      	cmp	r3, #0
 8013814:	f43f ada6 	beq.w	8013364 <_strtod_l+0x56c>
 8013818:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80138c8 <_strtod_l+0xad0>
 801381c:	4f35      	ldr	r7, [pc, #212]	@ (80138f4 <_strtod_l+0xafc>)
 801381e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013822:	2600      	movs	r6, #0
 8013824:	e7b1      	b.n	801378a <_strtod_l+0x992>
 8013826:	4f34      	ldr	r7, [pc, #208]	@ (80138f8 <_strtod_l+0xb00>)
 8013828:	2600      	movs	r6, #0
 801382a:	e7aa      	b.n	8013782 <_strtod_l+0x98a>
 801382c:	4b32      	ldr	r3, [pc, #200]	@ (80138f8 <_strtod_l+0xb00>)
 801382e:	4630      	mov	r0, r6
 8013830:	4639      	mov	r1, r7
 8013832:	2200      	movs	r2, #0
 8013834:	f7f4 ff10 	bl	8008658 <__aeabi_dmul>
 8013838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801383a:	4606      	mov	r6, r0
 801383c:	460f      	mov	r7, r1
 801383e:	2b00      	cmp	r3, #0
 8013840:	d09f      	beq.n	8013782 <_strtod_l+0x98a>
 8013842:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013846:	e7a0      	b.n	801378a <_strtod_l+0x992>
 8013848:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80138d0 <_strtod_l+0xad8>
 801384c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013850:	ec57 6b17 	vmov	r6, r7, d7
 8013854:	e799      	b.n	801378a <_strtod_l+0x992>
 8013856:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801385a:	9b08      	ldr	r3, [sp, #32]
 801385c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013860:	2b00      	cmp	r3, #0
 8013862:	d1c1      	bne.n	80137e8 <_strtod_l+0x9f0>
 8013864:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013868:	0d1b      	lsrs	r3, r3, #20
 801386a:	051b      	lsls	r3, r3, #20
 801386c:	429d      	cmp	r5, r3
 801386e:	d1bb      	bne.n	80137e8 <_strtod_l+0x9f0>
 8013870:	4630      	mov	r0, r6
 8013872:	4639      	mov	r1, r7
 8013874:	f7f5 fa00 	bl	8008c78 <__aeabi_d2lz>
 8013878:	f7f4 fec0 	bl	80085fc <__aeabi_l2d>
 801387c:	4602      	mov	r2, r0
 801387e:	460b      	mov	r3, r1
 8013880:	4630      	mov	r0, r6
 8013882:	4639      	mov	r1, r7
 8013884:	f7f4 fd30 	bl	80082e8 <__aeabi_dsub>
 8013888:	460b      	mov	r3, r1
 801388a:	4602      	mov	r2, r0
 801388c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013890:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013896:	ea46 060a 	orr.w	r6, r6, sl
 801389a:	431e      	orrs	r6, r3
 801389c:	d06f      	beq.n	801397e <_strtod_l+0xb86>
 801389e:	a30e      	add	r3, pc, #56	@ (adr r3, 80138d8 <_strtod_l+0xae0>)
 80138a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a4:	f7f5 f94a 	bl	8008b3c <__aeabi_dcmplt>
 80138a8:	2800      	cmp	r0, #0
 80138aa:	f47f acd3 	bne.w	8013254 <_strtod_l+0x45c>
 80138ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80138e0 <_strtod_l+0xae8>)
 80138b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80138b8:	f7f5 f95e 	bl	8008b78 <__aeabi_dcmpgt>
 80138bc:	2800      	cmp	r0, #0
 80138be:	d093      	beq.n	80137e8 <_strtod_l+0x9f0>
 80138c0:	e4c8      	b.n	8013254 <_strtod_l+0x45c>
 80138c2:	bf00      	nop
 80138c4:	f3af 8000 	nop.w
 80138c8:	00000000 	.word	0x00000000
 80138cc:	bff00000 	.word	0xbff00000
 80138d0:	00000000 	.word	0x00000000
 80138d4:	3ff00000 	.word	0x3ff00000
 80138d8:	94a03595 	.word	0x94a03595
 80138dc:	3fdfffff 	.word	0x3fdfffff
 80138e0:	35afe535 	.word	0x35afe535
 80138e4:	3fe00000 	.word	0x3fe00000
 80138e8:	000fffff 	.word	0x000fffff
 80138ec:	7ff00000 	.word	0x7ff00000
 80138f0:	7fefffff 	.word	0x7fefffff
 80138f4:	3ff00000 	.word	0x3ff00000
 80138f8:	3fe00000 	.word	0x3fe00000
 80138fc:	7fe00000 	.word	0x7fe00000
 8013900:	7c9fffff 	.word	0x7c9fffff
 8013904:	9b08      	ldr	r3, [sp, #32]
 8013906:	b323      	cbz	r3, 8013952 <_strtod_l+0xb5a>
 8013908:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801390c:	d821      	bhi.n	8013952 <_strtod_l+0xb5a>
 801390e:	a328      	add	r3, pc, #160	@ (adr r3, 80139b0 <_strtod_l+0xbb8>)
 8013910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013914:	4630      	mov	r0, r6
 8013916:	4639      	mov	r1, r7
 8013918:	f7f5 f91a 	bl	8008b50 <__aeabi_dcmple>
 801391c:	b1a0      	cbz	r0, 8013948 <_strtod_l+0xb50>
 801391e:	4639      	mov	r1, r7
 8013920:	4630      	mov	r0, r6
 8013922:	f7f5 f971 	bl	8008c08 <__aeabi_d2uiz>
 8013926:	2801      	cmp	r0, #1
 8013928:	bf38      	it	cc
 801392a:	2001      	movcc	r0, #1
 801392c:	f7f4 fe1a 	bl	8008564 <__aeabi_ui2d>
 8013930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013932:	4606      	mov	r6, r0
 8013934:	460f      	mov	r7, r1
 8013936:	b9fb      	cbnz	r3, 8013978 <_strtod_l+0xb80>
 8013938:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801393c:	9014      	str	r0, [sp, #80]	@ 0x50
 801393e:	9315      	str	r3, [sp, #84]	@ 0x54
 8013940:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013944:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013948:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801394a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801394e:	1b5b      	subs	r3, r3, r5
 8013950:	9311      	str	r3, [sp, #68]	@ 0x44
 8013952:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013956:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801395a:	f001 fab7 	bl	8014ecc <__ulp>
 801395e:	4650      	mov	r0, sl
 8013960:	ec53 2b10 	vmov	r2, r3, d0
 8013964:	4659      	mov	r1, fp
 8013966:	f7f4 fe77 	bl	8008658 <__aeabi_dmul>
 801396a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801396e:	f7f4 fcbd 	bl	80082ec <__adddf3>
 8013972:	4682      	mov	sl, r0
 8013974:	468b      	mov	fp, r1
 8013976:	e770      	b.n	801385a <_strtod_l+0xa62>
 8013978:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801397c:	e7e0      	b.n	8013940 <_strtod_l+0xb48>
 801397e:	a30e      	add	r3, pc, #56	@ (adr r3, 80139b8 <_strtod_l+0xbc0>)
 8013980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013984:	f7f5 f8da 	bl	8008b3c <__aeabi_dcmplt>
 8013988:	e798      	b.n	80138bc <_strtod_l+0xac4>
 801398a:	2300      	movs	r3, #0
 801398c:	930e      	str	r3, [sp, #56]	@ 0x38
 801398e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013992:	6013      	str	r3, [r2, #0]
 8013994:	f7ff ba6d 	b.w	8012e72 <_strtod_l+0x7a>
 8013998:	2a65      	cmp	r2, #101	@ 0x65
 801399a:	f43f ab68 	beq.w	801306e <_strtod_l+0x276>
 801399e:	2a45      	cmp	r2, #69	@ 0x45
 80139a0:	f43f ab65 	beq.w	801306e <_strtod_l+0x276>
 80139a4:	2301      	movs	r3, #1
 80139a6:	f7ff bba0 	b.w	80130ea <_strtod_l+0x2f2>
 80139aa:	bf00      	nop
 80139ac:	f3af 8000 	nop.w
 80139b0:	ffc00000 	.word	0xffc00000
 80139b4:	41dfffff 	.word	0x41dfffff
 80139b8:	94a03595 	.word	0x94a03595
 80139bc:	3fcfffff 	.word	0x3fcfffff

080139c0 <strtod>:
 80139c0:	460a      	mov	r2, r1
 80139c2:	4601      	mov	r1, r0
 80139c4:	4802      	ldr	r0, [pc, #8]	@ (80139d0 <strtod+0x10>)
 80139c6:	4b03      	ldr	r3, [pc, #12]	@ (80139d4 <strtod+0x14>)
 80139c8:	6800      	ldr	r0, [r0, #0]
 80139ca:	f7ff ba15 	b.w	8012df8 <_strtod_l>
 80139ce:	bf00      	nop
 80139d0:	2000019c 	.word	0x2000019c
 80139d4:	20000030 	.word	0x20000030

080139d8 <std>:
 80139d8:	2300      	movs	r3, #0
 80139da:	b510      	push	{r4, lr}
 80139dc:	4604      	mov	r4, r0
 80139de:	e9c0 3300 	strd	r3, r3, [r0]
 80139e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80139e6:	6083      	str	r3, [r0, #8]
 80139e8:	8181      	strh	r1, [r0, #12]
 80139ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80139ec:	81c2      	strh	r2, [r0, #14]
 80139ee:	6183      	str	r3, [r0, #24]
 80139f0:	4619      	mov	r1, r3
 80139f2:	2208      	movs	r2, #8
 80139f4:	305c      	adds	r0, #92	@ 0x5c
 80139f6:	f000 fa9f 	bl	8013f38 <memset>
 80139fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013a30 <std+0x58>)
 80139fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80139fe:	4b0d      	ldr	r3, [pc, #52]	@ (8013a34 <std+0x5c>)
 8013a00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013a02:	4b0d      	ldr	r3, [pc, #52]	@ (8013a38 <std+0x60>)
 8013a04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013a06:	4b0d      	ldr	r3, [pc, #52]	@ (8013a3c <std+0x64>)
 8013a08:	6323      	str	r3, [r4, #48]	@ 0x30
 8013a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8013a40 <std+0x68>)
 8013a0c:	6224      	str	r4, [r4, #32]
 8013a0e:	429c      	cmp	r4, r3
 8013a10:	d006      	beq.n	8013a20 <std+0x48>
 8013a12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013a16:	4294      	cmp	r4, r2
 8013a18:	d002      	beq.n	8013a20 <std+0x48>
 8013a1a:	33d0      	adds	r3, #208	@ 0xd0
 8013a1c:	429c      	cmp	r4, r3
 8013a1e:	d105      	bne.n	8013a2c <std+0x54>
 8013a20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a28:	f000 bb34 	b.w	8014094 <__retarget_lock_init_recursive>
 8013a2c:	bd10      	pop	{r4, pc}
 8013a2e:	bf00      	nop
 8013a30:	08013d45 	.word	0x08013d45
 8013a34:	08013d6b 	.word	0x08013d6b
 8013a38:	08013da3 	.word	0x08013da3
 8013a3c:	08013dc7 	.word	0x08013dc7
 8013a40:	20013328 	.word	0x20013328

08013a44 <stdio_exit_handler>:
 8013a44:	4a02      	ldr	r2, [pc, #8]	@ (8013a50 <stdio_exit_handler+0xc>)
 8013a46:	4903      	ldr	r1, [pc, #12]	@ (8013a54 <stdio_exit_handler+0x10>)
 8013a48:	4803      	ldr	r0, [pc, #12]	@ (8013a58 <stdio_exit_handler+0x14>)
 8013a4a:	f000 b869 	b.w	8013b20 <_fwalk_sglue>
 8013a4e:	bf00      	nop
 8013a50:	20000024 	.word	0x20000024
 8013a54:	08016101 	.word	0x08016101
 8013a58:	200001a0 	.word	0x200001a0

08013a5c <cleanup_stdio>:
 8013a5c:	6841      	ldr	r1, [r0, #4]
 8013a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8013a90 <cleanup_stdio+0x34>)
 8013a60:	4299      	cmp	r1, r3
 8013a62:	b510      	push	{r4, lr}
 8013a64:	4604      	mov	r4, r0
 8013a66:	d001      	beq.n	8013a6c <cleanup_stdio+0x10>
 8013a68:	f002 fb4a 	bl	8016100 <_fflush_r>
 8013a6c:	68a1      	ldr	r1, [r4, #8]
 8013a6e:	4b09      	ldr	r3, [pc, #36]	@ (8013a94 <cleanup_stdio+0x38>)
 8013a70:	4299      	cmp	r1, r3
 8013a72:	d002      	beq.n	8013a7a <cleanup_stdio+0x1e>
 8013a74:	4620      	mov	r0, r4
 8013a76:	f002 fb43 	bl	8016100 <_fflush_r>
 8013a7a:	68e1      	ldr	r1, [r4, #12]
 8013a7c:	4b06      	ldr	r3, [pc, #24]	@ (8013a98 <cleanup_stdio+0x3c>)
 8013a7e:	4299      	cmp	r1, r3
 8013a80:	d004      	beq.n	8013a8c <cleanup_stdio+0x30>
 8013a82:	4620      	mov	r0, r4
 8013a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a88:	f002 bb3a 	b.w	8016100 <_fflush_r>
 8013a8c:	bd10      	pop	{r4, pc}
 8013a8e:	bf00      	nop
 8013a90:	20013328 	.word	0x20013328
 8013a94:	20013390 	.word	0x20013390
 8013a98:	200133f8 	.word	0x200133f8

08013a9c <global_stdio_init.part.0>:
 8013a9c:	b510      	push	{r4, lr}
 8013a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8013acc <global_stdio_init.part.0+0x30>)
 8013aa0:	4c0b      	ldr	r4, [pc, #44]	@ (8013ad0 <global_stdio_init.part.0+0x34>)
 8013aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8013ad4 <global_stdio_init.part.0+0x38>)
 8013aa4:	601a      	str	r2, [r3, #0]
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	2104      	movs	r1, #4
 8013aac:	f7ff ff94 	bl	80139d8 <std>
 8013ab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	2109      	movs	r1, #9
 8013ab8:	f7ff ff8e 	bl	80139d8 <std>
 8013abc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013ac0:	2202      	movs	r2, #2
 8013ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ac6:	2112      	movs	r1, #18
 8013ac8:	f7ff bf86 	b.w	80139d8 <std>
 8013acc:	20013460 	.word	0x20013460
 8013ad0:	20013328 	.word	0x20013328
 8013ad4:	08013a45 	.word	0x08013a45

08013ad8 <__sfp_lock_acquire>:
 8013ad8:	4801      	ldr	r0, [pc, #4]	@ (8013ae0 <__sfp_lock_acquire+0x8>)
 8013ada:	f000 badc 	b.w	8014096 <__retarget_lock_acquire_recursive>
 8013ade:	bf00      	nop
 8013ae0:	20013469 	.word	0x20013469

08013ae4 <__sfp_lock_release>:
 8013ae4:	4801      	ldr	r0, [pc, #4]	@ (8013aec <__sfp_lock_release+0x8>)
 8013ae6:	f000 bad7 	b.w	8014098 <__retarget_lock_release_recursive>
 8013aea:	bf00      	nop
 8013aec:	20013469 	.word	0x20013469

08013af0 <__sinit>:
 8013af0:	b510      	push	{r4, lr}
 8013af2:	4604      	mov	r4, r0
 8013af4:	f7ff fff0 	bl	8013ad8 <__sfp_lock_acquire>
 8013af8:	6a23      	ldr	r3, [r4, #32]
 8013afa:	b11b      	cbz	r3, 8013b04 <__sinit+0x14>
 8013afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b00:	f7ff bff0 	b.w	8013ae4 <__sfp_lock_release>
 8013b04:	4b04      	ldr	r3, [pc, #16]	@ (8013b18 <__sinit+0x28>)
 8013b06:	6223      	str	r3, [r4, #32]
 8013b08:	4b04      	ldr	r3, [pc, #16]	@ (8013b1c <__sinit+0x2c>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d1f5      	bne.n	8013afc <__sinit+0xc>
 8013b10:	f7ff ffc4 	bl	8013a9c <global_stdio_init.part.0>
 8013b14:	e7f2      	b.n	8013afc <__sinit+0xc>
 8013b16:	bf00      	nop
 8013b18:	08013a5d 	.word	0x08013a5d
 8013b1c:	20013460 	.word	0x20013460

08013b20 <_fwalk_sglue>:
 8013b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b24:	4607      	mov	r7, r0
 8013b26:	4688      	mov	r8, r1
 8013b28:	4614      	mov	r4, r2
 8013b2a:	2600      	movs	r6, #0
 8013b2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b30:	f1b9 0901 	subs.w	r9, r9, #1
 8013b34:	d505      	bpl.n	8013b42 <_fwalk_sglue+0x22>
 8013b36:	6824      	ldr	r4, [r4, #0]
 8013b38:	2c00      	cmp	r4, #0
 8013b3a:	d1f7      	bne.n	8013b2c <_fwalk_sglue+0xc>
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b42:	89ab      	ldrh	r3, [r5, #12]
 8013b44:	2b01      	cmp	r3, #1
 8013b46:	d907      	bls.n	8013b58 <_fwalk_sglue+0x38>
 8013b48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	d003      	beq.n	8013b58 <_fwalk_sglue+0x38>
 8013b50:	4629      	mov	r1, r5
 8013b52:	4638      	mov	r0, r7
 8013b54:	47c0      	blx	r8
 8013b56:	4306      	orrs	r6, r0
 8013b58:	3568      	adds	r5, #104	@ 0x68
 8013b5a:	e7e9      	b.n	8013b30 <_fwalk_sglue+0x10>

08013b5c <iprintf>:
 8013b5c:	b40f      	push	{r0, r1, r2, r3}
 8013b5e:	b507      	push	{r0, r1, r2, lr}
 8013b60:	4906      	ldr	r1, [pc, #24]	@ (8013b7c <iprintf+0x20>)
 8013b62:	ab04      	add	r3, sp, #16
 8013b64:	6808      	ldr	r0, [r1, #0]
 8013b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b6a:	6881      	ldr	r1, [r0, #8]
 8013b6c:	9301      	str	r3, [sp, #4]
 8013b6e:	f001 fe51 	bl	8015814 <_vfiprintf_r>
 8013b72:	b003      	add	sp, #12
 8013b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b78:	b004      	add	sp, #16
 8013b7a:	4770      	bx	lr
 8013b7c:	2000019c 	.word	0x2000019c

08013b80 <_puts_r>:
 8013b80:	6a03      	ldr	r3, [r0, #32]
 8013b82:	b570      	push	{r4, r5, r6, lr}
 8013b84:	6884      	ldr	r4, [r0, #8]
 8013b86:	4605      	mov	r5, r0
 8013b88:	460e      	mov	r6, r1
 8013b8a:	b90b      	cbnz	r3, 8013b90 <_puts_r+0x10>
 8013b8c:	f7ff ffb0 	bl	8013af0 <__sinit>
 8013b90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013b92:	07db      	lsls	r3, r3, #31
 8013b94:	d405      	bmi.n	8013ba2 <_puts_r+0x22>
 8013b96:	89a3      	ldrh	r3, [r4, #12]
 8013b98:	0598      	lsls	r0, r3, #22
 8013b9a:	d402      	bmi.n	8013ba2 <_puts_r+0x22>
 8013b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013b9e:	f000 fa7a 	bl	8014096 <__retarget_lock_acquire_recursive>
 8013ba2:	89a3      	ldrh	r3, [r4, #12]
 8013ba4:	0719      	lsls	r1, r3, #28
 8013ba6:	d502      	bpl.n	8013bae <_puts_r+0x2e>
 8013ba8:	6923      	ldr	r3, [r4, #16]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d135      	bne.n	8013c1a <_puts_r+0x9a>
 8013bae:	4621      	mov	r1, r4
 8013bb0:	4628      	mov	r0, r5
 8013bb2:	f000 f96b 	bl	8013e8c <__swsetup_r>
 8013bb6:	b380      	cbz	r0, 8013c1a <_puts_r+0x9a>
 8013bb8:	f04f 35ff 	mov.w	r5, #4294967295
 8013bbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013bbe:	07da      	lsls	r2, r3, #31
 8013bc0:	d405      	bmi.n	8013bce <_puts_r+0x4e>
 8013bc2:	89a3      	ldrh	r3, [r4, #12]
 8013bc4:	059b      	lsls	r3, r3, #22
 8013bc6:	d402      	bmi.n	8013bce <_puts_r+0x4e>
 8013bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bca:	f000 fa65 	bl	8014098 <__retarget_lock_release_recursive>
 8013bce:	4628      	mov	r0, r5
 8013bd0:	bd70      	pop	{r4, r5, r6, pc}
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	da04      	bge.n	8013be0 <_puts_r+0x60>
 8013bd6:	69a2      	ldr	r2, [r4, #24]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	dc17      	bgt.n	8013c0c <_puts_r+0x8c>
 8013bdc:	290a      	cmp	r1, #10
 8013bde:	d015      	beq.n	8013c0c <_puts_r+0x8c>
 8013be0:	6823      	ldr	r3, [r4, #0]
 8013be2:	1c5a      	adds	r2, r3, #1
 8013be4:	6022      	str	r2, [r4, #0]
 8013be6:	7019      	strb	r1, [r3, #0]
 8013be8:	68a3      	ldr	r3, [r4, #8]
 8013bea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013bee:	3b01      	subs	r3, #1
 8013bf0:	60a3      	str	r3, [r4, #8]
 8013bf2:	2900      	cmp	r1, #0
 8013bf4:	d1ed      	bne.n	8013bd2 <_puts_r+0x52>
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	da11      	bge.n	8013c1e <_puts_r+0x9e>
 8013bfa:	4622      	mov	r2, r4
 8013bfc:	210a      	movs	r1, #10
 8013bfe:	4628      	mov	r0, r5
 8013c00:	f000 f906 	bl	8013e10 <__swbuf_r>
 8013c04:	3001      	adds	r0, #1
 8013c06:	d0d7      	beq.n	8013bb8 <_puts_r+0x38>
 8013c08:	250a      	movs	r5, #10
 8013c0a:	e7d7      	b.n	8013bbc <_puts_r+0x3c>
 8013c0c:	4622      	mov	r2, r4
 8013c0e:	4628      	mov	r0, r5
 8013c10:	f000 f8fe 	bl	8013e10 <__swbuf_r>
 8013c14:	3001      	adds	r0, #1
 8013c16:	d1e7      	bne.n	8013be8 <_puts_r+0x68>
 8013c18:	e7ce      	b.n	8013bb8 <_puts_r+0x38>
 8013c1a:	3e01      	subs	r6, #1
 8013c1c:	e7e4      	b.n	8013be8 <_puts_r+0x68>
 8013c1e:	6823      	ldr	r3, [r4, #0]
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	6022      	str	r2, [r4, #0]
 8013c24:	220a      	movs	r2, #10
 8013c26:	701a      	strb	r2, [r3, #0]
 8013c28:	e7ee      	b.n	8013c08 <_puts_r+0x88>
	...

08013c2c <puts>:
 8013c2c:	4b02      	ldr	r3, [pc, #8]	@ (8013c38 <puts+0xc>)
 8013c2e:	4601      	mov	r1, r0
 8013c30:	6818      	ldr	r0, [r3, #0]
 8013c32:	f7ff bfa5 	b.w	8013b80 <_puts_r>
 8013c36:	bf00      	nop
 8013c38:	2000019c 	.word	0x2000019c

08013c3c <sniprintf>:
 8013c3c:	b40c      	push	{r2, r3}
 8013c3e:	b530      	push	{r4, r5, lr}
 8013c40:	4b18      	ldr	r3, [pc, #96]	@ (8013ca4 <sniprintf+0x68>)
 8013c42:	1e0c      	subs	r4, r1, #0
 8013c44:	681d      	ldr	r5, [r3, #0]
 8013c46:	b09d      	sub	sp, #116	@ 0x74
 8013c48:	da08      	bge.n	8013c5c <sniprintf+0x20>
 8013c4a:	238b      	movs	r3, #139	@ 0x8b
 8013c4c:	602b      	str	r3, [r5, #0]
 8013c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c52:	b01d      	add	sp, #116	@ 0x74
 8013c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c58:	b002      	add	sp, #8
 8013c5a:	4770      	bx	lr
 8013c5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013c60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013c64:	f04f 0300 	mov.w	r3, #0
 8013c68:	931b      	str	r3, [sp, #108]	@ 0x6c
 8013c6a:	bf14      	ite	ne
 8013c6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013c70:	4623      	moveq	r3, r4
 8013c72:	9304      	str	r3, [sp, #16]
 8013c74:	9307      	str	r3, [sp, #28]
 8013c76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013c7a:	9002      	str	r0, [sp, #8]
 8013c7c:	9006      	str	r0, [sp, #24]
 8013c7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013c82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013c84:	ab21      	add	r3, sp, #132	@ 0x84
 8013c86:	a902      	add	r1, sp, #8
 8013c88:	4628      	mov	r0, r5
 8013c8a:	9301      	str	r3, [sp, #4]
 8013c8c:	f001 facc 	bl	8015228 <_svfiprintf_r>
 8013c90:	1c43      	adds	r3, r0, #1
 8013c92:	bfbc      	itt	lt
 8013c94:	238b      	movlt	r3, #139	@ 0x8b
 8013c96:	602b      	strlt	r3, [r5, #0]
 8013c98:	2c00      	cmp	r4, #0
 8013c9a:	d0da      	beq.n	8013c52 <sniprintf+0x16>
 8013c9c:	9b02      	ldr	r3, [sp, #8]
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	701a      	strb	r2, [r3, #0]
 8013ca2:	e7d6      	b.n	8013c52 <sniprintf+0x16>
 8013ca4:	2000019c 	.word	0x2000019c

08013ca8 <siprintf>:
 8013ca8:	b40e      	push	{r1, r2, r3}
 8013caa:	b510      	push	{r4, lr}
 8013cac:	b09d      	sub	sp, #116	@ 0x74
 8013cae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013cb0:	9002      	str	r0, [sp, #8]
 8013cb2:	9006      	str	r0, [sp, #24]
 8013cb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013cb8:	480a      	ldr	r0, [pc, #40]	@ (8013ce4 <siprintf+0x3c>)
 8013cba:	9107      	str	r1, [sp, #28]
 8013cbc:	9104      	str	r1, [sp, #16]
 8013cbe:	490a      	ldr	r1, [pc, #40]	@ (8013ce8 <siprintf+0x40>)
 8013cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cc4:	9105      	str	r1, [sp, #20]
 8013cc6:	2400      	movs	r4, #0
 8013cc8:	a902      	add	r1, sp, #8
 8013cca:	6800      	ldr	r0, [r0, #0]
 8013ccc:	9301      	str	r3, [sp, #4]
 8013cce:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013cd0:	f001 faaa 	bl	8015228 <_svfiprintf_r>
 8013cd4:	9b02      	ldr	r3, [sp, #8]
 8013cd6:	701c      	strb	r4, [r3, #0]
 8013cd8:	b01d      	add	sp, #116	@ 0x74
 8013cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cde:	b003      	add	sp, #12
 8013ce0:	4770      	bx	lr
 8013ce2:	bf00      	nop
 8013ce4:	2000019c 	.word	0x2000019c
 8013ce8:	ffff0208 	.word	0xffff0208

08013cec <siscanf>:
 8013cec:	b40e      	push	{r1, r2, r3}
 8013cee:	b570      	push	{r4, r5, r6, lr}
 8013cf0:	b09d      	sub	sp, #116	@ 0x74
 8013cf2:	ac21      	add	r4, sp, #132	@ 0x84
 8013cf4:	2500      	movs	r5, #0
 8013cf6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8013cfa:	f854 6b04 	ldr.w	r6, [r4], #4
 8013cfe:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013d02:	951b      	str	r5, [sp, #108]	@ 0x6c
 8013d04:	9002      	str	r0, [sp, #8]
 8013d06:	9006      	str	r0, [sp, #24]
 8013d08:	f7f4 fa8c 	bl	8008224 <strlen>
 8013d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8013d3c <siscanf+0x50>)
 8013d0e:	9003      	str	r0, [sp, #12]
 8013d10:	9007      	str	r0, [sp, #28]
 8013d12:	480b      	ldr	r0, [pc, #44]	@ (8013d40 <siscanf+0x54>)
 8013d14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013d16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013d1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013d1e:	4632      	mov	r2, r6
 8013d20:	4623      	mov	r3, r4
 8013d22:	a902      	add	r1, sp, #8
 8013d24:	6800      	ldr	r0, [r0, #0]
 8013d26:	950f      	str	r5, [sp, #60]	@ 0x3c
 8013d28:	9514      	str	r5, [sp, #80]	@ 0x50
 8013d2a:	9401      	str	r4, [sp, #4]
 8013d2c:	f001 fbd2 	bl	80154d4 <__ssvfiscanf_r>
 8013d30:	b01d      	add	sp, #116	@ 0x74
 8013d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d36:	b003      	add	sp, #12
 8013d38:	4770      	bx	lr
 8013d3a:	bf00      	nop
 8013d3c:	08013d67 	.word	0x08013d67
 8013d40:	2000019c 	.word	0x2000019c

08013d44 <__sread>:
 8013d44:	b510      	push	{r4, lr}
 8013d46:	460c      	mov	r4, r1
 8013d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d4c:	f000 f944 	bl	8013fd8 <_read_r>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	bfab      	itete	ge
 8013d54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013d56:	89a3      	ldrhlt	r3, [r4, #12]
 8013d58:	181b      	addge	r3, r3, r0
 8013d5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013d5e:	bfac      	ite	ge
 8013d60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013d62:	81a3      	strhlt	r3, [r4, #12]
 8013d64:	bd10      	pop	{r4, pc}

08013d66 <__seofread>:
 8013d66:	2000      	movs	r0, #0
 8013d68:	4770      	bx	lr

08013d6a <__swrite>:
 8013d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d6e:	461f      	mov	r7, r3
 8013d70:	898b      	ldrh	r3, [r1, #12]
 8013d72:	05db      	lsls	r3, r3, #23
 8013d74:	4605      	mov	r5, r0
 8013d76:	460c      	mov	r4, r1
 8013d78:	4616      	mov	r6, r2
 8013d7a:	d505      	bpl.n	8013d88 <__swrite+0x1e>
 8013d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d80:	2302      	movs	r3, #2
 8013d82:	2200      	movs	r2, #0
 8013d84:	f000 f916 	bl	8013fb4 <_lseek_r>
 8013d88:	89a3      	ldrh	r3, [r4, #12]
 8013d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013d92:	81a3      	strh	r3, [r4, #12]
 8013d94:	4632      	mov	r2, r6
 8013d96:	463b      	mov	r3, r7
 8013d98:	4628      	mov	r0, r5
 8013d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d9e:	f000 b93d 	b.w	801401c <_write_r>

08013da2 <__sseek>:
 8013da2:	b510      	push	{r4, lr}
 8013da4:	460c      	mov	r4, r1
 8013da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013daa:	f000 f903 	bl	8013fb4 <_lseek_r>
 8013dae:	1c43      	adds	r3, r0, #1
 8013db0:	89a3      	ldrh	r3, [r4, #12]
 8013db2:	bf15      	itete	ne
 8013db4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013db6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013dba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013dbe:	81a3      	strheq	r3, [r4, #12]
 8013dc0:	bf18      	it	ne
 8013dc2:	81a3      	strhne	r3, [r4, #12]
 8013dc4:	bd10      	pop	{r4, pc}

08013dc6 <__sclose>:
 8013dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dca:	f000 b8e3 	b.w	8013f94 <_close_r>
	...

08013dd0 <_vsiprintf_r>:
 8013dd0:	b510      	push	{r4, lr}
 8013dd2:	b09a      	sub	sp, #104	@ 0x68
 8013dd4:	2400      	movs	r4, #0
 8013dd6:	9100      	str	r1, [sp, #0]
 8013dd8:	9104      	str	r1, [sp, #16]
 8013dda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013dde:	9105      	str	r1, [sp, #20]
 8013de0:	9102      	str	r1, [sp, #8]
 8013de2:	4905      	ldr	r1, [pc, #20]	@ (8013df8 <_vsiprintf_r+0x28>)
 8013de4:	9103      	str	r1, [sp, #12]
 8013de6:	4669      	mov	r1, sp
 8013de8:	9419      	str	r4, [sp, #100]	@ 0x64
 8013dea:	f001 fa1d 	bl	8015228 <_svfiprintf_r>
 8013dee:	9b00      	ldr	r3, [sp, #0]
 8013df0:	701c      	strb	r4, [r3, #0]
 8013df2:	b01a      	add	sp, #104	@ 0x68
 8013df4:	bd10      	pop	{r4, pc}
 8013df6:	bf00      	nop
 8013df8:	ffff0208 	.word	0xffff0208

08013dfc <vsiprintf>:
 8013dfc:	4613      	mov	r3, r2
 8013dfe:	460a      	mov	r2, r1
 8013e00:	4601      	mov	r1, r0
 8013e02:	4802      	ldr	r0, [pc, #8]	@ (8013e0c <vsiprintf+0x10>)
 8013e04:	6800      	ldr	r0, [r0, #0]
 8013e06:	f7ff bfe3 	b.w	8013dd0 <_vsiprintf_r>
 8013e0a:	bf00      	nop
 8013e0c:	2000019c 	.word	0x2000019c

08013e10 <__swbuf_r>:
 8013e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e12:	460e      	mov	r6, r1
 8013e14:	4614      	mov	r4, r2
 8013e16:	4605      	mov	r5, r0
 8013e18:	b118      	cbz	r0, 8013e22 <__swbuf_r+0x12>
 8013e1a:	6a03      	ldr	r3, [r0, #32]
 8013e1c:	b90b      	cbnz	r3, 8013e22 <__swbuf_r+0x12>
 8013e1e:	f7ff fe67 	bl	8013af0 <__sinit>
 8013e22:	69a3      	ldr	r3, [r4, #24]
 8013e24:	60a3      	str	r3, [r4, #8]
 8013e26:	89a3      	ldrh	r3, [r4, #12]
 8013e28:	071a      	lsls	r2, r3, #28
 8013e2a:	d501      	bpl.n	8013e30 <__swbuf_r+0x20>
 8013e2c:	6923      	ldr	r3, [r4, #16]
 8013e2e:	b943      	cbnz	r3, 8013e42 <__swbuf_r+0x32>
 8013e30:	4621      	mov	r1, r4
 8013e32:	4628      	mov	r0, r5
 8013e34:	f000 f82a 	bl	8013e8c <__swsetup_r>
 8013e38:	b118      	cbz	r0, 8013e42 <__swbuf_r+0x32>
 8013e3a:	f04f 37ff 	mov.w	r7, #4294967295
 8013e3e:	4638      	mov	r0, r7
 8013e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e42:	6823      	ldr	r3, [r4, #0]
 8013e44:	6922      	ldr	r2, [r4, #16]
 8013e46:	1a98      	subs	r0, r3, r2
 8013e48:	6963      	ldr	r3, [r4, #20]
 8013e4a:	b2f6      	uxtb	r6, r6
 8013e4c:	4283      	cmp	r3, r0
 8013e4e:	4637      	mov	r7, r6
 8013e50:	dc05      	bgt.n	8013e5e <__swbuf_r+0x4e>
 8013e52:	4621      	mov	r1, r4
 8013e54:	4628      	mov	r0, r5
 8013e56:	f002 f953 	bl	8016100 <_fflush_r>
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	d1ed      	bne.n	8013e3a <__swbuf_r+0x2a>
 8013e5e:	68a3      	ldr	r3, [r4, #8]
 8013e60:	3b01      	subs	r3, #1
 8013e62:	60a3      	str	r3, [r4, #8]
 8013e64:	6823      	ldr	r3, [r4, #0]
 8013e66:	1c5a      	adds	r2, r3, #1
 8013e68:	6022      	str	r2, [r4, #0]
 8013e6a:	701e      	strb	r6, [r3, #0]
 8013e6c:	6962      	ldr	r2, [r4, #20]
 8013e6e:	1c43      	adds	r3, r0, #1
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d004      	beq.n	8013e7e <__swbuf_r+0x6e>
 8013e74:	89a3      	ldrh	r3, [r4, #12]
 8013e76:	07db      	lsls	r3, r3, #31
 8013e78:	d5e1      	bpl.n	8013e3e <__swbuf_r+0x2e>
 8013e7a:	2e0a      	cmp	r6, #10
 8013e7c:	d1df      	bne.n	8013e3e <__swbuf_r+0x2e>
 8013e7e:	4621      	mov	r1, r4
 8013e80:	4628      	mov	r0, r5
 8013e82:	f002 f93d 	bl	8016100 <_fflush_r>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d0d9      	beq.n	8013e3e <__swbuf_r+0x2e>
 8013e8a:	e7d6      	b.n	8013e3a <__swbuf_r+0x2a>

08013e8c <__swsetup_r>:
 8013e8c:	b538      	push	{r3, r4, r5, lr}
 8013e8e:	4b29      	ldr	r3, [pc, #164]	@ (8013f34 <__swsetup_r+0xa8>)
 8013e90:	4605      	mov	r5, r0
 8013e92:	6818      	ldr	r0, [r3, #0]
 8013e94:	460c      	mov	r4, r1
 8013e96:	b118      	cbz	r0, 8013ea0 <__swsetup_r+0x14>
 8013e98:	6a03      	ldr	r3, [r0, #32]
 8013e9a:	b90b      	cbnz	r3, 8013ea0 <__swsetup_r+0x14>
 8013e9c:	f7ff fe28 	bl	8013af0 <__sinit>
 8013ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ea4:	0719      	lsls	r1, r3, #28
 8013ea6:	d422      	bmi.n	8013eee <__swsetup_r+0x62>
 8013ea8:	06da      	lsls	r2, r3, #27
 8013eaa:	d407      	bmi.n	8013ebc <__swsetup_r+0x30>
 8013eac:	2209      	movs	r2, #9
 8013eae:	602a      	str	r2, [r5, #0]
 8013eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013eb4:	81a3      	strh	r3, [r4, #12]
 8013eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8013eba:	e033      	b.n	8013f24 <__swsetup_r+0x98>
 8013ebc:	0758      	lsls	r0, r3, #29
 8013ebe:	d512      	bpl.n	8013ee6 <__swsetup_r+0x5a>
 8013ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ec2:	b141      	cbz	r1, 8013ed6 <__swsetup_r+0x4a>
 8013ec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013ec8:	4299      	cmp	r1, r3
 8013eca:	d002      	beq.n	8013ed2 <__swsetup_r+0x46>
 8013ecc:	4628      	mov	r0, r5
 8013ece:	f000 f8fb 	bl	80140c8 <_free_r>
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	6363      	str	r3, [r4, #52]	@ 0x34
 8013ed6:	89a3      	ldrh	r3, [r4, #12]
 8013ed8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013edc:	81a3      	strh	r3, [r4, #12]
 8013ede:	2300      	movs	r3, #0
 8013ee0:	6063      	str	r3, [r4, #4]
 8013ee2:	6923      	ldr	r3, [r4, #16]
 8013ee4:	6023      	str	r3, [r4, #0]
 8013ee6:	89a3      	ldrh	r3, [r4, #12]
 8013ee8:	f043 0308 	orr.w	r3, r3, #8
 8013eec:	81a3      	strh	r3, [r4, #12]
 8013eee:	6923      	ldr	r3, [r4, #16]
 8013ef0:	b94b      	cbnz	r3, 8013f06 <__swsetup_r+0x7a>
 8013ef2:	89a3      	ldrh	r3, [r4, #12]
 8013ef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013efc:	d003      	beq.n	8013f06 <__swsetup_r+0x7a>
 8013efe:	4621      	mov	r1, r4
 8013f00:	4628      	mov	r0, r5
 8013f02:	f002 f94b 	bl	801619c <__smakebuf_r>
 8013f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f0a:	f013 0201 	ands.w	r2, r3, #1
 8013f0e:	d00a      	beq.n	8013f26 <__swsetup_r+0x9a>
 8013f10:	2200      	movs	r2, #0
 8013f12:	60a2      	str	r2, [r4, #8]
 8013f14:	6962      	ldr	r2, [r4, #20]
 8013f16:	4252      	negs	r2, r2
 8013f18:	61a2      	str	r2, [r4, #24]
 8013f1a:	6922      	ldr	r2, [r4, #16]
 8013f1c:	b942      	cbnz	r2, 8013f30 <__swsetup_r+0xa4>
 8013f1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013f22:	d1c5      	bne.n	8013eb0 <__swsetup_r+0x24>
 8013f24:	bd38      	pop	{r3, r4, r5, pc}
 8013f26:	0799      	lsls	r1, r3, #30
 8013f28:	bf58      	it	pl
 8013f2a:	6962      	ldrpl	r2, [r4, #20]
 8013f2c:	60a2      	str	r2, [r4, #8]
 8013f2e:	e7f4      	b.n	8013f1a <__swsetup_r+0x8e>
 8013f30:	2000      	movs	r0, #0
 8013f32:	e7f7      	b.n	8013f24 <__swsetup_r+0x98>
 8013f34:	2000019c 	.word	0x2000019c

08013f38 <memset>:
 8013f38:	4402      	add	r2, r0
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	4293      	cmp	r3, r2
 8013f3e:	d100      	bne.n	8013f42 <memset+0xa>
 8013f40:	4770      	bx	lr
 8013f42:	f803 1b01 	strb.w	r1, [r3], #1
 8013f46:	e7f9      	b.n	8013f3c <memset+0x4>

08013f48 <strncmp>:
 8013f48:	b510      	push	{r4, lr}
 8013f4a:	b16a      	cbz	r2, 8013f68 <strncmp+0x20>
 8013f4c:	3901      	subs	r1, #1
 8013f4e:	1884      	adds	r4, r0, r2
 8013f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d103      	bne.n	8013f64 <strncmp+0x1c>
 8013f5c:	42a0      	cmp	r0, r4
 8013f5e:	d001      	beq.n	8013f64 <strncmp+0x1c>
 8013f60:	2a00      	cmp	r2, #0
 8013f62:	d1f5      	bne.n	8013f50 <strncmp+0x8>
 8013f64:	1ad0      	subs	r0, r2, r3
 8013f66:	bd10      	pop	{r4, pc}
 8013f68:	4610      	mov	r0, r2
 8013f6a:	e7fc      	b.n	8013f66 <strncmp+0x1e>

08013f6c <strncpy>:
 8013f6c:	b510      	push	{r4, lr}
 8013f6e:	3901      	subs	r1, #1
 8013f70:	4603      	mov	r3, r0
 8013f72:	b132      	cbz	r2, 8013f82 <strncpy+0x16>
 8013f74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013f78:	f803 4b01 	strb.w	r4, [r3], #1
 8013f7c:	3a01      	subs	r2, #1
 8013f7e:	2c00      	cmp	r4, #0
 8013f80:	d1f7      	bne.n	8013f72 <strncpy+0x6>
 8013f82:	441a      	add	r2, r3
 8013f84:	2100      	movs	r1, #0
 8013f86:	4293      	cmp	r3, r2
 8013f88:	d100      	bne.n	8013f8c <strncpy+0x20>
 8013f8a:	bd10      	pop	{r4, pc}
 8013f8c:	f803 1b01 	strb.w	r1, [r3], #1
 8013f90:	e7f9      	b.n	8013f86 <strncpy+0x1a>
	...

08013f94 <_close_r>:
 8013f94:	b538      	push	{r3, r4, r5, lr}
 8013f96:	4d06      	ldr	r5, [pc, #24]	@ (8013fb0 <_close_r+0x1c>)
 8013f98:	2300      	movs	r3, #0
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	4608      	mov	r0, r1
 8013f9e:	602b      	str	r3, [r5, #0]
 8013fa0:	f7f8 f938 	bl	800c214 <_close>
 8013fa4:	1c43      	adds	r3, r0, #1
 8013fa6:	d102      	bne.n	8013fae <_close_r+0x1a>
 8013fa8:	682b      	ldr	r3, [r5, #0]
 8013faa:	b103      	cbz	r3, 8013fae <_close_r+0x1a>
 8013fac:	6023      	str	r3, [r4, #0]
 8013fae:	bd38      	pop	{r3, r4, r5, pc}
 8013fb0:	20013464 	.word	0x20013464

08013fb4 <_lseek_r>:
 8013fb4:	b538      	push	{r3, r4, r5, lr}
 8013fb6:	4d07      	ldr	r5, [pc, #28]	@ (8013fd4 <_lseek_r+0x20>)
 8013fb8:	4604      	mov	r4, r0
 8013fba:	4608      	mov	r0, r1
 8013fbc:	4611      	mov	r1, r2
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	602a      	str	r2, [r5, #0]
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	f7f8 f94d 	bl	800c262 <_lseek>
 8013fc8:	1c43      	adds	r3, r0, #1
 8013fca:	d102      	bne.n	8013fd2 <_lseek_r+0x1e>
 8013fcc:	682b      	ldr	r3, [r5, #0]
 8013fce:	b103      	cbz	r3, 8013fd2 <_lseek_r+0x1e>
 8013fd0:	6023      	str	r3, [r4, #0]
 8013fd2:	bd38      	pop	{r3, r4, r5, pc}
 8013fd4:	20013464 	.word	0x20013464

08013fd8 <_read_r>:
 8013fd8:	b538      	push	{r3, r4, r5, lr}
 8013fda:	4d07      	ldr	r5, [pc, #28]	@ (8013ff8 <_read_r+0x20>)
 8013fdc:	4604      	mov	r4, r0
 8013fde:	4608      	mov	r0, r1
 8013fe0:	4611      	mov	r1, r2
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	602a      	str	r2, [r5, #0]
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	f7f8 f8db 	bl	800c1a2 <_read>
 8013fec:	1c43      	adds	r3, r0, #1
 8013fee:	d102      	bne.n	8013ff6 <_read_r+0x1e>
 8013ff0:	682b      	ldr	r3, [r5, #0]
 8013ff2:	b103      	cbz	r3, 8013ff6 <_read_r+0x1e>
 8013ff4:	6023      	str	r3, [r4, #0]
 8013ff6:	bd38      	pop	{r3, r4, r5, pc}
 8013ff8:	20013464 	.word	0x20013464

08013ffc <_sbrk_r>:
 8013ffc:	b538      	push	{r3, r4, r5, lr}
 8013ffe:	4d06      	ldr	r5, [pc, #24]	@ (8014018 <_sbrk_r+0x1c>)
 8014000:	2300      	movs	r3, #0
 8014002:	4604      	mov	r4, r0
 8014004:	4608      	mov	r0, r1
 8014006:	602b      	str	r3, [r5, #0]
 8014008:	f002 fb30 	bl	801666c <_sbrk>
 801400c:	1c43      	adds	r3, r0, #1
 801400e:	d102      	bne.n	8014016 <_sbrk_r+0x1a>
 8014010:	682b      	ldr	r3, [r5, #0]
 8014012:	b103      	cbz	r3, 8014016 <_sbrk_r+0x1a>
 8014014:	6023      	str	r3, [r4, #0]
 8014016:	bd38      	pop	{r3, r4, r5, pc}
 8014018:	20013464 	.word	0x20013464

0801401c <_write_r>:
 801401c:	b538      	push	{r3, r4, r5, lr}
 801401e:	4d07      	ldr	r5, [pc, #28]	@ (801403c <_write_r+0x20>)
 8014020:	4604      	mov	r4, r0
 8014022:	4608      	mov	r0, r1
 8014024:	4611      	mov	r1, r2
 8014026:	2200      	movs	r2, #0
 8014028:	602a      	str	r2, [r5, #0]
 801402a:	461a      	mov	r2, r3
 801402c:	f7f8 f8d6 	bl	800c1dc <_write>
 8014030:	1c43      	adds	r3, r0, #1
 8014032:	d102      	bne.n	801403a <_write_r+0x1e>
 8014034:	682b      	ldr	r3, [r5, #0]
 8014036:	b103      	cbz	r3, 801403a <_write_r+0x1e>
 8014038:	6023      	str	r3, [r4, #0]
 801403a:	bd38      	pop	{r3, r4, r5, pc}
 801403c:	20013464 	.word	0x20013464

08014040 <__errno>:
 8014040:	4b01      	ldr	r3, [pc, #4]	@ (8014048 <__errno+0x8>)
 8014042:	6818      	ldr	r0, [r3, #0]
 8014044:	4770      	bx	lr
 8014046:	bf00      	nop
 8014048:	2000019c 	.word	0x2000019c

0801404c <__libc_init_array>:
 801404c:	b570      	push	{r4, r5, r6, lr}
 801404e:	4d0d      	ldr	r5, [pc, #52]	@ (8014084 <__libc_init_array+0x38>)
 8014050:	4c0d      	ldr	r4, [pc, #52]	@ (8014088 <__libc_init_array+0x3c>)
 8014052:	1b64      	subs	r4, r4, r5
 8014054:	10a4      	asrs	r4, r4, #2
 8014056:	2600      	movs	r6, #0
 8014058:	42a6      	cmp	r6, r4
 801405a:	d109      	bne.n	8014070 <__libc_init_array+0x24>
 801405c:	4d0b      	ldr	r5, [pc, #44]	@ (801408c <__libc_init_array+0x40>)
 801405e:	4c0c      	ldr	r4, [pc, #48]	@ (8014090 <__libc_init_array+0x44>)
 8014060:	f002 fb12 	bl	8016688 <_init>
 8014064:	1b64      	subs	r4, r4, r5
 8014066:	10a4      	asrs	r4, r4, #2
 8014068:	2600      	movs	r6, #0
 801406a:	42a6      	cmp	r6, r4
 801406c:	d105      	bne.n	801407a <__libc_init_array+0x2e>
 801406e:	bd70      	pop	{r4, r5, r6, pc}
 8014070:	f855 3b04 	ldr.w	r3, [r5], #4
 8014074:	4798      	blx	r3
 8014076:	3601      	adds	r6, #1
 8014078:	e7ee      	b.n	8014058 <__libc_init_array+0xc>
 801407a:	f855 3b04 	ldr.w	r3, [r5], #4
 801407e:	4798      	blx	r3
 8014080:	3601      	adds	r6, #1
 8014082:	e7f2      	b.n	801406a <__libc_init_array+0x1e>
 8014084:	080174f0 	.word	0x080174f0
 8014088:	080174f0 	.word	0x080174f0
 801408c:	080174f0 	.word	0x080174f0
 8014090:	080174f4 	.word	0x080174f4

08014094 <__retarget_lock_init_recursive>:
 8014094:	4770      	bx	lr

08014096 <__retarget_lock_acquire_recursive>:
 8014096:	4770      	bx	lr

08014098 <__retarget_lock_release_recursive>:
 8014098:	4770      	bx	lr

0801409a <memcpy>:
 801409a:	440a      	add	r2, r1
 801409c:	4291      	cmp	r1, r2
 801409e:	f100 33ff 	add.w	r3, r0, #4294967295
 80140a2:	d100      	bne.n	80140a6 <memcpy+0xc>
 80140a4:	4770      	bx	lr
 80140a6:	b510      	push	{r4, lr}
 80140a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80140b0:	4291      	cmp	r1, r2
 80140b2:	d1f9      	bne.n	80140a8 <memcpy+0xe>
 80140b4:	bd10      	pop	{r4, pc}
	...

080140b8 <nan>:
 80140b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80140c0 <nan+0x8>
 80140bc:	4770      	bx	lr
 80140be:	bf00      	nop
 80140c0:	00000000 	.word	0x00000000
 80140c4:	7ff80000 	.word	0x7ff80000

080140c8 <_free_r>:
 80140c8:	b538      	push	{r3, r4, r5, lr}
 80140ca:	4605      	mov	r5, r0
 80140cc:	2900      	cmp	r1, #0
 80140ce:	d041      	beq.n	8014154 <_free_r+0x8c>
 80140d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140d4:	1f0c      	subs	r4, r1, #4
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	bfb8      	it	lt
 80140da:	18e4      	addlt	r4, r4, r3
 80140dc:	f7fe fe2c 	bl	8012d38 <__malloc_lock>
 80140e0:	4a1d      	ldr	r2, [pc, #116]	@ (8014158 <_free_r+0x90>)
 80140e2:	6813      	ldr	r3, [r2, #0]
 80140e4:	b933      	cbnz	r3, 80140f4 <_free_r+0x2c>
 80140e6:	6063      	str	r3, [r4, #4]
 80140e8:	6014      	str	r4, [r2, #0]
 80140ea:	4628      	mov	r0, r5
 80140ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140f0:	f7fe be28 	b.w	8012d44 <__malloc_unlock>
 80140f4:	42a3      	cmp	r3, r4
 80140f6:	d908      	bls.n	801410a <_free_r+0x42>
 80140f8:	6820      	ldr	r0, [r4, #0]
 80140fa:	1821      	adds	r1, r4, r0
 80140fc:	428b      	cmp	r3, r1
 80140fe:	bf01      	itttt	eq
 8014100:	6819      	ldreq	r1, [r3, #0]
 8014102:	685b      	ldreq	r3, [r3, #4]
 8014104:	1809      	addeq	r1, r1, r0
 8014106:	6021      	streq	r1, [r4, #0]
 8014108:	e7ed      	b.n	80140e6 <_free_r+0x1e>
 801410a:	461a      	mov	r2, r3
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	b10b      	cbz	r3, 8014114 <_free_r+0x4c>
 8014110:	42a3      	cmp	r3, r4
 8014112:	d9fa      	bls.n	801410a <_free_r+0x42>
 8014114:	6811      	ldr	r1, [r2, #0]
 8014116:	1850      	adds	r0, r2, r1
 8014118:	42a0      	cmp	r0, r4
 801411a:	d10b      	bne.n	8014134 <_free_r+0x6c>
 801411c:	6820      	ldr	r0, [r4, #0]
 801411e:	4401      	add	r1, r0
 8014120:	1850      	adds	r0, r2, r1
 8014122:	4283      	cmp	r3, r0
 8014124:	6011      	str	r1, [r2, #0]
 8014126:	d1e0      	bne.n	80140ea <_free_r+0x22>
 8014128:	6818      	ldr	r0, [r3, #0]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	6053      	str	r3, [r2, #4]
 801412e:	4408      	add	r0, r1
 8014130:	6010      	str	r0, [r2, #0]
 8014132:	e7da      	b.n	80140ea <_free_r+0x22>
 8014134:	d902      	bls.n	801413c <_free_r+0x74>
 8014136:	230c      	movs	r3, #12
 8014138:	602b      	str	r3, [r5, #0]
 801413a:	e7d6      	b.n	80140ea <_free_r+0x22>
 801413c:	6820      	ldr	r0, [r4, #0]
 801413e:	1821      	adds	r1, r4, r0
 8014140:	428b      	cmp	r3, r1
 8014142:	bf04      	itt	eq
 8014144:	6819      	ldreq	r1, [r3, #0]
 8014146:	685b      	ldreq	r3, [r3, #4]
 8014148:	6063      	str	r3, [r4, #4]
 801414a:	bf04      	itt	eq
 801414c:	1809      	addeq	r1, r1, r0
 801414e:	6021      	streq	r1, [r4, #0]
 8014150:	6054      	str	r4, [r2, #4]
 8014152:	e7ca      	b.n	80140ea <_free_r+0x22>
 8014154:	bd38      	pop	{r3, r4, r5, pc}
 8014156:	bf00      	nop
 8014158:	20013324 	.word	0x20013324

0801415c <rshift>:
 801415c:	6903      	ldr	r3, [r0, #16]
 801415e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014162:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014166:	ea4f 1261 	mov.w	r2, r1, asr #5
 801416a:	f100 0414 	add.w	r4, r0, #20
 801416e:	dd45      	ble.n	80141fc <rshift+0xa0>
 8014170:	f011 011f 	ands.w	r1, r1, #31
 8014174:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014178:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801417c:	d10c      	bne.n	8014198 <rshift+0x3c>
 801417e:	f100 0710 	add.w	r7, r0, #16
 8014182:	4629      	mov	r1, r5
 8014184:	42b1      	cmp	r1, r6
 8014186:	d334      	bcc.n	80141f2 <rshift+0x96>
 8014188:	1a9b      	subs	r3, r3, r2
 801418a:	009b      	lsls	r3, r3, #2
 801418c:	1eea      	subs	r2, r5, #3
 801418e:	4296      	cmp	r6, r2
 8014190:	bf38      	it	cc
 8014192:	2300      	movcc	r3, #0
 8014194:	4423      	add	r3, r4
 8014196:	e015      	b.n	80141c4 <rshift+0x68>
 8014198:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801419c:	f1c1 0820 	rsb	r8, r1, #32
 80141a0:	40cf      	lsrs	r7, r1
 80141a2:	f105 0e04 	add.w	lr, r5, #4
 80141a6:	46a1      	mov	r9, r4
 80141a8:	4576      	cmp	r6, lr
 80141aa:	46f4      	mov	ip, lr
 80141ac:	d815      	bhi.n	80141da <rshift+0x7e>
 80141ae:	1a9a      	subs	r2, r3, r2
 80141b0:	0092      	lsls	r2, r2, #2
 80141b2:	3a04      	subs	r2, #4
 80141b4:	3501      	adds	r5, #1
 80141b6:	42ae      	cmp	r6, r5
 80141b8:	bf38      	it	cc
 80141ba:	2200      	movcc	r2, #0
 80141bc:	18a3      	adds	r3, r4, r2
 80141be:	50a7      	str	r7, [r4, r2]
 80141c0:	b107      	cbz	r7, 80141c4 <rshift+0x68>
 80141c2:	3304      	adds	r3, #4
 80141c4:	1b1a      	subs	r2, r3, r4
 80141c6:	42a3      	cmp	r3, r4
 80141c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80141cc:	bf08      	it	eq
 80141ce:	2300      	moveq	r3, #0
 80141d0:	6102      	str	r2, [r0, #16]
 80141d2:	bf08      	it	eq
 80141d4:	6143      	streq	r3, [r0, #20]
 80141d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141da:	f8dc c000 	ldr.w	ip, [ip]
 80141de:	fa0c fc08 	lsl.w	ip, ip, r8
 80141e2:	ea4c 0707 	orr.w	r7, ip, r7
 80141e6:	f849 7b04 	str.w	r7, [r9], #4
 80141ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80141ee:	40cf      	lsrs	r7, r1
 80141f0:	e7da      	b.n	80141a8 <rshift+0x4c>
 80141f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80141f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80141fa:	e7c3      	b.n	8014184 <rshift+0x28>
 80141fc:	4623      	mov	r3, r4
 80141fe:	e7e1      	b.n	80141c4 <rshift+0x68>

08014200 <__hexdig_fun>:
 8014200:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014204:	2b09      	cmp	r3, #9
 8014206:	d802      	bhi.n	801420e <__hexdig_fun+0xe>
 8014208:	3820      	subs	r0, #32
 801420a:	b2c0      	uxtb	r0, r0
 801420c:	4770      	bx	lr
 801420e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014212:	2b05      	cmp	r3, #5
 8014214:	d801      	bhi.n	801421a <__hexdig_fun+0x1a>
 8014216:	3847      	subs	r0, #71	@ 0x47
 8014218:	e7f7      	b.n	801420a <__hexdig_fun+0xa>
 801421a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801421e:	2b05      	cmp	r3, #5
 8014220:	d801      	bhi.n	8014226 <__hexdig_fun+0x26>
 8014222:	3827      	subs	r0, #39	@ 0x27
 8014224:	e7f1      	b.n	801420a <__hexdig_fun+0xa>
 8014226:	2000      	movs	r0, #0
 8014228:	4770      	bx	lr
	...

0801422c <__gethex>:
 801422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014230:	b085      	sub	sp, #20
 8014232:	468a      	mov	sl, r1
 8014234:	9302      	str	r3, [sp, #8]
 8014236:	680b      	ldr	r3, [r1, #0]
 8014238:	9001      	str	r0, [sp, #4]
 801423a:	4690      	mov	r8, r2
 801423c:	1c9c      	adds	r4, r3, #2
 801423e:	46a1      	mov	r9, r4
 8014240:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014244:	2830      	cmp	r0, #48	@ 0x30
 8014246:	d0fa      	beq.n	801423e <__gethex+0x12>
 8014248:	eba9 0303 	sub.w	r3, r9, r3
 801424c:	f1a3 0b02 	sub.w	fp, r3, #2
 8014250:	f7ff ffd6 	bl	8014200 <__hexdig_fun>
 8014254:	4605      	mov	r5, r0
 8014256:	2800      	cmp	r0, #0
 8014258:	d168      	bne.n	801432c <__gethex+0x100>
 801425a:	49a0      	ldr	r1, [pc, #640]	@ (80144dc <__gethex+0x2b0>)
 801425c:	2201      	movs	r2, #1
 801425e:	4648      	mov	r0, r9
 8014260:	f7ff fe72 	bl	8013f48 <strncmp>
 8014264:	4607      	mov	r7, r0
 8014266:	2800      	cmp	r0, #0
 8014268:	d167      	bne.n	801433a <__gethex+0x10e>
 801426a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801426e:	4626      	mov	r6, r4
 8014270:	f7ff ffc6 	bl	8014200 <__hexdig_fun>
 8014274:	2800      	cmp	r0, #0
 8014276:	d062      	beq.n	801433e <__gethex+0x112>
 8014278:	4623      	mov	r3, r4
 801427a:	7818      	ldrb	r0, [r3, #0]
 801427c:	2830      	cmp	r0, #48	@ 0x30
 801427e:	4699      	mov	r9, r3
 8014280:	f103 0301 	add.w	r3, r3, #1
 8014284:	d0f9      	beq.n	801427a <__gethex+0x4e>
 8014286:	f7ff ffbb 	bl	8014200 <__hexdig_fun>
 801428a:	fab0 f580 	clz	r5, r0
 801428e:	096d      	lsrs	r5, r5, #5
 8014290:	f04f 0b01 	mov.w	fp, #1
 8014294:	464a      	mov	r2, r9
 8014296:	4616      	mov	r6, r2
 8014298:	3201      	adds	r2, #1
 801429a:	7830      	ldrb	r0, [r6, #0]
 801429c:	f7ff ffb0 	bl	8014200 <__hexdig_fun>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	d1f8      	bne.n	8014296 <__gethex+0x6a>
 80142a4:	498d      	ldr	r1, [pc, #564]	@ (80144dc <__gethex+0x2b0>)
 80142a6:	2201      	movs	r2, #1
 80142a8:	4630      	mov	r0, r6
 80142aa:	f7ff fe4d 	bl	8013f48 <strncmp>
 80142ae:	2800      	cmp	r0, #0
 80142b0:	d13f      	bne.n	8014332 <__gethex+0x106>
 80142b2:	b944      	cbnz	r4, 80142c6 <__gethex+0x9a>
 80142b4:	1c74      	adds	r4, r6, #1
 80142b6:	4622      	mov	r2, r4
 80142b8:	4616      	mov	r6, r2
 80142ba:	3201      	adds	r2, #1
 80142bc:	7830      	ldrb	r0, [r6, #0]
 80142be:	f7ff ff9f 	bl	8014200 <__hexdig_fun>
 80142c2:	2800      	cmp	r0, #0
 80142c4:	d1f8      	bne.n	80142b8 <__gethex+0x8c>
 80142c6:	1ba4      	subs	r4, r4, r6
 80142c8:	00a7      	lsls	r7, r4, #2
 80142ca:	7833      	ldrb	r3, [r6, #0]
 80142cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80142d0:	2b50      	cmp	r3, #80	@ 0x50
 80142d2:	d13e      	bne.n	8014352 <__gethex+0x126>
 80142d4:	7873      	ldrb	r3, [r6, #1]
 80142d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80142d8:	d033      	beq.n	8014342 <__gethex+0x116>
 80142da:	2b2d      	cmp	r3, #45	@ 0x2d
 80142dc:	d034      	beq.n	8014348 <__gethex+0x11c>
 80142de:	1c71      	adds	r1, r6, #1
 80142e0:	2400      	movs	r4, #0
 80142e2:	7808      	ldrb	r0, [r1, #0]
 80142e4:	f7ff ff8c 	bl	8014200 <__hexdig_fun>
 80142e8:	1e43      	subs	r3, r0, #1
 80142ea:	b2db      	uxtb	r3, r3
 80142ec:	2b18      	cmp	r3, #24
 80142ee:	d830      	bhi.n	8014352 <__gethex+0x126>
 80142f0:	f1a0 0210 	sub.w	r2, r0, #16
 80142f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80142f8:	f7ff ff82 	bl	8014200 <__hexdig_fun>
 80142fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8014300:	fa5f fc8c 	uxtb.w	ip, ip
 8014304:	f1bc 0f18 	cmp.w	ip, #24
 8014308:	f04f 030a 	mov.w	r3, #10
 801430c:	d91e      	bls.n	801434c <__gethex+0x120>
 801430e:	b104      	cbz	r4, 8014312 <__gethex+0xe6>
 8014310:	4252      	negs	r2, r2
 8014312:	4417      	add	r7, r2
 8014314:	f8ca 1000 	str.w	r1, [sl]
 8014318:	b1ed      	cbz	r5, 8014356 <__gethex+0x12a>
 801431a:	f1bb 0f00 	cmp.w	fp, #0
 801431e:	bf0c      	ite	eq
 8014320:	2506      	moveq	r5, #6
 8014322:	2500      	movne	r5, #0
 8014324:	4628      	mov	r0, r5
 8014326:	b005      	add	sp, #20
 8014328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801432c:	2500      	movs	r5, #0
 801432e:	462c      	mov	r4, r5
 8014330:	e7b0      	b.n	8014294 <__gethex+0x68>
 8014332:	2c00      	cmp	r4, #0
 8014334:	d1c7      	bne.n	80142c6 <__gethex+0x9a>
 8014336:	4627      	mov	r7, r4
 8014338:	e7c7      	b.n	80142ca <__gethex+0x9e>
 801433a:	464e      	mov	r6, r9
 801433c:	462f      	mov	r7, r5
 801433e:	2501      	movs	r5, #1
 8014340:	e7c3      	b.n	80142ca <__gethex+0x9e>
 8014342:	2400      	movs	r4, #0
 8014344:	1cb1      	adds	r1, r6, #2
 8014346:	e7cc      	b.n	80142e2 <__gethex+0xb6>
 8014348:	2401      	movs	r4, #1
 801434a:	e7fb      	b.n	8014344 <__gethex+0x118>
 801434c:	fb03 0002 	mla	r0, r3, r2, r0
 8014350:	e7ce      	b.n	80142f0 <__gethex+0xc4>
 8014352:	4631      	mov	r1, r6
 8014354:	e7de      	b.n	8014314 <__gethex+0xe8>
 8014356:	eba6 0309 	sub.w	r3, r6, r9
 801435a:	3b01      	subs	r3, #1
 801435c:	4629      	mov	r1, r5
 801435e:	2b07      	cmp	r3, #7
 8014360:	dc0a      	bgt.n	8014378 <__gethex+0x14c>
 8014362:	9801      	ldr	r0, [sp, #4]
 8014364:	f000 fa46 	bl	80147f4 <_Balloc>
 8014368:	4604      	mov	r4, r0
 801436a:	b940      	cbnz	r0, 801437e <__gethex+0x152>
 801436c:	4b5c      	ldr	r3, [pc, #368]	@ (80144e0 <__gethex+0x2b4>)
 801436e:	4602      	mov	r2, r0
 8014370:	21e4      	movs	r1, #228	@ 0xe4
 8014372:	485c      	ldr	r0, [pc, #368]	@ (80144e4 <__gethex+0x2b8>)
 8014374:	f001 fffe 	bl	8016374 <__assert_func>
 8014378:	3101      	adds	r1, #1
 801437a:	105b      	asrs	r3, r3, #1
 801437c:	e7ef      	b.n	801435e <__gethex+0x132>
 801437e:	f100 0a14 	add.w	sl, r0, #20
 8014382:	2300      	movs	r3, #0
 8014384:	4655      	mov	r5, sl
 8014386:	469b      	mov	fp, r3
 8014388:	45b1      	cmp	r9, r6
 801438a:	d337      	bcc.n	80143fc <__gethex+0x1d0>
 801438c:	f845 bb04 	str.w	fp, [r5], #4
 8014390:	eba5 050a 	sub.w	r5, r5, sl
 8014394:	10ad      	asrs	r5, r5, #2
 8014396:	6125      	str	r5, [r4, #16]
 8014398:	4658      	mov	r0, fp
 801439a:	f000 fb1d 	bl	80149d8 <__hi0bits>
 801439e:	016d      	lsls	r5, r5, #5
 80143a0:	f8d8 6000 	ldr.w	r6, [r8]
 80143a4:	1a2d      	subs	r5, r5, r0
 80143a6:	42b5      	cmp	r5, r6
 80143a8:	dd54      	ble.n	8014454 <__gethex+0x228>
 80143aa:	1bad      	subs	r5, r5, r6
 80143ac:	4629      	mov	r1, r5
 80143ae:	4620      	mov	r0, r4
 80143b0:	f000 fea9 	bl	8015106 <__any_on>
 80143b4:	4681      	mov	r9, r0
 80143b6:	b178      	cbz	r0, 80143d8 <__gethex+0x1ac>
 80143b8:	1e6b      	subs	r3, r5, #1
 80143ba:	1159      	asrs	r1, r3, #5
 80143bc:	f003 021f 	and.w	r2, r3, #31
 80143c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80143c4:	f04f 0901 	mov.w	r9, #1
 80143c8:	fa09 f202 	lsl.w	r2, r9, r2
 80143cc:	420a      	tst	r2, r1
 80143ce:	d003      	beq.n	80143d8 <__gethex+0x1ac>
 80143d0:	454b      	cmp	r3, r9
 80143d2:	dc36      	bgt.n	8014442 <__gethex+0x216>
 80143d4:	f04f 0902 	mov.w	r9, #2
 80143d8:	4629      	mov	r1, r5
 80143da:	4620      	mov	r0, r4
 80143dc:	f7ff febe 	bl	801415c <rshift>
 80143e0:	442f      	add	r7, r5
 80143e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80143e6:	42bb      	cmp	r3, r7
 80143e8:	da42      	bge.n	8014470 <__gethex+0x244>
 80143ea:	9801      	ldr	r0, [sp, #4]
 80143ec:	4621      	mov	r1, r4
 80143ee:	f000 fa41 	bl	8014874 <_Bfree>
 80143f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80143f4:	2300      	movs	r3, #0
 80143f6:	6013      	str	r3, [r2, #0]
 80143f8:	25a3      	movs	r5, #163	@ 0xa3
 80143fa:	e793      	b.n	8014324 <__gethex+0xf8>
 80143fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014400:	2a2e      	cmp	r2, #46	@ 0x2e
 8014402:	d012      	beq.n	801442a <__gethex+0x1fe>
 8014404:	2b20      	cmp	r3, #32
 8014406:	d104      	bne.n	8014412 <__gethex+0x1e6>
 8014408:	f845 bb04 	str.w	fp, [r5], #4
 801440c:	f04f 0b00 	mov.w	fp, #0
 8014410:	465b      	mov	r3, fp
 8014412:	7830      	ldrb	r0, [r6, #0]
 8014414:	9303      	str	r3, [sp, #12]
 8014416:	f7ff fef3 	bl	8014200 <__hexdig_fun>
 801441a:	9b03      	ldr	r3, [sp, #12]
 801441c:	f000 000f 	and.w	r0, r0, #15
 8014420:	4098      	lsls	r0, r3
 8014422:	ea4b 0b00 	orr.w	fp, fp, r0
 8014426:	3304      	adds	r3, #4
 8014428:	e7ae      	b.n	8014388 <__gethex+0x15c>
 801442a:	45b1      	cmp	r9, r6
 801442c:	d8ea      	bhi.n	8014404 <__gethex+0x1d8>
 801442e:	492b      	ldr	r1, [pc, #172]	@ (80144dc <__gethex+0x2b0>)
 8014430:	9303      	str	r3, [sp, #12]
 8014432:	2201      	movs	r2, #1
 8014434:	4630      	mov	r0, r6
 8014436:	f7ff fd87 	bl	8013f48 <strncmp>
 801443a:	9b03      	ldr	r3, [sp, #12]
 801443c:	2800      	cmp	r0, #0
 801443e:	d1e1      	bne.n	8014404 <__gethex+0x1d8>
 8014440:	e7a2      	b.n	8014388 <__gethex+0x15c>
 8014442:	1ea9      	subs	r1, r5, #2
 8014444:	4620      	mov	r0, r4
 8014446:	f000 fe5e 	bl	8015106 <__any_on>
 801444a:	2800      	cmp	r0, #0
 801444c:	d0c2      	beq.n	80143d4 <__gethex+0x1a8>
 801444e:	f04f 0903 	mov.w	r9, #3
 8014452:	e7c1      	b.n	80143d8 <__gethex+0x1ac>
 8014454:	da09      	bge.n	801446a <__gethex+0x23e>
 8014456:	1b75      	subs	r5, r6, r5
 8014458:	4621      	mov	r1, r4
 801445a:	9801      	ldr	r0, [sp, #4]
 801445c:	462a      	mov	r2, r5
 801445e:	f000 fc19 	bl	8014c94 <__lshift>
 8014462:	1b7f      	subs	r7, r7, r5
 8014464:	4604      	mov	r4, r0
 8014466:	f100 0a14 	add.w	sl, r0, #20
 801446a:	f04f 0900 	mov.w	r9, #0
 801446e:	e7b8      	b.n	80143e2 <__gethex+0x1b6>
 8014470:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014474:	42bd      	cmp	r5, r7
 8014476:	dd6f      	ble.n	8014558 <__gethex+0x32c>
 8014478:	1bed      	subs	r5, r5, r7
 801447a:	42ae      	cmp	r6, r5
 801447c:	dc34      	bgt.n	80144e8 <__gethex+0x2bc>
 801447e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014482:	2b02      	cmp	r3, #2
 8014484:	d022      	beq.n	80144cc <__gethex+0x2a0>
 8014486:	2b03      	cmp	r3, #3
 8014488:	d024      	beq.n	80144d4 <__gethex+0x2a8>
 801448a:	2b01      	cmp	r3, #1
 801448c:	d115      	bne.n	80144ba <__gethex+0x28e>
 801448e:	42ae      	cmp	r6, r5
 8014490:	d113      	bne.n	80144ba <__gethex+0x28e>
 8014492:	2e01      	cmp	r6, #1
 8014494:	d10b      	bne.n	80144ae <__gethex+0x282>
 8014496:	9a02      	ldr	r2, [sp, #8]
 8014498:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801449c:	6013      	str	r3, [r2, #0]
 801449e:	2301      	movs	r3, #1
 80144a0:	6123      	str	r3, [r4, #16]
 80144a2:	f8ca 3000 	str.w	r3, [sl]
 80144a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144a8:	2562      	movs	r5, #98	@ 0x62
 80144aa:	601c      	str	r4, [r3, #0]
 80144ac:	e73a      	b.n	8014324 <__gethex+0xf8>
 80144ae:	1e71      	subs	r1, r6, #1
 80144b0:	4620      	mov	r0, r4
 80144b2:	f000 fe28 	bl	8015106 <__any_on>
 80144b6:	2800      	cmp	r0, #0
 80144b8:	d1ed      	bne.n	8014496 <__gethex+0x26a>
 80144ba:	9801      	ldr	r0, [sp, #4]
 80144bc:	4621      	mov	r1, r4
 80144be:	f000 f9d9 	bl	8014874 <_Bfree>
 80144c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80144c4:	2300      	movs	r3, #0
 80144c6:	6013      	str	r3, [r2, #0]
 80144c8:	2550      	movs	r5, #80	@ 0x50
 80144ca:	e72b      	b.n	8014324 <__gethex+0xf8>
 80144cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d1f3      	bne.n	80144ba <__gethex+0x28e>
 80144d2:	e7e0      	b.n	8014496 <__gethex+0x26a>
 80144d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1dd      	bne.n	8014496 <__gethex+0x26a>
 80144da:	e7ee      	b.n	80144ba <__gethex+0x28e>
 80144dc:	08017110 	.word	0x08017110
 80144e0:	08017126 	.word	0x08017126
 80144e4:	08017137 	.word	0x08017137
 80144e8:	1e6f      	subs	r7, r5, #1
 80144ea:	f1b9 0f00 	cmp.w	r9, #0
 80144ee:	d130      	bne.n	8014552 <__gethex+0x326>
 80144f0:	b127      	cbz	r7, 80144fc <__gethex+0x2d0>
 80144f2:	4639      	mov	r1, r7
 80144f4:	4620      	mov	r0, r4
 80144f6:	f000 fe06 	bl	8015106 <__any_on>
 80144fa:	4681      	mov	r9, r0
 80144fc:	117a      	asrs	r2, r7, #5
 80144fe:	2301      	movs	r3, #1
 8014500:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014504:	f007 071f 	and.w	r7, r7, #31
 8014508:	40bb      	lsls	r3, r7
 801450a:	4213      	tst	r3, r2
 801450c:	4629      	mov	r1, r5
 801450e:	4620      	mov	r0, r4
 8014510:	bf18      	it	ne
 8014512:	f049 0902 	orrne.w	r9, r9, #2
 8014516:	f7ff fe21 	bl	801415c <rshift>
 801451a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801451e:	1b76      	subs	r6, r6, r5
 8014520:	2502      	movs	r5, #2
 8014522:	f1b9 0f00 	cmp.w	r9, #0
 8014526:	d047      	beq.n	80145b8 <__gethex+0x38c>
 8014528:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801452c:	2b02      	cmp	r3, #2
 801452e:	d015      	beq.n	801455c <__gethex+0x330>
 8014530:	2b03      	cmp	r3, #3
 8014532:	d017      	beq.n	8014564 <__gethex+0x338>
 8014534:	2b01      	cmp	r3, #1
 8014536:	d109      	bne.n	801454c <__gethex+0x320>
 8014538:	f019 0f02 	tst.w	r9, #2
 801453c:	d006      	beq.n	801454c <__gethex+0x320>
 801453e:	f8da 3000 	ldr.w	r3, [sl]
 8014542:	ea49 0903 	orr.w	r9, r9, r3
 8014546:	f019 0f01 	tst.w	r9, #1
 801454a:	d10e      	bne.n	801456a <__gethex+0x33e>
 801454c:	f045 0510 	orr.w	r5, r5, #16
 8014550:	e032      	b.n	80145b8 <__gethex+0x38c>
 8014552:	f04f 0901 	mov.w	r9, #1
 8014556:	e7d1      	b.n	80144fc <__gethex+0x2d0>
 8014558:	2501      	movs	r5, #1
 801455a:	e7e2      	b.n	8014522 <__gethex+0x2f6>
 801455c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801455e:	f1c3 0301 	rsb	r3, r3, #1
 8014562:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014566:	2b00      	cmp	r3, #0
 8014568:	d0f0      	beq.n	801454c <__gethex+0x320>
 801456a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801456e:	f104 0314 	add.w	r3, r4, #20
 8014572:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014576:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801457a:	f04f 0c00 	mov.w	ip, #0
 801457e:	4618      	mov	r0, r3
 8014580:	f853 2b04 	ldr.w	r2, [r3], #4
 8014584:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014588:	d01b      	beq.n	80145c2 <__gethex+0x396>
 801458a:	3201      	adds	r2, #1
 801458c:	6002      	str	r2, [r0, #0]
 801458e:	2d02      	cmp	r5, #2
 8014590:	f104 0314 	add.w	r3, r4, #20
 8014594:	d13c      	bne.n	8014610 <__gethex+0x3e4>
 8014596:	f8d8 2000 	ldr.w	r2, [r8]
 801459a:	3a01      	subs	r2, #1
 801459c:	42b2      	cmp	r2, r6
 801459e:	d109      	bne.n	80145b4 <__gethex+0x388>
 80145a0:	1171      	asrs	r1, r6, #5
 80145a2:	2201      	movs	r2, #1
 80145a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145a8:	f006 061f 	and.w	r6, r6, #31
 80145ac:	fa02 f606 	lsl.w	r6, r2, r6
 80145b0:	421e      	tst	r6, r3
 80145b2:	d13a      	bne.n	801462a <__gethex+0x3fe>
 80145b4:	f045 0520 	orr.w	r5, r5, #32
 80145b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145ba:	601c      	str	r4, [r3, #0]
 80145bc:	9b02      	ldr	r3, [sp, #8]
 80145be:	601f      	str	r7, [r3, #0]
 80145c0:	e6b0      	b.n	8014324 <__gethex+0xf8>
 80145c2:	4299      	cmp	r1, r3
 80145c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80145c8:	d8d9      	bhi.n	801457e <__gethex+0x352>
 80145ca:	68a3      	ldr	r3, [r4, #8]
 80145cc:	459b      	cmp	fp, r3
 80145ce:	db17      	blt.n	8014600 <__gethex+0x3d4>
 80145d0:	6861      	ldr	r1, [r4, #4]
 80145d2:	9801      	ldr	r0, [sp, #4]
 80145d4:	3101      	adds	r1, #1
 80145d6:	f000 f90d 	bl	80147f4 <_Balloc>
 80145da:	4681      	mov	r9, r0
 80145dc:	b918      	cbnz	r0, 80145e6 <__gethex+0x3ba>
 80145de:	4b1a      	ldr	r3, [pc, #104]	@ (8014648 <__gethex+0x41c>)
 80145e0:	4602      	mov	r2, r0
 80145e2:	2184      	movs	r1, #132	@ 0x84
 80145e4:	e6c5      	b.n	8014372 <__gethex+0x146>
 80145e6:	6922      	ldr	r2, [r4, #16]
 80145e8:	3202      	adds	r2, #2
 80145ea:	f104 010c 	add.w	r1, r4, #12
 80145ee:	0092      	lsls	r2, r2, #2
 80145f0:	300c      	adds	r0, #12
 80145f2:	f7ff fd52 	bl	801409a <memcpy>
 80145f6:	4621      	mov	r1, r4
 80145f8:	9801      	ldr	r0, [sp, #4]
 80145fa:	f000 f93b 	bl	8014874 <_Bfree>
 80145fe:	464c      	mov	r4, r9
 8014600:	6923      	ldr	r3, [r4, #16]
 8014602:	1c5a      	adds	r2, r3, #1
 8014604:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014608:	6122      	str	r2, [r4, #16]
 801460a:	2201      	movs	r2, #1
 801460c:	615a      	str	r2, [r3, #20]
 801460e:	e7be      	b.n	801458e <__gethex+0x362>
 8014610:	6922      	ldr	r2, [r4, #16]
 8014612:	455a      	cmp	r2, fp
 8014614:	dd0b      	ble.n	801462e <__gethex+0x402>
 8014616:	2101      	movs	r1, #1
 8014618:	4620      	mov	r0, r4
 801461a:	f7ff fd9f 	bl	801415c <rshift>
 801461e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014622:	3701      	adds	r7, #1
 8014624:	42bb      	cmp	r3, r7
 8014626:	f6ff aee0 	blt.w	80143ea <__gethex+0x1be>
 801462a:	2501      	movs	r5, #1
 801462c:	e7c2      	b.n	80145b4 <__gethex+0x388>
 801462e:	f016 061f 	ands.w	r6, r6, #31
 8014632:	d0fa      	beq.n	801462a <__gethex+0x3fe>
 8014634:	4453      	add	r3, sl
 8014636:	f1c6 0620 	rsb	r6, r6, #32
 801463a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801463e:	f000 f9cb 	bl	80149d8 <__hi0bits>
 8014642:	42b0      	cmp	r0, r6
 8014644:	dbe7      	blt.n	8014616 <__gethex+0x3ea>
 8014646:	e7f0      	b.n	801462a <__gethex+0x3fe>
 8014648:	08017126 	.word	0x08017126

0801464c <L_shift>:
 801464c:	f1c2 0208 	rsb	r2, r2, #8
 8014650:	0092      	lsls	r2, r2, #2
 8014652:	b570      	push	{r4, r5, r6, lr}
 8014654:	f1c2 0620 	rsb	r6, r2, #32
 8014658:	6843      	ldr	r3, [r0, #4]
 801465a:	6804      	ldr	r4, [r0, #0]
 801465c:	fa03 f506 	lsl.w	r5, r3, r6
 8014660:	432c      	orrs	r4, r5
 8014662:	40d3      	lsrs	r3, r2
 8014664:	6004      	str	r4, [r0, #0]
 8014666:	f840 3f04 	str.w	r3, [r0, #4]!
 801466a:	4288      	cmp	r0, r1
 801466c:	d3f4      	bcc.n	8014658 <L_shift+0xc>
 801466e:	bd70      	pop	{r4, r5, r6, pc}

08014670 <__match>:
 8014670:	b530      	push	{r4, r5, lr}
 8014672:	6803      	ldr	r3, [r0, #0]
 8014674:	3301      	adds	r3, #1
 8014676:	f811 4b01 	ldrb.w	r4, [r1], #1
 801467a:	b914      	cbnz	r4, 8014682 <__match+0x12>
 801467c:	6003      	str	r3, [r0, #0]
 801467e:	2001      	movs	r0, #1
 8014680:	bd30      	pop	{r4, r5, pc}
 8014682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014686:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801468a:	2d19      	cmp	r5, #25
 801468c:	bf98      	it	ls
 801468e:	3220      	addls	r2, #32
 8014690:	42a2      	cmp	r2, r4
 8014692:	d0f0      	beq.n	8014676 <__match+0x6>
 8014694:	2000      	movs	r0, #0
 8014696:	e7f3      	b.n	8014680 <__match+0x10>

08014698 <__hexnan>:
 8014698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801469c:	680b      	ldr	r3, [r1, #0]
 801469e:	6801      	ldr	r1, [r0, #0]
 80146a0:	115e      	asrs	r6, r3, #5
 80146a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80146a6:	f013 031f 	ands.w	r3, r3, #31
 80146aa:	b087      	sub	sp, #28
 80146ac:	bf18      	it	ne
 80146ae:	3604      	addne	r6, #4
 80146b0:	2500      	movs	r5, #0
 80146b2:	1f37      	subs	r7, r6, #4
 80146b4:	4682      	mov	sl, r0
 80146b6:	4690      	mov	r8, r2
 80146b8:	9301      	str	r3, [sp, #4]
 80146ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80146be:	46b9      	mov	r9, r7
 80146c0:	463c      	mov	r4, r7
 80146c2:	9502      	str	r5, [sp, #8]
 80146c4:	46ab      	mov	fp, r5
 80146c6:	784a      	ldrb	r2, [r1, #1]
 80146c8:	1c4b      	adds	r3, r1, #1
 80146ca:	9303      	str	r3, [sp, #12]
 80146cc:	b342      	cbz	r2, 8014720 <__hexnan+0x88>
 80146ce:	4610      	mov	r0, r2
 80146d0:	9105      	str	r1, [sp, #20]
 80146d2:	9204      	str	r2, [sp, #16]
 80146d4:	f7ff fd94 	bl	8014200 <__hexdig_fun>
 80146d8:	2800      	cmp	r0, #0
 80146da:	d151      	bne.n	8014780 <__hexnan+0xe8>
 80146dc:	9a04      	ldr	r2, [sp, #16]
 80146de:	9905      	ldr	r1, [sp, #20]
 80146e0:	2a20      	cmp	r2, #32
 80146e2:	d818      	bhi.n	8014716 <__hexnan+0x7e>
 80146e4:	9b02      	ldr	r3, [sp, #8]
 80146e6:	459b      	cmp	fp, r3
 80146e8:	dd13      	ble.n	8014712 <__hexnan+0x7a>
 80146ea:	454c      	cmp	r4, r9
 80146ec:	d206      	bcs.n	80146fc <__hexnan+0x64>
 80146ee:	2d07      	cmp	r5, #7
 80146f0:	dc04      	bgt.n	80146fc <__hexnan+0x64>
 80146f2:	462a      	mov	r2, r5
 80146f4:	4649      	mov	r1, r9
 80146f6:	4620      	mov	r0, r4
 80146f8:	f7ff ffa8 	bl	801464c <L_shift>
 80146fc:	4544      	cmp	r4, r8
 80146fe:	d952      	bls.n	80147a6 <__hexnan+0x10e>
 8014700:	2300      	movs	r3, #0
 8014702:	f1a4 0904 	sub.w	r9, r4, #4
 8014706:	f844 3c04 	str.w	r3, [r4, #-4]
 801470a:	f8cd b008 	str.w	fp, [sp, #8]
 801470e:	464c      	mov	r4, r9
 8014710:	461d      	mov	r5, r3
 8014712:	9903      	ldr	r1, [sp, #12]
 8014714:	e7d7      	b.n	80146c6 <__hexnan+0x2e>
 8014716:	2a29      	cmp	r2, #41	@ 0x29
 8014718:	d157      	bne.n	80147ca <__hexnan+0x132>
 801471a:	3102      	adds	r1, #2
 801471c:	f8ca 1000 	str.w	r1, [sl]
 8014720:	f1bb 0f00 	cmp.w	fp, #0
 8014724:	d051      	beq.n	80147ca <__hexnan+0x132>
 8014726:	454c      	cmp	r4, r9
 8014728:	d206      	bcs.n	8014738 <__hexnan+0xa0>
 801472a:	2d07      	cmp	r5, #7
 801472c:	dc04      	bgt.n	8014738 <__hexnan+0xa0>
 801472e:	462a      	mov	r2, r5
 8014730:	4649      	mov	r1, r9
 8014732:	4620      	mov	r0, r4
 8014734:	f7ff ff8a 	bl	801464c <L_shift>
 8014738:	4544      	cmp	r4, r8
 801473a:	d936      	bls.n	80147aa <__hexnan+0x112>
 801473c:	f1a8 0204 	sub.w	r2, r8, #4
 8014740:	4623      	mov	r3, r4
 8014742:	f853 1b04 	ldr.w	r1, [r3], #4
 8014746:	f842 1f04 	str.w	r1, [r2, #4]!
 801474a:	429f      	cmp	r7, r3
 801474c:	d2f9      	bcs.n	8014742 <__hexnan+0xaa>
 801474e:	1b3b      	subs	r3, r7, r4
 8014750:	f023 0303 	bic.w	r3, r3, #3
 8014754:	3304      	adds	r3, #4
 8014756:	3401      	adds	r4, #1
 8014758:	3e03      	subs	r6, #3
 801475a:	42b4      	cmp	r4, r6
 801475c:	bf88      	it	hi
 801475e:	2304      	movhi	r3, #4
 8014760:	4443      	add	r3, r8
 8014762:	2200      	movs	r2, #0
 8014764:	f843 2b04 	str.w	r2, [r3], #4
 8014768:	429f      	cmp	r7, r3
 801476a:	d2fb      	bcs.n	8014764 <__hexnan+0xcc>
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	b91b      	cbnz	r3, 8014778 <__hexnan+0xe0>
 8014770:	4547      	cmp	r7, r8
 8014772:	d128      	bne.n	80147c6 <__hexnan+0x12e>
 8014774:	2301      	movs	r3, #1
 8014776:	603b      	str	r3, [r7, #0]
 8014778:	2005      	movs	r0, #5
 801477a:	b007      	add	sp, #28
 801477c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014780:	3501      	adds	r5, #1
 8014782:	2d08      	cmp	r5, #8
 8014784:	f10b 0b01 	add.w	fp, fp, #1
 8014788:	dd06      	ble.n	8014798 <__hexnan+0x100>
 801478a:	4544      	cmp	r4, r8
 801478c:	d9c1      	bls.n	8014712 <__hexnan+0x7a>
 801478e:	2300      	movs	r3, #0
 8014790:	f844 3c04 	str.w	r3, [r4, #-4]
 8014794:	2501      	movs	r5, #1
 8014796:	3c04      	subs	r4, #4
 8014798:	6822      	ldr	r2, [r4, #0]
 801479a:	f000 000f 	and.w	r0, r0, #15
 801479e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80147a2:	6020      	str	r0, [r4, #0]
 80147a4:	e7b5      	b.n	8014712 <__hexnan+0x7a>
 80147a6:	2508      	movs	r5, #8
 80147a8:	e7b3      	b.n	8014712 <__hexnan+0x7a>
 80147aa:	9b01      	ldr	r3, [sp, #4]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d0dd      	beq.n	801476c <__hexnan+0xd4>
 80147b0:	f1c3 0320 	rsb	r3, r3, #32
 80147b4:	f04f 32ff 	mov.w	r2, #4294967295
 80147b8:	40da      	lsrs	r2, r3
 80147ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80147be:	4013      	ands	r3, r2
 80147c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80147c4:	e7d2      	b.n	801476c <__hexnan+0xd4>
 80147c6:	3f04      	subs	r7, #4
 80147c8:	e7d0      	b.n	801476c <__hexnan+0xd4>
 80147ca:	2004      	movs	r0, #4
 80147cc:	e7d5      	b.n	801477a <__hexnan+0xe2>

080147ce <__ascii_mbtowc>:
 80147ce:	b082      	sub	sp, #8
 80147d0:	b901      	cbnz	r1, 80147d4 <__ascii_mbtowc+0x6>
 80147d2:	a901      	add	r1, sp, #4
 80147d4:	b142      	cbz	r2, 80147e8 <__ascii_mbtowc+0x1a>
 80147d6:	b14b      	cbz	r3, 80147ec <__ascii_mbtowc+0x1e>
 80147d8:	7813      	ldrb	r3, [r2, #0]
 80147da:	600b      	str	r3, [r1, #0]
 80147dc:	7812      	ldrb	r2, [r2, #0]
 80147de:	1e10      	subs	r0, r2, #0
 80147e0:	bf18      	it	ne
 80147e2:	2001      	movne	r0, #1
 80147e4:	b002      	add	sp, #8
 80147e6:	4770      	bx	lr
 80147e8:	4610      	mov	r0, r2
 80147ea:	e7fb      	b.n	80147e4 <__ascii_mbtowc+0x16>
 80147ec:	f06f 0001 	mvn.w	r0, #1
 80147f0:	e7f8      	b.n	80147e4 <__ascii_mbtowc+0x16>
	...

080147f4 <_Balloc>:
 80147f4:	b570      	push	{r4, r5, r6, lr}
 80147f6:	69c6      	ldr	r6, [r0, #28]
 80147f8:	4604      	mov	r4, r0
 80147fa:	460d      	mov	r5, r1
 80147fc:	b976      	cbnz	r6, 801481c <_Balloc+0x28>
 80147fe:	2010      	movs	r0, #16
 8014800:	f7fe f9e8 	bl	8012bd4 <malloc>
 8014804:	4602      	mov	r2, r0
 8014806:	61e0      	str	r0, [r4, #28]
 8014808:	b920      	cbnz	r0, 8014814 <_Balloc+0x20>
 801480a:	4b18      	ldr	r3, [pc, #96]	@ (801486c <_Balloc+0x78>)
 801480c:	4818      	ldr	r0, [pc, #96]	@ (8014870 <_Balloc+0x7c>)
 801480e:	216b      	movs	r1, #107	@ 0x6b
 8014810:	f001 fdb0 	bl	8016374 <__assert_func>
 8014814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014818:	6006      	str	r6, [r0, #0]
 801481a:	60c6      	str	r6, [r0, #12]
 801481c:	69e6      	ldr	r6, [r4, #28]
 801481e:	68f3      	ldr	r3, [r6, #12]
 8014820:	b183      	cbz	r3, 8014844 <_Balloc+0x50>
 8014822:	69e3      	ldr	r3, [r4, #28]
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801482a:	b9b8      	cbnz	r0, 801485c <_Balloc+0x68>
 801482c:	2101      	movs	r1, #1
 801482e:	fa01 f605 	lsl.w	r6, r1, r5
 8014832:	1d72      	adds	r2, r6, #5
 8014834:	0092      	lsls	r2, r2, #2
 8014836:	4620      	mov	r0, r4
 8014838:	f001 fdba 	bl	80163b0 <_calloc_r>
 801483c:	b160      	cbz	r0, 8014858 <_Balloc+0x64>
 801483e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014842:	e00e      	b.n	8014862 <_Balloc+0x6e>
 8014844:	2221      	movs	r2, #33	@ 0x21
 8014846:	2104      	movs	r1, #4
 8014848:	4620      	mov	r0, r4
 801484a:	f001 fdb1 	bl	80163b0 <_calloc_r>
 801484e:	69e3      	ldr	r3, [r4, #28]
 8014850:	60f0      	str	r0, [r6, #12]
 8014852:	68db      	ldr	r3, [r3, #12]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d1e4      	bne.n	8014822 <_Balloc+0x2e>
 8014858:	2000      	movs	r0, #0
 801485a:	bd70      	pop	{r4, r5, r6, pc}
 801485c:	6802      	ldr	r2, [r0, #0]
 801485e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014862:	2300      	movs	r3, #0
 8014864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014868:	e7f7      	b.n	801485a <_Balloc+0x66>
 801486a:	bf00      	nop
 801486c:	08017197 	.word	0x08017197
 8014870:	080171ae 	.word	0x080171ae

08014874 <_Bfree>:
 8014874:	b570      	push	{r4, r5, r6, lr}
 8014876:	69c6      	ldr	r6, [r0, #28]
 8014878:	4605      	mov	r5, r0
 801487a:	460c      	mov	r4, r1
 801487c:	b976      	cbnz	r6, 801489c <_Bfree+0x28>
 801487e:	2010      	movs	r0, #16
 8014880:	f7fe f9a8 	bl	8012bd4 <malloc>
 8014884:	4602      	mov	r2, r0
 8014886:	61e8      	str	r0, [r5, #28]
 8014888:	b920      	cbnz	r0, 8014894 <_Bfree+0x20>
 801488a:	4b09      	ldr	r3, [pc, #36]	@ (80148b0 <_Bfree+0x3c>)
 801488c:	4809      	ldr	r0, [pc, #36]	@ (80148b4 <_Bfree+0x40>)
 801488e:	218f      	movs	r1, #143	@ 0x8f
 8014890:	f001 fd70 	bl	8016374 <__assert_func>
 8014894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014898:	6006      	str	r6, [r0, #0]
 801489a:	60c6      	str	r6, [r0, #12]
 801489c:	b13c      	cbz	r4, 80148ae <_Bfree+0x3a>
 801489e:	69eb      	ldr	r3, [r5, #28]
 80148a0:	6862      	ldr	r2, [r4, #4]
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80148a8:	6021      	str	r1, [r4, #0]
 80148aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80148ae:	bd70      	pop	{r4, r5, r6, pc}
 80148b0:	08017197 	.word	0x08017197
 80148b4:	080171ae 	.word	0x080171ae

080148b8 <__multadd>:
 80148b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148bc:	690d      	ldr	r5, [r1, #16]
 80148be:	4607      	mov	r7, r0
 80148c0:	460c      	mov	r4, r1
 80148c2:	461e      	mov	r6, r3
 80148c4:	f101 0c14 	add.w	ip, r1, #20
 80148c8:	2000      	movs	r0, #0
 80148ca:	f8dc 3000 	ldr.w	r3, [ip]
 80148ce:	b299      	uxth	r1, r3
 80148d0:	fb02 6101 	mla	r1, r2, r1, r6
 80148d4:	0c1e      	lsrs	r6, r3, #16
 80148d6:	0c0b      	lsrs	r3, r1, #16
 80148d8:	fb02 3306 	mla	r3, r2, r6, r3
 80148dc:	b289      	uxth	r1, r1
 80148de:	3001      	adds	r0, #1
 80148e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80148e4:	4285      	cmp	r5, r0
 80148e6:	f84c 1b04 	str.w	r1, [ip], #4
 80148ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80148ee:	dcec      	bgt.n	80148ca <__multadd+0x12>
 80148f0:	b30e      	cbz	r6, 8014936 <__multadd+0x7e>
 80148f2:	68a3      	ldr	r3, [r4, #8]
 80148f4:	42ab      	cmp	r3, r5
 80148f6:	dc19      	bgt.n	801492c <__multadd+0x74>
 80148f8:	6861      	ldr	r1, [r4, #4]
 80148fa:	4638      	mov	r0, r7
 80148fc:	3101      	adds	r1, #1
 80148fe:	f7ff ff79 	bl	80147f4 <_Balloc>
 8014902:	4680      	mov	r8, r0
 8014904:	b928      	cbnz	r0, 8014912 <__multadd+0x5a>
 8014906:	4602      	mov	r2, r0
 8014908:	4b0c      	ldr	r3, [pc, #48]	@ (801493c <__multadd+0x84>)
 801490a:	480d      	ldr	r0, [pc, #52]	@ (8014940 <__multadd+0x88>)
 801490c:	21ba      	movs	r1, #186	@ 0xba
 801490e:	f001 fd31 	bl	8016374 <__assert_func>
 8014912:	6922      	ldr	r2, [r4, #16]
 8014914:	3202      	adds	r2, #2
 8014916:	f104 010c 	add.w	r1, r4, #12
 801491a:	0092      	lsls	r2, r2, #2
 801491c:	300c      	adds	r0, #12
 801491e:	f7ff fbbc 	bl	801409a <memcpy>
 8014922:	4621      	mov	r1, r4
 8014924:	4638      	mov	r0, r7
 8014926:	f7ff ffa5 	bl	8014874 <_Bfree>
 801492a:	4644      	mov	r4, r8
 801492c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014930:	3501      	adds	r5, #1
 8014932:	615e      	str	r6, [r3, #20]
 8014934:	6125      	str	r5, [r4, #16]
 8014936:	4620      	mov	r0, r4
 8014938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801493c:	08017126 	.word	0x08017126
 8014940:	080171ae 	.word	0x080171ae

08014944 <__s2b>:
 8014944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014948:	460c      	mov	r4, r1
 801494a:	4615      	mov	r5, r2
 801494c:	461f      	mov	r7, r3
 801494e:	2209      	movs	r2, #9
 8014950:	3308      	adds	r3, #8
 8014952:	4606      	mov	r6, r0
 8014954:	fb93 f3f2 	sdiv	r3, r3, r2
 8014958:	2100      	movs	r1, #0
 801495a:	2201      	movs	r2, #1
 801495c:	429a      	cmp	r2, r3
 801495e:	db09      	blt.n	8014974 <__s2b+0x30>
 8014960:	4630      	mov	r0, r6
 8014962:	f7ff ff47 	bl	80147f4 <_Balloc>
 8014966:	b940      	cbnz	r0, 801497a <__s2b+0x36>
 8014968:	4602      	mov	r2, r0
 801496a:	4b19      	ldr	r3, [pc, #100]	@ (80149d0 <__s2b+0x8c>)
 801496c:	4819      	ldr	r0, [pc, #100]	@ (80149d4 <__s2b+0x90>)
 801496e:	21d3      	movs	r1, #211	@ 0xd3
 8014970:	f001 fd00 	bl	8016374 <__assert_func>
 8014974:	0052      	lsls	r2, r2, #1
 8014976:	3101      	adds	r1, #1
 8014978:	e7f0      	b.n	801495c <__s2b+0x18>
 801497a:	9b08      	ldr	r3, [sp, #32]
 801497c:	6143      	str	r3, [r0, #20]
 801497e:	2d09      	cmp	r5, #9
 8014980:	f04f 0301 	mov.w	r3, #1
 8014984:	6103      	str	r3, [r0, #16]
 8014986:	dd16      	ble.n	80149b6 <__s2b+0x72>
 8014988:	f104 0909 	add.w	r9, r4, #9
 801498c:	46c8      	mov	r8, r9
 801498e:	442c      	add	r4, r5
 8014990:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014994:	4601      	mov	r1, r0
 8014996:	3b30      	subs	r3, #48	@ 0x30
 8014998:	220a      	movs	r2, #10
 801499a:	4630      	mov	r0, r6
 801499c:	f7ff ff8c 	bl	80148b8 <__multadd>
 80149a0:	45a0      	cmp	r8, r4
 80149a2:	d1f5      	bne.n	8014990 <__s2b+0x4c>
 80149a4:	f1a5 0408 	sub.w	r4, r5, #8
 80149a8:	444c      	add	r4, r9
 80149aa:	1b2d      	subs	r5, r5, r4
 80149ac:	1963      	adds	r3, r4, r5
 80149ae:	42bb      	cmp	r3, r7
 80149b0:	db04      	blt.n	80149bc <__s2b+0x78>
 80149b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149b6:	340a      	adds	r4, #10
 80149b8:	2509      	movs	r5, #9
 80149ba:	e7f6      	b.n	80149aa <__s2b+0x66>
 80149bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80149c0:	4601      	mov	r1, r0
 80149c2:	3b30      	subs	r3, #48	@ 0x30
 80149c4:	220a      	movs	r2, #10
 80149c6:	4630      	mov	r0, r6
 80149c8:	f7ff ff76 	bl	80148b8 <__multadd>
 80149cc:	e7ee      	b.n	80149ac <__s2b+0x68>
 80149ce:	bf00      	nop
 80149d0:	08017126 	.word	0x08017126
 80149d4:	080171ae 	.word	0x080171ae

080149d8 <__hi0bits>:
 80149d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80149dc:	4603      	mov	r3, r0
 80149de:	bf36      	itet	cc
 80149e0:	0403      	lslcc	r3, r0, #16
 80149e2:	2000      	movcs	r0, #0
 80149e4:	2010      	movcc	r0, #16
 80149e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80149ea:	bf3c      	itt	cc
 80149ec:	021b      	lslcc	r3, r3, #8
 80149ee:	3008      	addcc	r0, #8
 80149f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80149f4:	bf3c      	itt	cc
 80149f6:	011b      	lslcc	r3, r3, #4
 80149f8:	3004      	addcc	r0, #4
 80149fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80149fe:	bf3c      	itt	cc
 8014a00:	009b      	lslcc	r3, r3, #2
 8014a02:	3002      	addcc	r0, #2
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	db05      	blt.n	8014a14 <__hi0bits+0x3c>
 8014a08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014a0c:	f100 0001 	add.w	r0, r0, #1
 8014a10:	bf08      	it	eq
 8014a12:	2020      	moveq	r0, #32
 8014a14:	4770      	bx	lr

08014a16 <__lo0bits>:
 8014a16:	6803      	ldr	r3, [r0, #0]
 8014a18:	4602      	mov	r2, r0
 8014a1a:	f013 0007 	ands.w	r0, r3, #7
 8014a1e:	d00b      	beq.n	8014a38 <__lo0bits+0x22>
 8014a20:	07d9      	lsls	r1, r3, #31
 8014a22:	d421      	bmi.n	8014a68 <__lo0bits+0x52>
 8014a24:	0798      	lsls	r0, r3, #30
 8014a26:	bf49      	itett	mi
 8014a28:	085b      	lsrmi	r3, r3, #1
 8014a2a:	089b      	lsrpl	r3, r3, #2
 8014a2c:	2001      	movmi	r0, #1
 8014a2e:	6013      	strmi	r3, [r2, #0]
 8014a30:	bf5c      	itt	pl
 8014a32:	6013      	strpl	r3, [r2, #0]
 8014a34:	2002      	movpl	r0, #2
 8014a36:	4770      	bx	lr
 8014a38:	b299      	uxth	r1, r3
 8014a3a:	b909      	cbnz	r1, 8014a40 <__lo0bits+0x2a>
 8014a3c:	0c1b      	lsrs	r3, r3, #16
 8014a3e:	2010      	movs	r0, #16
 8014a40:	b2d9      	uxtb	r1, r3
 8014a42:	b909      	cbnz	r1, 8014a48 <__lo0bits+0x32>
 8014a44:	3008      	adds	r0, #8
 8014a46:	0a1b      	lsrs	r3, r3, #8
 8014a48:	0719      	lsls	r1, r3, #28
 8014a4a:	bf04      	itt	eq
 8014a4c:	091b      	lsreq	r3, r3, #4
 8014a4e:	3004      	addeq	r0, #4
 8014a50:	0799      	lsls	r1, r3, #30
 8014a52:	bf04      	itt	eq
 8014a54:	089b      	lsreq	r3, r3, #2
 8014a56:	3002      	addeq	r0, #2
 8014a58:	07d9      	lsls	r1, r3, #31
 8014a5a:	d403      	bmi.n	8014a64 <__lo0bits+0x4e>
 8014a5c:	085b      	lsrs	r3, r3, #1
 8014a5e:	f100 0001 	add.w	r0, r0, #1
 8014a62:	d003      	beq.n	8014a6c <__lo0bits+0x56>
 8014a64:	6013      	str	r3, [r2, #0]
 8014a66:	4770      	bx	lr
 8014a68:	2000      	movs	r0, #0
 8014a6a:	4770      	bx	lr
 8014a6c:	2020      	movs	r0, #32
 8014a6e:	4770      	bx	lr

08014a70 <__i2b>:
 8014a70:	b510      	push	{r4, lr}
 8014a72:	460c      	mov	r4, r1
 8014a74:	2101      	movs	r1, #1
 8014a76:	f7ff febd 	bl	80147f4 <_Balloc>
 8014a7a:	4602      	mov	r2, r0
 8014a7c:	b928      	cbnz	r0, 8014a8a <__i2b+0x1a>
 8014a7e:	4b05      	ldr	r3, [pc, #20]	@ (8014a94 <__i2b+0x24>)
 8014a80:	4805      	ldr	r0, [pc, #20]	@ (8014a98 <__i2b+0x28>)
 8014a82:	f240 1145 	movw	r1, #325	@ 0x145
 8014a86:	f001 fc75 	bl	8016374 <__assert_func>
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	6144      	str	r4, [r0, #20]
 8014a8e:	6103      	str	r3, [r0, #16]
 8014a90:	bd10      	pop	{r4, pc}
 8014a92:	bf00      	nop
 8014a94:	08017126 	.word	0x08017126
 8014a98:	080171ae 	.word	0x080171ae

08014a9c <__multiply>:
 8014a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa0:	4617      	mov	r7, r2
 8014aa2:	690a      	ldr	r2, [r1, #16]
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	bfa8      	it	ge
 8014aaa:	463b      	movge	r3, r7
 8014aac:	4689      	mov	r9, r1
 8014aae:	bfa4      	itt	ge
 8014ab0:	460f      	movge	r7, r1
 8014ab2:	4699      	movge	r9, r3
 8014ab4:	693d      	ldr	r5, [r7, #16]
 8014ab6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	6879      	ldr	r1, [r7, #4]
 8014abe:	eb05 060a 	add.w	r6, r5, sl
 8014ac2:	42b3      	cmp	r3, r6
 8014ac4:	b085      	sub	sp, #20
 8014ac6:	bfb8      	it	lt
 8014ac8:	3101      	addlt	r1, #1
 8014aca:	f7ff fe93 	bl	80147f4 <_Balloc>
 8014ace:	b930      	cbnz	r0, 8014ade <__multiply+0x42>
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	4b41      	ldr	r3, [pc, #260]	@ (8014bd8 <__multiply+0x13c>)
 8014ad4:	4841      	ldr	r0, [pc, #260]	@ (8014bdc <__multiply+0x140>)
 8014ad6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014ada:	f001 fc4b 	bl	8016374 <__assert_func>
 8014ade:	f100 0414 	add.w	r4, r0, #20
 8014ae2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014ae6:	4623      	mov	r3, r4
 8014ae8:	2200      	movs	r2, #0
 8014aea:	4573      	cmp	r3, lr
 8014aec:	d320      	bcc.n	8014b30 <__multiply+0x94>
 8014aee:	f107 0814 	add.w	r8, r7, #20
 8014af2:	f109 0114 	add.w	r1, r9, #20
 8014af6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014afa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014afe:	9302      	str	r3, [sp, #8]
 8014b00:	1beb      	subs	r3, r5, r7
 8014b02:	3b15      	subs	r3, #21
 8014b04:	f023 0303 	bic.w	r3, r3, #3
 8014b08:	3304      	adds	r3, #4
 8014b0a:	3715      	adds	r7, #21
 8014b0c:	42bd      	cmp	r5, r7
 8014b0e:	bf38      	it	cc
 8014b10:	2304      	movcc	r3, #4
 8014b12:	9301      	str	r3, [sp, #4]
 8014b14:	9b02      	ldr	r3, [sp, #8]
 8014b16:	9103      	str	r1, [sp, #12]
 8014b18:	428b      	cmp	r3, r1
 8014b1a:	d80c      	bhi.n	8014b36 <__multiply+0x9a>
 8014b1c:	2e00      	cmp	r6, #0
 8014b1e:	dd03      	ble.n	8014b28 <__multiply+0x8c>
 8014b20:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d055      	beq.n	8014bd4 <__multiply+0x138>
 8014b28:	6106      	str	r6, [r0, #16]
 8014b2a:	b005      	add	sp, #20
 8014b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b30:	f843 2b04 	str.w	r2, [r3], #4
 8014b34:	e7d9      	b.n	8014aea <__multiply+0x4e>
 8014b36:	f8b1 a000 	ldrh.w	sl, [r1]
 8014b3a:	f1ba 0f00 	cmp.w	sl, #0
 8014b3e:	d01f      	beq.n	8014b80 <__multiply+0xe4>
 8014b40:	46c4      	mov	ip, r8
 8014b42:	46a1      	mov	r9, r4
 8014b44:	2700      	movs	r7, #0
 8014b46:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014b4a:	f8d9 3000 	ldr.w	r3, [r9]
 8014b4e:	fa1f fb82 	uxth.w	fp, r2
 8014b52:	b29b      	uxth	r3, r3
 8014b54:	fb0a 330b 	mla	r3, sl, fp, r3
 8014b58:	443b      	add	r3, r7
 8014b5a:	f8d9 7000 	ldr.w	r7, [r9]
 8014b5e:	0c12      	lsrs	r2, r2, #16
 8014b60:	0c3f      	lsrs	r7, r7, #16
 8014b62:	fb0a 7202 	mla	r2, sl, r2, r7
 8014b66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014b6a:	b29b      	uxth	r3, r3
 8014b6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b70:	4565      	cmp	r5, ip
 8014b72:	f849 3b04 	str.w	r3, [r9], #4
 8014b76:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014b7a:	d8e4      	bhi.n	8014b46 <__multiply+0xaa>
 8014b7c:	9b01      	ldr	r3, [sp, #4]
 8014b7e:	50e7      	str	r7, [r4, r3]
 8014b80:	9b03      	ldr	r3, [sp, #12]
 8014b82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014b86:	3104      	adds	r1, #4
 8014b88:	f1b9 0f00 	cmp.w	r9, #0
 8014b8c:	d020      	beq.n	8014bd0 <__multiply+0x134>
 8014b8e:	6823      	ldr	r3, [r4, #0]
 8014b90:	4647      	mov	r7, r8
 8014b92:	46a4      	mov	ip, r4
 8014b94:	f04f 0a00 	mov.w	sl, #0
 8014b98:	f8b7 b000 	ldrh.w	fp, [r7]
 8014b9c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014ba0:	fb09 220b 	mla	r2, r9, fp, r2
 8014ba4:	4452      	add	r2, sl
 8014ba6:	b29b      	uxth	r3, r3
 8014ba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bac:	f84c 3b04 	str.w	r3, [ip], #4
 8014bb0:	f857 3b04 	ldr.w	r3, [r7], #4
 8014bb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bb8:	f8bc 3000 	ldrh.w	r3, [ip]
 8014bbc:	fb09 330a 	mla	r3, r9, sl, r3
 8014bc0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014bc4:	42bd      	cmp	r5, r7
 8014bc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bca:	d8e5      	bhi.n	8014b98 <__multiply+0xfc>
 8014bcc:	9a01      	ldr	r2, [sp, #4]
 8014bce:	50a3      	str	r3, [r4, r2]
 8014bd0:	3404      	adds	r4, #4
 8014bd2:	e79f      	b.n	8014b14 <__multiply+0x78>
 8014bd4:	3e01      	subs	r6, #1
 8014bd6:	e7a1      	b.n	8014b1c <__multiply+0x80>
 8014bd8:	08017126 	.word	0x08017126
 8014bdc:	080171ae 	.word	0x080171ae

08014be0 <__pow5mult>:
 8014be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014be4:	4615      	mov	r5, r2
 8014be6:	f012 0203 	ands.w	r2, r2, #3
 8014bea:	4607      	mov	r7, r0
 8014bec:	460e      	mov	r6, r1
 8014bee:	d007      	beq.n	8014c00 <__pow5mult+0x20>
 8014bf0:	4c25      	ldr	r4, [pc, #148]	@ (8014c88 <__pow5mult+0xa8>)
 8014bf2:	3a01      	subs	r2, #1
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014bfa:	f7ff fe5d 	bl	80148b8 <__multadd>
 8014bfe:	4606      	mov	r6, r0
 8014c00:	10ad      	asrs	r5, r5, #2
 8014c02:	d03d      	beq.n	8014c80 <__pow5mult+0xa0>
 8014c04:	69fc      	ldr	r4, [r7, #28]
 8014c06:	b97c      	cbnz	r4, 8014c28 <__pow5mult+0x48>
 8014c08:	2010      	movs	r0, #16
 8014c0a:	f7fd ffe3 	bl	8012bd4 <malloc>
 8014c0e:	4602      	mov	r2, r0
 8014c10:	61f8      	str	r0, [r7, #28]
 8014c12:	b928      	cbnz	r0, 8014c20 <__pow5mult+0x40>
 8014c14:	4b1d      	ldr	r3, [pc, #116]	@ (8014c8c <__pow5mult+0xac>)
 8014c16:	481e      	ldr	r0, [pc, #120]	@ (8014c90 <__pow5mult+0xb0>)
 8014c18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014c1c:	f001 fbaa 	bl	8016374 <__assert_func>
 8014c20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c24:	6004      	str	r4, [r0, #0]
 8014c26:	60c4      	str	r4, [r0, #12]
 8014c28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014c2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c30:	b94c      	cbnz	r4, 8014c46 <__pow5mult+0x66>
 8014c32:	f240 2171 	movw	r1, #625	@ 0x271
 8014c36:	4638      	mov	r0, r7
 8014c38:	f7ff ff1a 	bl	8014a70 <__i2b>
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c42:	4604      	mov	r4, r0
 8014c44:	6003      	str	r3, [r0, #0]
 8014c46:	f04f 0900 	mov.w	r9, #0
 8014c4a:	07eb      	lsls	r3, r5, #31
 8014c4c:	d50a      	bpl.n	8014c64 <__pow5mult+0x84>
 8014c4e:	4631      	mov	r1, r6
 8014c50:	4622      	mov	r2, r4
 8014c52:	4638      	mov	r0, r7
 8014c54:	f7ff ff22 	bl	8014a9c <__multiply>
 8014c58:	4631      	mov	r1, r6
 8014c5a:	4680      	mov	r8, r0
 8014c5c:	4638      	mov	r0, r7
 8014c5e:	f7ff fe09 	bl	8014874 <_Bfree>
 8014c62:	4646      	mov	r6, r8
 8014c64:	106d      	asrs	r5, r5, #1
 8014c66:	d00b      	beq.n	8014c80 <__pow5mult+0xa0>
 8014c68:	6820      	ldr	r0, [r4, #0]
 8014c6a:	b938      	cbnz	r0, 8014c7c <__pow5mult+0x9c>
 8014c6c:	4622      	mov	r2, r4
 8014c6e:	4621      	mov	r1, r4
 8014c70:	4638      	mov	r0, r7
 8014c72:	f7ff ff13 	bl	8014a9c <__multiply>
 8014c76:	6020      	str	r0, [r4, #0]
 8014c78:	f8c0 9000 	str.w	r9, [r0]
 8014c7c:	4604      	mov	r4, r0
 8014c7e:	e7e4      	b.n	8014c4a <__pow5mult+0x6a>
 8014c80:	4630      	mov	r0, r6
 8014c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c86:	bf00      	nop
 8014c88:	080173ec 	.word	0x080173ec
 8014c8c:	08017197 	.word	0x08017197
 8014c90:	080171ae 	.word	0x080171ae

08014c94 <__lshift>:
 8014c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c98:	460c      	mov	r4, r1
 8014c9a:	6849      	ldr	r1, [r1, #4]
 8014c9c:	6923      	ldr	r3, [r4, #16]
 8014c9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014ca2:	68a3      	ldr	r3, [r4, #8]
 8014ca4:	4607      	mov	r7, r0
 8014ca6:	4691      	mov	r9, r2
 8014ca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014cac:	f108 0601 	add.w	r6, r8, #1
 8014cb0:	42b3      	cmp	r3, r6
 8014cb2:	db0b      	blt.n	8014ccc <__lshift+0x38>
 8014cb4:	4638      	mov	r0, r7
 8014cb6:	f7ff fd9d 	bl	80147f4 <_Balloc>
 8014cba:	4605      	mov	r5, r0
 8014cbc:	b948      	cbnz	r0, 8014cd2 <__lshift+0x3e>
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	4b28      	ldr	r3, [pc, #160]	@ (8014d64 <__lshift+0xd0>)
 8014cc2:	4829      	ldr	r0, [pc, #164]	@ (8014d68 <__lshift+0xd4>)
 8014cc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014cc8:	f001 fb54 	bl	8016374 <__assert_func>
 8014ccc:	3101      	adds	r1, #1
 8014cce:	005b      	lsls	r3, r3, #1
 8014cd0:	e7ee      	b.n	8014cb0 <__lshift+0x1c>
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	f100 0114 	add.w	r1, r0, #20
 8014cd8:	f100 0210 	add.w	r2, r0, #16
 8014cdc:	4618      	mov	r0, r3
 8014cde:	4553      	cmp	r3, sl
 8014ce0:	db33      	blt.n	8014d4a <__lshift+0xb6>
 8014ce2:	6920      	ldr	r0, [r4, #16]
 8014ce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ce8:	f104 0314 	add.w	r3, r4, #20
 8014cec:	f019 091f 	ands.w	r9, r9, #31
 8014cf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014cf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014cf8:	d02b      	beq.n	8014d52 <__lshift+0xbe>
 8014cfa:	f1c9 0e20 	rsb	lr, r9, #32
 8014cfe:	468a      	mov	sl, r1
 8014d00:	2200      	movs	r2, #0
 8014d02:	6818      	ldr	r0, [r3, #0]
 8014d04:	fa00 f009 	lsl.w	r0, r0, r9
 8014d08:	4310      	orrs	r0, r2
 8014d0a:	f84a 0b04 	str.w	r0, [sl], #4
 8014d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d12:	459c      	cmp	ip, r3
 8014d14:	fa22 f20e 	lsr.w	r2, r2, lr
 8014d18:	d8f3      	bhi.n	8014d02 <__lshift+0x6e>
 8014d1a:	ebac 0304 	sub.w	r3, ip, r4
 8014d1e:	3b15      	subs	r3, #21
 8014d20:	f023 0303 	bic.w	r3, r3, #3
 8014d24:	3304      	adds	r3, #4
 8014d26:	f104 0015 	add.w	r0, r4, #21
 8014d2a:	4560      	cmp	r0, ip
 8014d2c:	bf88      	it	hi
 8014d2e:	2304      	movhi	r3, #4
 8014d30:	50ca      	str	r2, [r1, r3]
 8014d32:	b10a      	cbz	r2, 8014d38 <__lshift+0xa4>
 8014d34:	f108 0602 	add.w	r6, r8, #2
 8014d38:	3e01      	subs	r6, #1
 8014d3a:	4638      	mov	r0, r7
 8014d3c:	612e      	str	r6, [r5, #16]
 8014d3e:	4621      	mov	r1, r4
 8014d40:	f7ff fd98 	bl	8014874 <_Bfree>
 8014d44:	4628      	mov	r0, r5
 8014d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014d4e:	3301      	adds	r3, #1
 8014d50:	e7c5      	b.n	8014cde <__lshift+0x4a>
 8014d52:	3904      	subs	r1, #4
 8014d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d58:	f841 2f04 	str.w	r2, [r1, #4]!
 8014d5c:	459c      	cmp	ip, r3
 8014d5e:	d8f9      	bhi.n	8014d54 <__lshift+0xc0>
 8014d60:	e7ea      	b.n	8014d38 <__lshift+0xa4>
 8014d62:	bf00      	nop
 8014d64:	08017126 	.word	0x08017126
 8014d68:	080171ae 	.word	0x080171ae

08014d6c <__mcmp>:
 8014d6c:	690a      	ldr	r2, [r1, #16]
 8014d6e:	4603      	mov	r3, r0
 8014d70:	6900      	ldr	r0, [r0, #16]
 8014d72:	1a80      	subs	r0, r0, r2
 8014d74:	b530      	push	{r4, r5, lr}
 8014d76:	d10e      	bne.n	8014d96 <__mcmp+0x2a>
 8014d78:	3314      	adds	r3, #20
 8014d7a:	3114      	adds	r1, #20
 8014d7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014d80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014d84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014d88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014d8c:	4295      	cmp	r5, r2
 8014d8e:	d003      	beq.n	8014d98 <__mcmp+0x2c>
 8014d90:	d205      	bcs.n	8014d9e <__mcmp+0x32>
 8014d92:	f04f 30ff 	mov.w	r0, #4294967295
 8014d96:	bd30      	pop	{r4, r5, pc}
 8014d98:	42a3      	cmp	r3, r4
 8014d9a:	d3f3      	bcc.n	8014d84 <__mcmp+0x18>
 8014d9c:	e7fb      	b.n	8014d96 <__mcmp+0x2a>
 8014d9e:	2001      	movs	r0, #1
 8014da0:	e7f9      	b.n	8014d96 <__mcmp+0x2a>
	...

08014da4 <__mdiff>:
 8014da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da8:	4689      	mov	r9, r1
 8014daa:	4606      	mov	r6, r0
 8014dac:	4611      	mov	r1, r2
 8014dae:	4648      	mov	r0, r9
 8014db0:	4614      	mov	r4, r2
 8014db2:	f7ff ffdb 	bl	8014d6c <__mcmp>
 8014db6:	1e05      	subs	r5, r0, #0
 8014db8:	d112      	bne.n	8014de0 <__mdiff+0x3c>
 8014dba:	4629      	mov	r1, r5
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	f7ff fd19 	bl	80147f4 <_Balloc>
 8014dc2:	4602      	mov	r2, r0
 8014dc4:	b928      	cbnz	r0, 8014dd2 <__mdiff+0x2e>
 8014dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8014ec4 <__mdiff+0x120>)
 8014dc8:	f240 2137 	movw	r1, #567	@ 0x237
 8014dcc:	483e      	ldr	r0, [pc, #248]	@ (8014ec8 <__mdiff+0x124>)
 8014dce:	f001 fad1 	bl	8016374 <__assert_func>
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014dd8:	4610      	mov	r0, r2
 8014dda:	b003      	add	sp, #12
 8014ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014de0:	bfbc      	itt	lt
 8014de2:	464b      	movlt	r3, r9
 8014de4:	46a1      	movlt	r9, r4
 8014de6:	4630      	mov	r0, r6
 8014de8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014dec:	bfba      	itte	lt
 8014dee:	461c      	movlt	r4, r3
 8014df0:	2501      	movlt	r5, #1
 8014df2:	2500      	movge	r5, #0
 8014df4:	f7ff fcfe 	bl	80147f4 <_Balloc>
 8014df8:	4602      	mov	r2, r0
 8014dfa:	b918      	cbnz	r0, 8014e04 <__mdiff+0x60>
 8014dfc:	4b31      	ldr	r3, [pc, #196]	@ (8014ec4 <__mdiff+0x120>)
 8014dfe:	f240 2145 	movw	r1, #581	@ 0x245
 8014e02:	e7e3      	b.n	8014dcc <__mdiff+0x28>
 8014e04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014e08:	6926      	ldr	r6, [r4, #16]
 8014e0a:	60c5      	str	r5, [r0, #12]
 8014e0c:	f109 0310 	add.w	r3, r9, #16
 8014e10:	f109 0514 	add.w	r5, r9, #20
 8014e14:	f104 0e14 	add.w	lr, r4, #20
 8014e18:	f100 0b14 	add.w	fp, r0, #20
 8014e1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014e20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014e24:	9301      	str	r3, [sp, #4]
 8014e26:	46d9      	mov	r9, fp
 8014e28:	f04f 0c00 	mov.w	ip, #0
 8014e2c:	9b01      	ldr	r3, [sp, #4]
 8014e2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014e32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014e36:	9301      	str	r3, [sp, #4]
 8014e38:	fa1f f38a 	uxth.w	r3, sl
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	b283      	uxth	r3, r0
 8014e40:	1acb      	subs	r3, r1, r3
 8014e42:	0c00      	lsrs	r0, r0, #16
 8014e44:	4463      	add	r3, ip
 8014e46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014e4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014e4e:	b29b      	uxth	r3, r3
 8014e50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014e54:	4576      	cmp	r6, lr
 8014e56:	f849 3b04 	str.w	r3, [r9], #4
 8014e5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014e5e:	d8e5      	bhi.n	8014e2c <__mdiff+0x88>
 8014e60:	1b33      	subs	r3, r6, r4
 8014e62:	3b15      	subs	r3, #21
 8014e64:	f023 0303 	bic.w	r3, r3, #3
 8014e68:	3415      	adds	r4, #21
 8014e6a:	3304      	adds	r3, #4
 8014e6c:	42a6      	cmp	r6, r4
 8014e6e:	bf38      	it	cc
 8014e70:	2304      	movcc	r3, #4
 8014e72:	441d      	add	r5, r3
 8014e74:	445b      	add	r3, fp
 8014e76:	461e      	mov	r6, r3
 8014e78:	462c      	mov	r4, r5
 8014e7a:	4544      	cmp	r4, r8
 8014e7c:	d30e      	bcc.n	8014e9c <__mdiff+0xf8>
 8014e7e:	f108 0103 	add.w	r1, r8, #3
 8014e82:	1b49      	subs	r1, r1, r5
 8014e84:	f021 0103 	bic.w	r1, r1, #3
 8014e88:	3d03      	subs	r5, #3
 8014e8a:	45a8      	cmp	r8, r5
 8014e8c:	bf38      	it	cc
 8014e8e:	2100      	movcc	r1, #0
 8014e90:	440b      	add	r3, r1
 8014e92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014e96:	b191      	cbz	r1, 8014ebe <__mdiff+0x11a>
 8014e98:	6117      	str	r7, [r2, #16]
 8014e9a:	e79d      	b.n	8014dd8 <__mdiff+0x34>
 8014e9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014ea0:	46e6      	mov	lr, ip
 8014ea2:	0c08      	lsrs	r0, r1, #16
 8014ea4:	fa1c fc81 	uxtah	ip, ip, r1
 8014ea8:	4471      	add	r1, lr
 8014eaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014eae:	b289      	uxth	r1, r1
 8014eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014eb4:	f846 1b04 	str.w	r1, [r6], #4
 8014eb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014ebc:	e7dd      	b.n	8014e7a <__mdiff+0xd6>
 8014ebe:	3f01      	subs	r7, #1
 8014ec0:	e7e7      	b.n	8014e92 <__mdiff+0xee>
 8014ec2:	bf00      	nop
 8014ec4:	08017126 	.word	0x08017126
 8014ec8:	080171ae 	.word	0x080171ae

08014ecc <__ulp>:
 8014ecc:	b082      	sub	sp, #8
 8014ece:	ed8d 0b00 	vstr	d0, [sp]
 8014ed2:	9a01      	ldr	r2, [sp, #4]
 8014ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8014f14 <__ulp+0x48>)
 8014ed6:	4013      	ands	r3, r2
 8014ed8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	dc08      	bgt.n	8014ef2 <__ulp+0x26>
 8014ee0:	425b      	negs	r3, r3
 8014ee2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014ee6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014eea:	da04      	bge.n	8014ef6 <__ulp+0x2a>
 8014eec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014ef0:	4113      	asrs	r3, r2
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	e008      	b.n	8014f08 <__ulp+0x3c>
 8014ef6:	f1a2 0314 	sub.w	r3, r2, #20
 8014efa:	2b1e      	cmp	r3, #30
 8014efc:	bfda      	itte	le
 8014efe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014f02:	40da      	lsrle	r2, r3
 8014f04:	2201      	movgt	r2, #1
 8014f06:	2300      	movs	r3, #0
 8014f08:	4619      	mov	r1, r3
 8014f0a:	4610      	mov	r0, r2
 8014f0c:	ec41 0b10 	vmov	d0, r0, r1
 8014f10:	b002      	add	sp, #8
 8014f12:	4770      	bx	lr
 8014f14:	7ff00000 	.word	0x7ff00000

08014f18 <__b2d>:
 8014f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f1c:	6906      	ldr	r6, [r0, #16]
 8014f1e:	f100 0814 	add.w	r8, r0, #20
 8014f22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014f26:	1f37      	subs	r7, r6, #4
 8014f28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014f2c:	4610      	mov	r0, r2
 8014f2e:	f7ff fd53 	bl	80149d8 <__hi0bits>
 8014f32:	f1c0 0320 	rsb	r3, r0, #32
 8014f36:	280a      	cmp	r0, #10
 8014f38:	600b      	str	r3, [r1, #0]
 8014f3a:	491b      	ldr	r1, [pc, #108]	@ (8014fa8 <__b2d+0x90>)
 8014f3c:	dc15      	bgt.n	8014f6a <__b2d+0x52>
 8014f3e:	f1c0 0c0b 	rsb	ip, r0, #11
 8014f42:	fa22 f30c 	lsr.w	r3, r2, ip
 8014f46:	45b8      	cmp	r8, r7
 8014f48:	ea43 0501 	orr.w	r5, r3, r1
 8014f4c:	bf34      	ite	cc
 8014f4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014f52:	2300      	movcs	r3, #0
 8014f54:	3015      	adds	r0, #21
 8014f56:	fa02 f000 	lsl.w	r0, r2, r0
 8014f5a:	fa23 f30c 	lsr.w	r3, r3, ip
 8014f5e:	4303      	orrs	r3, r0
 8014f60:	461c      	mov	r4, r3
 8014f62:	ec45 4b10 	vmov	d0, r4, r5
 8014f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f6a:	45b8      	cmp	r8, r7
 8014f6c:	bf3a      	itte	cc
 8014f6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014f72:	f1a6 0708 	subcc.w	r7, r6, #8
 8014f76:	2300      	movcs	r3, #0
 8014f78:	380b      	subs	r0, #11
 8014f7a:	d012      	beq.n	8014fa2 <__b2d+0x8a>
 8014f7c:	f1c0 0120 	rsb	r1, r0, #32
 8014f80:	fa23 f401 	lsr.w	r4, r3, r1
 8014f84:	4082      	lsls	r2, r0
 8014f86:	4322      	orrs	r2, r4
 8014f88:	4547      	cmp	r7, r8
 8014f8a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014f8e:	bf8c      	ite	hi
 8014f90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014f94:	2200      	movls	r2, #0
 8014f96:	4083      	lsls	r3, r0
 8014f98:	40ca      	lsrs	r2, r1
 8014f9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014f9e:	4313      	orrs	r3, r2
 8014fa0:	e7de      	b.n	8014f60 <__b2d+0x48>
 8014fa2:	ea42 0501 	orr.w	r5, r2, r1
 8014fa6:	e7db      	b.n	8014f60 <__b2d+0x48>
 8014fa8:	3ff00000 	.word	0x3ff00000

08014fac <__d2b>:
 8014fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014fb0:	460f      	mov	r7, r1
 8014fb2:	2101      	movs	r1, #1
 8014fb4:	ec59 8b10 	vmov	r8, r9, d0
 8014fb8:	4616      	mov	r6, r2
 8014fba:	f7ff fc1b 	bl	80147f4 <_Balloc>
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	b930      	cbnz	r0, 8014fd0 <__d2b+0x24>
 8014fc2:	4602      	mov	r2, r0
 8014fc4:	4b23      	ldr	r3, [pc, #140]	@ (8015054 <__d2b+0xa8>)
 8014fc6:	4824      	ldr	r0, [pc, #144]	@ (8015058 <__d2b+0xac>)
 8014fc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8014fcc:	f001 f9d2 	bl	8016374 <__assert_func>
 8014fd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014fd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014fd8:	b10d      	cbz	r5, 8014fde <__d2b+0x32>
 8014fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014fde:	9301      	str	r3, [sp, #4]
 8014fe0:	f1b8 0300 	subs.w	r3, r8, #0
 8014fe4:	d023      	beq.n	801502e <__d2b+0x82>
 8014fe6:	4668      	mov	r0, sp
 8014fe8:	9300      	str	r3, [sp, #0]
 8014fea:	f7ff fd14 	bl	8014a16 <__lo0bits>
 8014fee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014ff2:	b1d0      	cbz	r0, 801502a <__d2b+0x7e>
 8014ff4:	f1c0 0320 	rsb	r3, r0, #32
 8014ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8014ffc:	430b      	orrs	r3, r1
 8014ffe:	40c2      	lsrs	r2, r0
 8015000:	6163      	str	r3, [r4, #20]
 8015002:	9201      	str	r2, [sp, #4]
 8015004:	9b01      	ldr	r3, [sp, #4]
 8015006:	61a3      	str	r3, [r4, #24]
 8015008:	2b00      	cmp	r3, #0
 801500a:	bf0c      	ite	eq
 801500c:	2201      	moveq	r2, #1
 801500e:	2202      	movne	r2, #2
 8015010:	6122      	str	r2, [r4, #16]
 8015012:	b1a5      	cbz	r5, 801503e <__d2b+0x92>
 8015014:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015018:	4405      	add	r5, r0
 801501a:	603d      	str	r5, [r7, #0]
 801501c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015020:	6030      	str	r0, [r6, #0]
 8015022:	4620      	mov	r0, r4
 8015024:	b003      	add	sp, #12
 8015026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801502a:	6161      	str	r1, [r4, #20]
 801502c:	e7ea      	b.n	8015004 <__d2b+0x58>
 801502e:	a801      	add	r0, sp, #4
 8015030:	f7ff fcf1 	bl	8014a16 <__lo0bits>
 8015034:	9b01      	ldr	r3, [sp, #4]
 8015036:	6163      	str	r3, [r4, #20]
 8015038:	3020      	adds	r0, #32
 801503a:	2201      	movs	r2, #1
 801503c:	e7e8      	b.n	8015010 <__d2b+0x64>
 801503e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015042:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015046:	6038      	str	r0, [r7, #0]
 8015048:	6918      	ldr	r0, [r3, #16]
 801504a:	f7ff fcc5 	bl	80149d8 <__hi0bits>
 801504e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015052:	e7e5      	b.n	8015020 <__d2b+0x74>
 8015054:	08017126 	.word	0x08017126
 8015058:	080171ae 	.word	0x080171ae

0801505c <__ratio>:
 801505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015060:	b085      	sub	sp, #20
 8015062:	e9cd 1000 	strd	r1, r0, [sp]
 8015066:	a902      	add	r1, sp, #8
 8015068:	f7ff ff56 	bl	8014f18 <__b2d>
 801506c:	9800      	ldr	r0, [sp, #0]
 801506e:	a903      	add	r1, sp, #12
 8015070:	ec55 4b10 	vmov	r4, r5, d0
 8015074:	f7ff ff50 	bl	8014f18 <__b2d>
 8015078:	9b01      	ldr	r3, [sp, #4]
 801507a:	6919      	ldr	r1, [r3, #16]
 801507c:	9b00      	ldr	r3, [sp, #0]
 801507e:	691b      	ldr	r3, [r3, #16]
 8015080:	1ac9      	subs	r1, r1, r3
 8015082:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015086:	1a9b      	subs	r3, r3, r2
 8015088:	ec5b ab10 	vmov	sl, fp, d0
 801508c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015090:	2b00      	cmp	r3, #0
 8015092:	bfce      	itee	gt
 8015094:	462a      	movgt	r2, r5
 8015096:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801509a:	465a      	movle	r2, fp
 801509c:	462f      	mov	r7, r5
 801509e:	46d9      	mov	r9, fp
 80150a0:	bfcc      	ite	gt
 80150a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80150a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80150aa:	464b      	mov	r3, r9
 80150ac:	4652      	mov	r2, sl
 80150ae:	4620      	mov	r0, r4
 80150b0:	4639      	mov	r1, r7
 80150b2:	f7f3 fbfb 	bl	80088ac <__aeabi_ddiv>
 80150b6:	ec41 0b10 	vmov	d0, r0, r1
 80150ba:	b005      	add	sp, #20
 80150bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150c0 <__copybits>:
 80150c0:	3901      	subs	r1, #1
 80150c2:	b570      	push	{r4, r5, r6, lr}
 80150c4:	1149      	asrs	r1, r1, #5
 80150c6:	6914      	ldr	r4, [r2, #16]
 80150c8:	3101      	adds	r1, #1
 80150ca:	f102 0314 	add.w	r3, r2, #20
 80150ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80150d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80150d6:	1f05      	subs	r5, r0, #4
 80150d8:	42a3      	cmp	r3, r4
 80150da:	d30c      	bcc.n	80150f6 <__copybits+0x36>
 80150dc:	1aa3      	subs	r3, r4, r2
 80150de:	3b11      	subs	r3, #17
 80150e0:	f023 0303 	bic.w	r3, r3, #3
 80150e4:	3211      	adds	r2, #17
 80150e6:	42a2      	cmp	r2, r4
 80150e8:	bf88      	it	hi
 80150ea:	2300      	movhi	r3, #0
 80150ec:	4418      	add	r0, r3
 80150ee:	2300      	movs	r3, #0
 80150f0:	4288      	cmp	r0, r1
 80150f2:	d305      	bcc.n	8015100 <__copybits+0x40>
 80150f4:	bd70      	pop	{r4, r5, r6, pc}
 80150f6:	f853 6b04 	ldr.w	r6, [r3], #4
 80150fa:	f845 6f04 	str.w	r6, [r5, #4]!
 80150fe:	e7eb      	b.n	80150d8 <__copybits+0x18>
 8015100:	f840 3b04 	str.w	r3, [r0], #4
 8015104:	e7f4      	b.n	80150f0 <__copybits+0x30>

08015106 <__any_on>:
 8015106:	f100 0214 	add.w	r2, r0, #20
 801510a:	6900      	ldr	r0, [r0, #16]
 801510c:	114b      	asrs	r3, r1, #5
 801510e:	4298      	cmp	r0, r3
 8015110:	b510      	push	{r4, lr}
 8015112:	db11      	blt.n	8015138 <__any_on+0x32>
 8015114:	dd0a      	ble.n	801512c <__any_on+0x26>
 8015116:	f011 011f 	ands.w	r1, r1, #31
 801511a:	d007      	beq.n	801512c <__any_on+0x26>
 801511c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015120:	fa24 f001 	lsr.w	r0, r4, r1
 8015124:	fa00 f101 	lsl.w	r1, r0, r1
 8015128:	428c      	cmp	r4, r1
 801512a:	d10b      	bne.n	8015144 <__any_on+0x3e>
 801512c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015130:	4293      	cmp	r3, r2
 8015132:	d803      	bhi.n	801513c <__any_on+0x36>
 8015134:	2000      	movs	r0, #0
 8015136:	bd10      	pop	{r4, pc}
 8015138:	4603      	mov	r3, r0
 801513a:	e7f7      	b.n	801512c <__any_on+0x26>
 801513c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015140:	2900      	cmp	r1, #0
 8015142:	d0f5      	beq.n	8015130 <__any_on+0x2a>
 8015144:	2001      	movs	r0, #1
 8015146:	e7f6      	b.n	8015136 <__any_on+0x30>

08015148 <_malloc_usable_size_r>:
 8015148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801514c:	1f18      	subs	r0, r3, #4
 801514e:	2b00      	cmp	r3, #0
 8015150:	bfbc      	itt	lt
 8015152:	580b      	ldrlt	r3, [r1, r0]
 8015154:	18c0      	addlt	r0, r0, r3
 8015156:	4770      	bx	lr

08015158 <__ascii_wctomb>:
 8015158:	4603      	mov	r3, r0
 801515a:	4608      	mov	r0, r1
 801515c:	b141      	cbz	r1, 8015170 <__ascii_wctomb+0x18>
 801515e:	2aff      	cmp	r2, #255	@ 0xff
 8015160:	d904      	bls.n	801516c <__ascii_wctomb+0x14>
 8015162:	228a      	movs	r2, #138	@ 0x8a
 8015164:	601a      	str	r2, [r3, #0]
 8015166:	f04f 30ff 	mov.w	r0, #4294967295
 801516a:	4770      	bx	lr
 801516c:	700a      	strb	r2, [r1, #0]
 801516e:	2001      	movs	r0, #1
 8015170:	4770      	bx	lr

08015172 <__ssputs_r>:
 8015172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015176:	688e      	ldr	r6, [r1, #8]
 8015178:	461f      	mov	r7, r3
 801517a:	42be      	cmp	r6, r7
 801517c:	680b      	ldr	r3, [r1, #0]
 801517e:	4682      	mov	sl, r0
 8015180:	460c      	mov	r4, r1
 8015182:	4690      	mov	r8, r2
 8015184:	d82d      	bhi.n	80151e2 <__ssputs_r+0x70>
 8015186:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801518a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801518e:	d026      	beq.n	80151de <__ssputs_r+0x6c>
 8015190:	6965      	ldr	r5, [r4, #20]
 8015192:	6909      	ldr	r1, [r1, #16]
 8015194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015198:	eba3 0901 	sub.w	r9, r3, r1
 801519c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80151a0:	1c7b      	adds	r3, r7, #1
 80151a2:	444b      	add	r3, r9
 80151a4:	106d      	asrs	r5, r5, #1
 80151a6:	429d      	cmp	r5, r3
 80151a8:	bf38      	it	cc
 80151aa:	461d      	movcc	r5, r3
 80151ac:	0553      	lsls	r3, r2, #21
 80151ae:	d527      	bpl.n	8015200 <__ssputs_r+0x8e>
 80151b0:	4629      	mov	r1, r5
 80151b2:	f7fd fd41 	bl	8012c38 <_malloc_r>
 80151b6:	4606      	mov	r6, r0
 80151b8:	b360      	cbz	r0, 8015214 <__ssputs_r+0xa2>
 80151ba:	6921      	ldr	r1, [r4, #16]
 80151bc:	464a      	mov	r2, r9
 80151be:	f7fe ff6c 	bl	801409a <memcpy>
 80151c2:	89a3      	ldrh	r3, [r4, #12]
 80151c4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80151c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151cc:	81a3      	strh	r3, [r4, #12]
 80151ce:	6126      	str	r6, [r4, #16]
 80151d0:	6165      	str	r5, [r4, #20]
 80151d2:	444e      	add	r6, r9
 80151d4:	eba5 0509 	sub.w	r5, r5, r9
 80151d8:	6026      	str	r6, [r4, #0]
 80151da:	60a5      	str	r5, [r4, #8]
 80151dc:	463e      	mov	r6, r7
 80151de:	42be      	cmp	r6, r7
 80151e0:	d900      	bls.n	80151e4 <__ssputs_r+0x72>
 80151e2:	463e      	mov	r6, r7
 80151e4:	6820      	ldr	r0, [r4, #0]
 80151e6:	4632      	mov	r2, r6
 80151e8:	4641      	mov	r1, r8
 80151ea:	f001 f886 	bl	80162fa <memmove>
 80151ee:	68a3      	ldr	r3, [r4, #8]
 80151f0:	1b9b      	subs	r3, r3, r6
 80151f2:	60a3      	str	r3, [r4, #8]
 80151f4:	6823      	ldr	r3, [r4, #0]
 80151f6:	4433      	add	r3, r6
 80151f8:	6023      	str	r3, [r4, #0]
 80151fa:	2000      	movs	r0, #0
 80151fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015200:	462a      	mov	r2, r5
 8015202:	f7fd fdad 	bl	8012d60 <_realloc_r>
 8015206:	4606      	mov	r6, r0
 8015208:	2800      	cmp	r0, #0
 801520a:	d1e0      	bne.n	80151ce <__ssputs_r+0x5c>
 801520c:	6921      	ldr	r1, [r4, #16]
 801520e:	4650      	mov	r0, sl
 8015210:	f7fe ff5a 	bl	80140c8 <_free_r>
 8015214:	230c      	movs	r3, #12
 8015216:	f8ca 3000 	str.w	r3, [sl]
 801521a:	89a3      	ldrh	r3, [r4, #12]
 801521c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015220:	81a3      	strh	r3, [r4, #12]
 8015222:	f04f 30ff 	mov.w	r0, #4294967295
 8015226:	e7e9      	b.n	80151fc <__ssputs_r+0x8a>

08015228 <_svfiprintf_r>:
 8015228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522c:	4698      	mov	r8, r3
 801522e:	898b      	ldrh	r3, [r1, #12]
 8015230:	061b      	lsls	r3, r3, #24
 8015232:	b09d      	sub	sp, #116	@ 0x74
 8015234:	4607      	mov	r7, r0
 8015236:	460d      	mov	r5, r1
 8015238:	4614      	mov	r4, r2
 801523a:	d510      	bpl.n	801525e <_svfiprintf_r+0x36>
 801523c:	690b      	ldr	r3, [r1, #16]
 801523e:	b973      	cbnz	r3, 801525e <_svfiprintf_r+0x36>
 8015240:	2140      	movs	r1, #64	@ 0x40
 8015242:	f7fd fcf9 	bl	8012c38 <_malloc_r>
 8015246:	6028      	str	r0, [r5, #0]
 8015248:	6128      	str	r0, [r5, #16]
 801524a:	b930      	cbnz	r0, 801525a <_svfiprintf_r+0x32>
 801524c:	230c      	movs	r3, #12
 801524e:	603b      	str	r3, [r7, #0]
 8015250:	f04f 30ff 	mov.w	r0, #4294967295
 8015254:	b01d      	add	sp, #116	@ 0x74
 8015256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801525a:	2340      	movs	r3, #64	@ 0x40
 801525c:	616b      	str	r3, [r5, #20]
 801525e:	2300      	movs	r3, #0
 8015260:	9309      	str	r3, [sp, #36]	@ 0x24
 8015262:	2320      	movs	r3, #32
 8015264:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015268:	f8cd 800c 	str.w	r8, [sp, #12]
 801526c:	2330      	movs	r3, #48	@ 0x30
 801526e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801540c <_svfiprintf_r+0x1e4>
 8015272:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015276:	f04f 0901 	mov.w	r9, #1
 801527a:	4623      	mov	r3, r4
 801527c:	469a      	mov	sl, r3
 801527e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015282:	b10a      	cbz	r2, 8015288 <_svfiprintf_r+0x60>
 8015284:	2a25      	cmp	r2, #37	@ 0x25
 8015286:	d1f9      	bne.n	801527c <_svfiprintf_r+0x54>
 8015288:	ebba 0b04 	subs.w	fp, sl, r4
 801528c:	d00b      	beq.n	80152a6 <_svfiprintf_r+0x7e>
 801528e:	465b      	mov	r3, fp
 8015290:	4622      	mov	r2, r4
 8015292:	4629      	mov	r1, r5
 8015294:	4638      	mov	r0, r7
 8015296:	f7ff ff6c 	bl	8015172 <__ssputs_r>
 801529a:	3001      	adds	r0, #1
 801529c:	f000 80a7 	beq.w	80153ee <_svfiprintf_r+0x1c6>
 80152a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152a2:	445a      	add	r2, fp
 80152a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80152a6:	f89a 3000 	ldrb.w	r3, [sl]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	f000 809f 	beq.w	80153ee <_svfiprintf_r+0x1c6>
 80152b0:	2300      	movs	r3, #0
 80152b2:	f04f 32ff 	mov.w	r2, #4294967295
 80152b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152ba:	f10a 0a01 	add.w	sl, sl, #1
 80152be:	9304      	str	r3, [sp, #16]
 80152c0:	9307      	str	r3, [sp, #28]
 80152c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80152c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80152c8:	4654      	mov	r4, sl
 80152ca:	2205      	movs	r2, #5
 80152cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152d0:	484e      	ldr	r0, [pc, #312]	@ (801540c <_svfiprintf_r+0x1e4>)
 80152d2:	f7f2 ffb5 	bl	8008240 <memchr>
 80152d6:	9a04      	ldr	r2, [sp, #16]
 80152d8:	b9d8      	cbnz	r0, 8015312 <_svfiprintf_r+0xea>
 80152da:	06d0      	lsls	r0, r2, #27
 80152dc:	bf44      	itt	mi
 80152de:	2320      	movmi	r3, #32
 80152e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152e4:	0711      	lsls	r1, r2, #28
 80152e6:	bf44      	itt	mi
 80152e8:	232b      	movmi	r3, #43	@ 0x2b
 80152ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152ee:	f89a 3000 	ldrb.w	r3, [sl]
 80152f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80152f4:	d015      	beq.n	8015322 <_svfiprintf_r+0xfa>
 80152f6:	9a07      	ldr	r2, [sp, #28]
 80152f8:	4654      	mov	r4, sl
 80152fa:	2000      	movs	r0, #0
 80152fc:	f04f 0c0a 	mov.w	ip, #10
 8015300:	4621      	mov	r1, r4
 8015302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015306:	3b30      	subs	r3, #48	@ 0x30
 8015308:	2b09      	cmp	r3, #9
 801530a:	d94b      	bls.n	80153a4 <_svfiprintf_r+0x17c>
 801530c:	b1b0      	cbz	r0, 801533c <_svfiprintf_r+0x114>
 801530e:	9207      	str	r2, [sp, #28]
 8015310:	e014      	b.n	801533c <_svfiprintf_r+0x114>
 8015312:	eba0 0308 	sub.w	r3, r0, r8
 8015316:	fa09 f303 	lsl.w	r3, r9, r3
 801531a:	4313      	orrs	r3, r2
 801531c:	9304      	str	r3, [sp, #16]
 801531e:	46a2      	mov	sl, r4
 8015320:	e7d2      	b.n	80152c8 <_svfiprintf_r+0xa0>
 8015322:	9b03      	ldr	r3, [sp, #12]
 8015324:	1d19      	adds	r1, r3, #4
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	9103      	str	r1, [sp, #12]
 801532a:	2b00      	cmp	r3, #0
 801532c:	bfbb      	ittet	lt
 801532e:	425b      	neglt	r3, r3
 8015330:	f042 0202 	orrlt.w	r2, r2, #2
 8015334:	9307      	strge	r3, [sp, #28]
 8015336:	9307      	strlt	r3, [sp, #28]
 8015338:	bfb8      	it	lt
 801533a:	9204      	strlt	r2, [sp, #16]
 801533c:	7823      	ldrb	r3, [r4, #0]
 801533e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015340:	d10a      	bne.n	8015358 <_svfiprintf_r+0x130>
 8015342:	7863      	ldrb	r3, [r4, #1]
 8015344:	2b2a      	cmp	r3, #42	@ 0x2a
 8015346:	d132      	bne.n	80153ae <_svfiprintf_r+0x186>
 8015348:	9b03      	ldr	r3, [sp, #12]
 801534a:	1d1a      	adds	r2, r3, #4
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	9203      	str	r2, [sp, #12]
 8015350:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015354:	3402      	adds	r4, #2
 8015356:	9305      	str	r3, [sp, #20]
 8015358:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801541c <_svfiprintf_r+0x1f4>
 801535c:	7821      	ldrb	r1, [r4, #0]
 801535e:	2203      	movs	r2, #3
 8015360:	4650      	mov	r0, sl
 8015362:	f7f2 ff6d 	bl	8008240 <memchr>
 8015366:	b138      	cbz	r0, 8015378 <_svfiprintf_r+0x150>
 8015368:	9b04      	ldr	r3, [sp, #16]
 801536a:	eba0 000a 	sub.w	r0, r0, sl
 801536e:	2240      	movs	r2, #64	@ 0x40
 8015370:	4082      	lsls	r2, r0
 8015372:	4313      	orrs	r3, r2
 8015374:	3401      	adds	r4, #1
 8015376:	9304      	str	r3, [sp, #16]
 8015378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801537c:	4824      	ldr	r0, [pc, #144]	@ (8015410 <_svfiprintf_r+0x1e8>)
 801537e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015382:	2206      	movs	r2, #6
 8015384:	f7f2 ff5c 	bl	8008240 <memchr>
 8015388:	2800      	cmp	r0, #0
 801538a:	d036      	beq.n	80153fa <_svfiprintf_r+0x1d2>
 801538c:	4b21      	ldr	r3, [pc, #132]	@ (8015414 <_svfiprintf_r+0x1ec>)
 801538e:	bb1b      	cbnz	r3, 80153d8 <_svfiprintf_r+0x1b0>
 8015390:	9b03      	ldr	r3, [sp, #12]
 8015392:	3307      	adds	r3, #7
 8015394:	f023 0307 	bic.w	r3, r3, #7
 8015398:	3308      	adds	r3, #8
 801539a:	9303      	str	r3, [sp, #12]
 801539c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801539e:	4433      	add	r3, r6
 80153a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80153a2:	e76a      	b.n	801527a <_svfiprintf_r+0x52>
 80153a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80153a8:	460c      	mov	r4, r1
 80153aa:	2001      	movs	r0, #1
 80153ac:	e7a8      	b.n	8015300 <_svfiprintf_r+0xd8>
 80153ae:	2300      	movs	r3, #0
 80153b0:	3401      	adds	r4, #1
 80153b2:	9305      	str	r3, [sp, #20]
 80153b4:	4619      	mov	r1, r3
 80153b6:	f04f 0c0a 	mov.w	ip, #10
 80153ba:	4620      	mov	r0, r4
 80153bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153c0:	3a30      	subs	r2, #48	@ 0x30
 80153c2:	2a09      	cmp	r2, #9
 80153c4:	d903      	bls.n	80153ce <_svfiprintf_r+0x1a6>
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d0c6      	beq.n	8015358 <_svfiprintf_r+0x130>
 80153ca:	9105      	str	r1, [sp, #20]
 80153cc:	e7c4      	b.n	8015358 <_svfiprintf_r+0x130>
 80153ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80153d2:	4604      	mov	r4, r0
 80153d4:	2301      	movs	r3, #1
 80153d6:	e7f0      	b.n	80153ba <_svfiprintf_r+0x192>
 80153d8:	ab03      	add	r3, sp, #12
 80153da:	9300      	str	r3, [sp, #0]
 80153dc:	462a      	mov	r2, r5
 80153de:	4b0e      	ldr	r3, [pc, #56]	@ (8015418 <_svfiprintf_r+0x1f0>)
 80153e0:	a904      	add	r1, sp, #16
 80153e2:	4638      	mov	r0, r7
 80153e4:	f3af 8000 	nop.w
 80153e8:	1c42      	adds	r2, r0, #1
 80153ea:	4606      	mov	r6, r0
 80153ec:	d1d6      	bne.n	801539c <_svfiprintf_r+0x174>
 80153ee:	89ab      	ldrh	r3, [r5, #12]
 80153f0:	065b      	lsls	r3, r3, #25
 80153f2:	f53f af2d 	bmi.w	8015250 <_svfiprintf_r+0x28>
 80153f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80153f8:	e72c      	b.n	8015254 <_svfiprintf_r+0x2c>
 80153fa:	ab03      	add	r3, sp, #12
 80153fc:	9300      	str	r3, [sp, #0]
 80153fe:	462a      	mov	r2, r5
 8015400:	4b05      	ldr	r3, [pc, #20]	@ (8015418 <_svfiprintf_r+0x1f0>)
 8015402:	a904      	add	r1, sp, #16
 8015404:	4638      	mov	r0, r7
 8015406:	f000 fb8b 	bl	8015b20 <_printf_i>
 801540a:	e7ed      	b.n	80153e8 <_svfiprintf_r+0x1c0>
 801540c:	08017207 	.word	0x08017207
 8015410:	08017211 	.word	0x08017211
 8015414:	00000000 	.word	0x00000000
 8015418:	08015173 	.word	0x08015173
 801541c:	0801720d 	.word	0x0801720d

08015420 <_sungetc_r>:
 8015420:	b538      	push	{r3, r4, r5, lr}
 8015422:	1c4b      	adds	r3, r1, #1
 8015424:	4614      	mov	r4, r2
 8015426:	d103      	bne.n	8015430 <_sungetc_r+0x10>
 8015428:	f04f 35ff 	mov.w	r5, #4294967295
 801542c:	4628      	mov	r0, r5
 801542e:	bd38      	pop	{r3, r4, r5, pc}
 8015430:	8993      	ldrh	r3, [r2, #12]
 8015432:	f023 0320 	bic.w	r3, r3, #32
 8015436:	8193      	strh	r3, [r2, #12]
 8015438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801543a:	6852      	ldr	r2, [r2, #4]
 801543c:	b2cd      	uxtb	r5, r1
 801543e:	b18b      	cbz	r3, 8015464 <_sungetc_r+0x44>
 8015440:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8015442:	4293      	cmp	r3, r2
 8015444:	dd08      	ble.n	8015458 <_sungetc_r+0x38>
 8015446:	6823      	ldr	r3, [r4, #0]
 8015448:	1e5a      	subs	r2, r3, #1
 801544a:	6022      	str	r2, [r4, #0]
 801544c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015450:	6863      	ldr	r3, [r4, #4]
 8015452:	3301      	adds	r3, #1
 8015454:	6063      	str	r3, [r4, #4]
 8015456:	e7e9      	b.n	801542c <_sungetc_r+0xc>
 8015458:	4621      	mov	r1, r4
 801545a:	f000 ff14 	bl	8016286 <__submore>
 801545e:	2800      	cmp	r0, #0
 8015460:	d0f1      	beq.n	8015446 <_sungetc_r+0x26>
 8015462:	e7e1      	b.n	8015428 <_sungetc_r+0x8>
 8015464:	6921      	ldr	r1, [r4, #16]
 8015466:	6823      	ldr	r3, [r4, #0]
 8015468:	b151      	cbz	r1, 8015480 <_sungetc_r+0x60>
 801546a:	4299      	cmp	r1, r3
 801546c:	d208      	bcs.n	8015480 <_sungetc_r+0x60>
 801546e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015472:	42a9      	cmp	r1, r5
 8015474:	d104      	bne.n	8015480 <_sungetc_r+0x60>
 8015476:	3b01      	subs	r3, #1
 8015478:	3201      	adds	r2, #1
 801547a:	6023      	str	r3, [r4, #0]
 801547c:	6062      	str	r2, [r4, #4]
 801547e:	e7d5      	b.n	801542c <_sungetc_r+0xc>
 8015480:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8015484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015488:	6363      	str	r3, [r4, #52]	@ 0x34
 801548a:	2303      	movs	r3, #3
 801548c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801548e:	4623      	mov	r3, r4
 8015490:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015494:	6023      	str	r3, [r4, #0]
 8015496:	2301      	movs	r3, #1
 8015498:	e7dc      	b.n	8015454 <_sungetc_r+0x34>

0801549a <__ssrefill_r>:
 801549a:	b510      	push	{r4, lr}
 801549c:	460c      	mov	r4, r1
 801549e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80154a0:	b169      	cbz	r1, 80154be <__ssrefill_r+0x24>
 80154a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80154a6:	4299      	cmp	r1, r3
 80154a8:	d001      	beq.n	80154ae <__ssrefill_r+0x14>
 80154aa:	f7fe fe0d 	bl	80140c8 <_free_r>
 80154ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80154b0:	6063      	str	r3, [r4, #4]
 80154b2:	2000      	movs	r0, #0
 80154b4:	6360      	str	r0, [r4, #52]	@ 0x34
 80154b6:	b113      	cbz	r3, 80154be <__ssrefill_r+0x24>
 80154b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80154ba:	6023      	str	r3, [r4, #0]
 80154bc:	bd10      	pop	{r4, pc}
 80154be:	6923      	ldr	r3, [r4, #16]
 80154c0:	6023      	str	r3, [r4, #0]
 80154c2:	2300      	movs	r3, #0
 80154c4:	6063      	str	r3, [r4, #4]
 80154c6:	89a3      	ldrh	r3, [r4, #12]
 80154c8:	f043 0320 	orr.w	r3, r3, #32
 80154cc:	81a3      	strh	r3, [r4, #12]
 80154ce:	f04f 30ff 	mov.w	r0, #4294967295
 80154d2:	e7f3      	b.n	80154bc <__ssrefill_r+0x22>

080154d4 <__ssvfiscanf_r>:
 80154d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d8:	460c      	mov	r4, r1
 80154da:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80154de:	2100      	movs	r1, #0
 80154e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80154e4:	49a6      	ldr	r1, [pc, #664]	@ (8015780 <__ssvfiscanf_r+0x2ac>)
 80154e6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80154e8:	f10d 0804 	add.w	r8, sp, #4
 80154ec:	49a5      	ldr	r1, [pc, #660]	@ (8015784 <__ssvfiscanf_r+0x2b0>)
 80154ee:	4fa6      	ldr	r7, [pc, #664]	@ (8015788 <__ssvfiscanf_r+0x2b4>)
 80154f0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80154f4:	4606      	mov	r6, r0
 80154f6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80154f8:	9300      	str	r3, [sp, #0]
 80154fa:	f892 9000 	ldrb.w	r9, [r2]
 80154fe:	f1b9 0f00 	cmp.w	r9, #0
 8015502:	f000 8158 	beq.w	80157b6 <__ssvfiscanf_r+0x2e2>
 8015506:	f817 3009 	ldrb.w	r3, [r7, r9]
 801550a:	f013 0308 	ands.w	r3, r3, #8
 801550e:	f102 0501 	add.w	r5, r2, #1
 8015512:	d019      	beq.n	8015548 <__ssvfiscanf_r+0x74>
 8015514:	6863      	ldr	r3, [r4, #4]
 8015516:	2b00      	cmp	r3, #0
 8015518:	dd0f      	ble.n	801553a <__ssvfiscanf_r+0x66>
 801551a:	6823      	ldr	r3, [r4, #0]
 801551c:	781a      	ldrb	r2, [r3, #0]
 801551e:	5cba      	ldrb	r2, [r7, r2]
 8015520:	0712      	lsls	r2, r2, #28
 8015522:	d401      	bmi.n	8015528 <__ssvfiscanf_r+0x54>
 8015524:	462a      	mov	r2, r5
 8015526:	e7e8      	b.n	80154fa <__ssvfiscanf_r+0x26>
 8015528:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801552a:	3201      	adds	r2, #1
 801552c:	9245      	str	r2, [sp, #276]	@ 0x114
 801552e:	6862      	ldr	r2, [r4, #4]
 8015530:	3301      	adds	r3, #1
 8015532:	3a01      	subs	r2, #1
 8015534:	6062      	str	r2, [r4, #4]
 8015536:	6023      	str	r3, [r4, #0]
 8015538:	e7ec      	b.n	8015514 <__ssvfiscanf_r+0x40>
 801553a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801553c:	4621      	mov	r1, r4
 801553e:	4630      	mov	r0, r6
 8015540:	4798      	blx	r3
 8015542:	2800      	cmp	r0, #0
 8015544:	d0e9      	beq.n	801551a <__ssvfiscanf_r+0x46>
 8015546:	e7ed      	b.n	8015524 <__ssvfiscanf_r+0x50>
 8015548:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801554c:	f040 8085 	bne.w	801565a <__ssvfiscanf_r+0x186>
 8015550:	9341      	str	r3, [sp, #260]	@ 0x104
 8015552:	9343      	str	r3, [sp, #268]	@ 0x10c
 8015554:	7853      	ldrb	r3, [r2, #1]
 8015556:	2b2a      	cmp	r3, #42	@ 0x2a
 8015558:	bf02      	ittt	eq
 801555a:	2310      	moveq	r3, #16
 801555c:	1c95      	addeq	r5, r2, #2
 801555e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8015560:	220a      	movs	r2, #10
 8015562:	46aa      	mov	sl, r5
 8015564:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8015568:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801556c:	2b09      	cmp	r3, #9
 801556e:	d91e      	bls.n	80155ae <__ssvfiscanf_r+0xda>
 8015570:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801578c <__ssvfiscanf_r+0x2b8>
 8015574:	2203      	movs	r2, #3
 8015576:	4658      	mov	r0, fp
 8015578:	f7f2 fe62 	bl	8008240 <memchr>
 801557c:	b138      	cbz	r0, 801558e <__ssvfiscanf_r+0xba>
 801557e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015580:	eba0 000b 	sub.w	r0, r0, fp
 8015584:	2301      	movs	r3, #1
 8015586:	4083      	lsls	r3, r0
 8015588:	4313      	orrs	r3, r2
 801558a:	9341      	str	r3, [sp, #260]	@ 0x104
 801558c:	4655      	mov	r5, sl
 801558e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015592:	2b78      	cmp	r3, #120	@ 0x78
 8015594:	d806      	bhi.n	80155a4 <__ssvfiscanf_r+0xd0>
 8015596:	2b57      	cmp	r3, #87	@ 0x57
 8015598:	d810      	bhi.n	80155bc <__ssvfiscanf_r+0xe8>
 801559a:	2b25      	cmp	r3, #37	@ 0x25
 801559c:	d05d      	beq.n	801565a <__ssvfiscanf_r+0x186>
 801559e:	d857      	bhi.n	8015650 <__ssvfiscanf_r+0x17c>
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d075      	beq.n	8015690 <__ssvfiscanf_r+0x1bc>
 80155a4:	2303      	movs	r3, #3
 80155a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80155a8:	230a      	movs	r3, #10
 80155aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80155ac:	e088      	b.n	80156c0 <__ssvfiscanf_r+0x1ec>
 80155ae:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80155b0:	fb02 1103 	mla	r1, r2, r3, r1
 80155b4:	3930      	subs	r1, #48	@ 0x30
 80155b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80155b8:	4655      	mov	r5, sl
 80155ba:	e7d2      	b.n	8015562 <__ssvfiscanf_r+0x8e>
 80155bc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80155c0:	2a20      	cmp	r2, #32
 80155c2:	d8ef      	bhi.n	80155a4 <__ssvfiscanf_r+0xd0>
 80155c4:	a101      	add	r1, pc, #4	@ (adr r1, 80155cc <__ssvfiscanf_r+0xf8>)
 80155c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80155ca:	bf00      	nop
 80155cc:	0801569f 	.word	0x0801569f
 80155d0:	080155a5 	.word	0x080155a5
 80155d4:	080155a5 	.word	0x080155a5
 80155d8:	080156f9 	.word	0x080156f9
 80155dc:	080155a5 	.word	0x080155a5
 80155e0:	080155a5 	.word	0x080155a5
 80155e4:	080155a5 	.word	0x080155a5
 80155e8:	080155a5 	.word	0x080155a5
 80155ec:	080155a5 	.word	0x080155a5
 80155f0:	080155a5 	.word	0x080155a5
 80155f4:	080155a5 	.word	0x080155a5
 80155f8:	0801570f 	.word	0x0801570f
 80155fc:	080156f5 	.word	0x080156f5
 8015600:	08015657 	.word	0x08015657
 8015604:	08015657 	.word	0x08015657
 8015608:	08015657 	.word	0x08015657
 801560c:	080155a5 	.word	0x080155a5
 8015610:	080156b1 	.word	0x080156b1
 8015614:	080155a5 	.word	0x080155a5
 8015618:	080155a5 	.word	0x080155a5
 801561c:	080155a5 	.word	0x080155a5
 8015620:	080155a5 	.word	0x080155a5
 8015624:	0801571f 	.word	0x0801571f
 8015628:	080156b9 	.word	0x080156b9
 801562c:	08015697 	.word	0x08015697
 8015630:	080155a5 	.word	0x080155a5
 8015634:	080155a5 	.word	0x080155a5
 8015638:	0801571b 	.word	0x0801571b
 801563c:	080155a5 	.word	0x080155a5
 8015640:	080156f5 	.word	0x080156f5
 8015644:	080155a5 	.word	0x080155a5
 8015648:	080155a5 	.word	0x080155a5
 801564c:	0801569f 	.word	0x0801569f
 8015650:	3b45      	subs	r3, #69	@ 0x45
 8015652:	2b02      	cmp	r3, #2
 8015654:	d8a6      	bhi.n	80155a4 <__ssvfiscanf_r+0xd0>
 8015656:	2305      	movs	r3, #5
 8015658:	e031      	b.n	80156be <__ssvfiscanf_r+0x1ea>
 801565a:	6863      	ldr	r3, [r4, #4]
 801565c:	2b00      	cmp	r3, #0
 801565e:	dd0d      	ble.n	801567c <__ssvfiscanf_r+0x1a8>
 8015660:	6823      	ldr	r3, [r4, #0]
 8015662:	781a      	ldrb	r2, [r3, #0]
 8015664:	454a      	cmp	r2, r9
 8015666:	f040 80a6 	bne.w	80157b6 <__ssvfiscanf_r+0x2e2>
 801566a:	3301      	adds	r3, #1
 801566c:	6862      	ldr	r2, [r4, #4]
 801566e:	6023      	str	r3, [r4, #0]
 8015670:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8015672:	3a01      	subs	r2, #1
 8015674:	3301      	adds	r3, #1
 8015676:	6062      	str	r2, [r4, #4]
 8015678:	9345      	str	r3, [sp, #276]	@ 0x114
 801567a:	e753      	b.n	8015524 <__ssvfiscanf_r+0x50>
 801567c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801567e:	4621      	mov	r1, r4
 8015680:	4630      	mov	r0, r6
 8015682:	4798      	blx	r3
 8015684:	2800      	cmp	r0, #0
 8015686:	d0eb      	beq.n	8015660 <__ssvfiscanf_r+0x18c>
 8015688:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801568a:	2800      	cmp	r0, #0
 801568c:	f040 808b 	bne.w	80157a6 <__ssvfiscanf_r+0x2d2>
 8015690:	f04f 30ff 	mov.w	r0, #4294967295
 8015694:	e08b      	b.n	80157ae <__ssvfiscanf_r+0x2da>
 8015696:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015698:	f042 0220 	orr.w	r2, r2, #32
 801569c:	9241      	str	r2, [sp, #260]	@ 0x104
 801569e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80156a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80156a4:	9241      	str	r2, [sp, #260]	@ 0x104
 80156a6:	2210      	movs	r2, #16
 80156a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80156aa:	9242      	str	r2, [sp, #264]	@ 0x108
 80156ac:	d902      	bls.n	80156b4 <__ssvfiscanf_r+0x1e0>
 80156ae:	e005      	b.n	80156bc <__ssvfiscanf_r+0x1e8>
 80156b0:	2300      	movs	r3, #0
 80156b2:	9342      	str	r3, [sp, #264]	@ 0x108
 80156b4:	2303      	movs	r3, #3
 80156b6:	e002      	b.n	80156be <__ssvfiscanf_r+0x1ea>
 80156b8:	2308      	movs	r3, #8
 80156ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80156bc:	2304      	movs	r3, #4
 80156be:	9347      	str	r3, [sp, #284]	@ 0x11c
 80156c0:	6863      	ldr	r3, [r4, #4]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	dd39      	ble.n	801573a <__ssvfiscanf_r+0x266>
 80156c6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80156c8:	0659      	lsls	r1, r3, #25
 80156ca:	d404      	bmi.n	80156d6 <__ssvfiscanf_r+0x202>
 80156cc:	6823      	ldr	r3, [r4, #0]
 80156ce:	781a      	ldrb	r2, [r3, #0]
 80156d0:	5cba      	ldrb	r2, [r7, r2]
 80156d2:	0712      	lsls	r2, r2, #28
 80156d4:	d438      	bmi.n	8015748 <__ssvfiscanf_r+0x274>
 80156d6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80156d8:	2b02      	cmp	r3, #2
 80156da:	dc47      	bgt.n	801576c <__ssvfiscanf_r+0x298>
 80156dc:	466b      	mov	r3, sp
 80156de:	4622      	mov	r2, r4
 80156e0:	a941      	add	r1, sp, #260	@ 0x104
 80156e2:	4630      	mov	r0, r6
 80156e4:	f000 fb3a 	bl	8015d5c <_scanf_chars>
 80156e8:	2801      	cmp	r0, #1
 80156ea:	d064      	beq.n	80157b6 <__ssvfiscanf_r+0x2e2>
 80156ec:	2802      	cmp	r0, #2
 80156ee:	f47f af19 	bne.w	8015524 <__ssvfiscanf_r+0x50>
 80156f2:	e7c9      	b.n	8015688 <__ssvfiscanf_r+0x1b4>
 80156f4:	220a      	movs	r2, #10
 80156f6:	e7d7      	b.n	80156a8 <__ssvfiscanf_r+0x1d4>
 80156f8:	4629      	mov	r1, r5
 80156fa:	4640      	mov	r0, r8
 80156fc:	f000 fd8a 	bl	8016214 <__sccl>
 8015700:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015706:	9341      	str	r3, [sp, #260]	@ 0x104
 8015708:	4605      	mov	r5, r0
 801570a:	2301      	movs	r3, #1
 801570c:	e7d7      	b.n	80156be <__ssvfiscanf_r+0x1ea>
 801570e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015714:	9341      	str	r3, [sp, #260]	@ 0x104
 8015716:	2300      	movs	r3, #0
 8015718:	e7d1      	b.n	80156be <__ssvfiscanf_r+0x1ea>
 801571a:	2302      	movs	r3, #2
 801571c:	e7cf      	b.n	80156be <__ssvfiscanf_r+0x1ea>
 801571e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8015720:	06c3      	lsls	r3, r0, #27
 8015722:	f53f aeff 	bmi.w	8015524 <__ssvfiscanf_r+0x50>
 8015726:	9b00      	ldr	r3, [sp, #0]
 8015728:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801572a:	1d19      	adds	r1, r3, #4
 801572c:	9100      	str	r1, [sp, #0]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	07c0      	lsls	r0, r0, #31
 8015732:	bf4c      	ite	mi
 8015734:	801a      	strhmi	r2, [r3, #0]
 8015736:	601a      	strpl	r2, [r3, #0]
 8015738:	e6f4      	b.n	8015524 <__ssvfiscanf_r+0x50>
 801573a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801573c:	4621      	mov	r1, r4
 801573e:	4630      	mov	r0, r6
 8015740:	4798      	blx	r3
 8015742:	2800      	cmp	r0, #0
 8015744:	d0bf      	beq.n	80156c6 <__ssvfiscanf_r+0x1f2>
 8015746:	e79f      	b.n	8015688 <__ssvfiscanf_r+0x1b4>
 8015748:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801574a:	3201      	adds	r2, #1
 801574c:	9245      	str	r2, [sp, #276]	@ 0x114
 801574e:	6862      	ldr	r2, [r4, #4]
 8015750:	3a01      	subs	r2, #1
 8015752:	2a00      	cmp	r2, #0
 8015754:	6062      	str	r2, [r4, #4]
 8015756:	dd02      	ble.n	801575e <__ssvfiscanf_r+0x28a>
 8015758:	3301      	adds	r3, #1
 801575a:	6023      	str	r3, [r4, #0]
 801575c:	e7b6      	b.n	80156cc <__ssvfiscanf_r+0x1f8>
 801575e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015760:	4621      	mov	r1, r4
 8015762:	4630      	mov	r0, r6
 8015764:	4798      	blx	r3
 8015766:	2800      	cmp	r0, #0
 8015768:	d0b0      	beq.n	80156cc <__ssvfiscanf_r+0x1f8>
 801576a:	e78d      	b.n	8015688 <__ssvfiscanf_r+0x1b4>
 801576c:	2b04      	cmp	r3, #4
 801576e:	dc0f      	bgt.n	8015790 <__ssvfiscanf_r+0x2bc>
 8015770:	466b      	mov	r3, sp
 8015772:	4622      	mov	r2, r4
 8015774:	a941      	add	r1, sp, #260	@ 0x104
 8015776:	4630      	mov	r0, r6
 8015778:	f000 fb4a 	bl	8015e10 <_scanf_i>
 801577c:	e7b4      	b.n	80156e8 <__ssvfiscanf_r+0x214>
 801577e:	bf00      	nop
 8015780:	08015421 	.word	0x08015421
 8015784:	0801549b 	.word	0x0801549b
 8015788:	080172e9 	.word	0x080172e9
 801578c:	0801720d 	.word	0x0801720d
 8015790:	4b0a      	ldr	r3, [pc, #40]	@ (80157bc <__ssvfiscanf_r+0x2e8>)
 8015792:	2b00      	cmp	r3, #0
 8015794:	f43f aec6 	beq.w	8015524 <__ssvfiscanf_r+0x50>
 8015798:	466b      	mov	r3, sp
 801579a:	4622      	mov	r2, r4
 801579c:	a941      	add	r1, sp, #260	@ 0x104
 801579e:	4630      	mov	r0, r6
 80157a0:	f3af 8000 	nop.w
 80157a4:	e7a0      	b.n	80156e8 <__ssvfiscanf_r+0x214>
 80157a6:	89a3      	ldrh	r3, [r4, #12]
 80157a8:	065b      	lsls	r3, r3, #25
 80157aa:	f53f af71 	bmi.w	8015690 <__ssvfiscanf_r+0x1bc>
 80157ae:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80157b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157b6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80157b8:	e7f9      	b.n	80157ae <__ssvfiscanf_r+0x2da>
 80157ba:	bf00      	nop
 80157bc:	00000000 	.word	0x00000000

080157c0 <__sfputc_r>:
 80157c0:	6893      	ldr	r3, [r2, #8]
 80157c2:	3b01      	subs	r3, #1
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	b410      	push	{r4}
 80157c8:	6093      	str	r3, [r2, #8]
 80157ca:	da08      	bge.n	80157de <__sfputc_r+0x1e>
 80157cc:	6994      	ldr	r4, [r2, #24]
 80157ce:	42a3      	cmp	r3, r4
 80157d0:	db01      	blt.n	80157d6 <__sfputc_r+0x16>
 80157d2:	290a      	cmp	r1, #10
 80157d4:	d103      	bne.n	80157de <__sfputc_r+0x1e>
 80157d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157da:	f7fe bb19 	b.w	8013e10 <__swbuf_r>
 80157de:	6813      	ldr	r3, [r2, #0]
 80157e0:	1c58      	adds	r0, r3, #1
 80157e2:	6010      	str	r0, [r2, #0]
 80157e4:	7019      	strb	r1, [r3, #0]
 80157e6:	4608      	mov	r0, r1
 80157e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157ec:	4770      	bx	lr

080157ee <__sfputs_r>:
 80157ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157f0:	4606      	mov	r6, r0
 80157f2:	460f      	mov	r7, r1
 80157f4:	4614      	mov	r4, r2
 80157f6:	18d5      	adds	r5, r2, r3
 80157f8:	42ac      	cmp	r4, r5
 80157fa:	d101      	bne.n	8015800 <__sfputs_r+0x12>
 80157fc:	2000      	movs	r0, #0
 80157fe:	e007      	b.n	8015810 <__sfputs_r+0x22>
 8015800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015804:	463a      	mov	r2, r7
 8015806:	4630      	mov	r0, r6
 8015808:	f7ff ffda 	bl	80157c0 <__sfputc_r>
 801580c:	1c43      	adds	r3, r0, #1
 801580e:	d1f3      	bne.n	80157f8 <__sfputs_r+0xa>
 8015810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015814 <_vfiprintf_r>:
 8015814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015818:	460d      	mov	r5, r1
 801581a:	b09d      	sub	sp, #116	@ 0x74
 801581c:	4614      	mov	r4, r2
 801581e:	4698      	mov	r8, r3
 8015820:	4606      	mov	r6, r0
 8015822:	b118      	cbz	r0, 801582c <_vfiprintf_r+0x18>
 8015824:	6a03      	ldr	r3, [r0, #32]
 8015826:	b90b      	cbnz	r3, 801582c <_vfiprintf_r+0x18>
 8015828:	f7fe f962 	bl	8013af0 <__sinit>
 801582c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801582e:	07d9      	lsls	r1, r3, #31
 8015830:	d405      	bmi.n	801583e <_vfiprintf_r+0x2a>
 8015832:	89ab      	ldrh	r3, [r5, #12]
 8015834:	059a      	lsls	r2, r3, #22
 8015836:	d402      	bmi.n	801583e <_vfiprintf_r+0x2a>
 8015838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801583a:	f7fe fc2c 	bl	8014096 <__retarget_lock_acquire_recursive>
 801583e:	89ab      	ldrh	r3, [r5, #12]
 8015840:	071b      	lsls	r3, r3, #28
 8015842:	d501      	bpl.n	8015848 <_vfiprintf_r+0x34>
 8015844:	692b      	ldr	r3, [r5, #16]
 8015846:	b99b      	cbnz	r3, 8015870 <_vfiprintf_r+0x5c>
 8015848:	4629      	mov	r1, r5
 801584a:	4630      	mov	r0, r6
 801584c:	f7fe fb1e 	bl	8013e8c <__swsetup_r>
 8015850:	b170      	cbz	r0, 8015870 <_vfiprintf_r+0x5c>
 8015852:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015854:	07dc      	lsls	r4, r3, #31
 8015856:	d504      	bpl.n	8015862 <_vfiprintf_r+0x4e>
 8015858:	f04f 30ff 	mov.w	r0, #4294967295
 801585c:	b01d      	add	sp, #116	@ 0x74
 801585e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015862:	89ab      	ldrh	r3, [r5, #12]
 8015864:	0598      	lsls	r0, r3, #22
 8015866:	d4f7      	bmi.n	8015858 <_vfiprintf_r+0x44>
 8015868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801586a:	f7fe fc15 	bl	8014098 <__retarget_lock_release_recursive>
 801586e:	e7f3      	b.n	8015858 <_vfiprintf_r+0x44>
 8015870:	2300      	movs	r3, #0
 8015872:	9309      	str	r3, [sp, #36]	@ 0x24
 8015874:	2320      	movs	r3, #32
 8015876:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801587a:	f8cd 800c 	str.w	r8, [sp, #12]
 801587e:	2330      	movs	r3, #48	@ 0x30
 8015880:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015a30 <_vfiprintf_r+0x21c>
 8015884:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015888:	f04f 0901 	mov.w	r9, #1
 801588c:	4623      	mov	r3, r4
 801588e:	469a      	mov	sl, r3
 8015890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015894:	b10a      	cbz	r2, 801589a <_vfiprintf_r+0x86>
 8015896:	2a25      	cmp	r2, #37	@ 0x25
 8015898:	d1f9      	bne.n	801588e <_vfiprintf_r+0x7a>
 801589a:	ebba 0b04 	subs.w	fp, sl, r4
 801589e:	d00b      	beq.n	80158b8 <_vfiprintf_r+0xa4>
 80158a0:	465b      	mov	r3, fp
 80158a2:	4622      	mov	r2, r4
 80158a4:	4629      	mov	r1, r5
 80158a6:	4630      	mov	r0, r6
 80158a8:	f7ff ffa1 	bl	80157ee <__sfputs_r>
 80158ac:	3001      	adds	r0, #1
 80158ae:	f000 80a7 	beq.w	8015a00 <_vfiprintf_r+0x1ec>
 80158b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80158b4:	445a      	add	r2, fp
 80158b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80158b8:	f89a 3000 	ldrb.w	r3, [sl]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	f000 809f 	beq.w	8015a00 <_vfiprintf_r+0x1ec>
 80158c2:	2300      	movs	r3, #0
 80158c4:	f04f 32ff 	mov.w	r2, #4294967295
 80158c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158cc:	f10a 0a01 	add.w	sl, sl, #1
 80158d0:	9304      	str	r3, [sp, #16]
 80158d2:	9307      	str	r3, [sp, #28]
 80158d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80158d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80158da:	4654      	mov	r4, sl
 80158dc:	2205      	movs	r2, #5
 80158de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158e2:	4853      	ldr	r0, [pc, #332]	@ (8015a30 <_vfiprintf_r+0x21c>)
 80158e4:	f7f2 fcac 	bl	8008240 <memchr>
 80158e8:	9a04      	ldr	r2, [sp, #16]
 80158ea:	b9d8      	cbnz	r0, 8015924 <_vfiprintf_r+0x110>
 80158ec:	06d1      	lsls	r1, r2, #27
 80158ee:	bf44      	itt	mi
 80158f0:	2320      	movmi	r3, #32
 80158f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158f6:	0713      	lsls	r3, r2, #28
 80158f8:	bf44      	itt	mi
 80158fa:	232b      	movmi	r3, #43	@ 0x2b
 80158fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015900:	f89a 3000 	ldrb.w	r3, [sl]
 8015904:	2b2a      	cmp	r3, #42	@ 0x2a
 8015906:	d015      	beq.n	8015934 <_vfiprintf_r+0x120>
 8015908:	9a07      	ldr	r2, [sp, #28]
 801590a:	4654      	mov	r4, sl
 801590c:	2000      	movs	r0, #0
 801590e:	f04f 0c0a 	mov.w	ip, #10
 8015912:	4621      	mov	r1, r4
 8015914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015918:	3b30      	subs	r3, #48	@ 0x30
 801591a:	2b09      	cmp	r3, #9
 801591c:	d94b      	bls.n	80159b6 <_vfiprintf_r+0x1a2>
 801591e:	b1b0      	cbz	r0, 801594e <_vfiprintf_r+0x13a>
 8015920:	9207      	str	r2, [sp, #28]
 8015922:	e014      	b.n	801594e <_vfiprintf_r+0x13a>
 8015924:	eba0 0308 	sub.w	r3, r0, r8
 8015928:	fa09 f303 	lsl.w	r3, r9, r3
 801592c:	4313      	orrs	r3, r2
 801592e:	9304      	str	r3, [sp, #16]
 8015930:	46a2      	mov	sl, r4
 8015932:	e7d2      	b.n	80158da <_vfiprintf_r+0xc6>
 8015934:	9b03      	ldr	r3, [sp, #12]
 8015936:	1d19      	adds	r1, r3, #4
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	9103      	str	r1, [sp, #12]
 801593c:	2b00      	cmp	r3, #0
 801593e:	bfbb      	ittet	lt
 8015940:	425b      	neglt	r3, r3
 8015942:	f042 0202 	orrlt.w	r2, r2, #2
 8015946:	9307      	strge	r3, [sp, #28]
 8015948:	9307      	strlt	r3, [sp, #28]
 801594a:	bfb8      	it	lt
 801594c:	9204      	strlt	r2, [sp, #16]
 801594e:	7823      	ldrb	r3, [r4, #0]
 8015950:	2b2e      	cmp	r3, #46	@ 0x2e
 8015952:	d10a      	bne.n	801596a <_vfiprintf_r+0x156>
 8015954:	7863      	ldrb	r3, [r4, #1]
 8015956:	2b2a      	cmp	r3, #42	@ 0x2a
 8015958:	d132      	bne.n	80159c0 <_vfiprintf_r+0x1ac>
 801595a:	9b03      	ldr	r3, [sp, #12]
 801595c:	1d1a      	adds	r2, r3, #4
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	9203      	str	r2, [sp, #12]
 8015962:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015966:	3402      	adds	r4, #2
 8015968:	9305      	str	r3, [sp, #20]
 801596a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015a40 <_vfiprintf_r+0x22c>
 801596e:	7821      	ldrb	r1, [r4, #0]
 8015970:	2203      	movs	r2, #3
 8015972:	4650      	mov	r0, sl
 8015974:	f7f2 fc64 	bl	8008240 <memchr>
 8015978:	b138      	cbz	r0, 801598a <_vfiprintf_r+0x176>
 801597a:	9b04      	ldr	r3, [sp, #16]
 801597c:	eba0 000a 	sub.w	r0, r0, sl
 8015980:	2240      	movs	r2, #64	@ 0x40
 8015982:	4082      	lsls	r2, r0
 8015984:	4313      	orrs	r3, r2
 8015986:	3401      	adds	r4, #1
 8015988:	9304      	str	r3, [sp, #16]
 801598a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801598e:	4829      	ldr	r0, [pc, #164]	@ (8015a34 <_vfiprintf_r+0x220>)
 8015990:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015994:	2206      	movs	r2, #6
 8015996:	f7f2 fc53 	bl	8008240 <memchr>
 801599a:	2800      	cmp	r0, #0
 801599c:	d03f      	beq.n	8015a1e <_vfiprintf_r+0x20a>
 801599e:	4b26      	ldr	r3, [pc, #152]	@ (8015a38 <_vfiprintf_r+0x224>)
 80159a0:	bb1b      	cbnz	r3, 80159ea <_vfiprintf_r+0x1d6>
 80159a2:	9b03      	ldr	r3, [sp, #12]
 80159a4:	3307      	adds	r3, #7
 80159a6:	f023 0307 	bic.w	r3, r3, #7
 80159aa:	3308      	adds	r3, #8
 80159ac:	9303      	str	r3, [sp, #12]
 80159ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159b0:	443b      	add	r3, r7
 80159b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80159b4:	e76a      	b.n	801588c <_vfiprintf_r+0x78>
 80159b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80159ba:	460c      	mov	r4, r1
 80159bc:	2001      	movs	r0, #1
 80159be:	e7a8      	b.n	8015912 <_vfiprintf_r+0xfe>
 80159c0:	2300      	movs	r3, #0
 80159c2:	3401      	adds	r4, #1
 80159c4:	9305      	str	r3, [sp, #20]
 80159c6:	4619      	mov	r1, r3
 80159c8:	f04f 0c0a 	mov.w	ip, #10
 80159cc:	4620      	mov	r0, r4
 80159ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159d2:	3a30      	subs	r2, #48	@ 0x30
 80159d4:	2a09      	cmp	r2, #9
 80159d6:	d903      	bls.n	80159e0 <_vfiprintf_r+0x1cc>
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d0c6      	beq.n	801596a <_vfiprintf_r+0x156>
 80159dc:	9105      	str	r1, [sp, #20]
 80159de:	e7c4      	b.n	801596a <_vfiprintf_r+0x156>
 80159e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80159e4:	4604      	mov	r4, r0
 80159e6:	2301      	movs	r3, #1
 80159e8:	e7f0      	b.n	80159cc <_vfiprintf_r+0x1b8>
 80159ea:	ab03      	add	r3, sp, #12
 80159ec:	9300      	str	r3, [sp, #0]
 80159ee:	462a      	mov	r2, r5
 80159f0:	4b12      	ldr	r3, [pc, #72]	@ (8015a3c <_vfiprintf_r+0x228>)
 80159f2:	a904      	add	r1, sp, #16
 80159f4:	4630      	mov	r0, r6
 80159f6:	f3af 8000 	nop.w
 80159fa:	4607      	mov	r7, r0
 80159fc:	1c78      	adds	r0, r7, #1
 80159fe:	d1d6      	bne.n	80159ae <_vfiprintf_r+0x19a>
 8015a00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a02:	07d9      	lsls	r1, r3, #31
 8015a04:	d405      	bmi.n	8015a12 <_vfiprintf_r+0x1fe>
 8015a06:	89ab      	ldrh	r3, [r5, #12]
 8015a08:	059a      	lsls	r2, r3, #22
 8015a0a:	d402      	bmi.n	8015a12 <_vfiprintf_r+0x1fe>
 8015a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a0e:	f7fe fb43 	bl	8014098 <__retarget_lock_release_recursive>
 8015a12:	89ab      	ldrh	r3, [r5, #12]
 8015a14:	065b      	lsls	r3, r3, #25
 8015a16:	f53f af1f 	bmi.w	8015858 <_vfiprintf_r+0x44>
 8015a1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015a1c:	e71e      	b.n	801585c <_vfiprintf_r+0x48>
 8015a1e:	ab03      	add	r3, sp, #12
 8015a20:	9300      	str	r3, [sp, #0]
 8015a22:	462a      	mov	r2, r5
 8015a24:	4b05      	ldr	r3, [pc, #20]	@ (8015a3c <_vfiprintf_r+0x228>)
 8015a26:	a904      	add	r1, sp, #16
 8015a28:	4630      	mov	r0, r6
 8015a2a:	f000 f879 	bl	8015b20 <_printf_i>
 8015a2e:	e7e4      	b.n	80159fa <_vfiprintf_r+0x1e6>
 8015a30:	08017207 	.word	0x08017207
 8015a34:	08017211 	.word	0x08017211
 8015a38:	00000000 	.word	0x00000000
 8015a3c:	080157ef 	.word	0x080157ef
 8015a40:	0801720d 	.word	0x0801720d

08015a44 <_printf_common>:
 8015a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a48:	4616      	mov	r6, r2
 8015a4a:	4698      	mov	r8, r3
 8015a4c:	688a      	ldr	r2, [r1, #8]
 8015a4e:	690b      	ldr	r3, [r1, #16]
 8015a50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015a54:	4293      	cmp	r3, r2
 8015a56:	bfb8      	it	lt
 8015a58:	4613      	movlt	r3, r2
 8015a5a:	6033      	str	r3, [r6, #0]
 8015a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015a60:	4607      	mov	r7, r0
 8015a62:	460c      	mov	r4, r1
 8015a64:	b10a      	cbz	r2, 8015a6a <_printf_common+0x26>
 8015a66:	3301      	adds	r3, #1
 8015a68:	6033      	str	r3, [r6, #0]
 8015a6a:	6823      	ldr	r3, [r4, #0]
 8015a6c:	0699      	lsls	r1, r3, #26
 8015a6e:	bf42      	ittt	mi
 8015a70:	6833      	ldrmi	r3, [r6, #0]
 8015a72:	3302      	addmi	r3, #2
 8015a74:	6033      	strmi	r3, [r6, #0]
 8015a76:	6825      	ldr	r5, [r4, #0]
 8015a78:	f015 0506 	ands.w	r5, r5, #6
 8015a7c:	d106      	bne.n	8015a8c <_printf_common+0x48>
 8015a7e:	f104 0a19 	add.w	sl, r4, #25
 8015a82:	68e3      	ldr	r3, [r4, #12]
 8015a84:	6832      	ldr	r2, [r6, #0]
 8015a86:	1a9b      	subs	r3, r3, r2
 8015a88:	42ab      	cmp	r3, r5
 8015a8a:	dc26      	bgt.n	8015ada <_printf_common+0x96>
 8015a8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015a90:	6822      	ldr	r2, [r4, #0]
 8015a92:	3b00      	subs	r3, #0
 8015a94:	bf18      	it	ne
 8015a96:	2301      	movne	r3, #1
 8015a98:	0692      	lsls	r2, r2, #26
 8015a9a:	d42b      	bmi.n	8015af4 <_printf_common+0xb0>
 8015a9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015aa0:	4641      	mov	r1, r8
 8015aa2:	4638      	mov	r0, r7
 8015aa4:	47c8      	blx	r9
 8015aa6:	3001      	adds	r0, #1
 8015aa8:	d01e      	beq.n	8015ae8 <_printf_common+0xa4>
 8015aaa:	6823      	ldr	r3, [r4, #0]
 8015aac:	6922      	ldr	r2, [r4, #16]
 8015aae:	f003 0306 	and.w	r3, r3, #6
 8015ab2:	2b04      	cmp	r3, #4
 8015ab4:	bf02      	ittt	eq
 8015ab6:	68e5      	ldreq	r5, [r4, #12]
 8015ab8:	6833      	ldreq	r3, [r6, #0]
 8015aba:	1aed      	subeq	r5, r5, r3
 8015abc:	68a3      	ldr	r3, [r4, #8]
 8015abe:	bf0c      	ite	eq
 8015ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ac4:	2500      	movne	r5, #0
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	bfc4      	itt	gt
 8015aca:	1a9b      	subgt	r3, r3, r2
 8015acc:	18ed      	addgt	r5, r5, r3
 8015ace:	2600      	movs	r6, #0
 8015ad0:	341a      	adds	r4, #26
 8015ad2:	42b5      	cmp	r5, r6
 8015ad4:	d11a      	bne.n	8015b0c <_printf_common+0xc8>
 8015ad6:	2000      	movs	r0, #0
 8015ad8:	e008      	b.n	8015aec <_printf_common+0xa8>
 8015ada:	2301      	movs	r3, #1
 8015adc:	4652      	mov	r2, sl
 8015ade:	4641      	mov	r1, r8
 8015ae0:	4638      	mov	r0, r7
 8015ae2:	47c8      	blx	r9
 8015ae4:	3001      	adds	r0, #1
 8015ae6:	d103      	bne.n	8015af0 <_printf_common+0xac>
 8015ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8015aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015af0:	3501      	adds	r5, #1
 8015af2:	e7c6      	b.n	8015a82 <_printf_common+0x3e>
 8015af4:	18e1      	adds	r1, r4, r3
 8015af6:	1c5a      	adds	r2, r3, #1
 8015af8:	2030      	movs	r0, #48	@ 0x30
 8015afa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015afe:	4422      	add	r2, r4
 8015b00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015b04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015b08:	3302      	adds	r3, #2
 8015b0a:	e7c7      	b.n	8015a9c <_printf_common+0x58>
 8015b0c:	2301      	movs	r3, #1
 8015b0e:	4622      	mov	r2, r4
 8015b10:	4641      	mov	r1, r8
 8015b12:	4638      	mov	r0, r7
 8015b14:	47c8      	blx	r9
 8015b16:	3001      	adds	r0, #1
 8015b18:	d0e6      	beq.n	8015ae8 <_printf_common+0xa4>
 8015b1a:	3601      	adds	r6, #1
 8015b1c:	e7d9      	b.n	8015ad2 <_printf_common+0x8e>
	...

08015b20 <_printf_i>:
 8015b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b24:	7e0f      	ldrb	r7, [r1, #24]
 8015b26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015b28:	2f78      	cmp	r7, #120	@ 0x78
 8015b2a:	4691      	mov	r9, r2
 8015b2c:	4680      	mov	r8, r0
 8015b2e:	460c      	mov	r4, r1
 8015b30:	469a      	mov	sl, r3
 8015b32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015b36:	d807      	bhi.n	8015b48 <_printf_i+0x28>
 8015b38:	2f62      	cmp	r7, #98	@ 0x62
 8015b3a:	d80a      	bhi.n	8015b52 <_printf_i+0x32>
 8015b3c:	2f00      	cmp	r7, #0
 8015b3e:	f000 80d1 	beq.w	8015ce4 <_printf_i+0x1c4>
 8015b42:	2f58      	cmp	r7, #88	@ 0x58
 8015b44:	f000 80b8 	beq.w	8015cb8 <_printf_i+0x198>
 8015b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015b50:	e03a      	b.n	8015bc8 <_printf_i+0xa8>
 8015b52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015b56:	2b15      	cmp	r3, #21
 8015b58:	d8f6      	bhi.n	8015b48 <_printf_i+0x28>
 8015b5a:	a101      	add	r1, pc, #4	@ (adr r1, 8015b60 <_printf_i+0x40>)
 8015b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b60:	08015bb9 	.word	0x08015bb9
 8015b64:	08015bcd 	.word	0x08015bcd
 8015b68:	08015b49 	.word	0x08015b49
 8015b6c:	08015b49 	.word	0x08015b49
 8015b70:	08015b49 	.word	0x08015b49
 8015b74:	08015b49 	.word	0x08015b49
 8015b78:	08015bcd 	.word	0x08015bcd
 8015b7c:	08015b49 	.word	0x08015b49
 8015b80:	08015b49 	.word	0x08015b49
 8015b84:	08015b49 	.word	0x08015b49
 8015b88:	08015b49 	.word	0x08015b49
 8015b8c:	08015ccb 	.word	0x08015ccb
 8015b90:	08015bf7 	.word	0x08015bf7
 8015b94:	08015c85 	.word	0x08015c85
 8015b98:	08015b49 	.word	0x08015b49
 8015b9c:	08015b49 	.word	0x08015b49
 8015ba0:	08015ced 	.word	0x08015ced
 8015ba4:	08015b49 	.word	0x08015b49
 8015ba8:	08015bf7 	.word	0x08015bf7
 8015bac:	08015b49 	.word	0x08015b49
 8015bb0:	08015b49 	.word	0x08015b49
 8015bb4:	08015c8d 	.word	0x08015c8d
 8015bb8:	6833      	ldr	r3, [r6, #0]
 8015bba:	1d1a      	adds	r2, r3, #4
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	6032      	str	r2, [r6, #0]
 8015bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015bc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015bc8:	2301      	movs	r3, #1
 8015bca:	e09c      	b.n	8015d06 <_printf_i+0x1e6>
 8015bcc:	6833      	ldr	r3, [r6, #0]
 8015bce:	6820      	ldr	r0, [r4, #0]
 8015bd0:	1d19      	adds	r1, r3, #4
 8015bd2:	6031      	str	r1, [r6, #0]
 8015bd4:	0606      	lsls	r6, r0, #24
 8015bd6:	d501      	bpl.n	8015bdc <_printf_i+0xbc>
 8015bd8:	681d      	ldr	r5, [r3, #0]
 8015bda:	e003      	b.n	8015be4 <_printf_i+0xc4>
 8015bdc:	0645      	lsls	r5, r0, #25
 8015bde:	d5fb      	bpl.n	8015bd8 <_printf_i+0xb8>
 8015be0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015be4:	2d00      	cmp	r5, #0
 8015be6:	da03      	bge.n	8015bf0 <_printf_i+0xd0>
 8015be8:	232d      	movs	r3, #45	@ 0x2d
 8015bea:	426d      	negs	r5, r5
 8015bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015bf0:	4858      	ldr	r0, [pc, #352]	@ (8015d54 <_printf_i+0x234>)
 8015bf2:	230a      	movs	r3, #10
 8015bf4:	e011      	b.n	8015c1a <_printf_i+0xfa>
 8015bf6:	6821      	ldr	r1, [r4, #0]
 8015bf8:	6833      	ldr	r3, [r6, #0]
 8015bfa:	0608      	lsls	r0, r1, #24
 8015bfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8015c00:	d402      	bmi.n	8015c08 <_printf_i+0xe8>
 8015c02:	0649      	lsls	r1, r1, #25
 8015c04:	bf48      	it	mi
 8015c06:	b2ad      	uxthmi	r5, r5
 8015c08:	2f6f      	cmp	r7, #111	@ 0x6f
 8015c0a:	4852      	ldr	r0, [pc, #328]	@ (8015d54 <_printf_i+0x234>)
 8015c0c:	6033      	str	r3, [r6, #0]
 8015c0e:	bf14      	ite	ne
 8015c10:	230a      	movne	r3, #10
 8015c12:	2308      	moveq	r3, #8
 8015c14:	2100      	movs	r1, #0
 8015c16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015c1a:	6866      	ldr	r6, [r4, #4]
 8015c1c:	60a6      	str	r6, [r4, #8]
 8015c1e:	2e00      	cmp	r6, #0
 8015c20:	db05      	blt.n	8015c2e <_printf_i+0x10e>
 8015c22:	6821      	ldr	r1, [r4, #0]
 8015c24:	432e      	orrs	r6, r5
 8015c26:	f021 0104 	bic.w	r1, r1, #4
 8015c2a:	6021      	str	r1, [r4, #0]
 8015c2c:	d04b      	beq.n	8015cc6 <_printf_i+0x1a6>
 8015c2e:	4616      	mov	r6, r2
 8015c30:	fbb5 f1f3 	udiv	r1, r5, r3
 8015c34:	fb03 5711 	mls	r7, r3, r1, r5
 8015c38:	5dc7      	ldrb	r7, [r0, r7]
 8015c3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015c3e:	462f      	mov	r7, r5
 8015c40:	42bb      	cmp	r3, r7
 8015c42:	460d      	mov	r5, r1
 8015c44:	d9f4      	bls.n	8015c30 <_printf_i+0x110>
 8015c46:	2b08      	cmp	r3, #8
 8015c48:	d10b      	bne.n	8015c62 <_printf_i+0x142>
 8015c4a:	6823      	ldr	r3, [r4, #0]
 8015c4c:	07df      	lsls	r7, r3, #31
 8015c4e:	d508      	bpl.n	8015c62 <_printf_i+0x142>
 8015c50:	6923      	ldr	r3, [r4, #16]
 8015c52:	6861      	ldr	r1, [r4, #4]
 8015c54:	4299      	cmp	r1, r3
 8015c56:	bfde      	ittt	le
 8015c58:	2330      	movle	r3, #48	@ 0x30
 8015c5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015c5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015c62:	1b92      	subs	r2, r2, r6
 8015c64:	6122      	str	r2, [r4, #16]
 8015c66:	f8cd a000 	str.w	sl, [sp]
 8015c6a:	464b      	mov	r3, r9
 8015c6c:	aa03      	add	r2, sp, #12
 8015c6e:	4621      	mov	r1, r4
 8015c70:	4640      	mov	r0, r8
 8015c72:	f7ff fee7 	bl	8015a44 <_printf_common>
 8015c76:	3001      	adds	r0, #1
 8015c78:	d14a      	bne.n	8015d10 <_printf_i+0x1f0>
 8015c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c7e:	b004      	add	sp, #16
 8015c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c84:	6823      	ldr	r3, [r4, #0]
 8015c86:	f043 0320 	orr.w	r3, r3, #32
 8015c8a:	6023      	str	r3, [r4, #0]
 8015c8c:	4832      	ldr	r0, [pc, #200]	@ (8015d58 <_printf_i+0x238>)
 8015c8e:	2778      	movs	r7, #120	@ 0x78
 8015c90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015c94:	6823      	ldr	r3, [r4, #0]
 8015c96:	6831      	ldr	r1, [r6, #0]
 8015c98:	061f      	lsls	r7, r3, #24
 8015c9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8015c9e:	d402      	bmi.n	8015ca6 <_printf_i+0x186>
 8015ca0:	065f      	lsls	r7, r3, #25
 8015ca2:	bf48      	it	mi
 8015ca4:	b2ad      	uxthmi	r5, r5
 8015ca6:	6031      	str	r1, [r6, #0]
 8015ca8:	07d9      	lsls	r1, r3, #31
 8015caa:	bf44      	itt	mi
 8015cac:	f043 0320 	orrmi.w	r3, r3, #32
 8015cb0:	6023      	strmi	r3, [r4, #0]
 8015cb2:	b11d      	cbz	r5, 8015cbc <_printf_i+0x19c>
 8015cb4:	2310      	movs	r3, #16
 8015cb6:	e7ad      	b.n	8015c14 <_printf_i+0xf4>
 8015cb8:	4826      	ldr	r0, [pc, #152]	@ (8015d54 <_printf_i+0x234>)
 8015cba:	e7e9      	b.n	8015c90 <_printf_i+0x170>
 8015cbc:	6823      	ldr	r3, [r4, #0]
 8015cbe:	f023 0320 	bic.w	r3, r3, #32
 8015cc2:	6023      	str	r3, [r4, #0]
 8015cc4:	e7f6      	b.n	8015cb4 <_printf_i+0x194>
 8015cc6:	4616      	mov	r6, r2
 8015cc8:	e7bd      	b.n	8015c46 <_printf_i+0x126>
 8015cca:	6833      	ldr	r3, [r6, #0]
 8015ccc:	6825      	ldr	r5, [r4, #0]
 8015cce:	6961      	ldr	r1, [r4, #20]
 8015cd0:	1d18      	adds	r0, r3, #4
 8015cd2:	6030      	str	r0, [r6, #0]
 8015cd4:	062e      	lsls	r6, r5, #24
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	d501      	bpl.n	8015cde <_printf_i+0x1be>
 8015cda:	6019      	str	r1, [r3, #0]
 8015cdc:	e002      	b.n	8015ce4 <_printf_i+0x1c4>
 8015cde:	0668      	lsls	r0, r5, #25
 8015ce0:	d5fb      	bpl.n	8015cda <_printf_i+0x1ba>
 8015ce2:	8019      	strh	r1, [r3, #0]
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	6123      	str	r3, [r4, #16]
 8015ce8:	4616      	mov	r6, r2
 8015cea:	e7bc      	b.n	8015c66 <_printf_i+0x146>
 8015cec:	6833      	ldr	r3, [r6, #0]
 8015cee:	1d1a      	adds	r2, r3, #4
 8015cf0:	6032      	str	r2, [r6, #0]
 8015cf2:	681e      	ldr	r6, [r3, #0]
 8015cf4:	6862      	ldr	r2, [r4, #4]
 8015cf6:	2100      	movs	r1, #0
 8015cf8:	4630      	mov	r0, r6
 8015cfa:	f7f2 faa1 	bl	8008240 <memchr>
 8015cfe:	b108      	cbz	r0, 8015d04 <_printf_i+0x1e4>
 8015d00:	1b80      	subs	r0, r0, r6
 8015d02:	6060      	str	r0, [r4, #4]
 8015d04:	6863      	ldr	r3, [r4, #4]
 8015d06:	6123      	str	r3, [r4, #16]
 8015d08:	2300      	movs	r3, #0
 8015d0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015d0e:	e7aa      	b.n	8015c66 <_printf_i+0x146>
 8015d10:	6923      	ldr	r3, [r4, #16]
 8015d12:	4632      	mov	r2, r6
 8015d14:	4649      	mov	r1, r9
 8015d16:	4640      	mov	r0, r8
 8015d18:	47d0      	blx	sl
 8015d1a:	3001      	adds	r0, #1
 8015d1c:	d0ad      	beq.n	8015c7a <_printf_i+0x15a>
 8015d1e:	6823      	ldr	r3, [r4, #0]
 8015d20:	079b      	lsls	r3, r3, #30
 8015d22:	d413      	bmi.n	8015d4c <_printf_i+0x22c>
 8015d24:	68e0      	ldr	r0, [r4, #12]
 8015d26:	9b03      	ldr	r3, [sp, #12]
 8015d28:	4298      	cmp	r0, r3
 8015d2a:	bfb8      	it	lt
 8015d2c:	4618      	movlt	r0, r3
 8015d2e:	e7a6      	b.n	8015c7e <_printf_i+0x15e>
 8015d30:	2301      	movs	r3, #1
 8015d32:	4632      	mov	r2, r6
 8015d34:	4649      	mov	r1, r9
 8015d36:	4640      	mov	r0, r8
 8015d38:	47d0      	blx	sl
 8015d3a:	3001      	adds	r0, #1
 8015d3c:	d09d      	beq.n	8015c7a <_printf_i+0x15a>
 8015d3e:	3501      	adds	r5, #1
 8015d40:	68e3      	ldr	r3, [r4, #12]
 8015d42:	9903      	ldr	r1, [sp, #12]
 8015d44:	1a5b      	subs	r3, r3, r1
 8015d46:	42ab      	cmp	r3, r5
 8015d48:	dcf2      	bgt.n	8015d30 <_printf_i+0x210>
 8015d4a:	e7eb      	b.n	8015d24 <_printf_i+0x204>
 8015d4c:	2500      	movs	r5, #0
 8015d4e:	f104 0619 	add.w	r6, r4, #25
 8015d52:	e7f5      	b.n	8015d40 <_printf_i+0x220>
 8015d54:	08017218 	.word	0x08017218
 8015d58:	08017229 	.word	0x08017229

08015d5c <_scanf_chars>:
 8015d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d60:	4615      	mov	r5, r2
 8015d62:	688a      	ldr	r2, [r1, #8]
 8015d64:	4680      	mov	r8, r0
 8015d66:	460c      	mov	r4, r1
 8015d68:	b932      	cbnz	r2, 8015d78 <_scanf_chars+0x1c>
 8015d6a:	698a      	ldr	r2, [r1, #24]
 8015d6c:	2a00      	cmp	r2, #0
 8015d6e:	bf14      	ite	ne
 8015d70:	f04f 32ff 	movne.w	r2, #4294967295
 8015d74:	2201      	moveq	r2, #1
 8015d76:	608a      	str	r2, [r1, #8]
 8015d78:	6822      	ldr	r2, [r4, #0]
 8015d7a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8015e0c <_scanf_chars+0xb0>
 8015d7e:	06d1      	lsls	r1, r2, #27
 8015d80:	bf5f      	itttt	pl
 8015d82:	681a      	ldrpl	r2, [r3, #0]
 8015d84:	1d11      	addpl	r1, r2, #4
 8015d86:	6019      	strpl	r1, [r3, #0]
 8015d88:	6816      	ldrpl	r6, [r2, #0]
 8015d8a:	2700      	movs	r7, #0
 8015d8c:	69a0      	ldr	r0, [r4, #24]
 8015d8e:	b188      	cbz	r0, 8015db4 <_scanf_chars+0x58>
 8015d90:	2801      	cmp	r0, #1
 8015d92:	d107      	bne.n	8015da4 <_scanf_chars+0x48>
 8015d94:	682b      	ldr	r3, [r5, #0]
 8015d96:	781a      	ldrb	r2, [r3, #0]
 8015d98:	6963      	ldr	r3, [r4, #20]
 8015d9a:	5c9b      	ldrb	r3, [r3, r2]
 8015d9c:	b953      	cbnz	r3, 8015db4 <_scanf_chars+0x58>
 8015d9e:	2f00      	cmp	r7, #0
 8015da0:	d031      	beq.n	8015e06 <_scanf_chars+0xaa>
 8015da2:	e022      	b.n	8015dea <_scanf_chars+0x8e>
 8015da4:	2802      	cmp	r0, #2
 8015da6:	d120      	bne.n	8015dea <_scanf_chars+0x8e>
 8015da8:	682b      	ldr	r3, [r5, #0]
 8015daa:	781b      	ldrb	r3, [r3, #0]
 8015dac:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015db0:	071b      	lsls	r3, r3, #28
 8015db2:	d41a      	bmi.n	8015dea <_scanf_chars+0x8e>
 8015db4:	6823      	ldr	r3, [r4, #0]
 8015db6:	06da      	lsls	r2, r3, #27
 8015db8:	bf5e      	ittt	pl
 8015dba:	682b      	ldrpl	r3, [r5, #0]
 8015dbc:	781b      	ldrbpl	r3, [r3, #0]
 8015dbe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015dc2:	682a      	ldr	r2, [r5, #0]
 8015dc4:	686b      	ldr	r3, [r5, #4]
 8015dc6:	3201      	adds	r2, #1
 8015dc8:	602a      	str	r2, [r5, #0]
 8015dca:	68a2      	ldr	r2, [r4, #8]
 8015dcc:	3b01      	subs	r3, #1
 8015dce:	3a01      	subs	r2, #1
 8015dd0:	606b      	str	r3, [r5, #4]
 8015dd2:	3701      	adds	r7, #1
 8015dd4:	60a2      	str	r2, [r4, #8]
 8015dd6:	b142      	cbz	r2, 8015dea <_scanf_chars+0x8e>
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	dcd7      	bgt.n	8015d8c <_scanf_chars+0x30>
 8015ddc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015de0:	4629      	mov	r1, r5
 8015de2:	4640      	mov	r0, r8
 8015de4:	4798      	blx	r3
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d0d0      	beq.n	8015d8c <_scanf_chars+0x30>
 8015dea:	6823      	ldr	r3, [r4, #0]
 8015dec:	f013 0310 	ands.w	r3, r3, #16
 8015df0:	d105      	bne.n	8015dfe <_scanf_chars+0xa2>
 8015df2:	68e2      	ldr	r2, [r4, #12]
 8015df4:	3201      	adds	r2, #1
 8015df6:	60e2      	str	r2, [r4, #12]
 8015df8:	69a2      	ldr	r2, [r4, #24]
 8015dfa:	b102      	cbz	r2, 8015dfe <_scanf_chars+0xa2>
 8015dfc:	7033      	strb	r3, [r6, #0]
 8015dfe:	6923      	ldr	r3, [r4, #16]
 8015e00:	443b      	add	r3, r7
 8015e02:	6123      	str	r3, [r4, #16]
 8015e04:	2000      	movs	r0, #0
 8015e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e0a:	bf00      	nop
 8015e0c:	080172e9 	.word	0x080172e9

08015e10 <_scanf_i>:
 8015e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e14:	4698      	mov	r8, r3
 8015e16:	4b74      	ldr	r3, [pc, #464]	@ (8015fe8 <_scanf_i+0x1d8>)
 8015e18:	460c      	mov	r4, r1
 8015e1a:	4682      	mov	sl, r0
 8015e1c:	4616      	mov	r6, r2
 8015e1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015e22:	b087      	sub	sp, #28
 8015e24:	ab03      	add	r3, sp, #12
 8015e26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015e2a:	4b70      	ldr	r3, [pc, #448]	@ (8015fec <_scanf_i+0x1dc>)
 8015e2c:	69a1      	ldr	r1, [r4, #24]
 8015e2e:	4a70      	ldr	r2, [pc, #448]	@ (8015ff0 <_scanf_i+0x1e0>)
 8015e30:	2903      	cmp	r1, #3
 8015e32:	bf08      	it	eq
 8015e34:	461a      	moveq	r2, r3
 8015e36:	68a3      	ldr	r3, [r4, #8]
 8015e38:	9201      	str	r2, [sp, #4]
 8015e3a:	1e5a      	subs	r2, r3, #1
 8015e3c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8015e40:	bf88      	it	hi
 8015e42:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8015e46:	4627      	mov	r7, r4
 8015e48:	bf82      	ittt	hi
 8015e4a:	eb03 0905 	addhi.w	r9, r3, r5
 8015e4e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8015e52:	60a3      	strhi	r3, [r4, #8]
 8015e54:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015e58:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8015e5c:	bf98      	it	ls
 8015e5e:	f04f 0900 	movls.w	r9, #0
 8015e62:	6023      	str	r3, [r4, #0]
 8015e64:	463d      	mov	r5, r7
 8015e66:	f04f 0b00 	mov.w	fp, #0
 8015e6a:	6831      	ldr	r1, [r6, #0]
 8015e6c:	ab03      	add	r3, sp, #12
 8015e6e:	7809      	ldrb	r1, [r1, #0]
 8015e70:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015e74:	2202      	movs	r2, #2
 8015e76:	f7f2 f9e3 	bl	8008240 <memchr>
 8015e7a:	b328      	cbz	r0, 8015ec8 <_scanf_i+0xb8>
 8015e7c:	f1bb 0f01 	cmp.w	fp, #1
 8015e80:	d159      	bne.n	8015f36 <_scanf_i+0x126>
 8015e82:	6862      	ldr	r2, [r4, #4]
 8015e84:	b92a      	cbnz	r2, 8015e92 <_scanf_i+0x82>
 8015e86:	6822      	ldr	r2, [r4, #0]
 8015e88:	2108      	movs	r1, #8
 8015e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015e8e:	6061      	str	r1, [r4, #4]
 8015e90:	6022      	str	r2, [r4, #0]
 8015e92:	6822      	ldr	r2, [r4, #0]
 8015e94:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8015e98:	6022      	str	r2, [r4, #0]
 8015e9a:	68a2      	ldr	r2, [r4, #8]
 8015e9c:	1e51      	subs	r1, r2, #1
 8015e9e:	60a1      	str	r1, [r4, #8]
 8015ea0:	b192      	cbz	r2, 8015ec8 <_scanf_i+0xb8>
 8015ea2:	6832      	ldr	r2, [r6, #0]
 8015ea4:	1c51      	adds	r1, r2, #1
 8015ea6:	6031      	str	r1, [r6, #0]
 8015ea8:	7812      	ldrb	r2, [r2, #0]
 8015eaa:	f805 2b01 	strb.w	r2, [r5], #1
 8015eae:	6872      	ldr	r2, [r6, #4]
 8015eb0:	3a01      	subs	r2, #1
 8015eb2:	2a00      	cmp	r2, #0
 8015eb4:	6072      	str	r2, [r6, #4]
 8015eb6:	dc07      	bgt.n	8015ec8 <_scanf_i+0xb8>
 8015eb8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8015ebc:	4631      	mov	r1, r6
 8015ebe:	4650      	mov	r0, sl
 8015ec0:	4790      	blx	r2
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	f040 8085 	bne.w	8015fd2 <_scanf_i+0x1c2>
 8015ec8:	f10b 0b01 	add.w	fp, fp, #1
 8015ecc:	f1bb 0f03 	cmp.w	fp, #3
 8015ed0:	d1cb      	bne.n	8015e6a <_scanf_i+0x5a>
 8015ed2:	6863      	ldr	r3, [r4, #4]
 8015ed4:	b90b      	cbnz	r3, 8015eda <_scanf_i+0xca>
 8015ed6:	230a      	movs	r3, #10
 8015ed8:	6063      	str	r3, [r4, #4]
 8015eda:	6863      	ldr	r3, [r4, #4]
 8015edc:	4945      	ldr	r1, [pc, #276]	@ (8015ff4 <_scanf_i+0x1e4>)
 8015ede:	6960      	ldr	r0, [r4, #20]
 8015ee0:	1ac9      	subs	r1, r1, r3
 8015ee2:	f000 f997 	bl	8016214 <__sccl>
 8015ee6:	f04f 0b00 	mov.w	fp, #0
 8015eea:	68a3      	ldr	r3, [r4, #8]
 8015eec:	6822      	ldr	r2, [r4, #0]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d03d      	beq.n	8015f6e <_scanf_i+0x15e>
 8015ef2:	6831      	ldr	r1, [r6, #0]
 8015ef4:	6960      	ldr	r0, [r4, #20]
 8015ef6:	f891 c000 	ldrb.w	ip, [r1]
 8015efa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015efe:	2800      	cmp	r0, #0
 8015f00:	d035      	beq.n	8015f6e <_scanf_i+0x15e>
 8015f02:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8015f06:	d124      	bne.n	8015f52 <_scanf_i+0x142>
 8015f08:	0510      	lsls	r0, r2, #20
 8015f0a:	d522      	bpl.n	8015f52 <_scanf_i+0x142>
 8015f0c:	f10b 0b01 	add.w	fp, fp, #1
 8015f10:	f1b9 0f00 	cmp.w	r9, #0
 8015f14:	d003      	beq.n	8015f1e <_scanf_i+0x10e>
 8015f16:	3301      	adds	r3, #1
 8015f18:	f109 39ff 	add.w	r9, r9, #4294967295
 8015f1c:	60a3      	str	r3, [r4, #8]
 8015f1e:	6873      	ldr	r3, [r6, #4]
 8015f20:	3b01      	subs	r3, #1
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	6073      	str	r3, [r6, #4]
 8015f26:	dd1b      	ble.n	8015f60 <_scanf_i+0x150>
 8015f28:	6833      	ldr	r3, [r6, #0]
 8015f2a:	3301      	adds	r3, #1
 8015f2c:	6033      	str	r3, [r6, #0]
 8015f2e:	68a3      	ldr	r3, [r4, #8]
 8015f30:	3b01      	subs	r3, #1
 8015f32:	60a3      	str	r3, [r4, #8]
 8015f34:	e7d9      	b.n	8015eea <_scanf_i+0xda>
 8015f36:	f1bb 0f02 	cmp.w	fp, #2
 8015f3a:	d1ae      	bne.n	8015e9a <_scanf_i+0x8a>
 8015f3c:	6822      	ldr	r2, [r4, #0]
 8015f3e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8015f42:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8015f46:	d1c4      	bne.n	8015ed2 <_scanf_i+0xc2>
 8015f48:	2110      	movs	r1, #16
 8015f4a:	6061      	str	r1, [r4, #4]
 8015f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015f50:	e7a2      	b.n	8015e98 <_scanf_i+0x88>
 8015f52:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8015f56:	6022      	str	r2, [r4, #0]
 8015f58:	780b      	ldrb	r3, [r1, #0]
 8015f5a:	f805 3b01 	strb.w	r3, [r5], #1
 8015f5e:	e7de      	b.n	8015f1e <_scanf_i+0x10e>
 8015f60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015f64:	4631      	mov	r1, r6
 8015f66:	4650      	mov	r0, sl
 8015f68:	4798      	blx	r3
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	d0df      	beq.n	8015f2e <_scanf_i+0x11e>
 8015f6e:	6823      	ldr	r3, [r4, #0]
 8015f70:	05d9      	lsls	r1, r3, #23
 8015f72:	d50d      	bpl.n	8015f90 <_scanf_i+0x180>
 8015f74:	42bd      	cmp	r5, r7
 8015f76:	d909      	bls.n	8015f8c <_scanf_i+0x17c>
 8015f78:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015f7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015f80:	4632      	mov	r2, r6
 8015f82:	4650      	mov	r0, sl
 8015f84:	4798      	blx	r3
 8015f86:	f105 39ff 	add.w	r9, r5, #4294967295
 8015f8a:	464d      	mov	r5, r9
 8015f8c:	42bd      	cmp	r5, r7
 8015f8e:	d028      	beq.n	8015fe2 <_scanf_i+0x1d2>
 8015f90:	6822      	ldr	r2, [r4, #0]
 8015f92:	f012 0210 	ands.w	r2, r2, #16
 8015f96:	d113      	bne.n	8015fc0 <_scanf_i+0x1b0>
 8015f98:	702a      	strb	r2, [r5, #0]
 8015f9a:	6863      	ldr	r3, [r4, #4]
 8015f9c:	9e01      	ldr	r6, [sp, #4]
 8015f9e:	4639      	mov	r1, r7
 8015fa0:	4650      	mov	r0, sl
 8015fa2:	47b0      	blx	r6
 8015fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8015fa8:	6821      	ldr	r1, [r4, #0]
 8015faa:	1d1a      	adds	r2, r3, #4
 8015fac:	f8c8 2000 	str.w	r2, [r8]
 8015fb0:	f011 0f20 	tst.w	r1, #32
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	d00f      	beq.n	8015fd8 <_scanf_i+0x1c8>
 8015fb8:	6018      	str	r0, [r3, #0]
 8015fba:	68e3      	ldr	r3, [r4, #12]
 8015fbc:	3301      	adds	r3, #1
 8015fbe:	60e3      	str	r3, [r4, #12]
 8015fc0:	6923      	ldr	r3, [r4, #16]
 8015fc2:	1bed      	subs	r5, r5, r7
 8015fc4:	445d      	add	r5, fp
 8015fc6:	442b      	add	r3, r5
 8015fc8:	6123      	str	r3, [r4, #16]
 8015fca:	2000      	movs	r0, #0
 8015fcc:	b007      	add	sp, #28
 8015fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fd2:	f04f 0b00 	mov.w	fp, #0
 8015fd6:	e7ca      	b.n	8015f6e <_scanf_i+0x15e>
 8015fd8:	07ca      	lsls	r2, r1, #31
 8015fda:	bf4c      	ite	mi
 8015fdc:	8018      	strhmi	r0, [r3, #0]
 8015fde:	6018      	strpl	r0, [r3, #0]
 8015fe0:	e7eb      	b.n	8015fba <_scanf_i+0x1aa>
 8015fe2:	2001      	movs	r0, #1
 8015fe4:	e7f2      	b.n	8015fcc <_scanf_i+0x1bc>
 8015fe6:	bf00      	nop
 8015fe8:	08016904 	.word	0x08016904
 8015fec:	080164cd 	.word	0x080164cd
 8015ff0:	080165ad 	.word	0x080165ad
 8015ff4:	0801724a 	.word	0x0801724a

08015ff8 <__sflush_r>:
 8015ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016000:	0716      	lsls	r6, r2, #28
 8016002:	4605      	mov	r5, r0
 8016004:	460c      	mov	r4, r1
 8016006:	d454      	bmi.n	80160b2 <__sflush_r+0xba>
 8016008:	684b      	ldr	r3, [r1, #4]
 801600a:	2b00      	cmp	r3, #0
 801600c:	dc02      	bgt.n	8016014 <__sflush_r+0x1c>
 801600e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016010:	2b00      	cmp	r3, #0
 8016012:	dd48      	ble.n	80160a6 <__sflush_r+0xae>
 8016014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016016:	2e00      	cmp	r6, #0
 8016018:	d045      	beq.n	80160a6 <__sflush_r+0xae>
 801601a:	2300      	movs	r3, #0
 801601c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016020:	682f      	ldr	r7, [r5, #0]
 8016022:	6a21      	ldr	r1, [r4, #32]
 8016024:	602b      	str	r3, [r5, #0]
 8016026:	d030      	beq.n	801608a <__sflush_r+0x92>
 8016028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801602a:	89a3      	ldrh	r3, [r4, #12]
 801602c:	0759      	lsls	r1, r3, #29
 801602e:	d505      	bpl.n	801603c <__sflush_r+0x44>
 8016030:	6863      	ldr	r3, [r4, #4]
 8016032:	1ad2      	subs	r2, r2, r3
 8016034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016036:	b10b      	cbz	r3, 801603c <__sflush_r+0x44>
 8016038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801603a:	1ad2      	subs	r2, r2, r3
 801603c:	2300      	movs	r3, #0
 801603e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016040:	6a21      	ldr	r1, [r4, #32]
 8016042:	4628      	mov	r0, r5
 8016044:	47b0      	blx	r6
 8016046:	1c43      	adds	r3, r0, #1
 8016048:	89a3      	ldrh	r3, [r4, #12]
 801604a:	d106      	bne.n	801605a <__sflush_r+0x62>
 801604c:	6829      	ldr	r1, [r5, #0]
 801604e:	291d      	cmp	r1, #29
 8016050:	d82b      	bhi.n	80160aa <__sflush_r+0xb2>
 8016052:	4a2a      	ldr	r2, [pc, #168]	@ (80160fc <__sflush_r+0x104>)
 8016054:	40ca      	lsrs	r2, r1
 8016056:	07d6      	lsls	r6, r2, #31
 8016058:	d527      	bpl.n	80160aa <__sflush_r+0xb2>
 801605a:	2200      	movs	r2, #0
 801605c:	6062      	str	r2, [r4, #4]
 801605e:	04d9      	lsls	r1, r3, #19
 8016060:	6922      	ldr	r2, [r4, #16]
 8016062:	6022      	str	r2, [r4, #0]
 8016064:	d504      	bpl.n	8016070 <__sflush_r+0x78>
 8016066:	1c42      	adds	r2, r0, #1
 8016068:	d101      	bne.n	801606e <__sflush_r+0x76>
 801606a:	682b      	ldr	r3, [r5, #0]
 801606c:	b903      	cbnz	r3, 8016070 <__sflush_r+0x78>
 801606e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016072:	602f      	str	r7, [r5, #0]
 8016074:	b1b9      	cbz	r1, 80160a6 <__sflush_r+0xae>
 8016076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801607a:	4299      	cmp	r1, r3
 801607c:	d002      	beq.n	8016084 <__sflush_r+0x8c>
 801607e:	4628      	mov	r0, r5
 8016080:	f7fe f822 	bl	80140c8 <_free_r>
 8016084:	2300      	movs	r3, #0
 8016086:	6363      	str	r3, [r4, #52]	@ 0x34
 8016088:	e00d      	b.n	80160a6 <__sflush_r+0xae>
 801608a:	2301      	movs	r3, #1
 801608c:	4628      	mov	r0, r5
 801608e:	47b0      	blx	r6
 8016090:	4602      	mov	r2, r0
 8016092:	1c50      	adds	r0, r2, #1
 8016094:	d1c9      	bne.n	801602a <__sflush_r+0x32>
 8016096:	682b      	ldr	r3, [r5, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d0c6      	beq.n	801602a <__sflush_r+0x32>
 801609c:	2b1d      	cmp	r3, #29
 801609e:	d001      	beq.n	80160a4 <__sflush_r+0xac>
 80160a0:	2b16      	cmp	r3, #22
 80160a2:	d11e      	bne.n	80160e2 <__sflush_r+0xea>
 80160a4:	602f      	str	r7, [r5, #0]
 80160a6:	2000      	movs	r0, #0
 80160a8:	e022      	b.n	80160f0 <__sflush_r+0xf8>
 80160aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80160ae:	b21b      	sxth	r3, r3
 80160b0:	e01b      	b.n	80160ea <__sflush_r+0xf2>
 80160b2:	690f      	ldr	r7, [r1, #16]
 80160b4:	2f00      	cmp	r7, #0
 80160b6:	d0f6      	beq.n	80160a6 <__sflush_r+0xae>
 80160b8:	0793      	lsls	r3, r2, #30
 80160ba:	680e      	ldr	r6, [r1, #0]
 80160bc:	bf08      	it	eq
 80160be:	694b      	ldreq	r3, [r1, #20]
 80160c0:	600f      	str	r7, [r1, #0]
 80160c2:	bf18      	it	ne
 80160c4:	2300      	movne	r3, #0
 80160c6:	eba6 0807 	sub.w	r8, r6, r7
 80160ca:	608b      	str	r3, [r1, #8]
 80160cc:	f1b8 0f00 	cmp.w	r8, #0
 80160d0:	dde9      	ble.n	80160a6 <__sflush_r+0xae>
 80160d2:	6a21      	ldr	r1, [r4, #32]
 80160d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80160d6:	4643      	mov	r3, r8
 80160d8:	463a      	mov	r2, r7
 80160da:	4628      	mov	r0, r5
 80160dc:	47b0      	blx	r6
 80160de:	2800      	cmp	r0, #0
 80160e0:	dc08      	bgt.n	80160f4 <__sflush_r+0xfc>
 80160e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80160ea:	81a3      	strh	r3, [r4, #12]
 80160ec:	f04f 30ff 	mov.w	r0, #4294967295
 80160f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160f4:	4407      	add	r7, r0
 80160f6:	eba8 0800 	sub.w	r8, r8, r0
 80160fa:	e7e7      	b.n	80160cc <__sflush_r+0xd4>
 80160fc:	20400001 	.word	0x20400001

08016100 <_fflush_r>:
 8016100:	b538      	push	{r3, r4, r5, lr}
 8016102:	690b      	ldr	r3, [r1, #16]
 8016104:	4605      	mov	r5, r0
 8016106:	460c      	mov	r4, r1
 8016108:	b913      	cbnz	r3, 8016110 <_fflush_r+0x10>
 801610a:	2500      	movs	r5, #0
 801610c:	4628      	mov	r0, r5
 801610e:	bd38      	pop	{r3, r4, r5, pc}
 8016110:	b118      	cbz	r0, 801611a <_fflush_r+0x1a>
 8016112:	6a03      	ldr	r3, [r0, #32]
 8016114:	b90b      	cbnz	r3, 801611a <_fflush_r+0x1a>
 8016116:	f7fd fceb 	bl	8013af0 <__sinit>
 801611a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d0f3      	beq.n	801610a <_fflush_r+0xa>
 8016122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016124:	07d0      	lsls	r0, r2, #31
 8016126:	d404      	bmi.n	8016132 <_fflush_r+0x32>
 8016128:	0599      	lsls	r1, r3, #22
 801612a:	d402      	bmi.n	8016132 <_fflush_r+0x32>
 801612c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801612e:	f7fd ffb2 	bl	8014096 <__retarget_lock_acquire_recursive>
 8016132:	4628      	mov	r0, r5
 8016134:	4621      	mov	r1, r4
 8016136:	f7ff ff5f 	bl	8015ff8 <__sflush_r>
 801613a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801613c:	07da      	lsls	r2, r3, #31
 801613e:	4605      	mov	r5, r0
 8016140:	d4e4      	bmi.n	801610c <_fflush_r+0xc>
 8016142:	89a3      	ldrh	r3, [r4, #12]
 8016144:	059b      	lsls	r3, r3, #22
 8016146:	d4e1      	bmi.n	801610c <_fflush_r+0xc>
 8016148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801614a:	f7fd ffa5 	bl	8014098 <__retarget_lock_release_recursive>
 801614e:	e7dd      	b.n	801610c <_fflush_r+0xc>

08016150 <__swhatbuf_r>:
 8016150:	b570      	push	{r4, r5, r6, lr}
 8016152:	460c      	mov	r4, r1
 8016154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016158:	2900      	cmp	r1, #0
 801615a:	b096      	sub	sp, #88	@ 0x58
 801615c:	4615      	mov	r5, r2
 801615e:	461e      	mov	r6, r3
 8016160:	da0d      	bge.n	801617e <__swhatbuf_r+0x2e>
 8016162:	89a3      	ldrh	r3, [r4, #12]
 8016164:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016168:	f04f 0100 	mov.w	r1, #0
 801616c:	bf14      	ite	ne
 801616e:	2340      	movne	r3, #64	@ 0x40
 8016170:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016174:	2000      	movs	r0, #0
 8016176:	6031      	str	r1, [r6, #0]
 8016178:	602b      	str	r3, [r5, #0]
 801617a:	b016      	add	sp, #88	@ 0x58
 801617c:	bd70      	pop	{r4, r5, r6, pc}
 801617e:	466a      	mov	r2, sp
 8016180:	f000 f8d6 	bl	8016330 <_fstat_r>
 8016184:	2800      	cmp	r0, #0
 8016186:	dbec      	blt.n	8016162 <__swhatbuf_r+0x12>
 8016188:	9901      	ldr	r1, [sp, #4]
 801618a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801618e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016192:	4259      	negs	r1, r3
 8016194:	4159      	adcs	r1, r3
 8016196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801619a:	e7eb      	b.n	8016174 <__swhatbuf_r+0x24>

0801619c <__smakebuf_r>:
 801619c:	898b      	ldrh	r3, [r1, #12]
 801619e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161a0:	079d      	lsls	r5, r3, #30
 80161a2:	4606      	mov	r6, r0
 80161a4:	460c      	mov	r4, r1
 80161a6:	d507      	bpl.n	80161b8 <__smakebuf_r+0x1c>
 80161a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80161ac:	6023      	str	r3, [r4, #0]
 80161ae:	6123      	str	r3, [r4, #16]
 80161b0:	2301      	movs	r3, #1
 80161b2:	6163      	str	r3, [r4, #20]
 80161b4:	b003      	add	sp, #12
 80161b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161b8:	ab01      	add	r3, sp, #4
 80161ba:	466a      	mov	r2, sp
 80161bc:	f7ff ffc8 	bl	8016150 <__swhatbuf_r>
 80161c0:	9f00      	ldr	r7, [sp, #0]
 80161c2:	4605      	mov	r5, r0
 80161c4:	4639      	mov	r1, r7
 80161c6:	4630      	mov	r0, r6
 80161c8:	f7fc fd36 	bl	8012c38 <_malloc_r>
 80161cc:	b948      	cbnz	r0, 80161e2 <__smakebuf_r+0x46>
 80161ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161d2:	059a      	lsls	r2, r3, #22
 80161d4:	d4ee      	bmi.n	80161b4 <__smakebuf_r+0x18>
 80161d6:	f023 0303 	bic.w	r3, r3, #3
 80161da:	f043 0302 	orr.w	r3, r3, #2
 80161de:	81a3      	strh	r3, [r4, #12]
 80161e0:	e7e2      	b.n	80161a8 <__smakebuf_r+0xc>
 80161e2:	89a3      	ldrh	r3, [r4, #12]
 80161e4:	6020      	str	r0, [r4, #0]
 80161e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80161ea:	81a3      	strh	r3, [r4, #12]
 80161ec:	9b01      	ldr	r3, [sp, #4]
 80161ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80161f2:	b15b      	cbz	r3, 801620c <__smakebuf_r+0x70>
 80161f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161f8:	4630      	mov	r0, r6
 80161fa:	f000 f8ab 	bl	8016354 <_isatty_r>
 80161fe:	b128      	cbz	r0, 801620c <__smakebuf_r+0x70>
 8016200:	89a3      	ldrh	r3, [r4, #12]
 8016202:	f023 0303 	bic.w	r3, r3, #3
 8016206:	f043 0301 	orr.w	r3, r3, #1
 801620a:	81a3      	strh	r3, [r4, #12]
 801620c:	89a3      	ldrh	r3, [r4, #12]
 801620e:	431d      	orrs	r5, r3
 8016210:	81a5      	strh	r5, [r4, #12]
 8016212:	e7cf      	b.n	80161b4 <__smakebuf_r+0x18>

08016214 <__sccl>:
 8016214:	b570      	push	{r4, r5, r6, lr}
 8016216:	780b      	ldrb	r3, [r1, #0]
 8016218:	4604      	mov	r4, r0
 801621a:	2b5e      	cmp	r3, #94	@ 0x5e
 801621c:	bf0b      	itete	eq
 801621e:	784b      	ldrbeq	r3, [r1, #1]
 8016220:	1c4a      	addne	r2, r1, #1
 8016222:	1c8a      	addeq	r2, r1, #2
 8016224:	2100      	movne	r1, #0
 8016226:	bf08      	it	eq
 8016228:	2101      	moveq	r1, #1
 801622a:	3801      	subs	r0, #1
 801622c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016230:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016234:	42a8      	cmp	r0, r5
 8016236:	d1fb      	bne.n	8016230 <__sccl+0x1c>
 8016238:	b90b      	cbnz	r3, 801623e <__sccl+0x2a>
 801623a:	1e50      	subs	r0, r2, #1
 801623c:	bd70      	pop	{r4, r5, r6, pc}
 801623e:	f081 0101 	eor.w	r1, r1, #1
 8016242:	54e1      	strb	r1, [r4, r3]
 8016244:	4610      	mov	r0, r2
 8016246:	4602      	mov	r2, r0
 8016248:	f812 5b01 	ldrb.w	r5, [r2], #1
 801624c:	2d2d      	cmp	r5, #45	@ 0x2d
 801624e:	d005      	beq.n	801625c <__sccl+0x48>
 8016250:	2d5d      	cmp	r5, #93	@ 0x5d
 8016252:	d016      	beq.n	8016282 <__sccl+0x6e>
 8016254:	2d00      	cmp	r5, #0
 8016256:	d0f1      	beq.n	801623c <__sccl+0x28>
 8016258:	462b      	mov	r3, r5
 801625a:	e7f2      	b.n	8016242 <__sccl+0x2e>
 801625c:	7846      	ldrb	r6, [r0, #1]
 801625e:	2e5d      	cmp	r6, #93	@ 0x5d
 8016260:	d0fa      	beq.n	8016258 <__sccl+0x44>
 8016262:	42b3      	cmp	r3, r6
 8016264:	dcf8      	bgt.n	8016258 <__sccl+0x44>
 8016266:	3002      	adds	r0, #2
 8016268:	461a      	mov	r2, r3
 801626a:	3201      	adds	r2, #1
 801626c:	4296      	cmp	r6, r2
 801626e:	54a1      	strb	r1, [r4, r2]
 8016270:	dcfb      	bgt.n	801626a <__sccl+0x56>
 8016272:	1af2      	subs	r2, r6, r3
 8016274:	3a01      	subs	r2, #1
 8016276:	1c5d      	adds	r5, r3, #1
 8016278:	42b3      	cmp	r3, r6
 801627a:	bfa8      	it	ge
 801627c:	2200      	movge	r2, #0
 801627e:	18ab      	adds	r3, r5, r2
 8016280:	e7e1      	b.n	8016246 <__sccl+0x32>
 8016282:	4610      	mov	r0, r2
 8016284:	e7da      	b.n	801623c <__sccl+0x28>

08016286 <__submore>:
 8016286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801628a:	460c      	mov	r4, r1
 801628c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801628e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016292:	4299      	cmp	r1, r3
 8016294:	d11d      	bne.n	80162d2 <__submore+0x4c>
 8016296:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801629a:	f7fc fccd 	bl	8012c38 <_malloc_r>
 801629e:	b918      	cbnz	r0, 80162a8 <__submore+0x22>
 80162a0:	f04f 30ff 	mov.w	r0, #4294967295
 80162a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80162ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 80162ae:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80162b2:	6360      	str	r0, [r4, #52]	@ 0x34
 80162b4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80162b8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80162bc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80162c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80162c4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80162c8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80162cc:	6020      	str	r0, [r4, #0]
 80162ce:	2000      	movs	r0, #0
 80162d0:	e7e8      	b.n	80162a4 <__submore+0x1e>
 80162d2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80162d4:	0077      	lsls	r7, r6, #1
 80162d6:	463a      	mov	r2, r7
 80162d8:	f7fc fd42 	bl	8012d60 <_realloc_r>
 80162dc:	4605      	mov	r5, r0
 80162de:	2800      	cmp	r0, #0
 80162e0:	d0de      	beq.n	80162a0 <__submore+0x1a>
 80162e2:	eb00 0806 	add.w	r8, r0, r6
 80162e6:	4601      	mov	r1, r0
 80162e8:	4632      	mov	r2, r6
 80162ea:	4640      	mov	r0, r8
 80162ec:	f7fd fed5 	bl	801409a <memcpy>
 80162f0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80162f4:	f8c4 8000 	str.w	r8, [r4]
 80162f8:	e7e9      	b.n	80162ce <__submore+0x48>

080162fa <memmove>:
 80162fa:	4288      	cmp	r0, r1
 80162fc:	b510      	push	{r4, lr}
 80162fe:	eb01 0402 	add.w	r4, r1, r2
 8016302:	d902      	bls.n	801630a <memmove+0x10>
 8016304:	4284      	cmp	r4, r0
 8016306:	4623      	mov	r3, r4
 8016308:	d807      	bhi.n	801631a <memmove+0x20>
 801630a:	1e43      	subs	r3, r0, #1
 801630c:	42a1      	cmp	r1, r4
 801630e:	d008      	beq.n	8016322 <memmove+0x28>
 8016310:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016314:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016318:	e7f8      	b.n	801630c <memmove+0x12>
 801631a:	4402      	add	r2, r0
 801631c:	4601      	mov	r1, r0
 801631e:	428a      	cmp	r2, r1
 8016320:	d100      	bne.n	8016324 <memmove+0x2a>
 8016322:	bd10      	pop	{r4, pc}
 8016324:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016328:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801632c:	e7f7      	b.n	801631e <memmove+0x24>
	...

08016330 <_fstat_r>:
 8016330:	b538      	push	{r3, r4, r5, lr}
 8016332:	4d07      	ldr	r5, [pc, #28]	@ (8016350 <_fstat_r+0x20>)
 8016334:	2300      	movs	r3, #0
 8016336:	4604      	mov	r4, r0
 8016338:	4608      	mov	r0, r1
 801633a:	4611      	mov	r1, r2
 801633c:	602b      	str	r3, [r5, #0]
 801633e:	f7f5 ff75 	bl	800c22c <_fstat>
 8016342:	1c43      	adds	r3, r0, #1
 8016344:	d102      	bne.n	801634c <_fstat_r+0x1c>
 8016346:	682b      	ldr	r3, [r5, #0]
 8016348:	b103      	cbz	r3, 801634c <_fstat_r+0x1c>
 801634a:	6023      	str	r3, [r4, #0]
 801634c:	bd38      	pop	{r3, r4, r5, pc}
 801634e:	bf00      	nop
 8016350:	20013464 	.word	0x20013464

08016354 <_isatty_r>:
 8016354:	b538      	push	{r3, r4, r5, lr}
 8016356:	4d06      	ldr	r5, [pc, #24]	@ (8016370 <_isatty_r+0x1c>)
 8016358:	2300      	movs	r3, #0
 801635a:	4604      	mov	r4, r0
 801635c:	4608      	mov	r0, r1
 801635e:	602b      	str	r3, [r5, #0]
 8016360:	f7f5 ff74 	bl	800c24c <_isatty>
 8016364:	1c43      	adds	r3, r0, #1
 8016366:	d102      	bne.n	801636e <_isatty_r+0x1a>
 8016368:	682b      	ldr	r3, [r5, #0]
 801636a:	b103      	cbz	r3, 801636e <_isatty_r+0x1a>
 801636c:	6023      	str	r3, [r4, #0]
 801636e:	bd38      	pop	{r3, r4, r5, pc}
 8016370:	20013464 	.word	0x20013464

08016374 <__assert_func>:
 8016374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016376:	4614      	mov	r4, r2
 8016378:	461a      	mov	r2, r3
 801637a:	4b09      	ldr	r3, [pc, #36]	@ (80163a0 <__assert_func+0x2c>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	4605      	mov	r5, r0
 8016380:	68d8      	ldr	r0, [r3, #12]
 8016382:	b14c      	cbz	r4, 8016398 <__assert_func+0x24>
 8016384:	4b07      	ldr	r3, [pc, #28]	@ (80163a4 <__assert_func+0x30>)
 8016386:	9100      	str	r1, [sp, #0]
 8016388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801638c:	4906      	ldr	r1, [pc, #24]	@ (80163a8 <__assert_func+0x34>)
 801638e:	462b      	mov	r3, r5
 8016390:	f000 f90e 	bl	80165b0 <fiprintf>
 8016394:	f000 f91e 	bl	80165d4 <abort>
 8016398:	4b04      	ldr	r3, [pc, #16]	@ (80163ac <__assert_func+0x38>)
 801639a:	461c      	mov	r4, r3
 801639c:	e7f3      	b.n	8016386 <__assert_func+0x12>
 801639e:	bf00      	nop
 80163a0:	2000019c 	.word	0x2000019c
 80163a4:	08017255 	.word	0x08017255
 80163a8:	08017262 	.word	0x08017262
 80163ac:	08017290 	.word	0x08017290

080163b0 <_calloc_r>:
 80163b0:	b570      	push	{r4, r5, r6, lr}
 80163b2:	fba1 5402 	umull	r5, r4, r1, r2
 80163b6:	b934      	cbnz	r4, 80163c6 <_calloc_r+0x16>
 80163b8:	4629      	mov	r1, r5
 80163ba:	f7fc fc3d 	bl	8012c38 <_malloc_r>
 80163be:	4606      	mov	r6, r0
 80163c0:	b928      	cbnz	r0, 80163ce <_calloc_r+0x1e>
 80163c2:	4630      	mov	r0, r6
 80163c4:	bd70      	pop	{r4, r5, r6, pc}
 80163c6:	220c      	movs	r2, #12
 80163c8:	6002      	str	r2, [r0, #0]
 80163ca:	2600      	movs	r6, #0
 80163cc:	e7f9      	b.n	80163c2 <_calloc_r+0x12>
 80163ce:	462a      	mov	r2, r5
 80163d0:	4621      	mov	r1, r4
 80163d2:	f7fd fdb1 	bl	8013f38 <memset>
 80163d6:	e7f4      	b.n	80163c2 <_calloc_r+0x12>

080163d8 <_strtol_l.isra.0>:
 80163d8:	2b24      	cmp	r3, #36	@ 0x24
 80163da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163de:	4686      	mov	lr, r0
 80163e0:	4690      	mov	r8, r2
 80163e2:	d801      	bhi.n	80163e8 <_strtol_l.isra.0+0x10>
 80163e4:	2b01      	cmp	r3, #1
 80163e6:	d106      	bne.n	80163f6 <_strtol_l.isra.0+0x1e>
 80163e8:	f7fd fe2a 	bl	8014040 <__errno>
 80163ec:	2316      	movs	r3, #22
 80163ee:	6003      	str	r3, [r0, #0]
 80163f0:	2000      	movs	r0, #0
 80163f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163f6:	4834      	ldr	r0, [pc, #208]	@ (80164c8 <_strtol_l.isra.0+0xf0>)
 80163f8:	460d      	mov	r5, r1
 80163fa:	462a      	mov	r2, r5
 80163fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016400:	5d06      	ldrb	r6, [r0, r4]
 8016402:	f016 0608 	ands.w	r6, r6, #8
 8016406:	d1f8      	bne.n	80163fa <_strtol_l.isra.0+0x22>
 8016408:	2c2d      	cmp	r4, #45	@ 0x2d
 801640a:	d110      	bne.n	801642e <_strtol_l.isra.0+0x56>
 801640c:	782c      	ldrb	r4, [r5, #0]
 801640e:	2601      	movs	r6, #1
 8016410:	1c95      	adds	r5, r2, #2
 8016412:	f033 0210 	bics.w	r2, r3, #16
 8016416:	d115      	bne.n	8016444 <_strtol_l.isra.0+0x6c>
 8016418:	2c30      	cmp	r4, #48	@ 0x30
 801641a:	d10d      	bne.n	8016438 <_strtol_l.isra.0+0x60>
 801641c:	782a      	ldrb	r2, [r5, #0]
 801641e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016422:	2a58      	cmp	r2, #88	@ 0x58
 8016424:	d108      	bne.n	8016438 <_strtol_l.isra.0+0x60>
 8016426:	786c      	ldrb	r4, [r5, #1]
 8016428:	3502      	adds	r5, #2
 801642a:	2310      	movs	r3, #16
 801642c:	e00a      	b.n	8016444 <_strtol_l.isra.0+0x6c>
 801642e:	2c2b      	cmp	r4, #43	@ 0x2b
 8016430:	bf04      	itt	eq
 8016432:	782c      	ldrbeq	r4, [r5, #0]
 8016434:	1c95      	addeq	r5, r2, #2
 8016436:	e7ec      	b.n	8016412 <_strtol_l.isra.0+0x3a>
 8016438:	2b00      	cmp	r3, #0
 801643a:	d1f6      	bne.n	801642a <_strtol_l.isra.0+0x52>
 801643c:	2c30      	cmp	r4, #48	@ 0x30
 801643e:	bf14      	ite	ne
 8016440:	230a      	movne	r3, #10
 8016442:	2308      	moveq	r3, #8
 8016444:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016448:	f10c 3cff 	add.w	ip, ip, #4294967295
 801644c:	2200      	movs	r2, #0
 801644e:	fbbc f9f3 	udiv	r9, ip, r3
 8016452:	4610      	mov	r0, r2
 8016454:	fb03 ca19 	mls	sl, r3, r9, ip
 8016458:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801645c:	2f09      	cmp	r7, #9
 801645e:	d80f      	bhi.n	8016480 <_strtol_l.isra.0+0xa8>
 8016460:	463c      	mov	r4, r7
 8016462:	42a3      	cmp	r3, r4
 8016464:	dd1b      	ble.n	801649e <_strtol_l.isra.0+0xc6>
 8016466:	1c57      	adds	r7, r2, #1
 8016468:	d007      	beq.n	801647a <_strtol_l.isra.0+0xa2>
 801646a:	4581      	cmp	r9, r0
 801646c:	d314      	bcc.n	8016498 <_strtol_l.isra.0+0xc0>
 801646e:	d101      	bne.n	8016474 <_strtol_l.isra.0+0x9c>
 8016470:	45a2      	cmp	sl, r4
 8016472:	db11      	blt.n	8016498 <_strtol_l.isra.0+0xc0>
 8016474:	fb00 4003 	mla	r0, r0, r3, r4
 8016478:	2201      	movs	r2, #1
 801647a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801647e:	e7eb      	b.n	8016458 <_strtol_l.isra.0+0x80>
 8016480:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016484:	2f19      	cmp	r7, #25
 8016486:	d801      	bhi.n	801648c <_strtol_l.isra.0+0xb4>
 8016488:	3c37      	subs	r4, #55	@ 0x37
 801648a:	e7ea      	b.n	8016462 <_strtol_l.isra.0+0x8a>
 801648c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016490:	2f19      	cmp	r7, #25
 8016492:	d804      	bhi.n	801649e <_strtol_l.isra.0+0xc6>
 8016494:	3c57      	subs	r4, #87	@ 0x57
 8016496:	e7e4      	b.n	8016462 <_strtol_l.isra.0+0x8a>
 8016498:	f04f 32ff 	mov.w	r2, #4294967295
 801649c:	e7ed      	b.n	801647a <_strtol_l.isra.0+0xa2>
 801649e:	1c53      	adds	r3, r2, #1
 80164a0:	d108      	bne.n	80164b4 <_strtol_l.isra.0+0xdc>
 80164a2:	2322      	movs	r3, #34	@ 0x22
 80164a4:	f8ce 3000 	str.w	r3, [lr]
 80164a8:	4660      	mov	r0, ip
 80164aa:	f1b8 0f00 	cmp.w	r8, #0
 80164ae:	d0a0      	beq.n	80163f2 <_strtol_l.isra.0+0x1a>
 80164b0:	1e69      	subs	r1, r5, #1
 80164b2:	e006      	b.n	80164c2 <_strtol_l.isra.0+0xea>
 80164b4:	b106      	cbz	r6, 80164b8 <_strtol_l.isra.0+0xe0>
 80164b6:	4240      	negs	r0, r0
 80164b8:	f1b8 0f00 	cmp.w	r8, #0
 80164bc:	d099      	beq.n	80163f2 <_strtol_l.isra.0+0x1a>
 80164be:	2a00      	cmp	r2, #0
 80164c0:	d1f6      	bne.n	80164b0 <_strtol_l.isra.0+0xd8>
 80164c2:	f8c8 1000 	str.w	r1, [r8]
 80164c6:	e794      	b.n	80163f2 <_strtol_l.isra.0+0x1a>
 80164c8:	080172e9 	.word	0x080172e9

080164cc <_strtol_r>:
 80164cc:	f7ff bf84 	b.w	80163d8 <_strtol_l.isra.0>

080164d0 <_strtoul_l.isra.0>:
 80164d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164d4:	4e34      	ldr	r6, [pc, #208]	@ (80165a8 <_strtoul_l.isra.0+0xd8>)
 80164d6:	4686      	mov	lr, r0
 80164d8:	460d      	mov	r5, r1
 80164da:	4628      	mov	r0, r5
 80164dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164e0:	5d37      	ldrb	r7, [r6, r4]
 80164e2:	f017 0708 	ands.w	r7, r7, #8
 80164e6:	d1f8      	bne.n	80164da <_strtoul_l.isra.0+0xa>
 80164e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80164ea:	d110      	bne.n	801650e <_strtoul_l.isra.0+0x3e>
 80164ec:	782c      	ldrb	r4, [r5, #0]
 80164ee:	2701      	movs	r7, #1
 80164f0:	1c85      	adds	r5, r0, #2
 80164f2:	f033 0010 	bics.w	r0, r3, #16
 80164f6:	d115      	bne.n	8016524 <_strtoul_l.isra.0+0x54>
 80164f8:	2c30      	cmp	r4, #48	@ 0x30
 80164fa:	d10d      	bne.n	8016518 <_strtoul_l.isra.0+0x48>
 80164fc:	7828      	ldrb	r0, [r5, #0]
 80164fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016502:	2858      	cmp	r0, #88	@ 0x58
 8016504:	d108      	bne.n	8016518 <_strtoul_l.isra.0+0x48>
 8016506:	786c      	ldrb	r4, [r5, #1]
 8016508:	3502      	adds	r5, #2
 801650a:	2310      	movs	r3, #16
 801650c:	e00a      	b.n	8016524 <_strtoul_l.isra.0+0x54>
 801650e:	2c2b      	cmp	r4, #43	@ 0x2b
 8016510:	bf04      	itt	eq
 8016512:	782c      	ldrbeq	r4, [r5, #0]
 8016514:	1c85      	addeq	r5, r0, #2
 8016516:	e7ec      	b.n	80164f2 <_strtoul_l.isra.0+0x22>
 8016518:	2b00      	cmp	r3, #0
 801651a:	d1f6      	bne.n	801650a <_strtoul_l.isra.0+0x3a>
 801651c:	2c30      	cmp	r4, #48	@ 0x30
 801651e:	bf14      	ite	ne
 8016520:	230a      	movne	r3, #10
 8016522:	2308      	moveq	r3, #8
 8016524:	f04f 38ff 	mov.w	r8, #4294967295
 8016528:	2600      	movs	r6, #0
 801652a:	fbb8 f8f3 	udiv	r8, r8, r3
 801652e:	fb03 f908 	mul.w	r9, r3, r8
 8016532:	ea6f 0909 	mvn.w	r9, r9
 8016536:	4630      	mov	r0, r6
 8016538:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801653c:	f1bc 0f09 	cmp.w	ip, #9
 8016540:	d810      	bhi.n	8016564 <_strtoul_l.isra.0+0x94>
 8016542:	4664      	mov	r4, ip
 8016544:	42a3      	cmp	r3, r4
 8016546:	dd1e      	ble.n	8016586 <_strtoul_l.isra.0+0xb6>
 8016548:	f1b6 3fff 	cmp.w	r6, #4294967295
 801654c:	d007      	beq.n	801655e <_strtoul_l.isra.0+0x8e>
 801654e:	4580      	cmp	r8, r0
 8016550:	d316      	bcc.n	8016580 <_strtoul_l.isra.0+0xb0>
 8016552:	d101      	bne.n	8016558 <_strtoul_l.isra.0+0x88>
 8016554:	45a1      	cmp	r9, r4
 8016556:	db13      	blt.n	8016580 <_strtoul_l.isra.0+0xb0>
 8016558:	fb00 4003 	mla	r0, r0, r3, r4
 801655c:	2601      	movs	r6, #1
 801655e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016562:	e7e9      	b.n	8016538 <_strtoul_l.isra.0+0x68>
 8016564:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016568:	f1bc 0f19 	cmp.w	ip, #25
 801656c:	d801      	bhi.n	8016572 <_strtoul_l.isra.0+0xa2>
 801656e:	3c37      	subs	r4, #55	@ 0x37
 8016570:	e7e8      	b.n	8016544 <_strtoul_l.isra.0+0x74>
 8016572:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016576:	f1bc 0f19 	cmp.w	ip, #25
 801657a:	d804      	bhi.n	8016586 <_strtoul_l.isra.0+0xb6>
 801657c:	3c57      	subs	r4, #87	@ 0x57
 801657e:	e7e1      	b.n	8016544 <_strtoul_l.isra.0+0x74>
 8016580:	f04f 36ff 	mov.w	r6, #4294967295
 8016584:	e7eb      	b.n	801655e <_strtoul_l.isra.0+0x8e>
 8016586:	1c73      	adds	r3, r6, #1
 8016588:	d106      	bne.n	8016598 <_strtoul_l.isra.0+0xc8>
 801658a:	2322      	movs	r3, #34	@ 0x22
 801658c:	f8ce 3000 	str.w	r3, [lr]
 8016590:	4630      	mov	r0, r6
 8016592:	b932      	cbnz	r2, 80165a2 <_strtoul_l.isra.0+0xd2>
 8016594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016598:	b107      	cbz	r7, 801659c <_strtoul_l.isra.0+0xcc>
 801659a:	4240      	negs	r0, r0
 801659c:	2a00      	cmp	r2, #0
 801659e:	d0f9      	beq.n	8016594 <_strtoul_l.isra.0+0xc4>
 80165a0:	b106      	cbz	r6, 80165a4 <_strtoul_l.isra.0+0xd4>
 80165a2:	1e69      	subs	r1, r5, #1
 80165a4:	6011      	str	r1, [r2, #0]
 80165a6:	e7f5      	b.n	8016594 <_strtoul_l.isra.0+0xc4>
 80165a8:	080172e9 	.word	0x080172e9

080165ac <_strtoul_r>:
 80165ac:	f7ff bf90 	b.w	80164d0 <_strtoul_l.isra.0>

080165b0 <fiprintf>:
 80165b0:	b40e      	push	{r1, r2, r3}
 80165b2:	b503      	push	{r0, r1, lr}
 80165b4:	4601      	mov	r1, r0
 80165b6:	ab03      	add	r3, sp, #12
 80165b8:	4805      	ldr	r0, [pc, #20]	@ (80165d0 <fiprintf+0x20>)
 80165ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80165be:	6800      	ldr	r0, [r0, #0]
 80165c0:	9301      	str	r3, [sp, #4]
 80165c2:	f7ff f927 	bl	8015814 <_vfiprintf_r>
 80165c6:	b002      	add	sp, #8
 80165c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80165cc:	b003      	add	sp, #12
 80165ce:	4770      	bx	lr
 80165d0:	2000019c 	.word	0x2000019c

080165d4 <abort>:
 80165d4:	b508      	push	{r3, lr}
 80165d6:	2006      	movs	r0, #6
 80165d8:	f000 f82c 	bl	8016634 <raise>
 80165dc:	2001      	movs	r0, #1
 80165de:	f7f5 fdd5 	bl	800c18c <_exit>

080165e2 <_raise_r>:
 80165e2:	291f      	cmp	r1, #31
 80165e4:	b538      	push	{r3, r4, r5, lr}
 80165e6:	4605      	mov	r5, r0
 80165e8:	460c      	mov	r4, r1
 80165ea:	d904      	bls.n	80165f6 <_raise_r+0x14>
 80165ec:	2316      	movs	r3, #22
 80165ee:	6003      	str	r3, [r0, #0]
 80165f0:	f04f 30ff 	mov.w	r0, #4294967295
 80165f4:	bd38      	pop	{r3, r4, r5, pc}
 80165f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80165f8:	b112      	cbz	r2, 8016600 <_raise_r+0x1e>
 80165fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165fe:	b94b      	cbnz	r3, 8016614 <_raise_r+0x32>
 8016600:	4628      	mov	r0, r5
 8016602:	f000 f831 	bl	8016668 <_getpid_r>
 8016606:	4622      	mov	r2, r4
 8016608:	4601      	mov	r1, r0
 801660a:	4628      	mov	r0, r5
 801660c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016610:	f000 b818 	b.w	8016644 <_kill_r>
 8016614:	2b01      	cmp	r3, #1
 8016616:	d00a      	beq.n	801662e <_raise_r+0x4c>
 8016618:	1c59      	adds	r1, r3, #1
 801661a:	d103      	bne.n	8016624 <_raise_r+0x42>
 801661c:	2316      	movs	r3, #22
 801661e:	6003      	str	r3, [r0, #0]
 8016620:	2001      	movs	r0, #1
 8016622:	e7e7      	b.n	80165f4 <_raise_r+0x12>
 8016624:	2100      	movs	r1, #0
 8016626:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801662a:	4620      	mov	r0, r4
 801662c:	4798      	blx	r3
 801662e:	2000      	movs	r0, #0
 8016630:	e7e0      	b.n	80165f4 <_raise_r+0x12>
	...

08016634 <raise>:
 8016634:	4b02      	ldr	r3, [pc, #8]	@ (8016640 <raise+0xc>)
 8016636:	4601      	mov	r1, r0
 8016638:	6818      	ldr	r0, [r3, #0]
 801663a:	f7ff bfd2 	b.w	80165e2 <_raise_r>
 801663e:	bf00      	nop
 8016640:	2000019c 	.word	0x2000019c

08016644 <_kill_r>:
 8016644:	b538      	push	{r3, r4, r5, lr}
 8016646:	4d07      	ldr	r5, [pc, #28]	@ (8016664 <_kill_r+0x20>)
 8016648:	2300      	movs	r3, #0
 801664a:	4604      	mov	r4, r0
 801664c:	4608      	mov	r0, r1
 801664e:	4611      	mov	r1, r2
 8016650:	602b      	str	r3, [r5, #0]
 8016652:	f7f5 fd8b 	bl	800c16c <_kill>
 8016656:	1c43      	adds	r3, r0, #1
 8016658:	d102      	bne.n	8016660 <_kill_r+0x1c>
 801665a:	682b      	ldr	r3, [r5, #0]
 801665c:	b103      	cbz	r3, 8016660 <_kill_r+0x1c>
 801665e:	6023      	str	r3, [r4, #0]
 8016660:	bd38      	pop	{r3, r4, r5, pc}
 8016662:	bf00      	nop
 8016664:	20013464 	.word	0x20013464

08016668 <_getpid_r>:
 8016668:	f7f5 bd78 	b.w	800c15c <_getpid>

0801666c <_sbrk>:
 801666c:	4a04      	ldr	r2, [pc, #16]	@ (8016680 <_sbrk+0x14>)
 801666e:	6811      	ldr	r1, [r2, #0]
 8016670:	4603      	mov	r3, r0
 8016672:	b909      	cbnz	r1, 8016678 <_sbrk+0xc>
 8016674:	4903      	ldr	r1, [pc, #12]	@ (8016684 <_sbrk+0x18>)
 8016676:	6011      	str	r1, [r2, #0]
 8016678:	6810      	ldr	r0, [r2, #0]
 801667a:	4403      	add	r3, r0
 801667c:	6013      	str	r3, [r2, #0]
 801667e:	4770      	bx	lr
 8016680:	2001346c 	.word	0x2001346c
 8016684:	20013470 	.word	0x20013470

08016688 <_init>:
 8016688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801668a:	bf00      	nop
 801668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801668e:	bc08      	pop	{r3}
 8016690:	469e      	mov	lr, r3
 8016692:	4770      	bx	lr

08016694 <_fini>:
 8016694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016696:	bf00      	nop
 8016698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801669a:	bc08      	pop	{r3}
 801669c:	469e      	mov	lr, r3
 801669e:	4770      	bx	lr
